# Global

stages:
  - Linux
  - Windows
  - macOS
  - Analysis

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Platform Tests

.platform_unix_template: &platform_unix_template
  stage: Linux
  needs: []
  dependencies: []
  script:
    - cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D BUILD_EXAMPLES=ON -D BUILD_TESTS=ON
    - cmake --build build
    - ctest --test-dir build --output-on-failure

.platform_windows_template: &platform_windows_template
  stage: Windows
  image: docker.io/stabletec/build-foe:windows-ltsc2022
  tags:
    - container
    - windows
    - ltsc2022
    - amd64
  needs: []
  dependencies: []
  script:
    - cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D BUILD_EXAMPLES=ON -D BUILD_TESTS=ON -D CMAKE_PREFIX_PATH="C:\"
    - cmake --build build
    - ctest --test-dir build --output-on-failure

.platform_macos_template: &platform_macos_template
  stage: macOS
  needs: []
  dependencies: []
  script:
    - cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D BUILD_EXAMPLES=ON -D BUILD_TESTS=ON
    - cmake --build build
    - ctest --test-dir build --output-on-failure

Arch/GCC:
  parallel:
    matrix:
      - ARCH: [amd64]
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
  <<: *platform_unix_template

Arch/Clang:
  parallel:
    matrix:
      - ARCH: [amd64]
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_unix_template

Fedora/GCC:
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
  <<: *platform_unix_template

Fedora/Clang:
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  image: docker.io/stabletec/build-foe:fedora
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_unix_template

Ubuntu/GCC:
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: gcc
    CXX: g++
  <<: *platform_unix_template

Ubuntu/Clang:
  parallel:
    matrix:
      - ARCH: [amd64, arm64, ppc64le]
  image: docker.io/stabletec/build-foe:ubuntu
  tags:
    - container
    - linux
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_unix_template

Windows/MSVC:
  parallel:
    matrix:
      - ARCH: [amd64]
  <<: *platform_windows_template

Windows/Clang:
  parallel:
    matrix:
      - ARCH: [amd64]
  variables:
    CC: clang
    CXX: clang
  <<: *platform_windows_template

Windows/Clang-cl:
  parallel:
    matrix:
      - ARCH: [amd64]
  variables:
    CC: clang-cl
    CXX: clang-cl
  <<: *platform_windows_template

macOS/AppleClang:
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  <<: *platform_macos_template

macOS/Clang:
  parallel:
    matrix:
      - ARCH: [arm64]
  tags:
    - macos
    - ${ARCH}
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_macos_template

# Analysis
Code Coverage:
  stage: Analysis
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - amd64
  needs:
    - "Arch/GCC: [amd64]"
    - "Arch/Clang: [amd64]"
  dependencies: []
  variables:
    CC: clang
    CXX: clang++
  script:
    - cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D CODE_COVERAGE=ON -D BUILD_TESTS=ON
    - cmake --build build
    - cmake --build build --target ccov-VkSerializationTests
    - cmake --build build --target ccov-report-VkSerializationTests
  artifacts:
    name: CodeCoverage
    paths:
      - build/ccov
    expire_in: 1 day

.analysis_template: &analysis_template
  stage: Analysis
  image: docker.io/stabletec/build-foe:arch
  tags:
    - container
    - linux
    - amd64
  needs:
    - "Arch/GCC: [amd64]"
    - "Arch/Clang: [amd64]"
  dependencies: []
  script:
    - cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTS=ON ${CMAKE_OPTIONS}
    - cmake --build build
    - ctest --test-dir build --output-on-failure

AddressSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=Address
  <<: *analysis_template

LeakSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=Leak
  <<: *analysis_template

UndefinedSanitizer:
  variables:
    CC: clang
    CXX: clang++
    CMAKE_OPTIONS: -D USE_SANITIZER=Undefined
  <<: *analysis_template
