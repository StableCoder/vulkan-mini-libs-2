/*
    Copyright (C) 2021-2025 George Cave - gcave@stablecoder.ca

    SPDX-License-Identifier: Apache-2.0

    This file was auto-generated by the Vulkan Mini Libs 2 utility:
    https://github.com/stablecoder/vulkan-mini-libs-2.git
    or
    https://git.stabletec.com/utilities/vulkan-mini-libs-2.git

    Check for an updated version anytime, or state concerns/bugs.
*/

#ifndef VK_STRUCT_COMPARE_H
#define VK_STRUCT_COMPARE_H

/*  USAGE:
    To use, include this header where the declarations for the boolean checks are required.

    On *ONE* compilation unit, include the definition of:
    #define VK_STRUCT_COMPARE_CONFIG_MAIN

    so that the definitions are compiled somewhere following the one definition rule.
*/

/*
    These compare_*(lhs, rhs) functions only check the given struct's directly held data.
    Data held externally via pointers is not compared and must be done by the caller.
*/

#ifdef __cplusplus
extern "C" {
#endif

#include <vulkan/vulkan.h>

#include <stdbool.h>

#ifdef __cplusplus
static_assert(VK_HEADER_VERSION >= 72,
              "VK_HEADER_VERSION is lower than the minimum supported version (v72)");
#else
_Static_assert(VK_HEADER_VERSION >= 72,
               "VK_HEADER_VERSION  is lower than the minimum supported version (v72)");
#endif

#if VK_HEADER_VERSION > 320
#if _MSC_VER
#pragma message(                                                                                   \
    __FILE__ ": warning: VK_HEADER_VERSION is higher than what the header fully supports (v320)")
#else
#warning "VK_HEADER_VERSION is higher than what the header fully supports (v320)"
#endif
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAabbPositionsKHR(VkAabbPositionsKHR const *s1, VkAabbPositionsKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkAabbPositionsNV(VkAabbPositionsNV const *s1, VkAabbPositionsNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureBuildGeometryInfoKHR(
    VkAccelerationStructureBuildGeometryInfoKHR const *s1,
    VkAccelerationStructureBuildGeometryInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureBuildGeometryInfoKHR(
    VkAccelerationStructureBuildGeometryInfoKHR const *s1,
    VkAccelerationStructureBuildGeometryInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureBuildOffsetInfoKHR(
    VkAccelerationStructureBuildOffsetInfoKHR const *s1,
    VkAccelerationStructureBuildOffsetInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureBuildRangeInfoKHR(
    VkAccelerationStructureBuildRangeInfoKHR const *s1,
    VkAccelerationStructureBuildRangeInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureBuildSizesInfoKHR(
    VkAccelerationStructureBuildSizesInfoKHR const *s1,
    VkAccelerationStructureBuildSizesInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_descriptor_buffer &&                                       \
     (VK_KHR_acceleration_structure || VK_NV_ray_tracing)) ||                                      \
    (VK_HEADER_VERSION >= 235 && VK_HEADER_VERSION <= 240 && VK_EXT_descriptor_buffer)
bool compare_VkAccelerationStructureCaptureDescriptorDataInfoEXT(
    VkAccelerationStructureCaptureDescriptorDataInfoEXT const *s1,
    VkAccelerationStructureCaptureDescriptorDataInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureCreateGeometryTypeInfoKHR(
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *s1,
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureCreateInfoKHR(VkAccelerationStructureCreateInfoKHR const *s1,
                                                  VkAccelerationStructureCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureCreateInfoKHR(VkAccelerationStructureCreateInfoKHR const *s1,
                                                  VkAccelerationStructureCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureCreateInfoNV(VkAccelerationStructureCreateInfoNV const *s1,
                                                 VkAccelerationStructureCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkAccelerationStructureCreateInfoNVX(VkAccelerationStructureCreateInfoNVX const *s1,
                                                  VkAccelerationStructureCreateInfoNVX const *s2);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAccelerationStructureDeviceAddressInfoKHR(
    VkAccelerationStructureDeviceAddressInfoKHR const *s1,
    VkAccelerationStructureDeviceAddressInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAccelerationStructureGeometryAabbsDataKHR(
    VkAccelerationStructureGeometryAabbsDataKHR const *s1,
    VkAccelerationStructureGeometryAabbsDataKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAccelerationStructureGeometryInstancesDataKHR(
    VkAccelerationStructureGeometryInstancesDataKHR const *s1,
    VkAccelerationStructureGeometryInstancesDataKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAccelerationStructureGeometryKHR(VkAccelerationStructureGeometryKHR const *s1,
                                                VkAccelerationStructureGeometryKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres
bool compare_VkAccelerationStructureGeometryLinearSweptSpheresDataNV(
    VkAccelerationStructureGeometryLinearSweptSpheresDataNV const *s1,
    VkAccelerationStructureGeometryLinearSweptSpheresDataNV const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureGeometryMotionTrianglesDataNV(
    VkAccelerationStructureGeometryMotionTrianglesDataNV const *s1,
    VkAccelerationStructureGeometryMotionTrianglesDataNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres
bool compare_VkAccelerationStructureGeometrySpheresDataNV(
    VkAccelerationStructureGeometrySpheresDataNV const *s1,
    VkAccelerationStructureGeometrySpheresDataNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureGeometryTrianglesDataKHR(
    VkAccelerationStructureGeometryTrianglesDataKHR const *s1,
    VkAccelerationStructureGeometryTrianglesDataKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureGeometryTrianglesDataKHR(
    VkAccelerationStructureGeometryTrianglesDataKHR const *s1,
    VkAccelerationStructureGeometryTrianglesDataKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureInfoNV(VkAccelerationStructureInfoNV const *s1,
                                           VkAccelerationStructureInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 138 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR const *s1,
                                                VkAccelerationStructureInstanceKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR const *s1,
                                                VkAccelerationStructureInstanceKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureInstanceNV(VkAccelerationStructureInstanceNV const *s1,
                                               VkAccelerationStructureInstanceNV const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureMatrixMotionInstanceNV(
    VkAccelerationStructureMatrixMotionInstanceNV const *s1,
    VkAccelerationStructureMatrixMotionInstanceNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureMemoryRequirementsInfoKHR(
    VkAccelerationStructureMemoryRequirementsInfoKHR const *s1,
    VkAccelerationStructureMemoryRequirementsInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureMemoryRequirementsInfoNV(
    VkAccelerationStructureMemoryRequirementsInfoNV const *s1,
    VkAccelerationStructureMemoryRequirementsInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkAccelerationStructureMemoryRequirementsInfoNVX(
    VkAccelerationStructureMemoryRequirementsInfoNVX const *s1,
    VkAccelerationStructureMemoryRequirementsInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureMotionInfoNV(VkAccelerationStructureMotionInfoNV const *s1,
                                                 VkAccelerationStructureMotionInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureMotionInstanceNV(
    VkAccelerationStructureMotionInstanceNV const *s1,
    VkAccelerationStructureMotionInstanceNV const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureSRTMotionInstanceNV(
    VkAccelerationStructureSRTMotionInstanceNV const *s1,
    VkAccelerationStructureSRTMotionInstanceNV const *s2);
#endif

#if VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureTrianglesDisplacementMicromapNV(
    VkAccelerationStructureTrianglesDisplacementMicromapNV const *s1,
    VkAccelerationStructureTrianglesDisplacementMicromapNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkAccelerationStructureTrianglesOpacityMicromapEXT(
    VkAccelerationStructureTrianglesOpacityMicromapEXT const *s1,
    VkAccelerationStructureTrianglesOpacityMicromapEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureVersionInfoKHR(VkAccelerationStructureVersionInfoKHR const *s1,
                                                   VkAccelerationStructureVersionInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureVersionKHR(VkAccelerationStructureVersionKHR const *s1,
                                               VkAccelerationStructureVersionKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkAcquireNextImageInfoKHR(VkAcquireNextImageInfoKHR const *s1,
                                       VkAcquireNextImageInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkAcquireProfilingLockInfoKHR(VkAcquireProfilingLockInfoKHR const *s1,
                                           VkAcquireProfilingLockInfoKHR const *s2);
#endif

bool compare_VkAllocationCallbacks(VkAllocationCallbacks const *s1,
                                   VkAllocationCallbacks const *s2);

#if VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling
bool compare_VkAmigoProfilingSubmitInfoSEC(VkAmigoProfilingSubmitInfoSEC const *s1,
                                           VkAmigoProfilingSubmitInfoSEC const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 &&                                        \
    VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s1,
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s2);
#endif

#if (VK_HEADER_VERSION >= 281 && VK_ANDROID_external_memory_android_hardware_buffer &&             \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer && VK_KHR_format_feature_flags2) ||        \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer)
bool compare_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s1,
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferFormatPropertiesANDROID(
    VkAndroidHardwareBufferFormatPropertiesANDROID const *s1,
    VkAndroidHardwareBufferFormatPropertiesANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve
bool compare_VkAndroidHardwareBufferFormatResolvePropertiesANDROID(
    VkAndroidHardwareBufferFormatResolvePropertiesANDROID const *s1,
    VkAndroidHardwareBufferFormatResolvePropertiesANDROID const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferPropertiesANDROID(
    VkAndroidHardwareBufferPropertiesANDROID const *s1,
    VkAndroidHardwareBufferPropertiesANDROID const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferUsageANDROID(VkAndroidHardwareBufferUsageANDROID const *s1,
                                                 VkAndroidHardwareBufferUsageANDROID const *s2);
#endif

#if VK_KHR_android_surface
bool compare_VkAndroidSurfaceCreateInfoKHR(VkAndroidSurfaceCreateInfoKHR const *s1,
                                           VkAndroidSurfaceCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag
bool compare_VkAntiLagDataAMD(VkAntiLagDataAMD const *s1, VkAntiLagDataAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag
bool compare_VkAntiLagPresentationInfoAMD(VkAntiLagPresentationInfoAMD const *s1,
                                          VkAntiLagPresentationInfoAMD const *s2);
#endif

bool compare_VkApplicationInfo(VkApplicationInfo const *s1, VkApplicationInfo const *s2);

#if VK_HEADER_VERSION >= 241 && VK_EXT_application_parameters
bool compare_VkApplicationParametersEXT(VkApplicationParametersEXT const *s1,
                                        VkApplicationParametersEXT const *s2);
#endif

bool compare_VkAttachmentDescription(VkAttachmentDescription const *s1,
                                     VkAttachmentDescription const *s2);

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentDescription2(VkAttachmentDescription2 const *s1,
                                      VkAttachmentDescription2 const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *s1,
                                         VkAttachmentDescription2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *s1,
                                         VkAttachmentDescription2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentDescriptionStencilLayout(VkAttachmentDescriptionStencilLayout const *s1,
                                                  VkAttachmentDescriptionStencilLayout const *s2);
#endif

#if VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *s1,
    VkAttachmentDescriptionStencilLayoutKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *s1,
    VkAttachmentDescriptionStencilLayoutKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_unified_image_layouts &&                                    \
    VK_EXT_attachment_feedback_loop_layout && ((VK_VERSION_1_3 || VK_KHR_dynamic_rendering))
bool compare_VkAttachmentFeedbackLoopInfoEXT(VkAttachmentFeedbackLoopInfoEXT const *s1,
                                             VkAttachmentFeedbackLoopInfoEXT const *s2);
#endif

bool compare_VkAttachmentReference(VkAttachmentReference const *s1,
                                   VkAttachmentReference const *s2);

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentReference2(VkAttachmentReference2 const *s1,
                                    VkAttachmentReference2 const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *s1,
                                       VkAttachmentReference2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *s1,
                                       VkAttachmentReference2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentReferenceStencilLayout(VkAttachmentReferenceStencilLayout const *s1,
                                                VkAttachmentReferenceStencilLayout const *s2);
#endif

#if VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentReferenceStencilLayoutKHR(VkAttachmentReferenceStencilLayoutKHR const *s1,
                                                   VkAttachmentReferenceStencilLayoutKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentReferenceStencilLayoutKHR(VkAttachmentReferenceStencilLayoutKHR const *s1,
                                                   VkAttachmentReferenceStencilLayoutKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_AMD_mixed_attachment_samples &&                                \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_AMD_mixed_attachment_samples) ||                                                           \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
bool compare_VkAttachmentSampleCountInfoAMD(VkAttachmentSampleCountInfoAMD const *s1,
                                            VkAttachmentSampleCountInfoAMD const *s2);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_framebuffer_mixed_samples &&                                \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_NV_framebuffer_mixed_samples) ||                                                           \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
bool compare_VkAttachmentSampleCountInfoNV(VkAttachmentSampleCountInfoNV const *s1,
                                           VkAttachmentSampleCountInfoNV const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkAttachmentSampleLocationsEXT(VkAttachmentSampleLocationsEXT const *s1,
                                            VkAttachmentSampleLocationsEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkBindAccelerationStructureMemoryInfoKHR(
    VkBindAccelerationStructureMemoryInfoKHR const *s1,
    VkBindAccelerationStructureMemoryInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *s1,
    VkBindAccelerationStructureMemoryInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_NV_ray_tracing
bool compare_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *s1,
    VkBindAccelerationStructureMemoryInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkBindAccelerationStructureMemoryInfoNVX(
    VkBindAccelerationStructureMemoryInfoNVX const *s1,
    VkBindAccelerationStructureMemoryInfoNVX const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBindBufferMemoryDeviceGroupInfo(VkBindBufferMemoryDeviceGroupInfo const *s1,
                                               VkBindBufferMemoryDeviceGroupInfo const *s2);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_device_group && VK_KHR_bind_memory2) ||                    \
    (VK_HEADER_VERSION <= 240 && VK_KHR_device_group)
bool compare_VkBindBufferMemoryDeviceGroupInfoKHR(VkBindBufferMemoryDeviceGroupInfoKHR const *s1,
                                                  VkBindBufferMemoryDeviceGroupInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBindBufferMemoryInfo(VkBindBufferMemoryInfo const *s1,
                                    VkBindBufferMemoryInfo const *s2);
#endif

#if VK_KHR_bind_memory2
bool compare_VkBindBufferMemoryInfoKHR(VkBindBufferMemoryInfoKHR const *s1,
                                       VkBindBufferMemoryInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkBindDataGraphPipelineSessionMemoryInfoARM(
    VkBindDataGraphPipelineSessionMemoryInfoARM const *s1,
    VkBindDataGraphPipelineSessionMemoryInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_maintenance6 && VK_EXT_descriptor_buffer
bool compare_VkBindDescriptorBufferEmbeddedSamplersInfoEXT(
    VkBindDescriptorBufferEmbeddedSamplersInfoEXT const *s1,
    VkBindDescriptorBufferEmbeddedSamplersInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkBindDescriptorSetsInfo(VkBindDescriptorSetsInfo const *s1,
                                      VkBindDescriptorSetsInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6
bool compare_VkBindDescriptorSetsInfoKHR(VkBindDescriptorSetsInfoKHR const *s1,
                                         VkBindDescriptorSetsInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6
bool compare_VkBindDescriptorSetsInfoKHR(VkBindDescriptorSetsInfoKHR const *s1,
                                         VkBindDescriptorSetsInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBindImageMemoryDeviceGroupInfo(VkBindImageMemoryDeviceGroupInfo const *s1,
                                              VkBindImageMemoryDeviceGroupInfo const *s2);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_device_group && VK_KHR_bind_memory2) ||                    \
    (VK_HEADER_VERSION <= 240 && VK_KHR_device_group)
bool compare_VkBindImageMemoryDeviceGroupInfoKHR(VkBindImageMemoryDeviceGroupInfoKHR const *s1,
                                                 VkBindImageMemoryDeviceGroupInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBindImageMemoryInfo(VkBindImageMemoryInfo const *s1,
                                   VkBindImageMemoryInfo const *s2);
#endif

#if VK_KHR_bind_memory2
bool compare_VkBindImageMemoryInfoKHR(VkBindImageMemoryInfoKHR const *s1,
                                      VkBindImageMemoryInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkBindImageMemorySwapchainInfoKHR(VkBindImageMemorySwapchainInfoKHR const *s1,
                                               VkBindImageMemorySwapchainInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBindImagePlaneMemoryInfo(VkBindImagePlaneMemoryInfo const *s1,
                                        VkBindImagePlaneMemoryInfo const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkBindImagePlaneMemoryInfoKHR(VkBindImagePlaneMemoryInfoKHR const *s1,
                                           VkBindImagePlaneMemoryInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkBindIndexBufferIndirectCommandEXT(VkBindIndexBufferIndirectCommandEXT const *s1,
                                                 VkBindIndexBufferIndirectCommandEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindIndexBufferIndirectCommandNV(VkBindIndexBufferIndirectCommandNV const *s1,
                                                VkBindIndexBufferIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkBindMemoryStatus(VkBindMemoryStatus const *s1, VkBindMemoryStatus const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6
bool compare_VkBindMemoryStatusKHR(VkBindMemoryStatusKHR const *s1,
                                   VkBindMemoryStatusKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6
bool compare_VkBindMemoryStatusKHR(VkBindMemoryStatusKHR const *s1,
                                   VkBindMemoryStatusKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute
bool compare_VkBindPipelineIndirectCommandNV(VkBindPipelineIndirectCommandNV const *s1,
                                             VkBindPipelineIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindShaderGroupIndirectCommandNV(VkBindShaderGroupIndirectCommandNV const *s1,
                                                VkBindShaderGroupIndirectCommandNV const *s2);
#endif

bool compare_VkBindSparseInfo(VkBindSparseInfo const *s1, VkBindSparseInfo const *s2);

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkBindTensorMemoryInfoARM(VkBindTensorMemoryInfoARM const *s1,
                                       VkBindTensorMemoryInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkBindVertexBufferIndirectCommandEXT(VkBindVertexBufferIndirectCommandEXT const *s1,
                                                  VkBindVertexBufferIndirectCommandEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindVertexBufferIndirectCommandNV(VkBindVertexBufferIndirectCommandNV const *s1,
                                                 VkBindVertexBufferIndirectCommandNV const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkBindVideoSessionMemoryInfoKHR(VkBindVideoSessionMemoryInfoKHR const *s1,
                                             VkBindVideoSessionMemoryInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights
bool compare_VkBlitImageCubicWeightsInfoQCOM(VkBlitImageCubicWeightsInfoQCOM const *s1,
                                             VkBlitImageCubicWeightsInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBlitImageInfo2(VkBlitImageInfo2 const *s1, VkBlitImageInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *s1, VkBlitImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *s1, VkBlitImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkBufferCaptureDescriptorDataInfoEXT(VkBufferCaptureDescriptorDataInfoEXT const *s1,
                                                  VkBufferCaptureDescriptorDataInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionBufferCreateInfoFUCHSIA(
    VkBufferCollectionBufferCreateInfoFUCHSIA const *s1,
    VkBufferCollectionBufferCreateInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionConstraintsInfoFUCHSIA(
    VkBufferCollectionConstraintsInfoFUCHSIA const *s1,
    VkBufferCollectionConstraintsInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionCreateInfoFUCHSIA(VkBufferCollectionCreateInfoFUCHSIA const *s1,
                                                 VkBufferCollectionCreateInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionImageCreateInfoFUCHSIA(
    VkBufferCollectionImageCreateInfoFUCHSIA const *s1,
    VkBufferCollectionImageCreateInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionPropertiesFUCHSIA(VkBufferCollectionPropertiesFUCHSIA const *s1,
                                                 VkBufferCollectionPropertiesFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferConstraintsInfoFUCHSIA(VkBufferConstraintsInfoFUCHSIA const *s1,
                                            VkBufferConstraintsInfoFUCHSIA const *s2);
#endif

bool compare_VkBufferCopy(VkBufferCopy const *s1, VkBufferCopy const *s2);

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferCopy2(VkBufferCopy2 const *s1, VkBufferCopy2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkBufferCopy2KHR(VkBufferCopy2KHR const *s1, VkBufferCopy2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkBufferCopy2KHR(VkBufferCopy2KHR const *s1, VkBufferCopy2KHR const *s2);
#endif

bool compare_VkBufferCreateInfo(VkBufferCreateInfo const *s1, VkBufferCreateInfo const *s2);

#if VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 103 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *s1,
                                                VkBufferDeviceAddressCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *s1,
                                                VkBufferDeviceAddressCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkBufferDeviceAddressInfo(VkBufferDeviceAddressInfo const *s1,
                                       VkBufferDeviceAddressInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 128 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *s1,
                                          VkBufferDeviceAddressInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *s1,
                                          VkBufferDeviceAddressInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *s1,
                                          VkBufferDeviceAddressInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address
bool compare_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *s1,
                                          VkBufferDeviceAddressInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address
bool compare_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *s1,
                                          VkBufferDeviceAddressInfoKHR const *s2);
#endif

bool compare_VkBufferImageCopy(VkBufferImageCopy const *s1, VkBufferImageCopy const *s2);

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferImageCopy2(VkBufferImageCopy2 const *s1, VkBufferImageCopy2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *s1,
                                   VkBufferImageCopy2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *s1,
                                   VkBufferImageCopy2KHR const *s2);
#endif

bool compare_VkBufferMemoryBarrier(VkBufferMemoryBarrier const *s1,
                                   VkBufferMemoryBarrier const *s2);

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferMemoryBarrier2(VkBufferMemoryBarrier2 const *s1,
                                    VkBufferMemoryBarrier2 const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *s1,
                                       VkBufferMemoryBarrier2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *s1,
                                       VkBufferMemoryBarrier2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBufferMemoryRequirementsInfo2(VkBufferMemoryRequirementsInfo2 const *s1,
                                             VkBufferMemoryRequirementsInfo2 const *s2);
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkBufferMemoryRequirementsInfo2KHR(VkBufferMemoryRequirementsInfo2KHR const *s1,
                                                VkBufferMemoryRequirementsInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkBufferOpaqueCaptureAddressCreateInfo(
    VkBufferOpaqueCaptureAddressCreateInfo const *s1,
    VkBufferOpaqueCaptureAddressCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address
bool compare_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s1,
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address
bool compare_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s1,
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkBufferUsageFlags2CreateInfo(VkBufferUsageFlags2CreateInfo const *s1,
                                           VkBufferUsageFlags2CreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkBufferUsageFlags2CreateInfoKHR(VkBufferUsageFlags2CreateInfoKHR const *s1,
                                              VkBufferUsageFlags2CreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkBufferUsageFlags2CreateInfoKHR(VkBufferUsageFlags2CreateInfoKHR const *s1,
                                              VkBufferUsageFlags2CreateInfoKHR const *s2);
#endif

bool compare_VkBufferViewCreateInfo(VkBufferViewCreateInfo const *s1,
                                    VkBufferViewCreateInfo const *s2);

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkBuildPartitionedAccelerationStructureIndirectCommandNV(
    VkBuildPartitionedAccelerationStructureIndirectCommandNV const *s1,
    VkBuildPartitionedAccelerationStructureIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkBuildPartitionedAccelerationStructureInfoNV(
    VkBuildPartitionedAccelerationStructureInfoNV const *s1,
    VkBuildPartitionedAccelerationStructureInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 272 && VK_EXT_calibrated_timestamps
bool compare_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *s1,
                                          VkCalibratedTimestampInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 273 && VK_EXT_calibrated_timestamps
bool compare_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *s1,
                                          VkCalibratedTimestampInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 273 && VK_KHR_calibrated_timestamps
bool compare_VkCalibratedTimestampInfoKHR(VkCalibratedTimestampInfoKHR const *s1,
                                          VkCalibratedTimestampInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkCheckpointData2NV(VkCheckpointData2NV const *s1, VkCheckpointData2NV const *s2);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_device_diagnostic_checkpoints &&                            \
     (VK_VERSION_1_3 || VK_KHR_synchronization2)) ||                                               \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_synchronization2 &&            \
     VK_NV_device_diagnostic_checkpoints) ||                                                       \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_KHR_synchronization2)
bool compare_VkCheckpointData2NV(VkCheckpointData2NV const *s1, VkCheckpointData2NV const *s2);
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
bool compare_VkCheckpointDataNV(VkCheckpointDataNV const *s1, VkCheckpointDataNV const *s2);
#endif

bool compare_VkClearAttachment(VkClearAttachment const *s1, VkClearAttachment const *s2);

bool compare_VkClearDepthStencilValue(VkClearDepthStencilValue const *s1,
                                      VkClearDepthStencilValue const *s2);

bool compare_VkClearRect(VkClearRect const *s1, VkClearRect const *s2);

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV(
    VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV const *s1,
    VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureBuildTriangleClusterInfoNV(
    VkClusterAccelerationStructureBuildTriangleClusterInfoNV const *s1,
    VkClusterAccelerationStructureBuildTriangleClusterInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV(
    VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV const *s1,
    VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureClustersBottomLevelInputNV(
    VkClusterAccelerationStructureClustersBottomLevelInputNV const *s1,
    VkClusterAccelerationStructureClustersBottomLevelInputNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureCommandsInfoNV(
    VkClusterAccelerationStructureCommandsInfoNV const *s1,
    VkClusterAccelerationStructureCommandsInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV(
    VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV const *s1,
    VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureGetTemplateIndicesInfoNV(
    VkClusterAccelerationStructureGetTemplateIndicesInfoNV const *s1,
    VkClusterAccelerationStructureGetTemplateIndicesInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureInputInfoNV(
    VkClusterAccelerationStructureInputInfoNV const *s1,
    VkClusterAccelerationStructureInputInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureInstantiateClusterInfoNV(
    VkClusterAccelerationStructureInstantiateClusterInfoNV const *s1,
    VkClusterAccelerationStructureInstantiateClusterInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureMoveObjectsInfoNV(
    VkClusterAccelerationStructureMoveObjectsInfoNV const *s1,
    VkClusterAccelerationStructureMoveObjectsInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureMoveObjectsInputNV(
    VkClusterAccelerationStructureMoveObjectsInputNV const *s1,
    VkClusterAccelerationStructureMoveObjectsInputNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureTriangleClusterInputNV(
    VkClusterAccelerationStructureTriangleClusterInputNV const *s1,
    VkClusterAccelerationStructureTriangleClusterInputNV const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkCmdProcessCommandsInfoNVX(VkCmdProcessCommandsInfoNVX const *s1,
                                         VkCmdProcessCommandsInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkCmdReserveSpaceForCommandsInfoNVX(VkCmdReserveSpaceForCommandsInfoNVX const *s1,
                                                 VkCmdReserveSpaceForCommandsInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkCoarseSampleLocationNV(VkCoarseSampleLocationNV const *s1,
                                      VkCoarseSampleLocationNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkCoarseSampleOrderCustomNV(VkCoarseSampleOrderCustomNV const *s1,
                                         VkCoarseSampleOrderCustomNV const *s2);
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_extended_dynamic_state3 && VK_EXT_shader_object) ||        \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 245 && VK_EXT_extended_dynamic_state3)
bool compare_VkColorBlendAdvancedEXT(VkColorBlendAdvancedEXT const *s1,
                                     VkColorBlendAdvancedEXT const *s2);
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_extended_dynamic_state3 && VK_EXT_shader_object) ||        \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 245 && VK_EXT_extended_dynamic_state3)
bool compare_VkColorBlendEquationEXT(VkColorBlendEquationEXT const *s1,
                                     VkColorBlendEquationEXT const *s2);
#endif

bool compare_VkCommandBufferAllocateInfo(VkCommandBufferAllocateInfo const *s1,
                                         VkCommandBufferAllocateInfo const *s2);

bool compare_VkCommandBufferBeginInfo(VkCommandBufferBeginInfo const *s1,
                                      VkCommandBufferBeginInfo const *s2);

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *s1,
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *s2);
#endif

bool compare_VkCommandBufferInheritanceInfo(VkCommandBufferInheritanceInfo const *s1,
                                            VkCommandBufferInheritanceInfo const *s2);

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
bool compare_VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *s1,
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_VERSION_1_3
bool compare_VkCommandBufferInheritanceRenderingInfo(
    VkCommandBufferInheritanceRenderingInfo const *s1,
    VkCommandBufferInheritanceRenderingInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_VERSION_1_3
bool compare_VkCommandBufferInheritanceRenderingInfo(
    VkCommandBufferInheritanceRenderingInfo const *s1,
    VkCommandBufferInheritanceRenderingInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering
bool compare_VkCommandBufferInheritanceRenderingInfoKHR(
    VkCommandBufferInheritanceRenderingInfoKHR const *s1,
    VkCommandBufferInheritanceRenderingInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering
bool compare_VkCommandBufferInheritanceRenderingInfoKHR(
    VkCommandBufferInheritanceRenderingInfoKHR const *s1,
    VkCommandBufferInheritanceRenderingInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
bool compare_VkCommandBufferInheritanceViewportScissorInfoNV(
    VkCommandBufferInheritanceViewportScissorInfoNV const *s1,
    VkCommandBufferInheritanceViewportScissorInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCommandBufferSubmitInfo(VkCommandBufferSubmitInfo const *s1,
                                       VkCommandBufferSubmitInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *s1,
                                          VkCommandBufferSubmitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *s1,
                                          VkCommandBufferSubmitInfoKHR const *s2);
#endif

bool compare_VkCommandPoolCreateInfo(VkCommandPoolCreateInfo const *s1,
                                     VkCommandPoolCreateInfo const *s2);

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkCommandPoolMemoryConsumption(VkCommandPoolMemoryConsumption const *s1,
                                            VkCommandPoolMemoryConsumption const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkCommandPoolMemoryReservationCreateInfo(
    VkCommandPoolMemoryReservationCreateInfo const *s1,
    VkCommandPoolMemoryReservationCreateInfo const *s2);
#endif

bool compare_VkComponentMapping(VkComponentMapping const *s1, VkComponentMapping const *s2);

bool compare_VkComputePipelineCreateInfo(VkComputePipelineCreateInfo const *s1,
                                         VkComputePipelineCreateInfo const *s2);

#if VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute
bool compare_VkComputePipelineIndirectBufferInfoNV(VkComputePipelineIndirectBufferInfoNV const *s1,
                                                   VkComputePipelineIndirectBufferInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkConditionalRenderingBeginInfoEXT(VkConditionalRenderingBeginInfoEXT const *s1,
                                                VkConditionalRenderingBeginInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkConformanceVersion(VkConformanceVersion const *s1, VkConformanceVersion const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 130 && VK_KHR_driver_properties
bool compare_VkConformanceVersionKHR(VkConformanceVersionKHR const *s1,
                                     VkConformanceVersionKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_driver_properties
bool compare_VkConformanceVersionKHR(VkConformanceVersionKHR const *s1,
                                     VkConformanceVersionKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector
bool compare_VkConvertCooperativeVectorMatrixInfoNV(
    VkConvertCooperativeVectorMatrixInfoNV const *s1,
    VkConvertCooperativeVectorMatrixInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2
bool compare_VkCooperativeMatrixFlexibleDimensionsPropertiesNV(
    VkCooperativeMatrixFlexibleDimensionsPropertiesNV const *s1,
    VkCooperativeMatrixFlexibleDimensionsPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix
bool compare_VkCooperativeMatrixPropertiesKHR(VkCooperativeMatrixPropertiesKHR const *s1,
                                              VkCooperativeMatrixPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkCooperativeMatrixPropertiesNV(VkCooperativeMatrixPropertiesNV const *s1,
                                             VkCooperativeMatrixPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector
bool compare_VkCooperativeVectorPropertiesNV(VkCooperativeVectorPropertiesNV const *s1,
                                             VkCooperativeVectorPropertiesNV const *s2);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkCopyAccelerationStructureInfoKHR(VkCopyAccelerationStructureInfoKHR const *s1,
                                                VkCopyAccelerationStructureInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkCopyAccelerationStructureToMemoryInfoKHR(
    VkCopyAccelerationStructureToMemoryInfoKHR const *s1,
    VkCopyAccelerationStructureToMemoryInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyBufferInfo2(VkCopyBufferInfo2 const *s1, VkCopyBufferInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *s1, VkCopyBufferInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *s1, VkCopyBufferInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyBufferToImageInfo2(VkCopyBufferToImageInfo2 const *s1,
                                      VkCopyBufferToImageInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *s1,
                                         VkCopyBufferToImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *s1,
                                         VkCopyBufferToImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 159 && VK_QCOM_rotated_copy_commands
bool compare_VkCopyCommandTransformInfoQCOM(VkCopyCommandTransformInfoQCOM const *s1,
                                            VkCopyCommandTransformInfoQCOM const *s2);
#endif

bool compare_VkCopyDescriptorSet(VkCopyDescriptorSet const *s1, VkCopyDescriptorSet const *s2);

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyImageInfo2(VkCopyImageInfo2 const *s1, VkCopyImageInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *s1, VkCopyImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *s1, VkCopyImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyImageToBufferInfo2(VkCopyImageToBufferInfo2 const *s1,
                                      VkCopyImageToBufferInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *s1,
                                         VkCopyImageToBufferInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *s1,
                                         VkCopyImageToBufferInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkCopyImageToImageInfo(VkCopyImageToImageInfo const *s1,
                                    VkCopyImageToImageInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkCopyImageToImageInfoEXT(VkCopyImageToImageInfoEXT const *s1,
                                       VkCopyImageToImageInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkCopyImageToImageInfoEXT(VkCopyImageToImageInfoEXT const *s1,
                                       VkCopyImageToImageInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkCopyImageToMemoryInfo(VkCopyImageToMemoryInfo const *s1,
                                     VkCopyImageToMemoryInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkCopyImageToMemoryInfoEXT(VkCopyImageToMemoryInfoEXT const *s1,
                                        VkCopyImageToMemoryInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkCopyImageToMemoryInfoEXT(VkCopyImageToMemoryInfoEXT const *s1,
                                        VkCopyImageToMemoryInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkCopyMemoryIndirectCommandNV(VkCopyMemoryIndirectCommandNV const *s1,
                                           VkCopyMemoryIndirectCommandNV const *s2);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkCopyMemoryToAccelerationStructureInfoKHR(
    VkCopyMemoryToAccelerationStructureInfoKHR const *s1,
    VkCopyMemoryToAccelerationStructureInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkCopyMemoryToImageIndirectCommandNV(VkCopyMemoryToImageIndirectCommandNV const *s1,
                                                  VkCopyMemoryToImageIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkCopyMemoryToImageInfo(VkCopyMemoryToImageInfo const *s1,
                                     VkCopyMemoryToImageInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkCopyMemoryToImageInfoEXT(VkCopyMemoryToImageInfoEXT const *s1,
                                        VkCopyMemoryToImageInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkCopyMemoryToImageInfoEXT(VkCopyMemoryToImageInfoEXT const *s1,
                                        VkCopyMemoryToImageInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkCopyMemoryToMicromapInfoEXT(VkCopyMemoryToMicromapInfoEXT const *s1,
                                           VkCopyMemoryToMicromapInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkCopyMicromapInfoEXT(VkCopyMicromapInfoEXT const *s1,
                                   VkCopyMicromapInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkCopyMicromapToMemoryInfoEXT(VkCopyMicromapToMemoryInfoEXT const *s1,
                                           VkCopyMicromapToMemoryInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkCopyTensorInfoARM(VkCopyTensorInfoARM const *s1, VkCopyTensorInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuFunctionCreateInfoNVX(VkCuFunctionCreateInfoNVX const *s1,
                                       VkCuFunctionCreateInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuLaunchInfoNVX(VkCuLaunchInfoNVX const *s1, VkCuLaunchInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuModuleCreateInfoNVX(VkCuModuleCreateInfoNVX const *s1,
                                     VkCuModuleCreateInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_NVX_binary_import
bool compare_VkCuModuleTexturingModeCreateInfoNVX(VkCuModuleTexturingModeCreateInfoNVX const *s1,
                                                  VkCuModuleTexturingModeCreateInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkCudaFunctionCreateInfoNV(VkCudaFunctionCreateInfoNV const *s1,
                                        VkCudaFunctionCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkCudaLaunchInfoNV(VkCudaLaunchInfoNV const *s1, VkCudaLaunchInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkCudaModuleCreateInfoNV(VkCudaModuleCreateInfoNV const *s1,
                                      VkCudaModuleCreateInfoNV const *s2);
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkD3D12FenceSubmitInfoKHR(VkD3D12FenceSubmitInfoKHR const *s1,
                                       VkD3D12FenceSubmitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineCompilerControlCreateInfoARM(
    VkDataGraphPipelineCompilerControlCreateInfoARM const *s1,
    VkDataGraphPipelineCompilerControlCreateInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineConstantARM(VkDataGraphPipelineConstantARM const *s1,
                                            VkDataGraphPipelineConstantARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph && VK_ARM_tensors
bool compare_VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM(
    VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM const *s1,
    VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineCreateInfoARM(VkDataGraphPipelineCreateInfoARM const *s1,
                                              VkDataGraphPipelineCreateInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineDispatchInfoARM(VkDataGraphPipelineDispatchInfoARM const *s1,
                                                VkDataGraphPipelineDispatchInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineIdentifierCreateInfoARM(
    VkDataGraphPipelineIdentifierCreateInfoARM const *s1,
    VkDataGraphPipelineIdentifierCreateInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineInfoARM(VkDataGraphPipelineInfoARM const *s1,
                                        VkDataGraphPipelineInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelinePropertyQueryResultARM(
    VkDataGraphPipelinePropertyQueryResultARM const *s1,
    VkDataGraphPipelinePropertyQueryResultARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineResourceInfoARM(VkDataGraphPipelineResourceInfoARM const *s1,
                                                VkDataGraphPipelineResourceInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineSessionBindPointRequirementARM(
    VkDataGraphPipelineSessionBindPointRequirementARM const *s1,
    VkDataGraphPipelineSessionBindPointRequirementARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineSessionBindPointRequirementsInfoARM(
    VkDataGraphPipelineSessionBindPointRequirementsInfoARM const *s1,
    VkDataGraphPipelineSessionBindPointRequirementsInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineSessionCreateInfoARM(
    VkDataGraphPipelineSessionCreateInfoARM const *s1,
    VkDataGraphPipelineSessionCreateInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineSessionMemoryRequirementsInfoARM(
    VkDataGraphPipelineSessionMemoryRequirementsInfoARM const *s1,
    VkDataGraphPipelineSessionMemoryRequirementsInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineShaderModuleCreateInfoARM(
    VkDataGraphPipelineShaderModuleCreateInfoARM const *s1,
    VkDataGraphPipelineShaderModuleCreateInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphProcessingEngineCreateInfoARM(
    VkDataGraphProcessingEngineCreateInfoARM const *s1,
    VkDataGraphProcessingEngineCreateInfoARM const *s2);
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerMarkerInfoEXT(VkDebugMarkerMarkerInfoEXT const *s1,
                                        VkDebugMarkerMarkerInfoEXT const *s2);
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerObjectNameInfoEXT(VkDebugMarkerObjectNameInfoEXT const *s1,
                                            VkDebugMarkerObjectNameInfoEXT const *s2);
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerObjectTagInfoEXT(VkDebugMarkerObjectTagInfoEXT const *s1,
                                           VkDebugMarkerObjectTagInfoEXT const *s2);
#endif

#if VK_EXT_debug_report
bool compare_VkDebugReportCallbackCreateInfoEXT(VkDebugReportCallbackCreateInfoEXT const *s1,
                                                VkDebugReportCallbackCreateInfoEXT const *s2);
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsLabelEXT(VkDebugUtilsLabelEXT const *s1, VkDebugUtilsLabelEXT const *s2);
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsMessengerCallbackDataEXT(VkDebugUtilsMessengerCallbackDataEXT const *s1,
                                                  VkDebugUtilsMessengerCallbackDataEXT const *s2);
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsMessengerCreateInfoEXT(VkDebugUtilsMessengerCreateInfoEXT const *s1,
                                                VkDebugUtilsMessengerCreateInfoEXT const *s2);
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsObjectNameInfoEXT(VkDebugUtilsObjectNameInfoEXT const *s1,
                                           VkDebugUtilsObjectNameInfoEXT const *s2);
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsObjectTagInfoEXT(VkDebugUtilsObjectTagInfoEXT const *s1,
                                          VkDebugUtilsObjectTagInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkDecompressMemoryRegionNV(VkDecompressMemoryRegionNV const *s1,
                                        VkDecompressMemoryRegionNV const *s2);
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationBufferCreateInfoNV(
    VkDedicatedAllocationBufferCreateInfoNV const *s1,
    VkDedicatedAllocationBufferCreateInfoNV const *s2);
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationImageCreateInfoNV(
    VkDedicatedAllocationImageCreateInfoNV const *s1,
    VkDedicatedAllocationImageCreateInfoNV const *s2);
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationMemoryAllocateInfoNV(
    VkDedicatedAllocationMemoryAllocateInfoNV const *s1,
    VkDedicatedAllocationMemoryAllocateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_deferred_host_operations &&     \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkDeferredOperationInfoKHR(VkDeferredOperationInfoKHR const *s1,
                                        VkDeferredOperationInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDependencyInfo(VkDependencyInfo const *s1, VkDependencyInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkDependencyInfoKHR(VkDependencyInfoKHR const *s1, VkDependencyInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkDependencyInfoKHR(VkDependencyInfoKHR const *s1, VkDependencyInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control
bool compare_VkDepthBiasInfoEXT(VkDepthBiasInfoEXT const *s1, VkDepthBiasInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control
bool compare_VkDepthBiasRepresentationInfoEXT(VkDepthBiasRepresentationInfoEXT const *s1,
                                              VkDepthBiasRepresentationInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control
bool compare_VkDepthClampRangeEXT(VkDepthClampRangeEXT const *s1, VkDepthClampRangeEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkDescriptorAccelerationStructureInfoNVX(
    VkDescriptorAccelerationStructureInfoNVX const *s1,
    VkDescriptorAccelerationStructureInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorAddressInfoEXT(VkDescriptorAddressInfoEXT const *s1,
                                        VkDescriptorAddressInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorBufferBindingInfoEXT(VkDescriptorBufferBindingInfoEXT const *s1,
                                              VkDescriptorBufferBindingInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(
    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT const *s1,
    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT const *s2);
#endif

bool compare_VkDescriptorBufferInfo(VkDescriptorBufferInfo const *s1,
                                    VkDescriptorBufferInfo const *s2);

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorGetInfoEXT(VkDescriptorGetInfoEXT const *s1,
                                    VkDescriptorGetInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer
bool compare_VkDescriptorGetTensorInfoARM(VkDescriptorGetTensorInfoARM const *s1,
                                          VkDescriptorGetTensorInfoARM const *s2);
#endif

bool compare_VkDescriptorImageInfo(VkDescriptorImageInfo const *s1,
                                   VkDescriptorImageInfo const *s2);

bool compare_VkDescriptorPoolCreateInfo(VkDescriptorPoolCreateInfo const *s1,
                                        VkDescriptorPoolCreateInfo const *s2);

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDescriptorPoolInlineUniformBlockCreateInfo(
    VkDescriptorPoolInlineUniformBlockCreateInfo const *s1,
    VkDescriptorPoolInlineUniformBlockCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block
bool compare_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s1,
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block
bool compare_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s1,
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s2);
#endif

bool compare_VkDescriptorPoolSize(VkDescriptorPoolSize const *s1, VkDescriptorPoolSize const *s2);

bool compare_VkDescriptorSetAllocateInfo(VkDescriptorSetAllocateInfo const *s1,
                                         VkDescriptorSetAllocateInfo const *s2);

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkDescriptorSetBindingReferenceVALVE(VkDescriptorSetBindingReferenceVALVE const *s1,
                                                  VkDescriptorSetBindingReferenceVALVE const *s2);
#endif

bool compare_VkDescriptorSetLayoutBinding(VkDescriptorSetLayoutBinding const *s1,
                                          VkDescriptorSetLayoutBinding const *s2);

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetLayoutBindingFlagsCreateInfo(
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *s1,
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s1,
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s1,
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s2);
#endif

bool compare_VkDescriptorSetLayoutCreateInfo(VkDescriptorSetLayoutCreateInfo const *s1,
                                             VkDescriptorSetLayoutCreateInfo const *s2);

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkDescriptorSetLayoutHostMappingInfoVALVE(
    VkDescriptorSetLayoutHostMappingInfoVALVE const *s1,
    VkDescriptorSetLayoutHostMappingInfoVALVE const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorSetLayoutSupport(VkDescriptorSetLayoutSupport const *s1,
                                          VkDescriptorSetLayoutSupport const *s2);
#endif

#if VK_KHR_maintenance3
bool compare_VkDescriptorSetLayoutSupportKHR(VkDescriptorSetLayoutSupportKHR const *s1,
                                             VkDescriptorSetLayoutSupportKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetVariableDescriptorCountAllocateInfo(
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *s1,
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *s2);
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s1,
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s1,
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetVariableDescriptorCountLayoutSupport(
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *s1,
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *s2);
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s1,
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s1,
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorUpdateTemplateCreateInfo(VkDescriptorUpdateTemplateCreateInfo const *s1,
                                                  VkDescriptorUpdateTemplateCreateInfo const *s2);
#endif

#if VK_KHR_descriptor_update_template
bool compare_VkDescriptorUpdateTemplateCreateInfoKHR(
    VkDescriptorUpdateTemplateCreateInfoKHR const *s1,
    VkDescriptorUpdateTemplateCreateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorUpdateTemplateEntry(VkDescriptorUpdateTemplateEntry const *s1,
                                             VkDescriptorUpdateTemplateEntry const *s2);
#endif

#if VK_KHR_descriptor_update_template
bool compare_VkDescriptorUpdateTemplateEntryKHR(VkDescriptorUpdateTemplateEntryKHR const *s1,
                                                VkDescriptorUpdateTemplateEntryKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report
bool compare_VkDeviceAddressBindingCallbackDataEXT(VkDeviceAddressBindingCallbackDataEXT const *s1,
                                                   VkDeviceAddressBindingCallbackDataEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDeviceBufferMemoryRequirements(VkDeviceBufferMemoryRequirements const *s1,
                                              VkDeviceBufferMemoryRequirements const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4
bool compare_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *s1,
                                                 VkDeviceBufferMemoryRequirementsKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4
bool compare_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *s1,
                                                 VkDeviceBufferMemoryRequirementsKHR const *s2);
#endif

bool compare_VkDeviceCreateInfo(VkDeviceCreateInfo const *s1, VkDeviceCreateInfo const *s2);

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkDeviceDeviceMemoryReportCreateInfoEXT(
    VkDeviceDeviceMemoryReportCreateInfoEXT const *s1,
    VkDeviceDeviceMemoryReportCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
bool compare_VkDeviceDiagnosticsConfigCreateInfoNV(VkDeviceDiagnosticsConfigCreateInfoNV const *s1,
                                                   VkDeviceDiagnosticsConfigCreateInfoNV const *s2);
#endif

#if VK_EXT_display_control
bool compare_VkDeviceEventInfoEXT(VkDeviceEventInfoEXT const *s1, VkDeviceEventInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultAddressInfoEXT(VkDeviceFaultAddressInfoEXT const *s1,
                                         VkDeviceFaultAddressInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultCountsEXT(VkDeviceFaultCountsEXT const *s1,
                                    VkDeviceFaultCountsEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultInfoEXT(VkDeviceFaultInfoEXT const *s1, VkDeviceFaultInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 246 && VK_EXT_device_fault
bool compare_VkDeviceFaultVendorBinaryHeaderVersionOneEXT(
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s1,
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 247 && VK_EXT_device_fault
bool compare_VkDeviceFaultVendorBinaryHeaderVersionOneEXT(
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s1,
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultVendorInfoEXT(VkDeviceFaultVendorInfoEXT const *s1,
                                        VkDeviceFaultVendorInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkDeviceGeneratedCommandsFeaturesNVX(VkDeviceGeneratedCommandsFeaturesNVX const *s1,
                                                  VkDeviceGeneratedCommandsFeaturesNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkDeviceGeneratedCommandsLimitsNVX(VkDeviceGeneratedCommandsLimitsNVX const *s1,
                                                VkDeviceGeneratedCommandsLimitsNVX const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupBindSparseInfo(VkDeviceGroupBindSparseInfo const *s1,
                                         VkDeviceGroupBindSparseInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupBindSparseInfoKHR(VkDeviceGroupBindSparseInfoKHR const *s1,
                                            VkDeviceGroupBindSparseInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupCommandBufferBeginInfo(VkDeviceGroupCommandBufferBeginInfo const *s1,
                                                 VkDeviceGroupCommandBufferBeginInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupCommandBufferBeginInfoKHR(
    VkDeviceGroupCommandBufferBeginInfoKHR const *s1,
    VkDeviceGroupCommandBufferBeginInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupDeviceCreateInfo(VkDeviceGroupDeviceCreateInfo const *s1,
                                           VkDeviceGroupDeviceCreateInfo const *s2);
#endif

#if VK_KHR_device_group_creation
bool compare_VkDeviceGroupDeviceCreateInfoKHR(VkDeviceGroupDeviceCreateInfoKHR const *s1,
                                              VkDeviceGroupDeviceCreateInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group &&      \
     VK_KHR_surface) ||                                                                            \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkDeviceGroupPresentCapabilitiesKHR(VkDeviceGroupPresentCapabilitiesKHR const *s1,
                                                 VkDeviceGroupPresentCapabilitiesKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkDeviceGroupPresentInfoKHR(VkDeviceGroupPresentInfoKHR const *s1,
                                         VkDeviceGroupPresentInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupRenderPassBeginInfo(VkDeviceGroupRenderPassBeginInfo const *s1,
                                              VkDeviceGroupRenderPassBeginInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupRenderPassBeginInfoKHR(VkDeviceGroupRenderPassBeginInfoKHR const *s1,
                                                 VkDeviceGroupRenderPassBeginInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupSubmitInfo(VkDeviceGroupSubmitInfo const *s1,
                                     VkDeviceGroupSubmitInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupSubmitInfoKHR(VkDeviceGroupSubmitInfoKHR const *s1,
                                        VkDeviceGroupSubmitInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkDeviceGroupSwapchainCreateInfoKHR(VkDeviceGroupSwapchainCreateInfoKHR const *s1,
                                                 VkDeviceGroupSwapchainCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDeviceImageMemoryRequirements(VkDeviceImageMemoryRequirements const *s1,
                                             VkDeviceImageMemoryRequirements const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4
bool compare_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *s1,
                                                VkDeviceImageMemoryRequirementsKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4
bool compare_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *s1,
                                                VkDeviceImageMemoryRequirementsKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkDeviceImageSubresourceInfo(VkDeviceImageSubresourceInfo const *s1,
                                          VkDeviceImageSubresourceInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkDeviceImageSubresourceInfoKHR(VkDeviceImageSubresourceInfoKHR const *s1,
                                             VkDeviceImageSubresourceInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkDeviceImageSubresourceInfoKHR(VkDeviceImageSubresourceInfoKHR const *s1,
                                             VkDeviceImageSubresourceInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDeviceMemoryOpaqueCaptureAddressInfo(
    VkDeviceMemoryOpaqueCaptureAddressInfo const *s1,
    VkDeviceMemoryOpaqueCaptureAddressInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address
bool compare_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s1,
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address
bool compare_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s1,
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior
bool compare_VkDeviceMemoryOverallocationCreateInfoAMD(
    VkDeviceMemoryOverallocationCreateInfoAMD const *s1,
    VkDeviceMemoryOverallocationCreateInfoAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkDeviceMemoryReportCallbackDataEXT(VkDeviceMemoryReportCallbackDataEXT const *s1,
                                                 VkDeviceMemoryReportCallbackDataEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkDeviceObjectReservationCreateInfo(VkDeviceObjectReservationCreateInfo const *s1,
                                                 VkDeviceObjectReservationCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkDevicePipelineBinaryInternalCacheControlKHR(
    VkDevicePipelineBinaryInternalCacheControlKHR const *s1,
    VkDevicePipelineBinaryInternalCacheControlKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDevicePrivateDataCreateInfo(VkDevicePrivateDataCreateInfo const *s1,
                                           VkDevicePrivateDataCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data
bool compare_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *s1,
                                              VkDevicePrivateDataCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_private_data
bool compare_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *s1,
                                              VkDevicePrivateDataCreateInfoEXT const *s2);
#endif

bool compare_VkDeviceQueueCreateInfo(VkDeviceQueueCreateInfo const *s1,
                                     VkDeviceQueueCreateInfo const *s2);

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkDeviceQueueGlobalPriorityCreateInfo(VkDeviceQueueGlobalPriorityCreateInfo const *s1,
                                                   VkDeviceQueueGlobalPriorityCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION <= 203 && VK_EXT_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoKHR(
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoKHR(
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceQueueInfo2(VkDeviceQueueInfo2 const *s1, VkDeviceQueueInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls
bool compare_VkDeviceQueueShaderCoreControlCreateInfoARM(
    VkDeviceQueueShaderCoreControlCreateInfoARM const *s1,
    VkDeviceQueueShaderCoreControlCreateInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2 && VKSC_VERSION_1_0
bool compare_VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV(
    VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV const *s1,
    VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkDeviceTensorMemoryRequirementsARM(VkDeviceTensorMemoryRequirementsARM const *s1,
                                                 VkDeviceTensorMemoryRequirementsARM const *s2);
#endif

#if VK_HEADER_VERSION >= 236 && VK_HEADER_VERSION <= 236 && VK_LUNARG_direct_driver_loading
bool compare_VkDirectDriverLoadingInfoLUNARG(VkDirectDriverLoadingInfoLUNARG const *s1,
                                             VkDirectDriverLoadingInfoLUNARG const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_LUNARG_direct_driver_loading
bool compare_VkDirectDriverLoadingInfoLUNARG(VkDirectDriverLoadingInfoLUNARG const *s1,
                                             VkDirectDriverLoadingInfoLUNARG const *s2);
#endif

#if VK_HEADER_VERSION >= 236 && VK_LUNARG_direct_driver_loading
bool compare_VkDirectDriverLoadingListLUNARG(VkDirectDriverLoadingListLUNARG const *s1,
                                             VkDirectDriverLoadingListLUNARG const *s2);
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface
bool compare_VkDirectFBSurfaceCreateInfoEXT(VkDirectFBSurfaceCreateInfoEXT const *s1,
                                            VkDirectFBSurfaceCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkDispatchGraphCountInfoAMDX(VkDispatchGraphCountInfoAMDX const *s1,
                                          VkDispatchGraphCountInfoAMDX const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkDispatchGraphInfoAMDX(VkDispatchGraphInfoAMDX const *s1,
                                     VkDispatchGraphInfoAMDX const *s2);
#endif

bool compare_VkDispatchIndirectCommand(VkDispatchIndirectCommand const *s1,
                                       VkDispatchIndirectCommand const *s2);

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkDispatchTileInfoQCOM(VkDispatchTileInfoQCOM const *s1,
                                    VkDispatchTileInfoQCOM const *s2);
#endif

#if VK_EXT_display_control
bool compare_VkDisplayEventInfoEXT(VkDisplayEventInfoEXT const *s1,
                                   VkDisplayEventInfoEXT const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplayModeCreateInfoKHR(VkDisplayModeCreateInfoKHR const *s1,
                                        VkDisplayModeCreateInfoKHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplayModeParametersKHR(VkDisplayModeParametersKHR const *s1,
                                        VkDisplayModeParametersKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayModeProperties2KHR(VkDisplayModeProperties2KHR const *s1,
                                         VkDisplayModeProperties2KHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplayModePropertiesKHR(VkDisplayModePropertiesKHR const *s1,
                                        VkDisplayModePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_NV_display_stereo
bool compare_VkDisplayModeStereoPropertiesNV(VkDisplayModeStereoPropertiesNV const *s1,
                                             VkDisplayModeStereoPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
bool compare_VkDisplayNativeHdrSurfaceCapabilitiesAMD(
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *s1,
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneCapabilities2KHR(VkDisplayPlaneCapabilities2KHR const *s1,
                                            VkDisplayPlaneCapabilities2KHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplayPlaneCapabilitiesKHR(VkDisplayPlaneCapabilitiesKHR const *s1,
                                           VkDisplayPlaneCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneInfo2KHR(VkDisplayPlaneInfo2KHR const *s1,
                                    VkDisplayPlaneInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneProperties2KHR(VkDisplayPlaneProperties2KHR const *s1,
                                          VkDisplayPlaneProperties2KHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplayPlanePropertiesKHR(VkDisplayPlanePropertiesKHR const *s1,
                                         VkDisplayPlanePropertiesKHR const *s2);
#endif

#if VK_EXT_display_control
bool compare_VkDisplayPowerInfoEXT(VkDisplayPowerInfoEXT const *s1,
                                   VkDisplayPowerInfoEXT const *s2);
#endif

#if VK_KHR_display_swapchain
bool compare_VkDisplayPresentInfoKHR(VkDisplayPresentInfoKHR const *s1,
                                     VkDisplayPresentInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayProperties2KHR(VkDisplayProperties2KHR const *s1,
                                     VkDisplayProperties2KHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplayPropertiesKHR(VkDisplayPropertiesKHR const *s1,
                                    VkDisplayPropertiesKHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplaySurfaceCreateInfoKHR(VkDisplaySurfaceCreateInfoKHR const *s1,
                                           VkDisplaySurfaceCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_NV_display_stereo
bool compare_VkDisplaySurfaceStereoCreateInfoNV(VkDisplaySurfaceStereoCreateInfoNV const *s1,
                                                VkDisplaySurfaceStereoCreateInfoNV const *s2);
#endif

bool compare_VkDrawIndexedIndirectCommand(VkDrawIndexedIndirectCommand const *s1,
                                          VkDrawIndexedIndirectCommand const *s2);

bool compare_VkDrawIndirectCommand(VkDrawIndirectCommand const *s1,
                                   VkDrawIndirectCommand const *s2);

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkDrawIndirectCountIndirectCommandEXT(VkDrawIndirectCountIndirectCommandEXT const *s1,
                                                   VkDrawIndirectCountIndirectCommandEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkDrawMeshTasksIndirectCommandEXT(VkDrawMeshTasksIndirectCommandEXT const *s1,
                                               VkDrawMeshTasksIndirectCommandEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkDrawMeshTasksIndirectCommandNV(VkDrawMeshTasksIndirectCommandNV const *s1,
                                              VkDrawMeshTasksIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierProperties2EXT(VkDrmFormatModifierProperties2EXT const *s1,
                                               VkDrmFormatModifierProperties2EXT const *s2);
#endif

#if (VK_HEADER_VERSION >= 281 && VK_EXT_image_drm_format_modifier &&                               \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 && VK_EXT_image_drm_format_modifier &&   \
     VK_KHR_format_feature_flags2) ||                                                              \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_EXT_image_drm_format_modifier)
bool compare_VkDrmFormatModifierProperties2EXT(VkDrmFormatModifierProperties2EXT const *s1,
                                               VkDrmFormatModifierProperties2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierPropertiesEXT(VkDrmFormatModifierPropertiesEXT const *s1,
                                              VkDrmFormatModifierPropertiesEXT const *s2);
#endif

#if (VK_HEADER_VERSION >= 281 && VK_EXT_image_drm_format_modifier &&                               \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 && VK_EXT_image_drm_format_modifier &&   \
     VK_KHR_format_feature_flags2) ||                                                              \
    (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 240 && VK_EXT_image_drm_format_modifier)
bool compare_VkDrmFormatModifierPropertiesList2EXT(VkDrmFormatModifierPropertiesList2EXT const *s1,
                                                   VkDrmFormatModifierPropertiesList2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierPropertiesListEXT(VkDrmFormatModifierPropertiesListEXT const *s1,
                                                  VkDrmFormatModifierPropertiesListEXT const *s2);
#endif

bool compare_VkEventCreateInfo(VkEventCreateInfo const *s1, VkEventCreateInfo const *s2);

#if VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkExecutionGraphPipelineCreateInfoAMDX(
    VkExecutionGraphPipelineCreateInfoAMDX const *s1,
    VkExecutionGraphPipelineCreateInfoAMDX const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&              \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkExecutionGraphPipelineScratchSizeAMDX(
    VkExecutionGraphPipelineScratchSizeAMDX const *s1,
    VkExecutionGraphPipelineScratchSizeAMDX const *s2);
#endif

#if VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkExecutionGraphPipelineScratchSizeAMDX(
    VkExecutionGraphPipelineScratchSizeAMDX const *s1,
    VkExecutionGraphPipelineScratchSizeAMDX const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExportFenceCreateInfo(VkExportFenceCreateInfo const *s1,
                                     VkExportFenceCreateInfo const *s2);
#endif

#if VK_KHR_external_fence
bool compare_VkExportFenceCreateInfoKHR(VkExportFenceCreateInfoKHR const *s1,
                                        VkExportFenceCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2
bool compare_VkExportFenceSciSyncInfoNV(VkExportFenceSciSyncInfoNV const *s1,
                                        VkExportFenceSciSyncInfoNV const *s2);
#endif

#if VK_KHR_external_fence_win32
bool compare_VkExportFenceWin32HandleInfoKHR(VkExportFenceWin32HandleInfoKHR const *s1,
                                             VkExportFenceWin32HandleInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExportMemoryAllocateInfo(VkExportMemoryAllocateInfo const *s1,
                                        VkExportMemoryAllocateInfo const *s2);
#endif

#if VK_KHR_external_memory
bool compare_VkExportMemoryAllocateInfoKHR(VkExportMemoryAllocateInfoKHR const *s1,
                                           VkExportMemoryAllocateInfoKHR const *s2);
#endif

#if VK_NV_external_memory
bool compare_VkExportMemoryAllocateInfoNV(VkExportMemoryAllocateInfoNV const *s1,
                                          VkExportMemoryAllocateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkExportMemorySciBufInfoNV(VkExportMemorySciBufInfoNV const *s1,
                                        VkExportMemorySciBufInfoNV const *s2);
#endif

#if VK_KHR_external_memory_win32
bool compare_VkExportMemoryWin32HandleInfoKHR(VkExportMemoryWin32HandleInfoKHR const *s1,
                                              VkExportMemoryWin32HandleInfoKHR const *s2);
#endif

#if VK_NV_external_memory_win32
bool compare_VkExportMemoryWin32HandleInfoNV(VkExportMemoryWin32HandleInfoNV const *s1,
                                             VkExportMemoryWin32HandleInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalBufferInfoEXT(VkExportMetalBufferInfoEXT const *s1,
                                        VkExportMetalBufferInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalCommandQueueInfoEXT(VkExportMetalCommandQueueInfoEXT const *s1,
                                              VkExportMetalCommandQueueInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalDeviceInfoEXT(VkExportMetalDeviceInfoEXT const *s1,
                                        VkExportMetalDeviceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalIOSurfaceInfoEXT(VkExportMetalIOSurfaceInfoEXT const *s1,
                                           VkExportMetalIOSurfaceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalObjectCreateInfoEXT(VkExportMetalObjectCreateInfoEXT const *s1,
                                              VkExportMetalObjectCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalObjectsInfoEXT(VkExportMetalObjectsInfoEXT const *s1,
                                         VkExportMetalObjectsInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalSharedEventInfoEXT(VkExportMetalSharedEventInfoEXT const *s1,
                                             VkExportMetalSharedEventInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalTextureInfoEXT(VkExportMetalTextureInfoEXT const *s1,
                                         VkExportMetalTextureInfoEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExportSemaphoreCreateInfo(VkExportSemaphoreCreateInfo const *s1,
                                         VkExportSemaphoreCreateInfo const *s2);
#endif

#if VK_KHR_external_semaphore
bool compare_VkExportSemaphoreCreateInfoKHR(VkExportSemaphoreCreateInfoKHR const *s1,
                                            VkExportSemaphoreCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync
bool compare_VkExportSemaphoreSciSyncInfoNV(VkExportSemaphoreSciSyncInfoNV const *s1,
                                            VkExportSemaphoreSciSyncInfoNV const *s2);
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkExportSemaphoreWin32HandleInfoKHR(VkExportSemaphoreWin32HandleInfoKHR const *s1,
                                                 VkExportSemaphoreWin32HandleInfoKHR const *s2);
#endif

bool compare_VkExtensionProperties(VkExtensionProperties const *s1,
                                   VkExtensionProperties const *s2);

bool compare_VkExtent2D(VkExtent2D const *s1, VkExtent2D const *s2);

bool compare_VkExtent3D(VkExtent3D const *s1, VkExtent3D const *s2);

#if VK_VERSION_1_1
bool compare_VkExternalBufferProperties(VkExternalBufferProperties const *s1,
                                        VkExternalBufferProperties const *s2);
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalBufferPropertiesKHR(VkExternalBufferPropertiesKHR const *s1,
                                           VkExternalBufferPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue
bool compare_VkExternalComputeQueueCreateInfoNV(VkExternalComputeQueueCreateInfoNV const *s1,
                                                VkExternalComputeQueueCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue
bool compare_VkExternalComputeQueueDataParamsNV(VkExternalComputeQueueDataParamsNV const *s1,
                                                VkExternalComputeQueueDataParamsNV const *s2);
#endif

#if VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue
bool compare_VkExternalComputeQueueDeviceCreateInfoNV(
    VkExternalComputeQueueDeviceCreateInfoNV const *s1,
    VkExternalComputeQueueDeviceCreateInfoNV const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalFenceProperties(VkExternalFenceProperties const *s1,
                                       VkExternalFenceProperties const *s2);
#endif

#if VK_KHR_external_fence_capabilities
bool compare_VkExternalFencePropertiesKHR(VkExternalFencePropertiesKHR const *s1,
                                          VkExternalFencePropertiesKHR const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkExternalFormatANDROID(VkExternalFormatANDROID const *s1,
                                     VkExternalFormatANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer
bool compare_VkExternalFormatQNX(VkExternalFormatQNX const *s1, VkExternalFormatQNX const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalImageFormatProperties(VkExternalImageFormatProperties const *s1,
                                             VkExternalImageFormatProperties const *s2);
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalImageFormatPropertiesKHR(VkExternalImageFormatPropertiesKHR const *s1,
                                                VkExternalImageFormatPropertiesKHR const *s2);
#endif

#if VK_NV_external_memory_capabilities
bool compare_VkExternalImageFormatPropertiesNV(VkExternalImageFormatPropertiesNV const *s1,
                                               VkExternalImageFormatPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 252 && VK_EXT_external_memory_acquire_unmodified
bool compare_VkExternalMemoryAcquireUnmodifiedEXT(VkExternalMemoryAcquireUnmodifiedEXT const *s1,
                                                  VkExternalMemoryAcquireUnmodifiedEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryBufferCreateInfo(VkExternalMemoryBufferCreateInfo const *s1,
                                              VkExternalMemoryBufferCreateInfo const *s2);
#endif

#if VK_KHR_external_memory
bool compare_VkExternalMemoryBufferCreateInfoKHR(VkExternalMemoryBufferCreateInfoKHR const *s1,
                                                 VkExternalMemoryBufferCreateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryImageCreateInfo(VkExternalMemoryImageCreateInfo const *s1,
                                             VkExternalMemoryImageCreateInfo const *s2);
#endif

#if VK_KHR_external_memory
bool compare_VkExternalMemoryImageCreateInfoKHR(VkExternalMemoryImageCreateInfoKHR const *s1,
                                                VkExternalMemoryImageCreateInfoKHR const *s2);
#endif

#if VK_NV_external_memory
bool compare_VkExternalMemoryImageCreateInfoNV(VkExternalMemoryImageCreateInfoNV const *s1,
                                               VkExternalMemoryImageCreateInfoNV const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryProperties(VkExternalMemoryProperties const *s1,
                                        VkExternalMemoryProperties const *s2);
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalMemoryPropertiesKHR(VkExternalMemoryPropertiesKHR const *s1,
                                           VkExternalMemoryPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkExternalMemoryTensorCreateInfoARM(VkExternalMemoryTensorCreateInfoARM const *s1,
                                                 VkExternalMemoryTensorCreateInfoARM const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalSemaphoreProperties(VkExternalSemaphoreProperties const *s1,
                                           VkExternalSemaphoreProperties const *s2);
#endif

#if VK_KHR_external_semaphore_capabilities
bool compare_VkExternalSemaphorePropertiesKHR(VkExternalSemaphorePropertiesKHR const *s1,
                                              VkExternalSemaphorePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkExternalTensorPropertiesARM(VkExternalTensorPropertiesARM const *s1,
                                           VkExternalTensorPropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkFaultCallbackInfo(VkFaultCallbackInfo const *s1, VkFaultCallbackInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkFaultData(VkFaultData const *s1, VkFaultData const *s2);
#endif

bool compare_VkFenceCreateInfo(VkFenceCreateInfo const *s1, VkFenceCreateInfo const *s2);

#if VK_KHR_external_fence_fd
bool compare_VkFenceGetFdInfoKHR(VkFenceGetFdInfoKHR const *s1, VkFenceGetFdInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2
bool compare_VkFenceGetSciSyncInfoNV(VkFenceGetSciSyncInfoNV const *s1,
                                     VkFenceGetSciSyncInfoNV const *s2);
#endif

#if VK_KHR_external_fence_win32
bool compare_VkFenceGetWin32HandleInfoKHR(VkFenceGetWin32HandleInfoKHR const *s1,
                                          VkFenceGetWin32HandleInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
bool compare_VkFilterCubicImageViewImageFormatPropertiesEXT(
    VkFilterCubicImageViewImageFormatPropertiesEXT const *s1,
    VkFilterCubicImageViewImageFormatPropertiesEXT const *s2);
#endif

bool compare_VkFormatProperties(VkFormatProperties const *s1, VkFormatProperties const *s2);

#if VK_VERSION_1_1
bool compare_VkFormatProperties2(VkFormatProperties2 const *s1, VkFormatProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkFormatProperties2KHR(VkFormatProperties2KHR const *s1,
                                    VkFormatProperties2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkFormatProperties3(VkFormatProperties3 const *s1, VkFormatProperties3 const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_format_feature_flags2
bool compare_VkFormatProperties3KHR(VkFormatProperties3KHR const *s1,
                                    VkFormatProperties3KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_format_feature_flags2
bool compare_VkFormatProperties3KHR(VkFormatProperties3KHR const *s1,
                                    VkFormatProperties3KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkFragmentShadingRateAttachmentInfoKHR(
    VkFragmentShadingRateAttachmentInfoKHR const *s1,
    VkFragmentShadingRateAttachmentInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 264 && VK_EXT_frame_boundary
bool compare_VkFrameBoundaryEXT(VkFrameBoundaryEXT const *s1, VkFrameBoundaryEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_frame_boundary
bool compare_VkFrameBoundaryTensorsARM(VkFrameBoundaryTensorsARM const *s1,
                                       VkFrameBoundaryTensorsARM const *s2);
#endif

#if VK_HEADER_VERSION >= 142 && VK_VERSION_1_2
bool compare_VkFramebufferAttachmentImageInfo(VkFramebufferAttachmentImageInfo const *s1,
                                              VkFramebufferAttachmentImageInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130
bool compare_VkFramebufferAttachmentImageInfoKHR(VkFramebufferAttachmentImageInfoKHR const *s1,
                                                 VkFramebufferAttachmentImageInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer
bool compare_VkFramebufferAttachmentImageInfoKHR(VkFramebufferAttachmentImageInfoKHR const *s1,
                                                 VkFramebufferAttachmentImageInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkFramebufferAttachmentsCreateInfo(VkFramebufferAttachmentsCreateInfo const *s1,
                                                VkFramebufferAttachmentsCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer
bool compare_VkFramebufferAttachmentsCreateInfoKHR(VkFramebufferAttachmentsCreateInfoKHR const *s1,
                                                   VkFramebufferAttachmentsCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer
bool compare_VkFramebufferAttachmentsCreateInfoKHR(VkFramebufferAttachmentsCreateInfoKHR const *s1,
                                                   VkFramebufferAttachmentsCreateInfoKHR const *s2);
#endif

bool compare_VkFramebufferCreateInfo(VkFramebufferCreateInfo const *s1,
                                     VkFramebufferCreateInfo const *s2);

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkFramebufferMixedSamplesCombinationNV(
    VkFramebufferMixedSamplesCombinationNV const *s1,
    VkFramebufferMixedSamplesCombinationNV const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkGeneratedCommandsInfoEXT(VkGeneratedCommandsInfoEXT const *s1,
                                        VkGeneratedCommandsInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGeneratedCommandsInfoNV(VkGeneratedCommandsInfoNV const *s1,
                                       VkGeneratedCommandsInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkGeneratedCommandsMemoryRequirementsInfoEXT(
    VkGeneratedCommandsMemoryRequirementsInfoEXT const *s1,
    VkGeneratedCommandsMemoryRequirementsInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGeneratedCommandsMemoryRequirementsInfoNV(
    VkGeneratedCommandsMemoryRequirementsInfoNV const *s1,
    VkGeneratedCommandsMemoryRequirementsInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkGeneratedCommandsPipelineInfoEXT(VkGeneratedCommandsPipelineInfoEXT const *s1,
                                                VkGeneratedCommandsPipelineInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkGeneratedCommandsShaderInfoEXT(VkGeneratedCommandsShaderInfoEXT const *s1,
                                              VkGeneratedCommandsShaderInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryAABBNV(VkGeometryAABBNV const *s1, VkGeometryAABBNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryAABBNVX(VkGeometryAABBNVX const *s1, VkGeometryAABBNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryDataNV(VkGeometryDataNV const *s1, VkGeometryDataNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryDataNVX(VkGeometryDataNVX const *s1, VkGeometryDataNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 134 && VK_NV_ray_tracing
bool compare_VkGeometryNV(VkGeometryNV const *s1, VkGeometryNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkGeometryNV(VkGeometryNV const *s1, VkGeometryNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryNVX(VkGeometryNVX const *s1, VkGeometryNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryTrianglesNV(VkGeometryTrianglesNV const *s1,
                                   VkGeometryTrianglesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryTrianglesNVX(VkGeometryTrianglesNVX const *s1,
                                    VkGeometryTrianglesNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 266 && VK_HEADER_VERSION <= 270 && VK_NV_low_latency2
bool compare_VkGetLatencyMarkerInfoNV(VkGetLatencyMarkerInfoNV const *s1,
                                      VkGetLatencyMarkerInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 271 && VK_NV_low_latency2
bool compare_VkGetLatencyMarkerInfoNV(VkGetLatencyMarkerInfoNV const *s1,
                                      VkGetLatencyMarkerInfoNV const *s2);
#endif

#if VK_HEADER_VERSION <= 240
bool compare_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *s1,
                                          VkGraphicsPipelineCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 241
bool compare_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *s1,
                                          VkGraphicsPipelineCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkGraphicsPipelineLibraryCreateInfoEXT(
    VkGraphicsPipelineLibraryCreateInfoEXT const *s1,
    VkGraphicsPipelineLibraryCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGraphicsPipelineShaderGroupsCreateInfoNV(
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *s1,
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGraphicsShaderGroupCreateInfoNV(VkGraphicsShaderGroupCreateInfoNV const *s1,
                                               VkGraphicsShaderGroupCreateInfoNV const *s2);
#endif

#if VK_EXT_hdr_metadata
bool compare_VkHdrMetadataEXT(VkHdrMetadataEXT const *s1, VkHdrMetadataEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 301 && VK_HUAWEI_hdr_vivid
bool compare_VkHdrVividDynamicMetadataHUAWEI(VkHdrVividDynamicMetadataHUAWEI const *s1,
                                             VkHdrVividDynamicMetadataHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface
bool compare_VkHeadlessSurfaceCreateInfoEXT(VkHeadlessSurfaceCreateInfoEXT const *s1,
                                            VkHeadlessSurfaceCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkHostImageCopyDevicePerformanceQuery(VkHostImageCopyDevicePerformanceQuery const *s1,
                                                   VkHostImageCopyDevicePerformanceQuery const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkHostImageCopyDevicePerformanceQueryEXT(
    VkHostImageCopyDevicePerformanceQueryEXT const *s1,
    VkHostImageCopyDevicePerformanceQueryEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkHostImageCopyDevicePerformanceQueryEXT(
    VkHostImageCopyDevicePerformanceQueryEXT const *s1,
    VkHostImageCopyDevicePerformanceQueryEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkHostImageLayoutTransitionInfo(VkHostImageLayoutTransitionInfo const *s1,
                                             VkHostImageLayoutTransitionInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkHostImageLayoutTransitionInfoEXT(VkHostImageLayoutTransitionInfoEXT const *s1,
                                                VkHostImageLayoutTransitionInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkHostImageLayoutTransitionInfoEXT(VkHostImageLayoutTransitionInfoEXT const *s1,
                                                VkHostImageLayoutTransitionInfoEXT const *s2);
#endif

#if VK_MVK_ios_surface
bool compare_VkIOSSurfaceCreateInfoMVK(VkIOSSurfaceCreateInfoMVK const *s1,
                                       VkIOSSurfaceCreateInfoMVK const *s2);
#endif

#if VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control
bool compare_VkImageAlignmentControlCreateInfoMESA(VkImageAlignmentControlCreateInfoMESA const *s1,
                                                   VkImageAlignmentControlCreateInfoMESA const *s2);
#endif

bool compare_VkImageBlit(VkImageBlit const *s1, VkImageBlit const *s2);

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageBlit2(VkImageBlit2 const *s1, VkImageBlit2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkImageBlit2KHR(VkImageBlit2KHR const *s1, VkImageBlit2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkImageBlit2KHR(VkImageBlit2KHR const *s1, VkImageBlit2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkImageCaptureDescriptorDataInfoEXT(VkImageCaptureDescriptorDataInfoEXT const *s1,
                                                 VkImageCaptureDescriptorDataInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkImageCompressionControlEXT(VkImageCompressionControlEXT const *s1,
                                          VkImageCompressionControlEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkImageCompressionPropertiesEXT(VkImageCompressionPropertiesEXT const *s1,
                                             VkImageCompressionPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImageConstraintsInfoFUCHSIA(VkImageConstraintsInfoFUCHSIA const *s1,
                                           VkImageConstraintsInfoFUCHSIA const *s2);
#endif

bool compare_VkImageCopy(VkImageCopy const *s1, VkImageCopy const *s2);

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageCopy2(VkImageCopy2 const *s1, VkImageCopy2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkImageCopy2KHR(VkImageCopy2KHR const *s1, VkImageCopy2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkImageCopy2KHR(VkImageCopy2KHR const *s1, VkImageCopy2KHR const *s2);
#endif

bool compare_VkImageCreateInfo(VkImageCreateInfo const *s1, VkImageCreateInfo const *s2);

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierExplicitCreateInfoEXT(
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *s1,
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierListCreateInfoEXT(
    VkImageDrmFormatModifierListCreateInfoEXT const *s1,
    VkImageDrmFormatModifierListCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierPropertiesEXT(VkImageDrmFormatModifierPropertiesEXT const *s1,
                                                   VkImageDrmFormatModifierPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImageFormatConstraintsInfoFUCHSIA(VkImageFormatConstraintsInfoFUCHSIA const *s1,
                                                 VkImageFormatConstraintsInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkImageFormatListCreateInfo(VkImageFormatListCreateInfo const *s1,
                                         VkImageFormatListCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION <= 130 && VK_KHR_image_format_list
bool compare_VkImageFormatListCreateInfoKHR(VkImageFormatListCreateInfoKHR const *s1,
                                            VkImageFormatListCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_image_format_list
bool compare_VkImageFormatListCreateInfoKHR(VkImageFormatListCreateInfoKHR const *s1,
                                            VkImageFormatListCreateInfoKHR const *s2);
#endif

bool compare_VkImageFormatProperties(VkImageFormatProperties const *s1,
                                     VkImageFormatProperties const *s2);

#if VK_VERSION_1_1
bool compare_VkImageFormatProperties2(VkImageFormatProperties2 const *s1,
                                      VkImageFormatProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkImageFormatProperties2KHR(VkImageFormatProperties2KHR const *s1,
                                         VkImageFormatProperties2KHR const *s2);
#endif

bool compare_VkImageMemoryBarrier(VkImageMemoryBarrier const *s1, VkImageMemoryBarrier const *s2);

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageMemoryBarrier2(VkImageMemoryBarrier2 const *s1,
                                   VkImageMemoryBarrier2 const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *s1,
                                      VkImageMemoryBarrier2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *s1,
                                      VkImageMemoryBarrier2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkImageMemoryRequirementsInfo2(VkImageMemoryRequirementsInfo2 const *s1,
                                            VkImageMemoryRequirementsInfo2 const *s2);
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkImageMemoryRequirementsInfo2KHR(VkImageMemoryRequirementsInfo2KHR const *s1,
                                               VkImageMemoryRequirementsInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface
bool compare_VkImagePipeSurfaceCreateInfoFUCHSIA(VkImagePipeSurfaceCreateInfoFUCHSIA const *s1,
                                                 VkImagePipeSurfaceCreateInfoFUCHSIA const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkImagePlaneMemoryRequirementsInfo(VkImagePlaneMemoryRequirementsInfo const *s1,
                                                VkImagePlaneMemoryRequirementsInfo const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkImagePlaneMemoryRequirementsInfoKHR(VkImagePlaneMemoryRequirementsInfoKHR const *s1,
                                                   VkImagePlaneMemoryRequirementsInfoKHR const *s2);
#endif

bool compare_VkImageResolve(VkImageResolve const *s1, VkImageResolve const *s2);

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageResolve2(VkImageResolve2 const *s1, VkImageResolve2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkImageResolve2KHR(VkImageResolve2KHR const *s1, VkImageResolve2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkImageResolve2KHR(VkImageResolve2KHR const *s1, VkImageResolve2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkImageSparseMemoryRequirementsInfo2(VkImageSparseMemoryRequirementsInfo2 const *s1,
                                                  VkImageSparseMemoryRequirementsInfo2 const *s2);
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkImageSparseMemoryRequirementsInfo2KHR(
    VkImageSparseMemoryRequirementsInfo2KHR const *s1,
    VkImageSparseMemoryRequirementsInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkImageStencilUsageCreateInfo(VkImageStencilUsageCreateInfo const *s1,
                                           VkImageStencilUsageCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 93 && VK_HEADER_VERSION <= 130 && VK_EXT_separate_stencil_usage
bool compare_VkImageStencilUsageCreateInfoEXT(VkImageStencilUsageCreateInfoEXT const *s1,
                                              VkImageStencilUsageCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_separate_stencil_usage
bool compare_VkImageStencilUsageCreateInfoEXT(VkImageStencilUsageCreateInfoEXT const *s1,
                                              VkImageStencilUsageCreateInfoEXT const *s2);
#endif

bool compare_VkImageSubresource(VkImageSubresource const *s1, VkImageSubresource const *s2);

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkImageSubresource2(VkImageSubresource2 const *s1, VkImageSubresource2 const *s2);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 259 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control) ||                                                          \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 257 && VK_EXT_image_compression_control)
bool compare_VkImageSubresource2EXT(VkImageSubresource2EXT const *s1,
                                    VkImageSubresource2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy &&              \
    VK_EXT_image_compression_control
bool compare_VkImageSubresource2EXT(VkImageSubresource2EXT const *s1,
                                    VkImageSubresource2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy && VK_EXT_image_compression_control
bool compare_VkImageSubresource2EXT(VkImageSubresource2EXT const *s1,
                                    VkImageSubresource2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkImageSubresource2KHR(VkImageSubresource2KHR const *s1,
                                    VkImageSubresource2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkImageSubresource2KHR(VkImageSubresource2KHR const *s1,
                                    VkImageSubresource2KHR const *s2);
#endif

bool compare_VkImageSubresourceLayers(VkImageSubresourceLayers const *s1,
                                      VkImageSubresourceLayers const *s2);

bool compare_VkImageSubresourceRange(VkImageSubresourceRange const *s1,
                                     VkImageSubresourceRange const *s2);

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkImageSwapchainCreateInfoKHR(VkImageSwapchainCreateInfoKHR const *s1,
                                           VkImageSwapchainCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkImageToMemoryCopy(VkImageToMemoryCopy const *s1, VkImageToMemoryCopy const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkImageToMemoryCopyEXT(VkImageToMemoryCopyEXT const *s1,
                                    VkImageToMemoryCopyEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkImageToMemoryCopyEXT(VkImageToMemoryCopyEXT const *s1,
                                    VkImageToMemoryCopyEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
bool compare_VkImageViewASTCDecodeModeEXT(VkImageViewASTCDecodeModeEXT const *s1,
                                          VkImageViewASTCDecodeModeEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 137 && VK_NVX_image_view_handle
bool compare_VkImageViewAddressPropertiesNVX(VkImageViewAddressPropertiesNVX const *s1,
                                             VkImageViewAddressPropertiesNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkImageViewCaptureDescriptorDataInfoEXT(
    VkImageViewCaptureDescriptorDataInfoEXT const *s1,
    VkImageViewCaptureDescriptorDataInfoEXT const *s2);
#endif

bool compare_VkImageViewCreateInfo(VkImageViewCreateInfo const *s1,
                                   VkImageViewCreateInfo const *s2);

#if VK_HEADER_VERSION >= 102 && VK_NVX_image_view_handle
bool compare_VkImageViewHandleInfoNVX(VkImageViewHandleInfoNVX const *s1,
                                      VkImageViewHandleInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod
bool compare_VkImageViewMinLodCreateInfoEXT(VkImageViewMinLodCreateInfoEXT const *s1,
                                            VkImageViewMinLodCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkImageViewSampleWeightCreateInfoQCOM(VkImageViewSampleWeightCreateInfoQCOM const *s1,
                                                   VkImageViewSampleWeightCreateInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_EXT_image_sliced_view_of_3d
bool compare_VkImageViewSlicedCreateInfoEXT(VkImageViewSlicedCreateInfoEXT const *s1,
                                            VkImageViewSlicedCreateInfoEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkImageViewUsageCreateInfo(VkImageViewUsageCreateInfo const *s1,
                                        VkImageViewUsageCreateInfo const *s2);
#endif

#if VK_KHR_maintenance2
bool compare_VkImageViewUsageCreateInfoKHR(VkImageViewUsageCreateInfoKHR const *s1,
                                           VkImageViewUsageCreateInfoKHR const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkImportAndroidHardwareBufferInfoANDROID(
    VkImportAndroidHardwareBufferInfoANDROID const *s1,
    VkImportAndroidHardwareBufferInfoANDROID const *s2);
#endif

#if VK_KHR_external_fence_fd
bool compare_VkImportFenceFdInfoKHR(VkImportFenceFdInfoKHR const *s1,
                                    VkImportFenceFdInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2
bool compare_VkImportFenceSciSyncInfoNV(VkImportFenceSciSyncInfoNV const *s1,
                                        VkImportFenceSciSyncInfoNV const *s2);
#endif

#if VK_KHR_external_fence_win32
bool compare_VkImportFenceWin32HandleInfoKHR(VkImportFenceWin32HandleInfoKHR const *s1,
                                             VkImportFenceWin32HandleInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImportMemoryBufferCollectionFUCHSIA(VkImportMemoryBufferCollectionFUCHSIA const *s1,
                                                   VkImportMemoryBufferCollectionFUCHSIA const *s2);
#endif

#if VK_KHR_external_memory_fd
bool compare_VkImportMemoryFdInfoKHR(VkImportMemoryFdInfoKHR const *s1,
                                     VkImportMemoryFdInfoKHR const *s2);
#endif

#if VK_EXT_external_memory_host
bool compare_VkImportMemoryHostPointerInfoEXT(VkImportMemoryHostPointerInfoEXT const *s1,
                                              VkImportMemoryHostPointerInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal
bool compare_VkImportMemoryMetalHandleInfoEXT(VkImportMemoryMetalHandleInfoEXT const *s1,
                                              VkImportMemoryMetalHandleInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkImportMemorySciBufInfoNV(VkImportMemorySciBufInfoNV const *s1,
                                        VkImportMemorySciBufInfoNV const *s2);
#endif

#if VK_KHR_external_memory_win32
bool compare_VkImportMemoryWin32HandleInfoKHR(VkImportMemoryWin32HandleInfoKHR const *s1,
                                              VkImportMemoryWin32HandleInfoKHR const *s2);
#endif

#if VK_NV_external_memory_win32
bool compare_VkImportMemoryWin32HandleInfoNV(VkImportMemoryWin32HandleInfoNV const *s1,
                                             VkImportMemoryWin32HandleInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkImportMemoryZirconHandleInfoFUCHSIA(VkImportMemoryZirconHandleInfoFUCHSIA const *s1,
                                                   VkImportMemoryZirconHandleInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalBufferInfoEXT(VkImportMetalBufferInfoEXT const *s1,
                                        VkImportMetalBufferInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalIOSurfaceInfoEXT(VkImportMetalIOSurfaceInfoEXT const *s1,
                                           VkImportMetalIOSurfaceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalSharedEventInfoEXT(VkImportMetalSharedEventInfoEXT const *s1,
                                             VkImportMetalSharedEventInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalTextureInfoEXT(VkImportMetalTextureInfoEXT const *s1,
                                         VkImportMetalTextureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer
bool compare_VkImportScreenBufferInfoQNX(VkImportScreenBufferInfoQNX const *s1,
                                         VkImportScreenBufferInfoQNX const *s2);
#endif

#if VK_KHR_external_semaphore_fd
bool compare_VkImportSemaphoreFdInfoKHR(VkImportSemaphoreFdInfoKHR const *s1,
                                        VkImportSemaphoreFdInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync
bool compare_VkImportSemaphoreSciSyncInfoNV(VkImportSemaphoreSciSyncInfoNV const *s1,
                                            VkImportSemaphoreSciSyncInfoNV const *s2);
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkImportSemaphoreWin32HandleInfoKHR(VkImportSemaphoreWin32HandleInfoKHR const *s1,
                                                 VkImportSemaphoreWin32HandleInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
bool compare_VkImportSemaphoreZirconHandleInfoFUCHSIA(
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *s1,
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsExecutionSetTokenEXT(
    VkIndirectCommandsExecutionSetTokenEXT const *s1,
    VkIndirectCommandsExecutionSetTokenEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsIndexBufferTokenEXT(VkIndirectCommandsIndexBufferTokenEXT const *s1,
                                                   VkIndirectCommandsIndexBufferTokenEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsLayoutCreateInfoEXT(VkIndirectCommandsLayoutCreateInfoEXT const *s1,
                                                   VkIndirectCommandsLayoutCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsLayoutCreateInfoNV(VkIndirectCommandsLayoutCreateInfoNV const *s1,
                                                  VkIndirectCommandsLayoutCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsLayoutCreateInfoNVX(VkIndirectCommandsLayoutCreateInfoNVX const *s1,
                                                   VkIndirectCommandsLayoutCreateInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsLayoutTokenEXT(VkIndirectCommandsLayoutTokenEXT const *s1,
                                              VkIndirectCommandsLayoutTokenEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsLayoutTokenNV(VkIndirectCommandsLayoutTokenNV const *s1,
                                             VkIndirectCommandsLayoutTokenNV const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsLayoutTokenNVX(VkIndirectCommandsLayoutTokenNVX const *s1,
                                              VkIndirectCommandsLayoutTokenNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsPushConstantTokenEXT(
    VkIndirectCommandsPushConstantTokenEXT const *s1,
    VkIndirectCommandsPushConstantTokenEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsStreamNV(VkIndirectCommandsStreamNV const *s1,
                                        VkIndirectCommandsStreamNV const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsTokenNVX(VkIndirectCommandsTokenNVX const *s1,
                                        VkIndirectCommandsTokenNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsVertexBufferTokenEXT(
    VkIndirectCommandsVertexBufferTokenEXT const *s1,
    VkIndirectCommandsVertexBufferTokenEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectExecutionSetCreateInfoEXT(VkIndirectExecutionSetCreateInfoEXT const *s1,
                                                 VkIndirectExecutionSetCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectExecutionSetPipelineInfoEXT(VkIndirectExecutionSetPipelineInfoEXT const *s1,
                                                   VkIndirectExecutionSetPipelineInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectExecutionSetShaderInfoEXT(VkIndirectExecutionSetShaderInfoEXT const *s1,
                                                 VkIndirectExecutionSetShaderInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectExecutionSetShaderLayoutInfoEXT(
    VkIndirectExecutionSetShaderLayoutInfoEXT const *s1,
    VkIndirectExecutionSetShaderLayoutInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkInitializePerformanceApiInfoINTEL(VkInitializePerformanceApiInfoINTEL const *s1,
                                                 VkInitializePerformanceApiInfoINTEL const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkInputAttachmentAspectReference(VkInputAttachmentAspectReference const *s1,
                                              VkInputAttachmentAspectReference const *s2);
#endif

#if VK_KHR_maintenance2
bool compare_VkInputAttachmentAspectReferenceKHR(VkInputAttachmentAspectReferenceKHR const *s1,
                                                 VkInputAttachmentAspectReferenceKHR const *s2);
#endif

bool compare_VkInstanceCreateInfo(VkInstanceCreateInfo const *s1, VkInstanceCreateInfo const *s2);

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkLatencySleepInfoNV(VkLatencySleepInfoNV const *s1, VkLatencySleepInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkLatencySleepModeInfoNV(VkLatencySleepModeInfoNV const *s1,
                                      VkLatencySleepModeInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkLatencySubmissionPresentIdNV(VkLatencySubmissionPresentIdNV const *s1,
                                            VkLatencySubmissionPresentIdNV const *s2);
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkLatencySurfaceCapabilitiesNV(VkLatencySurfaceCapabilitiesNV const *s1,
                                            VkLatencySurfaceCapabilitiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkLatencyTimingsFrameReportNV(VkLatencyTimingsFrameReportNV const *s1,
                                           VkLatencyTimingsFrameReportNV const *s2);
#endif

bool compare_VkLayerProperties(VkLayerProperties const *s1, VkLayerProperties const *s2);

#if VK_HEADER_VERSION >= 272 && VK_EXT_layer_settings
bool compare_VkLayerSettingEXT(VkLayerSettingEXT const *s1, VkLayerSettingEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 272 && VK_EXT_layer_settings
bool compare_VkLayerSettingsCreateInfoEXT(VkLayerSettingsCreateInfoEXT const *s1,
                                          VkLayerSettingsCreateInfoEXT const *s2);
#endif

#if VK_MVK_macos_surface
bool compare_VkMacOSSurfaceCreateInfoMVK(VkMacOSSurfaceCreateInfoMVK const *s1,
                                         VkMacOSSurfaceCreateInfoMVK const *s2);
#endif

bool compare_VkMappedMemoryRange(VkMappedMemoryRange const *s1, VkMappedMemoryRange const *s2);

#if VK_VERSION_1_1
bool compare_VkMemoryAllocateFlagsInfo(VkMemoryAllocateFlagsInfo const *s1,
                                       VkMemoryAllocateFlagsInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkMemoryAllocateFlagsInfoKHR(VkMemoryAllocateFlagsInfoKHR const *s1,
                                          VkMemoryAllocateFlagsInfoKHR const *s2);
#endif

bool compare_VkMemoryAllocateInfo(VkMemoryAllocateInfo const *s1, VkMemoryAllocateInfo const *s2);

bool compare_VkMemoryBarrier(VkMemoryBarrier const *s1, VkMemoryBarrier const *s2);

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkMemoryBarrier2(VkMemoryBarrier2 const *s1, VkMemoryBarrier2 const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *s1, VkMemoryBarrier2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *s1, VkMemoryBarrier2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 305 && VK_KHR_maintenance8
bool compare_VkMemoryBarrierAccessFlags3KHR(VkMemoryBarrierAccessFlags3KHR const *s1,
                                            VkMemoryBarrierAccessFlags3KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryDedicatedAllocateInfo(VkMemoryDedicatedAllocateInfo const *s1,
                                           VkMemoryDedicatedAllocateInfo const *s2);
#endif

#if VK_KHR_dedicated_allocation
bool compare_VkMemoryDedicatedAllocateInfoKHR(VkMemoryDedicatedAllocateInfoKHR const *s1,
                                              VkMemoryDedicatedAllocateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkMemoryDedicatedAllocateInfoTensorARM(
    VkMemoryDedicatedAllocateInfoTensorARM const *s1,
    VkMemoryDedicatedAllocateInfoTensorARM const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryDedicatedRequirements(VkMemoryDedicatedRequirements const *s1,
                                           VkMemoryDedicatedRequirements const *s2);
#endif

#if VK_KHR_dedicated_allocation
bool compare_VkMemoryDedicatedRequirementsKHR(VkMemoryDedicatedRequirementsKHR const *s1,
                                              VkMemoryDedicatedRequirementsKHR const *s2);
#endif

#if VK_KHR_external_memory_fd
bool compare_VkMemoryFdPropertiesKHR(VkMemoryFdPropertiesKHR const *s1,
                                     VkMemoryFdPropertiesKHR const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *s1,
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *s2);
#endif

#if VK_KHR_external_memory_fd
bool compare_VkMemoryGetFdInfoKHR(VkMemoryGetFdInfoKHR const *s1, VkMemoryGetFdInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal
bool compare_VkMemoryGetMetalHandleInfoEXT(VkMemoryGetMetalHandleInfoEXT const *s1,
                                           VkMemoryGetMetalHandleInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
bool compare_VkMemoryGetRemoteAddressInfoNV(VkMemoryGetRemoteAddressInfoNV const *s1,
                                            VkMemoryGetRemoteAddressInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkMemoryGetSciBufInfoNV(VkMemoryGetSciBufInfoNV const *s1,
                                     VkMemoryGetSciBufInfoNV const *s2);
#endif

#if VK_KHR_external_memory_win32
bool compare_VkMemoryGetWin32HandleInfoKHR(VkMemoryGetWin32HandleInfoKHR const *s1,
                                           VkMemoryGetWin32HandleInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkMemoryGetZirconHandleInfoFUCHSIA(VkMemoryGetZirconHandleInfoFUCHSIA const *s1,
                                                VkMemoryGetZirconHandleInfoFUCHSIA const *s2);
#endif

bool compare_VkMemoryHeap(VkMemoryHeap const *s1, VkMemoryHeap const *s2);

#if VK_EXT_external_memory_host
bool compare_VkMemoryHostPointerPropertiesEXT(VkMemoryHostPointerPropertiesEXT const *s1,
                                              VkMemoryHostPointerPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkMemoryMapInfo(VkMemoryMapInfo const *s1, VkMemoryMapInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 244 && VK_HEADER_VERSION <= 302 && VK_KHR_map_memory2
bool compare_VkMemoryMapInfoKHR(VkMemoryMapInfoKHR const *s1, VkMemoryMapInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_map_memory2
bool compare_VkMemoryMapInfoKHR(VkMemoryMapInfoKHR const *s1, VkMemoryMapInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed
bool compare_VkMemoryMapPlacedInfoEXT(VkMemoryMapPlacedInfoEXT const *s1,
                                      VkMemoryMapPlacedInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal
bool compare_VkMemoryMetalHandlePropertiesEXT(VkMemoryMetalHandlePropertiesEXT const *s1,
                                              VkMemoryMetalHandlePropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkMemoryOpaqueCaptureAddressAllocateInfo(
    VkMemoryOpaqueCaptureAddressAllocateInfo const *s1,
    VkMemoryOpaqueCaptureAddressAllocateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address
bool compare_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s1,
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address
bool compare_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s1,
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
bool compare_VkMemoryPriorityAllocateInfoEXT(VkMemoryPriorityAllocateInfoEXT const *s1,
                                             VkMemoryPriorityAllocateInfoEXT const *s2);
#endif

bool compare_VkMemoryRequirements(VkMemoryRequirements const *s1, VkMemoryRequirements const *s2);

#if VK_VERSION_1_1
bool compare_VkMemoryRequirements2(VkMemoryRequirements2 const *s1,
                                   VkMemoryRequirements2 const *s2);
#endif

#if (VK_HEADER_VERSION >= 281 && VK_KHR_get_memory_requirements2 && VK_NV_ray_tracing &&           \
     (VK_KHR_get_memory_requirements2 || VK_VERSION_1_1)) ||                                       \
    (VK_HEADER_VERSION >= 142 && VK_HEADER_VERSION <= 280 && VK_KHR_get_memory_requirements2 &&    \
     VK_NV_ray_tracing) ||                                                                         \
    (VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 141 && VK_VERSION_1_1 &&                      \
     VK_KHR_get_memory_requirements2 && VK_NV_ray_tracing) ||                                      \
    (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_VERSION_1_1 &&                       \
     VK_KHR_get_memory_requirements2 && VK_NVX_raytracing) ||                                      \
    (VK_HEADER_VERSION <= 84 && VK_KHR_get_memory_requirements2)
bool compare_VkMemoryRequirements2KHR(VkMemoryRequirements2KHR const *s1,
                                      VkMemoryRequirements2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkMemorySciBufPropertiesNV(VkMemorySciBufPropertiesNV const *s1,
                                        VkMemorySciBufPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkMemoryToImageCopy(VkMemoryToImageCopy const *s1, VkMemoryToImageCopy const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkMemoryToImageCopyEXT(VkMemoryToImageCopyEXT const *s1,
                                    VkMemoryToImageCopyEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkMemoryToImageCopyEXT(VkMemoryToImageCopyEXT const *s1,
                                    VkMemoryToImageCopyEXT const *s2);
#endif

bool compare_VkMemoryType(VkMemoryType const *s1, VkMemoryType const *s2);

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkMemoryUnmapInfo(VkMemoryUnmapInfo const *s1, VkMemoryUnmapInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 244 && VK_HEADER_VERSION <= 302 && VK_KHR_map_memory2
bool compare_VkMemoryUnmapInfoKHR(VkMemoryUnmapInfoKHR const *s1, VkMemoryUnmapInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_map_memory2
bool compare_VkMemoryUnmapInfoKHR(VkMemoryUnmapInfoKHR const *s1, VkMemoryUnmapInfoKHR const *s2);
#endif

#if VK_KHR_external_memory_win32
bool compare_VkMemoryWin32HandlePropertiesKHR(VkMemoryWin32HandlePropertiesKHR const *s1,
                                              VkMemoryWin32HandlePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkMemoryZirconHandlePropertiesFUCHSIA(VkMemoryZirconHandlePropertiesFUCHSIA const *s1,
                                                   VkMemoryZirconHandlePropertiesFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface
bool compare_VkMetalSurfaceCreateInfoEXT(VkMetalSurfaceCreateInfoEXT const *s1,
                                         VkMetalSurfaceCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapBuildInfoEXT(VkMicromapBuildInfoEXT const *s1,
                                    VkMicromapBuildInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapBuildSizesInfoEXT(VkMicromapBuildSizesInfoEXT const *s1,
                                         VkMicromapBuildSizesInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapCreateInfoEXT(VkMicromapCreateInfoEXT const *s1,
                                     VkMicromapCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapTriangleEXT(VkMicromapTriangleEXT const *s1,
                                   VkMicromapTriangleEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapUsageEXT(VkMicromapUsageEXT const *s1, VkMicromapUsageEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapVersionInfoEXT(VkMicromapVersionInfoEXT const *s1,
                                      VkMicromapVersionInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface
bool compare_VkMirSurfaceCreateInfoKHR(VkMirSurfaceCreateInfoKHR const *s1,
                                       VkMirSurfaceCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkMultiDrawIndexedInfoEXT(VkMultiDrawIndexedInfoEXT const *s1,
                                       VkMultiDrawIndexedInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkMultiDrawInfoEXT(VkMultiDrawInfoEXT const *s1, VkMultiDrawInfoEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkMultisamplePropertiesEXT(VkMultisamplePropertiesEXT const *s1,
                                        VkMultisamplePropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkMultisampledRenderToSingleSampledInfoEXT(
    VkMultisampledRenderToSingleSampledInfoEXT const *s1,
    VkMultisampledRenderToSingleSampledInfoEXT const *s2);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NVX_multiview_per_view_attributes &&                           \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_NVX_multiview_per_view_attributes) ||                                                      \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
bool compare_VkMultiviewPerViewAttributesInfoNVX(VkMultiviewPerViewAttributesInfoNVX const *s1,
                                                 VkMultiviewPerViewAttributesInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_QCOM_multiview_per_view_render_areas
bool compare_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(
    VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM const *s1,
    VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeCreateInfoEXT(VkMutableDescriptorTypeCreateInfoEXT const *s1,
                                                  VkMutableDescriptorTypeCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *s1,
    VkMutableDescriptorTypeCreateInfoVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *s1,
    VkMutableDescriptorTypeCreateInfoVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeListEXT(VkMutableDescriptorTypeListEXT const *s1,
                                            VkMutableDescriptorTypeListEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *s1,
                                              VkMutableDescriptorTypeListVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *s1,
                                              VkMutableDescriptorTypeListVALVE const *s2);
#endif

#if VK_HEADER_VERSION <= 116 && VK_ANDROID_native_buffer
bool compare_VkNativeBufferANDROID(VkNativeBufferANDROID const *s1,
                                   VkNativeBufferANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkNativeBufferANDROID(VkNativeBufferANDROID const *s1,
                                   VkNativeBufferANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkNativeBufferUsage2ANDROID(VkNativeBufferUsage2ANDROID const *s1,
                                         VkNativeBufferUsage2ANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 318 && VK_OHOS_surface
bool compare_VkOHSurfaceCreateInfoOHOS(VkOHSurfaceCreateInfoOHOS const *s1,
                                       VkOHSurfaceCreateInfoOHOS const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableCreateInfoNVX(VkObjectTableCreateInfoNVX const *s1,
                                        VkObjectTableCreateInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableDescriptorSetEntryNVX(VkObjectTableDescriptorSetEntryNVX const *s1,
                                                VkObjectTableDescriptorSetEntryNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableEntryNVX(VkObjectTableEntryNVX const *s1,
                                   VkObjectTableEntryNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableIndexBufferEntryNVX(VkObjectTableIndexBufferEntryNVX const *s1,
                                              VkObjectTableIndexBufferEntryNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTablePipelineEntryNVX(VkObjectTablePipelineEntryNVX const *s1,
                                           VkObjectTablePipelineEntryNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTablePushConstantEntryNVX(VkObjectTablePushConstantEntryNVX const *s1,
                                               VkObjectTablePushConstantEntryNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableVertexBufferEntryNVX(VkObjectTableVertexBufferEntryNVX const *s1,
                                               VkObjectTableVertexBufferEntryNVX const *s2);
#endif

bool compare_VkOffset2D(VkOffset2D const *s1, VkOffset2D const *s2);

bool compare_VkOffset3D(VkOffset3D const *s1, VkOffset3D const *s2);

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkOpaqueCaptureDescriptorDataCreateInfoEXT(
    VkOpaqueCaptureDescriptorDataCreateInfoEXT const *s1,
    VkOpaqueCaptureDescriptorDataCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowExecuteInfoNV(VkOpticalFlowExecuteInfoNV const *s1,
                                        VkOpticalFlowExecuteInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowImageFormatInfoNV(VkOpticalFlowImageFormatInfoNV const *s1,
                                            VkOpticalFlowImageFormatInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowImageFormatPropertiesNV(VkOpticalFlowImageFormatPropertiesNV const *s1,
                                                  VkOpticalFlowImageFormatPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowSessionCreateInfoNV(VkOpticalFlowSessionCreateInfoNV const *s1,
                                              VkOpticalFlowSessionCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowSessionCreatePrivateDataInfoNV(
    VkOpticalFlowSessionCreatePrivateDataInfoNV const *s1,
    VkOpticalFlowSessionCreatePrivateDataInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkOutOfBandQueueTypeInfoNV(VkOutOfBandQueueTypeInfoNV const *s1,
                                        VkOutOfBandQueueTypeInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPartitionedAccelerationStructureFlagsNV(
    VkPartitionedAccelerationStructureFlagsNV const *s1,
    VkPartitionedAccelerationStructureFlagsNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPartitionedAccelerationStructureInstancesInputNV(
    VkPartitionedAccelerationStructureInstancesInputNV const *s1,
    VkPartitionedAccelerationStructureInstancesInputNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPartitionedAccelerationStructureUpdateInstanceDataNV(
    VkPartitionedAccelerationStructureUpdateInstanceDataNV const *s1,
    VkPartitionedAccelerationStructureUpdateInstanceDataNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPartitionedAccelerationStructureWriteInstanceDataNV(
    VkPartitionedAccelerationStructureWriteInstanceDataNV const *s1,
    VkPartitionedAccelerationStructureWriteInstanceDataNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPartitionedAccelerationStructureWritePartitionTranslationDataNV(
    VkPartitionedAccelerationStructureWritePartitionTranslationDataNV const *s1,
    VkPartitionedAccelerationStructureWritePartitionTranslationDataNV const *s2);
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPastPresentationTimingGOOGLE(VkPastPresentationTimingGOOGLE const *s1,
                                            VkPastPresentationTimingGOOGLE const *s2);
#endif

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkPerTileBeginInfoQCOM(VkPerTileBeginInfoQCOM const *s1,
                                    VkPerTileBeginInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkPerTileEndInfoQCOM(VkPerTileEndInfoQCOM const *s1, VkPerTileEndInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceConfigurationAcquireInfoINTEL(
    VkPerformanceConfigurationAcquireInfoINTEL const *s1,
    VkPerformanceConfigurationAcquireInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceCounterDescriptionKHR(VkPerformanceCounterDescriptionKHR const *s1,
                                                VkPerformanceCounterDescriptionKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceCounterKHR(VkPerformanceCounterKHR const *s1,
                                     VkPerformanceCounterKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceMarkerInfoINTEL(VkPerformanceMarkerInfoINTEL const *s1,
                                          VkPerformanceMarkerInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceOverrideInfoINTEL(VkPerformanceOverrideInfoINTEL const *s1,
                                            VkPerformanceOverrideInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_KHR_performance_query && VKSC_VERSION_1_0
bool compare_VkPerformanceQueryReservationInfoKHR(VkPerformanceQueryReservationInfoKHR const *s1,
                                                  VkPerformanceQueryReservationInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceQuerySubmitInfoKHR(VkPerformanceQuerySubmitInfoKHR const *s1,
                                             VkPerformanceQuerySubmitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceStreamMarkerInfoINTEL(VkPerformanceStreamMarkerInfoINTEL const *s1,
                                                VkPerformanceStreamMarkerInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceValueINTEL(VkPerformanceValueINTEL const *s1,
                                     VkPerformanceValueINTEL const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDevice16BitStorageFeatures(VkPhysicalDevice16BitStorageFeatures const *s1,
                                                  VkPhysicalDevice16BitStorageFeatures const *s2);
#endif

#if VK_KHR_16bit_storage
bool compare_VkPhysicalDevice16BitStorageFeaturesKHR(
    VkPhysicalDevice16BitStorageFeaturesKHR const *s1,
    VkPhysicalDevice16BitStorageFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 149 && VK_EXT_4444_formats
bool compare_VkPhysicalDevice4444FormatsFeaturesEXT(
    VkPhysicalDevice4444FormatsFeaturesEXT const *s1,
    VkPhysicalDevice4444FormatsFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDevice8BitStorageFeatures(VkPhysicalDevice8BitStorageFeatures const *s1,
                                                 VkPhysicalDevice8BitStorageFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130 && VK_KHR_8bit_storage
bool compare_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *s1,
    VkPhysicalDevice8BitStorageFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_8bit_storage
bool compare_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *s1,
    VkPhysicalDevice8BitStorageFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
bool compare_VkPhysicalDeviceASTCDecodeFeaturesEXT(VkPhysicalDeviceASTCDecodeFeaturesEXT const *s1,
                                                   VkPhysicalDeviceASTCDecodeFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkPhysicalDeviceAccelerationStructureFeaturesKHR(
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *s1,
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkPhysicalDeviceAccelerationStructurePropertiesKHR(
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *s1,
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report
bool compare_VkPhysicalDeviceAddressBindingReportFeaturesEXT(
    VkPhysicalDeviceAddressBindingReportFeaturesEXT const *s1,
    VkPhysicalDeviceAddressBindingReportFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling
bool compare_VkPhysicalDeviceAmigoProfilingFeaturesSEC(
    VkPhysicalDeviceAmigoProfilingFeaturesSEC const *s1,
    VkPhysicalDeviceAmigoProfilingFeaturesSEC const *s2);
#endif

#if VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag
bool compare_VkPhysicalDeviceAntiLagFeaturesAMD(VkPhysicalDeviceAntiLagFeaturesAMD const *s1,
                                                VkPhysicalDeviceAntiLagFeaturesAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 250 && VK_EXT_attachment_feedback_loop_dynamic_state
bool compare_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(
    VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT const *s1,
    VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 224 && VK_EXT_attachment_feedback_loop_layout
bool compare_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(
    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT const *s1,
    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT const *s2);
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *s1,
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *s2);
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *s1,
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
bool compare_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *s1,
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 105 && VK_EXT_buffer_device_address
bool compare_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s1,
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address
bool compare_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s1,
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceBufferDeviceAddressFeatures(
    VkPhysicalDeviceBufferDeviceAddressFeatures const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address
bool compare_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address
bool compare_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address
bool compare_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkPhysicalDeviceClusterAccelerationStructureFeaturesNV(
    VkPhysicalDeviceClusterAccelerationStructureFeaturesNV const *s1,
    VkPhysicalDeviceClusterAccelerationStructureFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkPhysicalDeviceClusterAccelerationStructurePropertiesNV(
    VkPhysicalDeviceClusterAccelerationStructurePropertiesNV const *s1,
    VkPhysicalDeviceClusterAccelerationStructurePropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 239 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 239 && VK_HEADER_VERSION <= 242 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 272 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 121 && VK_AMD_device_coherent_memory
bool compare_VkPhysicalDeviceCoherentMemoryFeaturesAMD(
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *s1,
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
bool compare_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *s1,
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 293 && VK_NV_command_buffer_inheritance
bool compare_VkPhysicalDeviceCommandBufferInheritanceFeaturesNV(
    VkPhysicalDeviceCommandBufferInheritanceFeaturesNV const *s1,
    VkPhysicalDeviceCommandBufferInheritanceFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 295 && VK_KHR_compute_shader_derivatives
bool compare_VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR const *s1,
    VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 294 && VK_NV_compute_shader_derivatives
bool compare_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s1,
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 295 && VK_NV_compute_shader_derivatives
bool compare_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s1,
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 295 && VK_KHR_compute_shader_derivatives
bool compare_VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR(
    VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR const *s1,
    VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *s1,
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *s2);
#endif

#if VK_EXT_conservative_rasterization
bool compare_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2
bool compare_VkPhysicalDeviceCooperativeMatrix2FeaturesNV(
    VkPhysicalDeviceCooperativeMatrix2FeaturesNV const *s1,
    VkPhysicalDeviceCooperativeMatrix2FeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2
bool compare_VkPhysicalDeviceCooperativeMatrix2PropertiesNV(
    VkPhysicalDeviceCooperativeMatrix2PropertiesNV const *s1,
    VkPhysicalDeviceCooperativeMatrix2PropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixFeaturesKHR(
    VkPhysicalDeviceCooperativeMatrixFeaturesKHR const *s1,
    VkPhysicalDeviceCooperativeMatrixFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixFeaturesNV(
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *s1,
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixPropertiesKHR(
    VkPhysicalDeviceCooperativeMatrixPropertiesKHR const *s1,
    VkPhysicalDeviceCooperativeMatrixPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *s1,
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector
bool compare_VkPhysicalDeviceCooperativeVectorFeaturesNV(
    VkPhysicalDeviceCooperativeVectorFeaturesNV const *s1,
    VkPhysicalDeviceCooperativeVectorFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector
bool compare_VkPhysicalDeviceCooperativeVectorPropertiesNV(
    VkPhysicalDeviceCooperativeVectorPropertiesNV const *s1,
    VkPhysicalDeviceCooperativeVectorPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(
    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV const *s1,
    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(
    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV const *s1,
    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_corner_sampled_image
bool compare_VkPhysicalDeviceCornerSampledImageFeaturesNV(
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *s1,
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkPhysicalDeviceCoverageReductionModeFeaturesNV(
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *s1,
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_clamp
bool compare_VkPhysicalDeviceCubicClampFeaturesQCOM(
    VkPhysicalDeviceCubicClampFeaturesQCOM const *s1,
    VkPhysicalDeviceCubicClampFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights
bool compare_VkPhysicalDeviceCubicWeightsFeaturesQCOM(
    VkPhysicalDeviceCubicWeightsFeaturesQCOM const *s1,
    VkPhysicalDeviceCubicWeightsFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceCudaKernelLaunchFeaturesNV(
    VkPhysicalDeviceCudaKernelLaunchFeaturesNV const *s1,
    VkPhysicalDeviceCudaKernelLaunchFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceCudaKernelLaunchPropertiesNV(
    VkPhysicalDeviceCudaKernelLaunchPropertiesNV const *s1,
    VkPhysicalDeviceCudaKernelLaunchPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
bool compare_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *s1,
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
bool compare_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *s1,
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkPhysicalDeviceDataGraphFeaturesARM(VkPhysicalDeviceDataGraphFeaturesARM const *s1,
                                                  VkPhysicalDeviceDataGraphFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_HEADER_VERSION <= 319 && VK_ARM_data_graph
bool compare_VkPhysicalDeviceDataGraphOperationSupportARM(
    VkPhysicalDeviceDataGraphOperationSupportARM const *s1,
    VkPhysicalDeviceDataGraphOperationSupportARM const *s2);
#endif

#if VK_HEADER_VERSION >= 320 && VK_ARM_data_graph
bool compare_VkPhysicalDeviceDataGraphOperationSupportARM(
    VkPhysicalDeviceDataGraphOperationSupportARM const *s1,
    VkPhysicalDeviceDataGraphOperationSupportARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkPhysicalDeviceDataGraphProcessingEngineARM(
    VkPhysicalDeviceDataGraphProcessingEngineARM const *s1,
    VkPhysicalDeviceDataGraphProcessingEngineARM const *s2);
#endif

#if VK_HEADER_VERSION >= 99 && VK_NV_dedicated_allocation_image_aliasing
bool compare_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *s1,
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control
bool compare_VkPhysicalDeviceDepthBiasControlFeaturesEXT(
    VkPhysicalDeviceDepthBiasControlFeaturesEXT const *s1,
    VkPhysicalDeviceDepthBiasControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control
bool compare_VkPhysicalDeviceDepthClampControlFeaturesEXT(
    VkPhysicalDeviceDepthClampControlFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClampControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 304 && VK_EXT_depth_clamp_zero_one
bool compare_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 305 && VK_EXT_depth_clamp_zero_one
bool compare_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 305 && VK_KHR_depth_clamp_zero_one
bool compare_VkPhysicalDeviceDepthClampZeroOneFeaturesKHR(
    VkPhysicalDeviceDepthClampZeroOneFeaturesKHR const *s1,
    VkPhysicalDeviceDepthClampZeroOneFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control
bool compare_VkPhysicalDeviceDepthClipControlFeaturesEXT(
    VkPhysicalDeviceDepthClipControlFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClipControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
bool compare_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDepthStencilResolveProperties(
    VkPhysicalDeviceDepthStencilResolveProperties const *s1,
    VkPhysicalDeviceDepthStencilResolveProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 130 && VK_KHR_depth_stencil_resolve
bool compare_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s1,
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_depth_stencil_resolve
bool compare_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s1,
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferFeaturesEXT(
    VkPhysicalDeviceDescriptorBufferFeaturesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferTensorFeaturesARM(
    VkPhysicalDeviceDescriptorBufferTensorFeaturesARM const *s1,
    VkPhysicalDeviceDescriptorBufferTensorFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferTensorPropertiesARM(
    VkPhysicalDeviceDescriptorBufferTensorPropertiesARM const *s1,
    VkPhysicalDeviceDescriptorBufferTensorPropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDescriptorIndexingFeatures(
    VkPhysicalDeviceDescriptorIndexingFeatures const *s1,
    VkPhysicalDeviceDescriptorIndexingFeatures const *s2);
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDescriptorIndexingProperties(
    VkPhysicalDeviceDescriptorIndexingProperties const *s1,
    VkPhysicalDeviceDescriptorIndexingProperties const *s2);
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 263 && VK_NV_descriptor_pool_overallocation
bool compare_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV(
    VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV const *s1,
    VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(
    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE const *s1,
    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *s1,
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
bool compare_VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *s1,
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *s2);
#endif

#if VK_EXT_discard_rectangles
bool compare_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *s1,
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceDisplacementMicromapFeaturesNV(
    VkPhysicalDeviceDisplacementMicromapFeaturesNV const *s1,
    VkPhysicalDeviceDisplacementMicromapFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceDisplacementMicromapPropertiesNV(
    VkPhysicalDeviceDisplacementMicromapPropertiesNV const *s1,
    VkPhysicalDeviceDisplacementMicromapPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDriverProperties(VkPhysicalDeviceDriverProperties const *s1,
                                              VkPhysicalDeviceDriverProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 87 && VK_KHR_driver_properties
bool compare_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *s1,
                                                 VkPhysicalDeviceDriverPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 130 && VK_KHR_driver_properties
bool compare_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *s1,
                                                 VkPhysicalDeviceDriverPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_driver_properties
bool compare_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *s1,
                                                 VkPhysicalDeviceDriverPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_physical_device_drm
bool compare_VkPhysicalDeviceDrmPropertiesEXT(VkPhysicalDeviceDrmPropertiesEXT const *s1,
                                              VkPhysicalDeviceDrmPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceDynamicRenderingFeatures(
    VkPhysicalDeviceDynamicRenderingFeatures const *s1,
    VkPhysicalDeviceDynamicRenderingFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering
bool compare_VkPhysicalDeviceDynamicRenderingFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s1,
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering
bool compare_VkPhysicalDeviceDynamicRenderingFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s1,
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceDynamicRenderingLocalReadFeatures(
    VkPhysicalDeviceDynamicRenderingLocalReadFeatures const *s1,
    VkPhysicalDeviceDynamicRenderingLocalReadFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read
bool compare_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *s1,
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read
bool compare_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *s1,
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 251 && VK_EXT_dynamic_rendering_unused_attachments
bool compare_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(
    VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT const *s1,
    VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
bool compare_VkPhysicalDeviceExclusiveScissorFeaturesNV(
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *s1,
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 176 && VK_EXT_extended_dynamic_state2
bool compare_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(
    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 145 && VK_EXT_extended_dynamic_state
bool compare_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 267 && VK_NV_extended_sparse_address_space
bool compare_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(
    VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV const *s1,
    VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 267 && VK_NV_extended_sparse_address_space
bool compare_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV(
    VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV const *s1,
    VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalBufferInfo(VkPhysicalDeviceExternalBufferInfo const *s1,
                                                VkPhysicalDeviceExternalBufferInfo const *s2);
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkPhysicalDeviceExternalBufferInfoKHR(VkPhysicalDeviceExternalBufferInfoKHR const *s1,
                                                   VkPhysicalDeviceExternalBufferInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue
bool compare_VkPhysicalDeviceExternalComputeQueuePropertiesNV(
    VkPhysicalDeviceExternalComputeQueuePropertiesNV const *s1,
    VkPhysicalDeviceExternalComputeQueuePropertiesNV const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalFenceInfo(VkPhysicalDeviceExternalFenceInfo const *s1,
                                               VkPhysicalDeviceExternalFenceInfo const *s2);
#endif

#if VK_KHR_external_fence_capabilities
bool compare_VkPhysicalDeviceExternalFenceInfoKHR(VkPhysicalDeviceExternalFenceInfoKHR const *s1,
                                                  VkPhysicalDeviceExternalFenceInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve
bool compare_VkPhysicalDeviceExternalFormatResolveFeaturesANDROID(
    VkPhysicalDeviceExternalFormatResolveFeaturesANDROID const *s1,
    VkPhysicalDeviceExternalFormatResolveFeaturesANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve
bool compare_VkPhysicalDeviceExternalFormatResolvePropertiesANDROID(
    VkPhysicalDeviceExternalFormatResolvePropertiesANDROID const *s1,
    VkPhysicalDeviceExternalFormatResolvePropertiesANDROID const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalImageFormatInfo(
    VkPhysicalDeviceExternalImageFormatInfo const *s1,
    VkPhysicalDeviceExternalImageFormatInfo const *s2);
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkPhysicalDeviceExternalImageFormatInfoKHR(
    VkPhysicalDeviceExternalImageFormatInfoKHR const *s1,
    VkPhysicalDeviceExternalImageFormatInfoKHR const *s2);
#endif

#if VK_EXT_external_memory_host
bool compare_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *s1,
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
bool compare_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *s1,
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkPhysicalDeviceExternalMemorySciBufFeaturesNV(
    VkPhysicalDeviceExternalMemorySciBufFeaturesNV const *s1,
    VkPhysicalDeviceExternalMemorySciBufFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer
bool compare_VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX(
    VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX const *s1,
    VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkPhysicalDeviceExternalSciBufFeaturesNV(
    VkPhysicalDeviceExternalSciBufFeaturesNV const *s1,
    VkPhysicalDeviceExternalSciBufFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2
bool compare_VkPhysicalDeviceExternalSciSync2FeaturesNV(
    VkPhysicalDeviceExternalSciSync2FeaturesNV const *s1,
    VkPhysicalDeviceExternalSciSync2FeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync
bool compare_VkPhysicalDeviceExternalSciSyncFeaturesNV(
    VkPhysicalDeviceExternalSciSyncFeaturesNV const *s1,
    VkPhysicalDeviceExternalSciSyncFeaturesNV const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalSemaphoreInfo(VkPhysicalDeviceExternalSemaphoreInfo const *s1,
                                                   VkPhysicalDeviceExternalSemaphoreInfo const *s2);
#endif

#if VK_KHR_external_semaphore_capabilities
bool compare_VkPhysicalDeviceExternalSemaphoreInfoKHR(
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *s1,
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkPhysicalDeviceExternalTensorInfoARM(VkPhysicalDeviceExternalTensorInfoARM const *s1,
                                                   VkPhysicalDeviceExternalTensorInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkPhysicalDeviceFaultFeaturesEXT(VkPhysicalDeviceFaultFeaturesEXT const *s1,
                                              VkPhysicalDeviceFaultFeaturesEXT const *s2);
#endif

bool compare_VkPhysicalDeviceFeatures(VkPhysicalDeviceFeatures const *s1,
                                      VkPhysicalDeviceFeatures const *s2);

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceFeatures2(VkPhysicalDeviceFeatures2 const *s1,
                                       VkPhysicalDeviceFeatures2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceFeatures2KHR(VkPhysicalDeviceFeatures2KHR const *s1,
                                          VkPhysicalDeviceFeatures2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 95 && VK_HEADER_VERSION <= 114 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 115 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceFloatControlsProperties(
    VkPhysicalDeviceFloatControlsProperties const *s1,
    VkPhysicalDeviceFloatControlsProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 95 && VK_HEADER_VERSION <= 115 && VK_KHR_shader_float_controls
bool compare_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s1,
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float_controls
bool compare_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s1,
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_shader_float_controls
bool compare_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s1,
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 316 && VK_ARM_format_pack
bool compare_VkPhysicalDeviceFormatPackFeaturesARM(VkPhysicalDeviceFormatPackFeaturesARM const *s1,
                                                   VkPhysicalDeviceFormatPackFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
bool compare_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
bool compare_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered
bool compare_VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE(
    VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE const *s1,
    VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered
bool compare_VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE(
    VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE const *s1,
    VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 214 && VK_NV_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 215 && VK_NV_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 110 && VK_EXT_fragment_shader_interlock
bool compare_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *s1,
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *s1,
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *s1,
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRateFeaturesKHR(
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *s1,
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRateKHR(
    VkPhysicalDeviceFragmentShadingRateKHR const *s1,
    VkPhysicalDeviceFragmentShadingRateKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRatePropertiesKHR(
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *s1,
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 264 && VK_EXT_frame_boundary
bool compare_VkPhysicalDeviceFrameBoundaryFeaturesEXT(
    VkPhysicalDeviceFrameBoundaryFeaturesEXT const *s1,
    VkPhysicalDeviceFrameBoundaryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeatures(
    VkPhysicalDeviceGlobalPriorityQueryFeatures const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 180 && VK_HEADER_VERSION <= 203 && VK_EXT_global_priority_query
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority_query
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_global_priority_query
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_global_priority
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT const *s1,
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT const *s1,
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceGroupProperties(VkPhysicalDeviceGroupProperties const *s1,
                                             VkPhysicalDeviceGroupProperties const *s2);
#endif

#if VK_KHR_device_group_creation
bool compare_VkPhysicalDeviceGroupPropertiesKHR(VkPhysicalDeviceGroupPropertiesKHR const *s1,
                                                VkPhysicalDeviceGroupPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 301 && VK_HUAWEI_hdr_vivid
bool compare_VkPhysicalDeviceHdrVividFeaturesHUAWEI(
    VkPhysicalDeviceHdrVividFeaturesHUAWEI const *s1,
    VkPhysicalDeviceHdrVividFeaturesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceHostImageCopyFeatures(VkPhysicalDeviceHostImageCopyFeatures const *s1,
                                                   VkPhysicalDeviceHostImageCopyFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkPhysicalDeviceHostImageCopyFeaturesEXT(
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *s1,
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkPhysicalDeviceHostImageCopyFeaturesEXT(
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *s1,
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceHostImageCopyProperties(
    VkPhysicalDeviceHostImageCopyProperties const *s1,
    VkPhysicalDeviceHostImageCopyProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkPhysicalDeviceHostImageCopyPropertiesEXT(
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *s1,
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkPhysicalDeviceHostImageCopyPropertiesEXT(
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *s1,
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceHostQueryResetFeatures(
    VkPhysicalDeviceHostQueryResetFeatures const *s1,
    VkPhysicalDeviceHostQueryResetFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 130 && VK_EXT_host_query_reset
bool compare_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s1,
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_host_query_reset
bool compare_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s1,
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceIDProperties(VkPhysicalDeviceIDProperties const *s1,
                                          VkPhysicalDeviceIDProperties const *s2);
#endif

#if VK_KHR_external_memory_capabilities && VK_KHR_external_semaphore_capabilities &&               \
    VK_KHR_external_fence_capabilities
bool compare_VkPhysicalDeviceIDPropertiesKHR(VkPhysicalDeviceIDPropertiesKHR const *s1,
                                             VkPhysicalDeviceIDPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 211 && VK_EXT_image_2d_view_of_3d
bool compare_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(
    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT const *s1,
    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control
bool compare_VkPhysicalDeviceImageAlignmentControlFeaturesMESA(
    VkPhysicalDeviceImageAlignmentControlFeaturesMESA const *s1,
    VkPhysicalDeviceImageAlignmentControlFeaturesMESA const *s2);
#endif

#if VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control
bool compare_VkPhysicalDeviceImageAlignmentControlPropertiesMESA(
    VkPhysicalDeviceImageAlignmentControlPropertiesMESA const *s1,
    VkPhysicalDeviceImageAlignmentControlPropertiesMESA const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkPhysicalDeviceImageCompressionControlFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlFeaturesEXT const *s1,
    VkPhysicalDeviceImageCompressionControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control_swapchain
bool compare_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT const *s1,
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 87 && VK_EXT_image_drm_format_modifier
bool compare_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s1,
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_image_drm_format_modifier
bool compare_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s1,
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceImageFormatInfo2(VkPhysicalDeviceImageFormatInfo2 const *s1,
                                              VkPhysicalDeviceImageFormatInfo2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceImageFormatInfo2KHR(VkPhysicalDeviceImageFormatInfo2KHR const *s1,
                                                 VkPhysicalDeviceImageFormatInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2
bool compare_VkPhysicalDeviceImageProcessing2FeaturesQCOM(
    VkPhysicalDeviceImageProcessing2FeaturesQCOM const *s1,
    VkPhysicalDeviceImageProcessing2FeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2
bool compare_VkPhysicalDeviceImageProcessing2PropertiesQCOM(
    VkPhysicalDeviceImageProcessing2PropertiesQCOM const *s1,
    VkPhysicalDeviceImageProcessing2PropertiesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkPhysicalDeviceImageProcessingFeaturesQCOM(
    VkPhysicalDeviceImageProcessingFeaturesQCOM const *s1,
    VkPhysicalDeviceImageProcessingFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkPhysicalDeviceImageProcessingPropertiesQCOM(
    VkPhysicalDeviceImageProcessingPropertiesQCOM const *s1,
    VkPhysicalDeviceImageProcessingPropertiesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceImageRobustnessFeatures(
    VkPhysicalDeviceImageRobustnessFeatures const *s1,
    VkPhysicalDeviceImageRobustnessFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 148 && VK_HEADER_VERSION <= 203 && VK_EXT_image_robustness
bool compare_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s1,
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_image_robustness
bool compare_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s1,
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_EXT_image_sliced_view_of_3d
bool compare_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(
    VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT const *s1,
    VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
bool compare_VkPhysicalDeviceImageViewImageFormatInfoEXT(
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *s1,
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod
bool compare_VkPhysicalDeviceImageViewMinLodFeaturesEXT(
    VkPhysicalDeviceImageViewMinLodFeaturesEXT const *s1,
    VkPhysicalDeviceImageViewMinLodFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceImagelessFramebufferFeatures(
    VkPhysicalDeviceImagelessFramebufferFeatures const *s1,
    VkPhysicalDeviceImagelessFramebufferFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer
bool compare_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s1,
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer
bool compare_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s1,
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceIndexTypeUint8Features(
    VkPhysicalDeviceIndexTypeUint8Features const *s1,
    VkPhysicalDeviceIndexTypeUint8Features const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesKHR(
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesKHR(
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
bool compare_VkPhysicalDeviceInheritedViewportScissorFeaturesNV(
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *s1,
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceInlineUniformBlockFeatures(
    VkPhysicalDeviceInlineUniformBlockFeatures const *s1,
    VkPhysicalDeviceInlineUniformBlockFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceInlineUniformBlockProperties(
    VkPhysicalDeviceInlineUniformBlockProperties const *s1,
    VkPhysicalDeviceInlineUniformBlockProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 185 && VK_HUAWEI_invocation_mask
bool compare_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *s1,
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7
bool compare_VkPhysicalDeviceLayeredApiPropertiesKHR(
    VkPhysicalDeviceLayeredApiPropertiesKHR const *s1,
    VkPhysicalDeviceLayeredApiPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7
bool compare_VkPhysicalDeviceLayeredApiPropertiesListKHR(
    VkPhysicalDeviceLayeredApiPropertiesListKHR const *s1,
    VkPhysicalDeviceLayeredApiPropertiesListKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7
bool compare_VkPhysicalDeviceLayeredApiVulkanPropertiesKHR(
    VkPhysicalDeviceLayeredApiVulkanPropertiesKHR const *s1,
    VkPhysicalDeviceLayeredApiVulkanPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 264 && VK_MSFT_layered_driver
bool compare_VkPhysicalDeviceLayeredDriverPropertiesMSFT(
    VkPhysicalDeviceLayeredDriverPropertiesMSFT const *s1,
    VkPhysicalDeviceLayeredDriverPropertiesMSFT const *s2);
#endif

#if VK_HEADER_VERSION >= 227 && VK_EXT_legacy_dithering
bool compare_VkPhysicalDeviceLegacyDitheringFeaturesEXT(
    VkPhysicalDeviceLegacyDitheringFeaturesEXT const *s1,
    VkPhysicalDeviceLegacyDitheringFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 284 && VK_EXT_legacy_vertex_attributes
bool compare_VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT(
    VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT const *s1,
    VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 284 && VK_EXT_legacy_vertex_attributes
bool compare_VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT(
    VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT const *s1,
    VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT const *s2);
#endif

bool compare_VkPhysicalDeviceLimits(VkPhysicalDeviceLimits const *s1,
                                    VkPhysicalDeviceLimits const *s2);

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceLineRasterizationFeatures(
    VkPhysicalDeviceLineRasterizationFeatures const *s1,
    VkPhysicalDeviceLineRasterizationFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesKHR(
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesKHR(
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceLineRasterizationProperties(
    VkPhysicalDeviceLineRasterizationProperties const *s1,
    VkPhysicalDeviceLineRasterizationProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesKHR(
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesKHR(
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_NV_linear_color_attachment
bool compare_VkPhysicalDeviceLinearColorAttachmentFeaturesNV(
    VkPhysicalDeviceLinearColorAttachmentFeaturesNV const *s1,
    VkPhysicalDeviceLinearColorAttachmentFeaturesNV const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMaintenance3Properties(
    VkPhysicalDeviceMaintenance3Properties const *s1,
    VkPhysicalDeviceMaintenance3Properties const *s2);
#endif

#if VK_KHR_maintenance3
bool compare_VkPhysicalDeviceMaintenance3PropertiesKHR(
    VkPhysicalDeviceMaintenance3PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance3PropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceMaintenance4Features(VkPhysicalDeviceMaintenance4Features const *s1,
                                                  VkPhysicalDeviceMaintenance4Features const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceMaintenance4Properties(
    VkPhysicalDeviceMaintenance4Properties const *s1,
    VkPhysicalDeviceMaintenance4Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceMaintenance5Features(VkPhysicalDeviceMaintenance5Features const *s1,
                                                  VkPhysicalDeviceMaintenance5Features const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkPhysicalDeviceMaintenance5FeaturesKHR(
    VkPhysicalDeviceMaintenance5FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance5FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkPhysicalDeviceMaintenance5FeaturesKHR(
    VkPhysicalDeviceMaintenance5FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance5FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceMaintenance5Properties(
    VkPhysicalDeviceMaintenance5Properties const *s1,
    VkPhysicalDeviceMaintenance5Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkPhysicalDeviceMaintenance5PropertiesKHR(
    VkPhysicalDeviceMaintenance5PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance5PropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkPhysicalDeviceMaintenance5PropertiesKHR(
    VkPhysicalDeviceMaintenance5PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance5PropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceMaintenance6Features(VkPhysicalDeviceMaintenance6Features const *s1,
                                                  VkPhysicalDeviceMaintenance6Features const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6
bool compare_VkPhysicalDeviceMaintenance6FeaturesKHR(
    VkPhysicalDeviceMaintenance6FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance6FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6
bool compare_VkPhysicalDeviceMaintenance6FeaturesKHR(
    VkPhysicalDeviceMaintenance6FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance6FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceMaintenance6Properties(
    VkPhysicalDeviceMaintenance6Properties const *s1,
    VkPhysicalDeviceMaintenance6Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6
bool compare_VkPhysicalDeviceMaintenance6PropertiesKHR(
    VkPhysicalDeviceMaintenance6PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance6PropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6
bool compare_VkPhysicalDeviceMaintenance6PropertiesKHR(
    VkPhysicalDeviceMaintenance6PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance6PropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7
bool compare_VkPhysicalDeviceMaintenance7FeaturesKHR(
    VkPhysicalDeviceMaintenance7FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance7FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7
bool compare_VkPhysicalDeviceMaintenance7PropertiesKHR(
    VkPhysicalDeviceMaintenance7PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance7PropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 305 && VK_KHR_maintenance8
bool compare_VkPhysicalDeviceMaintenance8FeaturesKHR(
    VkPhysicalDeviceMaintenance8FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance8FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9
bool compare_VkPhysicalDeviceMaintenance9FeaturesKHR(
    VkPhysicalDeviceMaintenance9FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance9FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9
bool compare_VkPhysicalDeviceMaintenance9PropertiesKHR(
    VkPhysicalDeviceMaintenance9PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance9PropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed
bool compare_VkPhysicalDeviceMapMemoryPlacedFeaturesEXT(
    VkPhysicalDeviceMapMemoryPlacedFeaturesEXT const *s1,
    VkPhysicalDeviceMapMemoryPlacedFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed
bool compare_VkPhysicalDeviceMapMemoryPlacedPropertiesEXT(
    VkPhysicalDeviceMapMemoryPlacedPropertiesEXT const *s1,
    VkPhysicalDeviceMapMemoryPlacedPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_budget
bool compare_VkPhysicalDeviceMemoryBudgetPropertiesEXT(
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *s1,
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkPhysicalDeviceMemoryDecompressionFeaturesNV(
    VkPhysicalDeviceMemoryDecompressionFeaturesNV const *s1,
    VkPhysicalDeviceMemoryDecompressionFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkPhysicalDeviceMemoryDecompressionPropertiesNV(
    VkPhysicalDeviceMemoryDecompressionPropertiesNV const *s1,
    VkPhysicalDeviceMemoryDecompressionPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
bool compare_VkPhysicalDeviceMemoryPriorityFeaturesEXT(
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *s1,
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *s2);
#endif

bool compare_VkPhysicalDeviceMemoryProperties(VkPhysicalDeviceMemoryProperties const *s1,
                                              VkPhysicalDeviceMemoryProperties const *s2);

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMemoryProperties2(VkPhysicalDeviceMemoryProperties2 const *s1,
                                               VkPhysicalDeviceMemoryProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceMemoryProperties2KHR(VkPhysicalDeviceMemoryProperties2KHR const *s1,
                                                  VkPhysicalDeviceMemoryProperties2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderFeaturesEXT(VkPhysicalDeviceMeshShaderFeaturesEXT const *s1,
                                                   VkPhysicalDeviceMeshShaderFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderFeaturesNV(VkPhysicalDeviceMeshShaderFeaturesNV const *s1,
                                                  VkPhysicalDeviceMeshShaderFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderPropertiesEXT(
    VkPhysicalDeviceMeshShaderPropertiesEXT const *s1,
    VkPhysicalDeviceMeshShaderPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderPropertiesNV(
    VkPhysicalDeviceMeshShaderPropertiesNV const *s1,
    VkPhysicalDeviceMeshShaderPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkPhysicalDeviceMultiDrawFeaturesEXT(VkPhysicalDeviceMultiDrawFeaturesEXT const *s1,
                                                  VkPhysicalDeviceMultiDrawFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkPhysicalDeviceMultiDrawPropertiesEXT(
    VkPhysicalDeviceMultiDrawPropertiesEXT const *s1,
    VkPhysicalDeviceMultiDrawPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(
    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT const *s1,
    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMultiviewFeatures(VkPhysicalDeviceMultiviewFeatures const *s1,
                                               VkPhysicalDeviceMultiviewFeatures const *s2);
#endif

#if VK_KHR_multiview
bool compare_VkPhysicalDeviceMultiviewFeaturesKHR(VkPhysicalDeviceMultiviewFeaturesKHR const *s1,
                                                  VkPhysicalDeviceMultiviewFeaturesKHR const *s2);
#endif

#if VK_NVX_multiview_per_view_attributes
bool compare_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *s1,
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_QCOM_multiview_per_view_render_areas
bool compare_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(
    VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM const *s1,
    VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 236 && VK_QCOM_multiview_per_view_viewports
bool compare_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(
    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM const *s1,
    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMultiviewProperties(VkPhysicalDeviceMultiviewProperties const *s1,
                                                 VkPhysicalDeviceMultiviewProperties const *s2);
#endif

#if VK_KHR_multiview
bool compare_VkPhysicalDeviceMultiviewPropertiesKHR(
    VkPhysicalDeviceMultiviewPropertiesKHR const *s1,
    VkPhysicalDeviceMultiviewPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT const *s1,
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type
bool compare_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s1,
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type
bool compare_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s1,
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 267 && VK_EXT_nested_command_buffer
bool compare_VkPhysicalDeviceNestedCommandBufferFeaturesEXT(
    VkPhysicalDeviceNestedCommandBufferFeaturesEXT const *s1,
    VkPhysicalDeviceNestedCommandBufferFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 267 && VK_EXT_nested_command_buffer
bool compare_VkPhysicalDeviceNestedCommandBufferPropertiesEXT(
    VkPhysicalDeviceNestedCommandBufferPropertiesEXT const *s1,
    VkPhysicalDeviceNestedCommandBufferPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_non_seamless_cube_map
bool compare_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(
    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT const *s1,
    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkPhysicalDeviceOpacityMicromapFeaturesEXT(
    VkPhysicalDeviceOpacityMicromapFeaturesEXT const *s1,
    VkPhysicalDeviceOpacityMicromapFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkPhysicalDeviceOpacityMicromapPropertiesEXT(
    VkPhysicalDeviceOpacityMicromapPropertiesEXT const *s1,
    VkPhysicalDeviceOpacityMicromapPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkPhysicalDeviceOpticalFlowFeaturesNV(VkPhysicalDeviceOpticalFlowFeaturesNV const *s1,
                                                   VkPhysicalDeviceOpticalFlowFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkPhysicalDeviceOpticalFlowPropertiesNV(
    VkPhysicalDeviceOpticalFlowPropertiesNV const *s1,
    VkPhysicalDeviceOpticalFlowPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 95 && VK_EXT_pci_bus_info
bool compare_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s1,
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 96 && VK_EXT_pci_bus_info
bool compare_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s1,
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 191 && VK_EXT_pageable_device_local_memory
bool compare_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *s1,
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV(
    VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV const *s1,
    VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV(
    VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV const *s1,
    VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_NV_per_stage_descriptor_set
bool compare_VkPhysicalDevicePerStageDescriptorSetFeaturesNV(
    VkPhysicalDevicePerStageDescriptorSetFeaturesNV const *s1,
    VkPhysicalDevicePerStageDescriptorSetFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPhysicalDevicePerformanceQueryFeaturesKHR(
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *s1,
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPhysicalDevicePerformanceQueryPropertiesKHR(
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *s1,
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPhysicalDevicePipelineBinaryFeaturesKHR(
    VkPhysicalDevicePipelineBinaryFeaturesKHR const *s1,
    VkPhysicalDevicePipelineBinaryFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPhysicalDevicePipelineBinaryPropertiesKHR(
    VkPhysicalDevicePipelineBinaryPropertiesKHR const *s1,
    VkPhysicalDevicePipelineBinaryPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDevicePipelineCreationCacheControlFeatures(
    VkPhysicalDevicePipelineCreationCacheControlFeatures const *s1,
    VkPhysicalDevicePipelineCreationCacheControlFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_cache_control
bool compare_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s1,
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_cache_control
bool compare_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s1,
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *s1,
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 240 && VK_EXT_pipeline_library_group_handles
bool compare_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(
    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT const *s1,
    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 305 && VK_ARM_pipeline_opacity_micromap
bool compare_VkPhysicalDevicePipelineOpacityMicromapFeaturesARM(
    VkPhysicalDevicePipelineOpacityMicromapFeaturesARM const *s1,
    VkPhysicalDevicePipelineOpacityMicromapFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPhysicalDevicePipelinePropertiesFeaturesEXT(
    VkPhysicalDevicePipelinePropertiesFeaturesEXT const *s1,
    VkPhysicalDevicePipelinePropertiesFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDevicePipelineProtectedAccessFeatures(
    VkPhysicalDevicePipelineProtectedAccessFeatures const *s1,
    VkPhysicalDevicePipelineProtectedAccessFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_protected_access
bool compare_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_protected_access
bool compare_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDevicePipelineRobustnessFeatures(
    VkPhysicalDevicePipelineRobustnessFeatures const *s1,
    VkPhysicalDevicePipelineRobustnessFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessFeaturesEXT(
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessFeaturesEXT(
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDevicePipelineRobustnessProperties(
    VkPhysicalDevicePipelineRobustnessProperties const *s1,
    VkPhysicalDevicePipelineRobustnessProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessPropertiesEXT(
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessPropertiesEXT(
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDevicePointClippingProperties(
    VkPhysicalDevicePointClippingProperties const *s1,
    VkPhysicalDevicePointClippingProperties const *s2);
#endif

#if VK_KHR_maintenance2
bool compare_VkPhysicalDevicePointClippingPropertiesKHR(
    VkPhysicalDevicePointClippingPropertiesKHR const *s1,
    VkPhysicalDevicePointClippingPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDevicePortabilitySubsetFeaturesKHR(
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *s1,
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDevicePortabilitySubsetPropertiesKHR(
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *s1,
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkPhysicalDevicePresentBarrierFeaturesNV(
    VkPhysicalDevicePresentBarrierFeaturesNV const *s1,
    VkPhysicalDevicePresentBarrierFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_id2
bool compare_VkPhysicalDevicePresentId2FeaturesKHR(VkPhysicalDevicePresentId2FeaturesKHR const *s1,
                                                   VkPhysicalDevicePresentId2FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
bool compare_VkPhysicalDevicePresentIdFeaturesKHR(VkPhysicalDevicePresentIdFeaturesKHR const *s1,
                                                  VkPhysicalDevicePresentIdFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 308 && VK_NV_present_metering && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDevicePresentMeteringFeaturesNV(
    VkPhysicalDevicePresentMeteringFeaturesNV const *s1,
    VkPhysicalDevicePresentMeteringFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 297 && VK_EXT_present_mode_fifo_latest_ready
bool compare_VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT(
    VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT const *s1,
    VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2
bool compare_VkPhysicalDevicePresentWait2FeaturesKHR(
    VkPhysicalDevicePresentWait2FeaturesKHR const *s1,
    VkPhysicalDevicePresentWait2FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_wait
bool compare_VkPhysicalDevicePresentWaitFeaturesKHR(
    VkPhysicalDevicePresentWaitFeaturesKHR const *s1,
    VkPhysicalDevicePresentWaitFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkPhysicalDevicePresentationPropertiesANDROID(
    VkPhysicalDevicePresentationPropertiesANDROID const *s1,
    VkPhysicalDevicePresentationPropertiesANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 190 && VK_EXT_primitive_topology_list_restart
bool compare_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *s1,
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_primitives_generated_query
bool compare_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(
    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT const *s1,
    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDevicePrivateDataFeatures(VkPhysicalDevicePrivateDataFeatures const *s1,
                                                 VkPhysicalDevicePrivateDataFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data
bool compare_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *s1,
    VkPhysicalDevicePrivateDataFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_private_data
bool compare_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *s1,
    VkPhysicalDevicePrivateDataFeaturesEXT const *s2);
#endif

bool compare_VkPhysicalDeviceProperties(VkPhysicalDeviceProperties const *s1,
                                        VkPhysicalDeviceProperties const *s2);

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProperties2(VkPhysicalDeviceProperties2 const *s1,
                                         VkPhysicalDeviceProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceProperties2KHR(VkPhysicalDeviceProperties2KHR const *s1,
                                            VkPhysicalDeviceProperties2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProtectedMemoryFeatures(
    VkPhysicalDeviceProtectedMemoryFeatures const *s1,
    VkPhysicalDeviceProtectedMemoryFeatures const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProtectedMemoryProperties(
    VkPhysicalDeviceProtectedMemoryProperties const *s1,
    VkPhysicalDeviceProtectedMemoryProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPhysicalDeviceProvokingVertexFeaturesEXT(
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *s1,
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPhysicalDeviceProvokingVertexPropertiesEXT(
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *s1,
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDevicePushDescriptorProperties(
    VkPhysicalDevicePushDescriptorProperties const *s1,
    VkPhysicalDevicePushDescriptorProperties const *s2);
#endif

#if VK_HEADER_VERSION <= 302 && VK_KHR_push_descriptor
bool compare_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s1,
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_push_descriptor
bool compare_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s1,
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM(
    VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM const *s1,
    VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_rgba10x6_formats
bool compare_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *s1,
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 200 && VK_HEADER_VERSION <= 224 &&                                        \
    VK_ARM_rasterization_order_attachment_access
bool compare_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s1,
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_ARM_rasterization_order_attachment_access
bool compare_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s1,
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_rasterization_order_attachment_access
bool compare_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT const *s1,
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 279 && VK_NV_raw_access_chains
bool compare_VkPhysicalDeviceRawAccessChainsFeaturesNV(
    VkPhysicalDeviceRawAccessChainsFeaturesNV const *s1,
    VkPhysicalDeviceRawAccessChainsFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_query
bool compare_VkPhysicalDeviceRayQueryFeaturesKHR(VkPhysicalDeviceRayQueryFeaturesKHR const *s1,
                                                 VkPhysicalDeviceRayQueryFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceRayTracingFeaturesKHR(VkPhysicalDeviceRayTracingFeaturesKHR const *s1,
                                                   VkPhysicalDeviceRayTracingFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder
bool compare_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(
    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder
bool compare_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(
    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV const *s1,
    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres
bool compare_VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV(
    VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_KHR_ray_tracing_maintenance1
bool compare_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(
    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *s1,
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 249 && VK_KHR_ray_tracing_position_fetch
bool compare_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(
    VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceRayTracingPropertiesKHR(
    VkPhysicalDeviceRayTracingPropertiesKHR const *s1,
    VkPhysicalDeviceRayTracingPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkPhysicalDeviceRayTracingPropertiesNV(
    VkPhysicalDeviceRayTracingPropertiesNV const *s1,
    VkPhysicalDeviceRayTracingPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 280 && VK_NV_ray_tracing_validation
bool compare_VkPhysicalDeviceRayTracingValidationFeaturesNV(
    VkPhysicalDeviceRayTracingValidationFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingValidationFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkPhysicalDeviceRaytracingPropertiesNVX(
    VkPhysicalDeviceRaytracingPropertiesNVX const *s1,
    VkPhysicalDeviceRaytracingPropertiesNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 270 && VK_IMG_relaxed_line_rasterization
bool compare_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG(
    VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG const *s1,
    VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG const *s2);
#endif

#if VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped
bool compare_VkPhysicalDeviceRenderPassStripedFeaturesARM(
    VkPhysicalDeviceRenderPassStripedFeaturesARM const *s1,
    VkPhysicalDeviceRenderPassStripedFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped
bool compare_VkPhysicalDeviceRenderPassStripedPropertiesARM(
    VkPhysicalDeviceRenderPassStripedPropertiesARM const *s1,
    VkPhysicalDeviceRenderPassStripedPropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
bool compare_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *s1,
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 313 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *s1,
    VkPhysicalDeviceRobustness2FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 314 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *s1,
    VkPhysicalDeviceRobustness2FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 314 && VK_KHR_robustness2
bool compare_VkPhysicalDeviceRobustness2FeaturesKHR(
    VkPhysicalDeviceRobustness2FeaturesKHR const *s1,
    VkPhysicalDeviceRobustness2FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 313 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *s1,
    VkPhysicalDeviceRobustness2PropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 314 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *s1,
    VkPhysicalDeviceRobustness2PropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 314 && VK_KHR_robustness2
bool compare_VkPhysicalDeviceRobustness2PropertiesKHR(
    VkPhysicalDeviceRobustness2PropertiesKHR const *s1,
    VkPhysicalDeviceRobustness2PropertiesKHR const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *s1,
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceSamplerFilterMinmaxProperties(
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *s1,
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *s2);
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_sampler_filter_minmax
bool compare_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s1,
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_sampler_filter_minmax
bool compare_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s1,
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *s1,
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *s1,
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceScalarBlockLayoutFeatures(
    VkPhysicalDeviceScalarBlockLayoutFeatures const *s1,
    VkPhysicalDeviceScalarBlockLayoutFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 93 && VK_HEADER_VERSION <= 130 && VK_EXT_scalar_block_layout
bool compare_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s1,
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_scalar_block_layout
bool compare_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s1,
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls
bool compare_VkPhysicalDeviceSchedulingControlsFeaturesARM(
    VkPhysicalDeviceSchedulingControlsFeaturesARM const *s1,
    VkPhysicalDeviceSchedulingControlsFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls
bool compare_VkPhysicalDeviceSchedulingControlsPropertiesARM(
    VkPhysicalDeviceSchedulingControlsPropertiesARM const *s1,
    VkPhysicalDeviceSchedulingControlsPropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *s1,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s1,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s1,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 278 && VK_NV_shader_atomic_float16_vector
bool compare_VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(
    VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV const *s1,
    VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 185 && VK_EXT_shader_atomic_float2
bool compare_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *s1,
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_shader_atomic_float
bool compare_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *s1,
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderAtomicInt64Features(
    VkPhysicalDeviceShaderAtomicInt64Features const *s1,
    VkPhysicalDeviceShaderAtomicInt64Features const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_atomic_int64
bool compare_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s1,
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_shader_atomic_int64
bool compare_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s1,
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 311 && VK_KHR_shader_bfloat16
bool compare_VkPhysicalDeviceShaderBfloat16FeaturesKHR(
    VkPhysicalDeviceShaderBfloat16FeaturesKHR const *s1,
    VkPhysicalDeviceShaderBfloat16FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_shader_clock
bool compare_VkPhysicalDeviceShaderClockFeaturesKHR(
    VkPhysicalDeviceShaderClockFeaturesKHR const *s1,
    VkPhysicalDeviceShaderClockFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 231 && VK_ARM_shader_core_builtins
bool compare_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(
    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM const *s1,
    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 231 && VK_HEADER_VERSION <= 231 && VK_ARM_shader_core_builtins
bool compare_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s1,
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 232 && VK_ARM_shader_core_builtins
bool compare_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s1,
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2
bool compare_VkPhysicalDeviceShaderCoreProperties2AMD(
    VkPhysicalDeviceShaderCoreProperties2AMD const *s1,
    VkPhysicalDeviceShaderCoreProperties2AMD const *s2);
#endif

#if VK_AMD_shader_core_properties
bool compare_VkPhysicalDeviceShaderCorePropertiesAMD(
    VkPhysicalDeviceShaderCorePropertiesAMD const *s1,
    VkPhysicalDeviceShaderCorePropertiesAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_ARM_shader_core_properties
bool compare_VkPhysicalDeviceShaderCorePropertiesARM(
    VkPhysicalDeviceShaderCorePropertiesARM const *s1,
    VkPhysicalDeviceShaderCorePropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures const *s1,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 113 && VK_HEADER_VERSION <= 203 &&                                        \
    VK_EXT_shader_demote_to_helper_invocation
bool compare_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s1,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_shader_demote_to_helper_invocation
bool compare_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s1,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION <= 105 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *s1,
    VkPhysicalDeviceShaderDrawParameterFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *s1,
    VkPhysicalDeviceShaderDrawParameterFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceShaderDrawParametersFeatures(
    VkPhysicalDeviceShaderDrawParametersFeatures const *s1,
    VkPhysicalDeviceShaderDrawParametersFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 215 && VK_AMD_shader_early_and_late_fragment_tests
bool compare_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD const *s1,
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 214 && VK_HEADER_VERSION <= 214 &&                                        \
    VK_AMD_shader_early_and_late_fragment_tests
bool compare_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT const *s1,
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&              \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceShaderEnqueueFeaturesAMDX(
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *s1,
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *s2);
#endif

#if VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceShaderEnqueueFeaturesAMDX(
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *s1,
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&              \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceShaderEnqueuePropertiesAMDX(
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *s1,
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *s2);
#endif

#if VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceShaderEnqueuePropertiesAMDX(
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *s1,
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceShaderExpectAssumeFeatures(
    VkPhysicalDeviceShaderExpectAssumeFeatures const *s1,
    VkPhysicalDeviceShaderExpectAssumeFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_expect_assume
bool compare_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR(
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *s1,
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_shader_expect_assume
bool compare_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR(
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *s1,
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderFloat16Int8Features(
    VkPhysicalDeviceShaderFloat16Int8Features const *s1,
    VkPhysicalDeviceShaderFloat16Int8Features const *s2);
#endif

#if VK_HEADER_VERSION >= 115 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_EXT_shader_float8
bool compare_VkPhysicalDeviceShaderFloat8FeaturesEXT(
    VkPhysicalDeviceShaderFloat8FeaturesEXT const *s1,
    VkPhysicalDeviceShaderFloat8FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceShaderFloatControls2Features(
    VkPhysicalDeviceShaderFloatControls2Features const *s1,
    VkPhysicalDeviceShaderFloatControls2Features const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_float_controls2
bool compare_VkPhysicalDeviceShaderFloatControls2FeaturesKHR(
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *s1,
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_shader_float_controls2
bool compare_VkPhysicalDeviceShaderFloatControls2FeaturesKHR(
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *s1,
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 155 && VK_EXT_shader_image_atomic_int64
bool compare_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *s1,
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shader_image_footprint
bool compare_VkPhysicalDeviceShaderImageFootprintFeaturesNV(
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *s1,
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderIntegerDotProductFeatures(
    VkPhysicalDeviceShaderIntegerDotProductFeatures const *s1,
    VkPhysicalDeviceShaderIntegerDotProductFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 190 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderIntegerDotProductProperties(
    VkPhysicalDeviceShaderIntegerDotProductProperties const *s1,
    VkPhysicalDeviceShaderIntegerDotProductProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 190 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 115 && VK_INTEL_shader_integer_functions2
bool compare_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *s1,
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 114 && VK_INTEL_shader_integer_functions2
bool compare_VkPhysicalDeviceShaderIntegerFunctions2INTEL(
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *s1,
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_KHR_shader_maximal_reconvergence
bool compare_VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(
    VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR const *s1,
    VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(
    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT const *s1,
    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(
    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT const *s1,
    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_object
bool compare_VkPhysicalDeviceShaderObjectFeaturesEXT(
    VkPhysicalDeviceShaderObjectFeaturesEXT const *s1,
    VkPhysicalDeviceShaderObjectFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_object
bool compare_VkPhysicalDeviceShaderObjectPropertiesEXT(
    VkPhysicalDeviceShaderObjectPropertiesEXT const *s1,
    VkPhysicalDeviceShaderObjectPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_KHR_shader_quad_control
bool compare_VkPhysicalDeviceShaderQuadControlFeaturesKHR(
    VkPhysicalDeviceShaderQuadControlFeaturesKHR const *s1,
    VkPhysicalDeviceShaderQuadControlFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 288 && VK_KHR_shader_relaxed_extended_instruction
bool compare_VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(
    VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR const *s1,
    VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 286 && VK_EXT_shader_replicated_composites
bool compare_VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT(
    VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT const *s1,
    VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
bool compare_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *s1,
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
bool compare_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *s1,
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *s1,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 123 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_subgroup_extended_types
bool compare_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_shader_subgroup_extended_types
bool compare_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceShaderSubgroupRotateFeatures(
    VkPhysicalDeviceShaderSubgroupRotateFeatures const *s1,
    VkPhysicalDeviceShaderSubgroupRotateFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_subgroup_rotate
bool compare_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_shader_subgroup_rotate
bool compare_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 180 && VK_KHR_shader_subgroup_uniform_control_flow
bool compare_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderTerminateInvocationFeatures(
    VkPhysicalDeviceShaderTerminateInvocationFeatures const *s1,
    VkPhysicalDeviceShaderTerminateInvocationFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_terminate_invocation
bool compare_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s1,
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_shader_terminate_invocation
bool compare_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s1,
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_tile_image
bool compare_VkPhysicalDeviceShaderTileImageFeaturesEXT(
    VkPhysicalDeviceShaderTileImageFeaturesEXT const *s1,
    VkPhysicalDeviceShaderTileImageFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_tile_image
bool compare_VkPhysicalDeviceShaderTileImagePropertiesEXT(
    VkPhysicalDeviceShaderTileImagePropertiesEXT const *s1,
    VkPhysicalDeviceShaderTileImagePropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPhysicalDeviceShadingRateImageFeaturesNV(
    VkPhysicalDeviceShadingRateImageFeaturesNV const *s1,
    VkPhysicalDeviceShadingRateImageFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPhysicalDeviceShadingRateImagePropertiesNV(
    VkPhysicalDeviceShadingRateImagePropertiesNV const *s1,
    VkPhysicalDeviceShadingRateImagePropertiesNV const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSparseImageFormatInfo2(
    VkPhysicalDeviceSparseImageFormatInfo2 const *s1,
    VkPhysicalDeviceSparseImageFormatInfo2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceSparseImageFormatInfo2KHR(
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *s1,
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *s2);
#endif

bool compare_VkPhysicalDeviceSparseProperties(VkPhysicalDeviceSparseProperties const *s1,
                                              VkPhysicalDeviceSparseProperties const *s2);

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSubgroupProperties(VkPhysicalDeviceSubgroupProperties const *s1,
                                                VkPhysicalDeviceSubgroupProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSubgroupSizeControlFeatures(
    VkPhysicalDeviceSubgroupSizeControlFeatures const *s1,
    VkPhysicalDeviceSubgroupSizeControlFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 118 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSubgroupSizeControlProperties(
    VkPhysicalDeviceSubgroupSizeControlProperties const *s1,
    VkPhysicalDeviceSubgroupSizeControlProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(
    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT const *s1,
    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *s1,
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *s1,
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *s2);
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkPhysicalDeviceSurfaceInfo2KHR(VkPhysicalDeviceSurfaceInfo2KHR const *s1,
                                             VkPhysicalDeviceSurfaceInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT const *s1,
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSynchronization2Features(
    VkPhysicalDeviceSynchronization2Features const *s1,
    VkPhysicalDeviceSynchronization2Features const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s1,
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s1,
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkPhysicalDeviceTensorFeaturesARM(VkPhysicalDeviceTensorFeaturesARM const *s1,
                                               VkPhysicalDeviceTensorFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkPhysicalDeviceTensorPropertiesARM(VkPhysicalDeviceTensorPropertiesARM const *s1,
                                                 VkPhysicalDeviceTensorPropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
bool compare_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *s1,
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceTexelBufferAlignmentProperties(
    VkPhysicalDeviceTexelBufferAlignmentProperties const *s1,
    VkPhysicalDeviceTexelBufferAlignmentProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 113 && VK_HEADER_VERSION <= 203 && VK_EXT_texel_buffer_alignment
bool compare_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s1,
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_texel_buffer_alignment
bool compare_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s1,
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceTextureCompressionASTCHDRFeatures(
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures const *s1,
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 203 && VK_EXT_texture_compression_astc_hdr
bool compare_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s1,
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_texture_compression_astc_hdr
bool compare_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s1,
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap
bool compare_VkPhysicalDeviceTileMemoryHeapFeaturesQCOM(
    VkPhysicalDeviceTileMemoryHeapFeaturesQCOM const *s1,
    VkPhysicalDeviceTileMemoryHeapFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap
bool compare_VkPhysicalDeviceTileMemoryHeapPropertiesQCOM(
    VkPhysicalDeviceTileMemoryHeapPropertiesQCOM const *s1,
    VkPhysicalDeviceTileMemoryHeapPropertiesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties
bool compare_VkPhysicalDeviceTilePropertiesFeaturesQCOM(
    VkPhysicalDeviceTilePropertiesFeaturesQCOM const *s1,
    VkPhysicalDeviceTilePropertiesFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkPhysicalDeviceTileShadingFeaturesQCOM(
    VkPhysicalDeviceTileShadingFeaturesQCOM const *s1,
    VkPhysicalDeviceTileShadingFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkPhysicalDeviceTileShadingPropertiesQCOM(
    VkPhysicalDeviceTileShadingPropertiesQCOM const *s1,
    VkPhysicalDeviceTileShadingPropertiesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceTimelineSemaphoreFeatures(
    VkPhysicalDeviceTimelineSemaphoreFeatures const *s1,
    VkPhysicalDeviceTimelineSemaphoreFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceTimelineSemaphoreProperties(
    VkPhysicalDeviceTimelineSemaphoreProperties const *s1,
    VkPhysicalDeviceTimelineSemaphoreProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceToolProperties(VkPhysicalDeviceToolProperties const *s1,
                                            VkPhysicalDeviceToolProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 130 && VK_HEADER_VERSION <= 203 && VK_EXT_tooling_info
bool compare_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *s1,
                                               VkPhysicalDeviceToolPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_tooling_info
bool compare_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *s1,
                                               VkPhysicalDeviceToolPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *s1,
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *s1,
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_unified_image_layouts
bool compare_VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR(
    VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR const *s1,
    VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *s1,
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 108 && VK_HEADER_VERSION <= 130 && VK_KHR_uniform_buffer_standard_layout
bool compare_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s1,
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_uniform_buffer_standard_layout
bool compare_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s1,
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION <= 105 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *s1,
    VkPhysicalDeviceVariablePointerFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *s1,
    VkPhysicalDeviceVariablePointerFeatures const *s2);
#endif

#if VK_HEADER_VERSION <= 105 && VK_KHR_variable_pointers
bool compare_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s1,
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers
bool compare_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s1,
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceVariablePointersFeatures(
    VkPhysicalDeviceVariablePointersFeatures const *s1,
    VkPhysicalDeviceVariablePointersFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers
bool compare_VkPhysicalDeviceVariablePointersFeaturesKHR(
    VkPhysicalDeviceVariablePointersFeaturesKHR const *s1,
    VkPhysicalDeviceVariablePointersFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeatures(
    VkPhysicalDeviceVertexAttributeDivisorFeatures const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceVertexAttributeDivisorProperties(
    VkPhysicalDeviceVertexAttributeDivisorProperties const *s1,
    VkPhysicalDeviceVertexAttributeDivisorProperties const *s2);
#endif

#if VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *s1,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *s1,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_EXT_vertex_attribute_robustness
bool compare_VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT(
    VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT const *s1,
    VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
bool compare_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *s1,
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9
bool compare_VkPhysicalDeviceVideoDecodeVP9FeaturesKHR(
    VkPhysicalDeviceVideoDecodeVP9FeaturesKHR const *s1,
    VkPhysicalDeviceVideoDecodeVP9FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkPhysicalDeviceVideoEncodeAV1FeaturesKHR(
    VkPhysicalDeviceVideoEncodeAV1FeaturesKHR const *s1,
    VkPhysicalDeviceVideoEncodeAV1FeaturesKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR(
    VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR const *s1,
    VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map
bool compare_VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR(
    VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR const *s1,
    VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *s1,
                                                VkPhysicalDeviceVideoFormatInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *s1,
                                                VkPhysicalDeviceVideoFormatInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_maintenance1
bool compare_VkPhysicalDeviceVideoMaintenance1FeaturesKHR(
    VkPhysicalDeviceVideoMaintenance1FeaturesKHR const *s1,
    VkPhysicalDeviceVideoMaintenance1FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2
bool compare_VkPhysicalDeviceVideoMaintenance2FeaturesKHR(
    VkPhysicalDeviceVideoMaintenance2FeaturesKHR const *s1,
    VkPhysicalDeviceVideoMaintenance2FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan11Features(VkPhysicalDeviceVulkan11Features const *s1,
                                              VkPhysicalDeviceVulkan11Features const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan11Properties(VkPhysicalDeviceVulkan11Properties const *s1,
                                                VkPhysicalDeviceVulkan11Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan12Features(VkPhysicalDeviceVulkan12Features const *s1,
                                              VkPhysicalDeviceVulkan12Features const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan12Properties(VkPhysicalDeviceVulkan12Properties const *s1,
                                                VkPhysicalDeviceVulkan12Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceVulkan13Features(VkPhysicalDeviceVulkan13Features const *s1,
                                              VkPhysicalDeviceVulkan13Features const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceVulkan13Properties(VkPhysicalDeviceVulkan13Properties const *s1,
                                                VkPhysicalDeviceVulkan13Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceVulkan14Features(VkPhysicalDeviceVulkan14Features const *s1,
                                              VkPhysicalDeviceVulkan14Features const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceVulkan14Properties(VkPhysicalDeviceVulkan14Properties const *s1,
                                                VkPhysicalDeviceVulkan14Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkanMemoryModelFeatures(
    VkPhysicalDeviceVulkanMemoryModelFeatures const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 97 && VK_KHR_vulkan_memory_model &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 118 && VK_HEADER_VERSION <= 130 && VK_KHR_vulkan_memory_model) ||        \
    (VK_HEADER_VERSION >= 98 && VK_HEADER_VERSION <= 117 && VK_KHR_vulkan_memory_model &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_vulkan_memory_model
bool compare_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPhysicalDeviceVulkanSC10Features(VkPhysicalDeviceVulkanSC10Features const *s1,
                                                VkPhysicalDeviceVulkanSC10Features const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPhysicalDeviceVulkanSC10Properties(VkPhysicalDeviceVulkanSC10Properties const *s1,
                                                  VkPhysicalDeviceVulkanSC10Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_workgroup_memory_explicit_layout
bool compare_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *s1,
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_ycbcr_2plane_444_formats
bool compare_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *s1,
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_ycbcr_degamma
bool compare_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM(
    VkPhysicalDeviceYcbcrDegammaFeaturesQCOM const *s1,
    VkPhysicalDeviceYcbcrDegammaFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_ycbcr_image_arrays
bool compare_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *s1,
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 315 && VK_EXT_zero_initialize_device_memory
bool compare_VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT(
    VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT const *s1,
    VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures const *s1,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 168 && VK_HEADER_VERSION <= 203 && VK_KHR_zero_initialize_workgroup_memory
bool compare_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s1,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_zero_initialize_workgroup_memory
bool compare_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s1,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryCreateInfoKHR(VkPipelineBinaryCreateInfoKHR const *s1,
                                           VkPipelineBinaryCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryDataInfoKHR(VkPipelineBinaryDataInfoKHR const *s1,
                                         VkPipelineBinaryDataInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryDataKHR(VkPipelineBinaryDataKHR const *s1,
                                     VkPipelineBinaryDataKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryHandlesInfoKHR(VkPipelineBinaryHandlesInfoKHR const *s1,
                                            VkPipelineBinaryHandlesInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryInfoKHR(VkPipelineBinaryInfoKHR const *s1,
                                     VkPipelineBinaryInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryKeyKHR(VkPipelineBinaryKeyKHR const *s1,
                                    VkPipelineBinaryKeyKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryKeysAndDataKHR(VkPipelineBinaryKeysAndDataKHR const *s1,
                                            VkPipelineBinaryKeysAndDataKHR const *s2);
#endif

#if VK_HEADER_VERSION <= 240
bool compare_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *s1,
                                       VkPipelineCacheCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 241
bool compare_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *s1,
                                       VkPipelineCacheCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 184
bool compare_VkPipelineCacheHeaderVersionOne(VkPipelineCacheHeaderVersionOne const *s1,
                                             VkPipelineCacheHeaderVersionOne const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPipelineCacheHeaderVersionSafetyCriticalOne(
    VkPipelineCacheHeaderVersionSafetyCriticalOne const *s1,
    VkPipelineCacheHeaderVersionSafetyCriticalOne const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPipelineCacheSafetyCriticalIndexEntry(
    VkPipelineCacheSafetyCriticalIndexEntry const *s1,
    VkPipelineCacheSafetyCriticalIndexEntry const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPipelineCacheStageValidationIndexEntry(
    VkPipelineCacheStageValidationIndexEntry const *s1,
    VkPipelineCacheStageValidationIndexEntry const *s2);
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *s1,
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *s2);
#endif

bool compare_VkPipelineColorBlendAttachmentState(VkPipelineColorBlendAttachmentState const *s1,
                                                 VkPipelineColorBlendAttachmentState const *s2);

bool compare_VkPipelineColorBlendStateCreateInfo(VkPipelineColorBlendStateCreateInfo const *s1,
                                                 VkPipelineColorBlendStateCreateInfo const *s2);

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
bool compare_VkPipelineColorWriteCreateInfoEXT(VkPipelineColorWriteCreateInfoEXT const *s1,
                                               VkPipelineColorWriteCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control
bool compare_VkPipelineCompilerControlCreateInfoAMD(
    VkPipelineCompilerControlCreateInfoAMD const *s1,
    VkPipelineCompilerControlCreateInfoAMD const *s2);
#endif

#if VK_NV_framebuffer_mixed_samples
bool compare_VkPipelineCoverageModulationStateCreateInfoNV(
    VkPipelineCoverageModulationStateCreateInfoNV const *s1,
    VkPipelineCoverageModulationStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkPipelineCoverageReductionStateCreateInfoNV(
    VkPipelineCoverageReductionStateCreateInfoNV const *s1,
    VkPipelineCoverageReductionStateCreateInfoNV const *s2);
#endif

#if VK_NV_fragment_coverage_to_color
bool compare_VkPipelineCoverageToColorStateCreateInfoNV(
    VkPipelineCoverageToColorStateCreateInfoNV const *s1,
    VkPipelineCoverageToColorStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPipelineCreateFlags2CreateInfo(VkPipelineCreateFlags2CreateInfo const *s1,
                                              VkPipelineCreateFlags2CreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkPipelineCreateFlags2CreateInfoKHR(VkPipelineCreateFlags2CreateInfoKHR const *s1,
                                                 VkPipelineCreateFlags2CreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkPipelineCreateFlags2CreateInfoKHR(VkPipelineCreateFlags2CreateInfoKHR const *s1,
                                                 VkPipelineCreateFlags2CreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineCreateInfoKHR(VkPipelineCreateInfoKHR const *s1,
                                     VkPipelineCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineCreationFeedback(VkPipelineCreationFeedback const *s1,
                                        VkPipelineCreationFeedback const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineCreationFeedbackCreateInfo(VkPipelineCreationFeedbackCreateInfo const *s1,
                                                  VkPipelineCreationFeedbackCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *s1,
    VkPipelineCreationFeedbackCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *s1,
    VkPipelineCreationFeedbackCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackEXT(VkPipelineCreationFeedbackEXT const *s1,
                                           VkPipelineCreationFeedbackEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackEXT(VkPipelineCreationFeedbackEXT const *s1,
                                           VkPipelineCreationFeedbackEXT const *s2);
#endif

bool compare_VkPipelineDepthStencilStateCreateInfo(VkPipelineDepthStencilStateCreateInfo const *s1,
                                                   VkPipelineDepthStencilStateCreateInfo const *s2);

#if VK_EXT_discard_rectangles
bool compare_VkPipelineDiscardRectangleStateCreateInfoEXT(
    VkPipelineDiscardRectangleStateCreateInfoEXT const *s1,
    VkPipelineDiscardRectangleStateCreateInfoEXT const *s2);
#endif

bool compare_VkPipelineDynamicStateCreateInfo(VkPipelineDynamicStateCreateInfo const *s1,
                                              VkPipelineDynamicStateCreateInfo const *s2);

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutableInfoKHR(VkPipelineExecutableInfoKHR const *s1,
                                         VkPipelineExecutableInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutableInternalRepresentationKHR(
    VkPipelineExecutableInternalRepresentationKHR const *s1,
    VkPipelineExecutableInternalRepresentationKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutablePropertiesKHR(VkPipelineExecutablePropertiesKHR const *s1,
                                               VkPipelineExecutablePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutableStatisticKHR(VkPipelineExecutableStatisticKHR const *s1,
                                              VkPipelineExecutableStatisticKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered
bool compare_VkPipelineFragmentDensityMapLayeredCreateInfoVALVE(
    VkPipelineFragmentDensityMapLayeredCreateInfoVALVE const *s1,
    VkPipelineFragmentDensityMapLayeredCreateInfoVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPipelineFragmentShadingRateEnumStateCreateInfoNV(
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *s1,
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPipelineFragmentShadingRateStateCreateInfoKHR(
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *s1,
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute
bool compare_VkPipelineIndirectDeviceAddressInfoNV(VkPipelineIndirectDeviceAddressInfoNV const *s1,
                                                   VkPipelineIndirectDeviceAddressInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPipelineInfoEXT(VkPipelineInfoEXT const *s1, VkPipelineInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineInfoKHR(VkPipelineInfoKHR const *s1, VkPipelineInfoKHR const *s2);
#endif

bool compare_VkPipelineInputAssemblyStateCreateInfo(
    VkPipelineInputAssemblyStateCreateInfo const *s1,
    VkPipelineInputAssemblyStateCreateInfo const *s2);

bool compare_VkPipelineLayoutCreateInfo(VkPipelineLayoutCreateInfo const *s1,
                                        VkPipelineLayoutCreateInfo const *s2);

#if (VK_HEADER_VERSION >= 162 && VK_KHR_pipeline_library) ||                                       \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_pipeline_library &&            \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkPipelineLibraryCreateInfoKHR(VkPipelineLibraryCreateInfoKHR const *s1,
                                            VkPipelineLibraryCreateInfoKHR const *s2);
#endif

bool compare_VkPipelineMultisampleStateCreateInfo(VkPipelineMultisampleStateCreateInfo const *s1,
                                                  VkPipelineMultisampleStateCreateInfo const *s2);

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPipelineOfflineCreateInfo(VkPipelineOfflineCreateInfo const *s1,
                                         VkPipelineOfflineCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPipelinePoolSize(VkPipelinePoolSize const *s1, VkPipelinePoolSize const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPipelinePropertiesIdentifierEXT(VkPipelinePropertiesIdentifierEXT const *s1,
                                               VkPipelinePropertiesIdentifierEXT const *s2);
#endif

#if VK_EXT_conservative_rasterization
bool compare_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *s1,
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
bool compare_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *s1,
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPipelineRasterizationLineStateCreateInfo(
    VkPipelineRasterizationLineStateCreateInfo const *s1,
    VkPipelineRasterizationLineStateCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *s1,
    VkPipelineRasterizationLineStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *s1,
    VkPipelineRasterizationLineStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *s1,
    VkPipelineRasterizationLineStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoKHR(
    VkPipelineRasterizationLineStateCreateInfoKHR const *s1,
    VkPipelineRasterizationLineStateCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoKHR(
    VkPipelineRasterizationLineStateCreateInfoKHR const *s1,
    VkPipelineRasterizationLineStateCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *s1,
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *s2);
#endif

bool compare_VkPipelineRasterizationStateCreateInfo(
    VkPipelineRasterizationStateCreateInfo const *s1,
    VkPipelineRasterizationStateCreateInfo const *s2);

#if VK_AMD_rasterization_order
bool compare_VkPipelineRasterizationStateRasterizationOrderAMD(
    VkPipelineRasterizationStateRasterizationOrderAMD const *s1,
    VkPipelineRasterizationStateRasterizationOrderAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPipelineRasterizationStateStreamCreateInfoEXT(
    VkPipelineRasterizationStateStreamCreateInfoEXT const *s1,
    VkPipelineRasterizationStateStreamCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineRenderingCreateInfo(VkPipelineRenderingCreateInfo const *s1,
                                           VkPipelineRenderingCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering
bool compare_VkPipelineRenderingCreateInfoKHR(VkPipelineRenderingCreateInfoKHR const *s1,
                                              VkPipelineRenderingCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering
bool compare_VkPipelineRenderingCreateInfoKHR(VkPipelineRenderingCreateInfoKHR const *s1,
                                              VkPipelineRenderingCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
bool compare_VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *s1,
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPipelineRobustnessCreateInfo(VkPipelineRobustnessCreateInfo const *s1,
                                            VkPipelineRobustnessCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness
bool compare_VkPipelineRobustnessCreateInfoEXT(VkPipelineRobustnessCreateInfoEXT const *s1,
                                               VkPipelineRobustnessCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness
bool compare_VkPipelineRobustnessCreateInfoEXT(VkPipelineRobustnessCreateInfoEXT const *s1,
                                               VkPipelineRobustnessCreateInfoEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkPipelineSampleLocationsStateCreateInfoEXT(
    VkPipelineSampleLocationsStateCreateInfoEXT const *s1,
    VkPipelineSampleLocationsStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION <= 240
bool compare_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *s1,
                                             VkPipelineShaderStageCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 241
bool compare_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *s1,
                                             VkPipelineShaderStageCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPipelineShaderStageModuleIdentifierCreateInfoEXT(
    VkPipelineShaderStageModuleIdentifierCreateInfoEXT const *s1,
    VkPipelineShaderStageModuleIdentifierCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPipelineShaderStageNodeCreateInfoAMDX(
    VkPipelineShaderStageNodeCreateInfoAMDX const *s1,
    VkPipelineShaderStageNodeCreateInfoAMDX const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo const *s1,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control
bool compare_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s1,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control
bool compare_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s1,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPipelineTessellationDomainOriginStateCreateInfo(
    VkPipelineTessellationDomainOriginStateCreateInfo const *s1,
    VkPipelineTessellationDomainOriginStateCreateInfo const *s2);
#endif

#if VK_KHR_maintenance2
bool compare_VkPipelineTessellationDomainOriginStateCreateInfoKHR(
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *s1,
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *s2);
#endif

bool compare_VkPipelineTessellationStateCreateInfo(VkPipelineTessellationStateCreateInfo const *s1,
                                                   VkPipelineTessellationStateCreateInfo const *s2);

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPipelineVertexInputDivisorStateCreateInfo(
    VkPipelineVertexInputDivisorStateCreateInfo const *s1,
    VkPipelineVertexInputDivisorStateCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoKHR(
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoKHR(
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *s2);
#endif

bool compare_VkPipelineVertexInputStateCreateInfo(VkPipelineVertexInputStateCreateInfo const *s1,
                                                  VkPipelineVertexInputStateCreateInfo const *s2);

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *s1,
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control
bool compare_VkPipelineViewportDepthClampControlCreateInfoEXT(
    VkPipelineViewportDepthClampControlCreateInfoEXT const *s1,
    VkPipelineViewportDepthClampControlCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control
bool compare_VkPipelineViewportDepthClipControlCreateInfoEXT(
    VkPipelineViewportDepthClipControlCreateInfoEXT const *s1,
    VkPipelineViewportDepthClipControlCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
bool compare_VkPipelineViewportExclusiveScissorStateCreateInfoNV(
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *s1,
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPipelineViewportShadingRateImageStateCreateInfoNV(
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *s1,
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *s2);
#endif

bool compare_VkPipelineViewportStateCreateInfo(VkPipelineViewportStateCreateInfo const *s1,
                                               VkPipelineViewportStateCreateInfo const *s2);

#if VK_NV_viewport_swizzle
bool compare_VkPipelineViewportSwizzleStateCreateInfoNV(
    VkPipelineViewportSwizzleStateCreateInfoNV const *s1,
    VkPipelineViewportSwizzleStateCreateInfoNV const *s2);
#endif

#if VK_NV_clip_space_w_scaling
bool compare_VkPipelineViewportWScalingStateCreateInfoNV(
    VkPipelineViewportWScalingStateCreateInfoNV const *s1,
    VkPipelineViewportWScalingStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_frame_token
bool compare_VkPresentFrameTokenGGP(VkPresentFrameTokenGGP const *s1,
                                    VkPresentFrameTokenGGP const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_id2
bool compare_VkPresentId2KHR(VkPresentId2KHR const *s1, VkPresentId2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
bool compare_VkPresentIdKHR(VkPresentIdKHR const *s1, VkPresentIdKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_KHR_swapchain
bool compare_VkPresentInfoKHR(VkPresentInfoKHR const *s1, VkPresentInfoKHR const *s2);
#endif

#if VK_KHR_incremental_present
bool compare_VkPresentRegionKHR(VkPresentRegionKHR const *s1, VkPresentRegionKHR const *s2);
#endif

#if VK_KHR_incremental_present
bool compare_VkPresentRegionsKHR(VkPresentRegionsKHR const *s1, VkPresentRegionsKHR const *s2);
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPresentTimeGOOGLE(VkPresentTimeGOOGLE const *s1, VkPresentTimeGOOGLE const *s2);
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPresentTimesInfoGOOGLE(VkPresentTimesInfoGOOGLE const *s1,
                                      VkPresentTimesInfoGOOGLE const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2
bool compare_VkPresentWait2InfoKHR(VkPresentWait2InfoKHR const *s1,
                                   VkPresentWait2InfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPrivateDataSlotCreateInfo(VkPrivateDataSlotCreateInfo const *s1,
                                         VkPrivateDataSlotCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data
bool compare_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *s1,
                                            VkPrivateDataSlotCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_private_data
bool compare_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *s1,
                                            VkPrivateDataSlotCreateInfoEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkProtectedSubmitInfo(VkProtectedSubmitInfo const *s1,
                                   VkProtectedSubmitInfo const *s2);
#endif

bool compare_VkPushConstantRange(VkPushConstantRange const *s1, VkPushConstantRange const *s2);

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPushConstantsInfo(VkPushConstantsInfo const *s1, VkPushConstantsInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6
bool compare_VkPushConstantsInfoKHR(VkPushConstantsInfoKHR const *s1,
                                    VkPushConstantsInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6
bool compare_VkPushConstantsInfoKHR(VkPushConstantsInfoKHR const *s1,
                                    VkPushConstantsInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPushDescriptorSetInfo(VkPushDescriptorSetInfo const *s1,
                                     VkPushDescriptorSetInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6 &&                 \
    VK_KHR_push_descriptor
bool compare_VkPushDescriptorSetInfoKHR(VkPushDescriptorSetInfoKHR const *s1,
                                        VkPushDescriptorSetInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6 && VK_KHR_push_descriptor
bool compare_VkPushDescriptorSetInfoKHR(VkPushDescriptorSetInfoKHR const *s1,
                                        VkPushDescriptorSetInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPushDescriptorSetWithTemplateInfo(VkPushDescriptorSetWithTemplateInfo const *s1,
                                                 VkPushDescriptorSetWithTemplateInfo const *s2);
#endif

#if (VK_HEADER_VERSION >= 275 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor) ||                                                                    \
    (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 274 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor && VK_VERSION_1_1)
bool compare_VkPushDescriptorSetWithTemplateInfoKHR(
    VkPushDescriptorSetWithTemplateInfoKHR const *s1,
    VkPushDescriptorSetWithTemplateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6 && VK_KHR_push_descriptor
bool compare_VkPushDescriptorSetWithTemplateInfoKHR(
    VkPushDescriptorSetWithTemplateInfoKHR const *s1,
    VkPushDescriptorSetWithTemplateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 242 && VK_NV_low_latency
bool compare_VkQueryLowLatencySupportNV(VkQueryLowLatencySupportNV const *s1,
                                        VkQueryLowLatencySupportNV const *s2);
#endif

bool compare_VkQueryPoolCreateInfo(VkQueryPoolCreateInfo const *s1,
                                   VkQueryPoolCreateInfo const *s2);

#if VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 134 && VK_INTEL_performance_query
bool compare_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *s1,
                                        VkQueryPoolCreateInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query
bool compare_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *s1,
                                        VkQueryPoolCreateInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkQueryPoolPerformanceCreateInfoKHR(VkQueryPoolPerformanceCreateInfoKHR const *s1,
                                                 VkQueryPoolPerformanceCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query
bool compare_VkQueryPoolPerformanceQueryCreateInfoINTEL(
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *s1,
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *s2);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR(
    VkQueryPoolVideoEncodeFeedbackCreateInfoKHR const *s1,
    VkQueryPoolVideoEncodeFeedbackCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkQueueFamilyCheckpointProperties2NV(VkQueueFamilyCheckpointProperties2NV const *s1,
                                                  VkQueueFamilyCheckpointProperties2NV const *s2);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_device_diagnostic_checkpoints &&                            \
     (VK_VERSION_1_3 || VK_KHR_synchronization2)) ||                                               \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_synchronization2 &&            \
     VK_NV_device_diagnostic_checkpoints) ||                                                       \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_KHR_synchronization2)
bool compare_VkQueueFamilyCheckpointProperties2NV(VkQueueFamilyCheckpointProperties2NV const *s1,
                                                  VkQueueFamilyCheckpointProperties2NV const *s2);
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
bool compare_VkQueueFamilyCheckpointPropertiesNV(VkQueueFamilyCheckpointPropertiesNV const *s1,
                                                 VkQueueFamilyCheckpointPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkQueueFamilyDataGraphProcessingEnginePropertiesARM(
    VkQueueFamilyDataGraphProcessingEnginePropertiesARM const *s1,
    VkQueueFamilyDataGraphProcessingEnginePropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkQueueFamilyDataGraphPropertiesARM(VkQueueFamilyDataGraphPropertiesARM const *s1,
                                                 VkQueueFamilyDataGraphPropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkQueueFamilyGlobalPriorityProperties(VkQueueFamilyGlobalPriorityProperties const *s1,
                                                   VkQueueFamilyGlobalPriorityProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 180 && VK_HEADER_VERSION <= 203 && VK_EXT_global_priority_query
bool compare_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s1,
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority_query
bool compare_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s1,
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_global_priority_query
bool compare_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s1,
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority
bool compare_VkQueueFamilyGlobalPriorityPropertiesKHR(
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s1,
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_global_priority
bool compare_VkQueueFamilyGlobalPriorityPropertiesKHR(
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s1,
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9
bool compare_VkQueueFamilyOwnershipTransferPropertiesKHR(
    VkQueueFamilyOwnershipTransferPropertiesKHR const *s1,
    VkQueueFamilyOwnershipTransferPropertiesKHR const *s2);
#endif

bool compare_VkQueueFamilyProperties(VkQueueFamilyProperties const *s1,
                                     VkQueueFamilyProperties const *s2);

#if VK_VERSION_1_1
bool compare_VkQueueFamilyProperties2(VkQueueFamilyProperties2 const *s1,
                                      VkQueueFamilyProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkQueueFamilyProperties2KHR(VkQueueFamilyProperties2KHR const *s1,
                                         VkQueueFamilyProperties2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkQueueFamilyQueryResultStatusProperties2KHR(
    VkQueueFamilyQueryResultStatusProperties2KHR const *s1,
    VkQueueFamilyQueryResultStatusProperties2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkQueueFamilyQueryResultStatusProperties2KHR(
    VkQueueFamilyQueryResultStatusProperties2KHR const *s1,
    VkQueueFamilyQueryResultStatusProperties2KHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkQueueFamilyQueryResultStatusPropertiesKHR(
    VkQueueFamilyQueryResultStatusPropertiesKHR const *s1,
    VkQueueFamilyQueryResultStatusPropertiesKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkQueueFamilyVideoPropertiesKHR(VkQueueFamilyVideoPropertiesKHR const *s1,
                                             VkQueueFamilyVideoPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure && VK_KHR_ray_tracing_pipeline
bool compare_VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV(
    VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV const *s1,
    VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *s1,
                                               VkRayTracingPipelineCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *s1,
                                               VkRayTracingPipelineCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkRayTracingPipelineCreateInfoNV(VkRayTracingPipelineCreateInfoNV const *s1,
                                              VkRayTracingPipelineCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s1,
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s1,
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline) ||                                   \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkRayTracingShaderGroupCreateInfoKHR(VkRayTracingShaderGroupCreateInfoKHR const *s1,
                                                  VkRayTracingShaderGroupCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 134 && VK_NV_ray_tracing
bool compare_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *s1,
                                                 VkRayTracingShaderGroupCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *s1,
                                                 VkRayTracingShaderGroupCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkRaytracingPipelineCreateInfoNVX(VkRaytracingPipelineCreateInfoNVX const *s1,
                                               VkRaytracingPipelineCreateInfoNVX const *s2);
#endif

bool compare_VkRect2D(VkRect2D const *s1, VkRect2D const *s2);

#if VK_KHR_incremental_present
bool compare_VkRectLayerKHR(VkRectLayerKHR const *s1, VkRectLayerKHR const *s2);
#endif

#if VK_GOOGLE_display_timing
bool compare_VkRefreshCycleDurationGOOGLE(VkRefreshCycleDurationGOOGLE const *s1,
                                          VkRefreshCycleDurationGOOGLE const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_KHR_object_refresh
bool compare_VkRefreshObjectKHR(VkRefreshObjectKHR const *s1, VkRefreshObjectKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_KHR_object_refresh
bool compare_VkRefreshObjectListKHR(VkRefreshObjectListKHR const *s1,
                                    VkRefreshObjectListKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkReleaseCapturedPipelineDataInfoKHR(VkReleaseCapturedPipelineDataInfoKHR const *s1,
                                                  VkReleaseCapturedPipelineDataInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkReleaseSwapchainImagesInfoEXT(VkReleaseSwapchainImagesInfoEXT const *s1,
                                             VkReleaseSwapchainImagesInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkRenderPassAttachmentBeginInfo(VkRenderPassAttachmentBeginInfo const *s1,
                                             VkRenderPassAttachmentBeginInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer
bool compare_VkRenderPassAttachmentBeginInfoKHR(VkRenderPassAttachmentBeginInfoKHR const *s1,
                                                VkRenderPassAttachmentBeginInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer
bool compare_VkRenderPassAttachmentBeginInfoKHR(VkRenderPassAttachmentBeginInfoKHR const *s1,
                                                VkRenderPassAttachmentBeginInfoKHR const *s2);
#endif

bool compare_VkRenderPassBeginInfo(VkRenderPassBeginInfo const *s1,
                                   VkRenderPassBeginInfo const *s2);

bool compare_VkRenderPassCreateInfo(VkRenderPassCreateInfo const *s1,
                                    VkRenderPassCreateInfo const *s2);

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkRenderPassCreateInfo2(VkRenderPassCreateInfo2 const *s1,
                                     VkRenderPassCreateInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *s1,
                                        VkRenderPassCreateInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *s1,
                                        VkRenderPassCreateInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationControlEXT(VkRenderPassCreationControlEXT const *s1,
                                            VkRenderPassCreationControlEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationFeedbackCreateInfoEXT(
    VkRenderPassCreationFeedbackCreateInfoEXT const *s1,
    VkRenderPassCreationFeedbackCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 215 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationFeedbackInfoEXT(VkRenderPassCreationFeedbackInfoEXT const *s1,
                                                 VkRenderPassCreationFeedbackInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationFeedbackInfoEXT(VkRenderPassCreationFeedbackInfoEXT const *s1,
                                                 VkRenderPassCreationFeedbackInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkRenderPassFragmentDensityMapCreateInfoEXT(
    VkRenderPassFragmentDensityMapCreateInfoEXT const *s1,
    VkRenderPassFragmentDensityMapCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset
bool compare_VkRenderPassFragmentDensityMapOffsetEndInfoEXT(
    VkRenderPassFragmentDensityMapOffsetEndInfoEXT const *s1,
    VkRenderPassFragmentDensityMapOffsetEndInfoEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkRenderPassInputAttachmentAspectCreateInfo(
    VkRenderPassInputAttachmentAspectCreateInfo const *s1,
    VkRenderPassInputAttachmentAspectCreateInfo const *s2);
#endif

#if VK_KHR_maintenance2
bool compare_VkRenderPassInputAttachmentAspectCreateInfoKHR(
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *s1,
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkRenderPassMultiviewCreateInfo(VkRenderPassMultiviewCreateInfo const *s1,
                                             VkRenderPassMultiviewCreateInfo const *s2);
#endif

#if VK_KHR_multiview
bool compare_VkRenderPassMultiviewCreateInfoKHR(VkRenderPassMultiviewCreateInfoKHR const *s1,
                                                VkRenderPassMultiviewCreateInfoKHR const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkRenderPassSampleLocationsBeginInfoEXT(
    VkRenderPassSampleLocationsBeginInfoEXT const *s1,
    VkRenderPassSampleLocationsBeginInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped
bool compare_VkRenderPassStripeBeginInfoARM(VkRenderPassStripeBeginInfoARM const *s1,
                                            VkRenderPassStripeBeginInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped
bool compare_VkRenderPassStripeInfoARM(VkRenderPassStripeInfoARM const *s1,
                                       VkRenderPassStripeInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped
bool compare_VkRenderPassStripeSubmitInfoARM(VkRenderPassStripeSubmitInfoARM const *s1,
                                             VkRenderPassStripeSubmitInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassSubpassFeedbackCreateInfoEXT(
    VkRenderPassSubpassFeedbackCreateInfoEXT const *s1,
    VkRenderPassSubpassFeedbackCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 215 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassSubpassFeedbackInfoEXT(VkRenderPassSubpassFeedbackInfoEXT const *s1,
                                                VkRenderPassSubpassFeedbackInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassSubpassFeedbackInfoEXT(VkRenderPassSubpassFeedbackInfoEXT const *s1,
                                                VkRenderPassSubpassFeedbackInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkRenderPassTileShadingCreateInfoQCOM(VkRenderPassTileShadingCreateInfoQCOM const *s1,
                                                   VkRenderPassTileShadingCreateInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
bool compare_VkRenderPassTransformBeginInfoQCOM(VkRenderPassTransformBeginInfoQCOM const *s1,
                                                VkRenderPassTransformBeginInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkRenderingAreaInfo(VkRenderingAreaInfo const *s1, VkRenderingAreaInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkRenderingAreaInfoKHR(VkRenderingAreaInfoKHR const *s1,
                                    VkRenderingAreaInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkRenderingAreaInfoKHR(VkRenderingAreaInfoKHR const *s1,
                                    VkRenderingAreaInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkRenderingAttachmentInfo(VkRenderingAttachmentInfo const *s1,
                                       VkRenderingAttachmentInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering
bool compare_VkRenderingAttachmentInfoKHR(VkRenderingAttachmentInfoKHR const *s1,
                                          VkRenderingAttachmentInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering
bool compare_VkRenderingAttachmentInfoKHR(VkRenderingAttachmentInfoKHR const *s1,
                                          VkRenderingAttachmentInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkRenderingAttachmentLocationInfo(VkRenderingAttachmentLocationInfo const *s1,
                                               VkRenderingAttachmentLocationInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read
bool compare_VkRenderingAttachmentLocationInfoKHR(VkRenderingAttachmentLocationInfoKHR const *s1,
                                                  VkRenderingAttachmentLocationInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read
bool compare_VkRenderingAttachmentLocationInfoKHR(VkRenderingAttachmentLocationInfoKHR const *s1,
                                                  VkRenderingAttachmentLocationInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset
bool compare_VkRenderingEndInfoEXT(VkRenderingEndInfoEXT const *s1,
                                   VkRenderingEndInfoEXT const *s2);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_EXT_fragment_density_map &&                                    \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_EXT_fragment_density_map) ||                                                               \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
bool compare_VkRenderingFragmentDensityMapAttachmentInfoEXT(
    VkRenderingFragmentDensityMapAttachmentInfoEXT const *s1,
    VkRenderingFragmentDensityMapAttachmentInfoEXT const *s2);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_KHR_fragment_shading_rate &&                                   \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_KHR_fragment_shading_rate) ||                                                              \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
bool compare_VkRenderingFragmentShadingRateAttachmentInfoKHR(
    VkRenderingFragmentShadingRateAttachmentInfoKHR const *s1,
    VkRenderingFragmentShadingRateAttachmentInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkRenderingInfo(VkRenderingInfo const *s1, VkRenderingInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering
bool compare_VkRenderingInfoKHR(VkRenderingInfoKHR const *s1, VkRenderingInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 281 && VK_KHR_dynamic_rendering && VK_QCOM_tile_properties &&            \
     (VK_KHR_dynamic_rendering || VK_VERSION_1_3)) ||                                              \
    (VK_HEADER_VERSION >= 222 && VK_HEADER_VERSION <= 280 && VK_KHR_dynamic_rendering &&           \
     VK_QCOM_tile_properties) ||                                                                   \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 221 && VK_KHR_dynamic_rendering)
bool compare_VkRenderingInfoKHR(VkRenderingInfoKHR const *s1, VkRenderingInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkRenderingInputAttachmentIndexInfo(VkRenderingInputAttachmentIndexInfo const *s1,
                                                 VkRenderingInputAttachmentIndexInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read
bool compare_VkRenderingInputAttachmentIndexInfoKHR(
    VkRenderingInputAttachmentIndexInfoKHR const *s1,
    VkRenderingInputAttachmentIndexInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read
bool compare_VkRenderingInputAttachmentIndexInfoKHR(
    VkRenderingInputAttachmentIndexInfoKHR const *s1,
    VkRenderingInputAttachmentIndexInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkResolveImageInfo2(VkResolveImageInfo2 const *s1, VkResolveImageInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *s1,
                                    VkResolveImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *s1,
                                    VkResolveImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkSRTDataNV(VkSRTDataNV const *s1, VkSRTDataNV const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkSampleLocationEXT(VkSampleLocationEXT const *s1, VkSampleLocationEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkSampleLocationsInfoEXT(VkSampleLocationsInfoEXT const *s1,
                                      VkSampleLocationsInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2
bool compare_VkSamplerBlockMatchWindowCreateInfoQCOM(
    VkSamplerBlockMatchWindowCreateInfoQCOM const *s1,
    VkSamplerBlockMatchWindowCreateInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
bool compare_VkSamplerBorderColorComponentMappingCreateInfoEXT(
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *s1,
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkSamplerCaptureDescriptorDataInfoEXT(VkSamplerCaptureDescriptorDataInfoEXT const *s1,
                                                   VkSamplerCaptureDescriptorDataInfoEXT const *s2);
#endif

bool compare_VkSamplerCreateInfo(VkSamplerCreateInfo const *s1, VkSamplerCreateInfo const *s2);

#if VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights
bool compare_VkSamplerCubicWeightsCreateInfoQCOM(VkSamplerCubicWeightsCreateInfoQCOM const *s1,
                                                 VkSamplerCubicWeightsCreateInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
bool compare_VkSamplerCustomBorderColorCreateInfoEXT(
    VkSamplerCustomBorderColorCreateInfoEXT const *s1,
    VkSamplerCustomBorderColorCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSamplerReductionModeCreateInfo(VkSamplerReductionModeCreateInfo const *s1,
                                              VkSamplerReductionModeCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_sampler_filter_minmax
bool compare_VkSamplerReductionModeCreateInfoEXT(VkSamplerReductionModeCreateInfoEXT const *s1,
                                                 VkSamplerReductionModeCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_sampler_filter_minmax
bool compare_VkSamplerReductionModeCreateInfoEXT(VkSamplerReductionModeCreateInfoEXT const *s1,
                                                 VkSamplerReductionModeCreateInfoEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionCreateInfo(VkSamplerYcbcrConversionCreateInfo const *s1,
                                                VkSamplerYcbcrConversionCreateInfo const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionCreateInfoKHR(VkSamplerYcbcrConversionCreateInfoKHR const *s1,
                                                   VkSamplerYcbcrConversionCreateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionImageFormatProperties(
    VkSamplerYcbcrConversionImageFormatProperties const *s1,
    VkSamplerYcbcrConversionImageFormatProperties const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionImageFormatPropertiesKHR(
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *s1,
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionInfo(VkSamplerYcbcrConversionInfo const *s1,
                                          VkSamplerYcbcrConversionInfo const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionInfoKHR(VkSamplerYcbcrConversionInfoKHR const *s1,
                                             VkSamplerYcbcrConversionInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_ycbcr_degamma
bool compare_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(
    VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM const *s1,
    VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2
bool compare_VkSciSyncAttributesInfoNV(VkSciSyncAttributesInfoNV const *s1,
                                       VkSciSyncAttributesInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer
bool compare_VkScreenBufferFormatPropertiesQNX(VkScreenBufferFormatPropertiesQNX const *s1,
                                               VkScreenBufferFormatPropertiesQNX const *s2);
#endif

#if VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer
bool compare_VkScreenBufferPropertiesQNX(VkScreenBufferPropertiesQNX const *s1,
                                         VkScreenBufferPropertiesQNX const *s2);
#endif

#if VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface
bool compare_VkScreenSurfaceCreateInfoQNX(VkScreenSurfaceCreateInfoQNX const *s1,
                                          VkScreenSurfaceCreateInfoQNX const *s2);
#endif

bool compare_VkSemaphoreCreateInfo(VkSemaphoreCreateInfo const *s1,
                                   VkSemaphoreCreateInfo const *s2);

#if VK_KHR_external_semaphore_fd
bool compare_VkSemaphoreGetFdInfoKHR(VkSemaphoreGetFdInfoKHR const *s1,
                                     VkSemaphoreGetFdInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync
bool compare_VkSemaphoreGetSciSyncInfoNV(VkSemaphoreGetSciSyncInfoNV const *s1,
                                         VkSemaphoreGetSciSyncInfoNV const *s2);
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkSemaphoreGetWin32HandleInfoKHR(VkSemaphoreGetWin32HandleInfoKHR const *s1,
                                              VkSemaphoreGetWin32HandleInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
bool compare_VkSemaphoreGetZirconHandleInfoFUCHSIA(VkSemaphoreGetZirconHandleInfoFUCHSIA const *s1,
                                                   VkSemaphoreGetZirconHandleInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2
bool compare_VkSemaphoreSciSyncCreateInfoNV(VkSemaphoreSciSyncCreateInfoNV const *s1,
                                            VkSemaphoreSciSyncCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2
bool compare_VkSemaphoreSciSyncPoolCreateInfoNV(VkSemaphoreSciSyncPoolCreateInfoNV const *s1,
                                                VkSemaphoreSciSyncPoolCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreSignalInfo(VkSemaphoreSignalInfo const *s1,
                                   VkSemaphoreSignalInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *s1,
                                      VkSemaphoreSignalInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *s1,
                                      VkSemaphoreSignalInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkSemaphoreSubmitInfo(VkSemaphoreSubmitInfo const *s1,
                                   VkSemaphoreSubmitInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *s1,
                                      VkSemaphoreSubmitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *s1,
                                      VkSemaphoreSubmitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreTypeCreateInfo(VkSemaphoreTypeCreateInfo const *s1,
                                       VkSemaphoreTypeCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *s1,
                                          VkSemaphoreTypeCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *s1,
                                          VkSemaphoreTypeCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreWaitInfo(VkSemaphoreWaitInfo const *s1, VkSemaphoreWaitInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *s1,
                                    VkSemaphoreWaitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *s1,
                                    VkSemaphoreWaitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_maintenance6 && VK_EXT_descriptor_buffer
bool compare_VkSetDescriptorBufferOffsetsInfoEXT(VkSetDescriptorBufferOffsetsInfoEXT const *s1,
                                                 VkSetDescriptorBufferOffsetsInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkSetLatencyMarkerInfoNV(VkSetLatencyMarkerInfoNV const *s1,
                                      VkSetLatencyMarkerInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 308 && VK_NV_present_metering && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkSetPresentConfigNV(VkSetPresentConfigNV const *s1, VkSetPresentConfigNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkSetStateFlagsIndirectCommandNV(VkSetStateFlagsIndirectCommandNV const *s1,
                                              VkSetStateFlagsIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_object
bool compare_VkShaderCreateInfoEXT(VkShaderCreateInfoEXT const *s1,
                                   VkShaderCreateInfoEXT const *s2);
#endif

bool compare_VkShaderModuleCreateInfo(VkShaderModuleCreateInfo const *s1,
                                      VkShaderModuleCreateInfo const *s2);

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkShaderModuleIdentifierEXT(VkShaderModuleIdentifierEXT const *s1,
                                         VkShaderModuleIdentifierEXT const *s2);
#endif

#if VK_EXT_validation_cache
bool compare_VkShaderModuleValidationCacheCreateInfoEXT(
    VkShaderModuleValidationCacheCreateInfoEXT const *s1,
    VkShaderModuleValidationCacheCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_object
bool compare_VkShaderRequiredSubgroupSizeCreateInfoEXT(
    VkShaderRequiredSubgroupSizeCreateInfoEXT const *s1,
    VkShaderRequiredSubgroupSizeCreateInfoEXT const *s2);
#endif

#if VK_AMD_shader_info
bool compare_VkShaderResourceUsageAMD(VkShaderResourceUsageAMD const *s1,
                                      VkShaderResourceUsageAMD const *s2);
#endif

#if VK_AMD_shader_info
bool compare_VkShaderStatisticsInfoAMD(VkShaderStatisticsInfoAMD const *s1,
                                       VkShaderStatisticsInfoAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkShadingRatePaletteNV(VkShadingRatePaletteNV const *s1,
                                    VkShadingRatePaletteNV const *s2);
#endif

#if VK_KHR_shared_presentable_image
bool compare_VkSharedPresentSurfaceCapabilitiesKHR(VkSharedPresentSurfaceCapabilitiesKHR const *s1,
                                                   VkSharedPresentSurfaceCapabilitiesKHR const *s2);
#endif

bool compare_VkSparseBufferMemoryBindInfo(VkSparseBufferMemoryBindInfo const *s1,
                                          VkSparseBufferMemoryBindInfo const *s2);

bool compare_VkSparseImageFormatProperties(VkSparseImageFormatProperties const *s1,
                                           VkSparseImageFormatProperties const *s2);

#if VK_VERSION_1_1
bool compare_VkSparseImageFormatProperties2(VkSparseImageFormatProperties2 const *s1,
                                            VkSparseImageFormatProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkSparseImageFormatProperties2KHR(VkSparseImageFormatProperties2KHR const *s1,
                                               VkSparseImageFormatProperties2KHR const *s2);
#endif

bool compare_VkSparseImageMemoryBind(VkSparseImageMemoryBind const *s1,
                                     VkSparseImageMemoryBind const *s2);

bool compare_VkSparseImageMemoryBindInfo(VkSparseImageMemoryBindInfo const *s1,
                                         VkSparseImageMemoryBindInfo const *s2);

bool compare_VkSparseImageMemoryRequirements(VkSparseImageMemoryRequirements const *s1,
                                             VkSparseImageMemoryRequirements const *s2);

#if VK_VERSION_1_1
bool compare_VkSparseImageMemoryRequirements2(VkSparseImageMemoryRequirements2 const *s1,
                                              VkSparseImageMemoryRequirements2 const *s2);
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkSparseImageMemoryRequirements2KHR(VkSparseImageMemoryRequirements2KHR const *s1,
                                                 VkSparseImageMemoryRequirements2KHR const *s2);
#endif

bool compare_VkSparseImageOpaqueMemoryBindInfo(VkSparseImageOpaqueMemoryBindInfo const *s1,
                                               VkSparseImageOpaqueMemoryBindInfo const *s2);

bool compare_VkSparseMemoryBind(VkSparseMemoryBind const *s1, VkSparseMemoryBind const *s2);

bool compare_VkSpecializationInfo(VkSpecializationInfo const *s1, VkSpecializationInfo const *s2);

bool compare_VkSpecializationMapEntry(VkSpecializationMapEntry const *s1,
                                      VkSpecializationMapEntry const *s2);

bool compare_VkStencilOpState(VkStencilOpState const *s1, VkStencilOpState const *s2);

#if VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface
bool compare_VkStreamDescriptorSurfaceCreateInfoGGP(
    VkStreamDescriptorSurfaceCreateInfoGGP const *s1,
    VkStreamDescriptorSurfaceCreateInfoGGP const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkStridedBufferRegionKHR(VkStridedBufferRegionKHR const *s1,
                                      VkStridedBufferRegionKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkStridedDeviceAddressNV(VkStridedDeviceAddressNV const *s1,
                                      VkStridedDeviceAddressNV const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkStridedDeviceAddressRegionKHR(VkStridedDeviceAddressRegionKHR const *s1,
                                             VkStridedDeviceAddressRegionKHR const *s2);
#endif

bool compare_VkSubmitInfo(VkSubmitInfo const *s1, VkSubmitInfo const *s2);

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkSubmitInfo2(VkSubmitInfo2 const *s1, VkSubmitInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *s1, VkSubmitInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *s1, VkSubmitInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassBeginInfo(VkSubpassBeginInfo const *s1, VkSubpassBeginInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *s1,
                                   VkSubpassBeginInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *s1,
                                   VkSubpassBeginInfoKHR const *s2);
#endif

bool compare_VkSubpassDependency(VkSubpassDependency const *s1, VkSubpassDependency const *s2);

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDependency2(VkSubpassDependency2 const *s1, VkSubpassDependency2 const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *s1,
                                     VkSubpassDependency2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *s1,
                                     VkSubpassDependency2KHR const *s2);
#endif

bool compare_VkSubpassDescription(VkSubpassDescription const *s1, VkSubpassDescription const *s2);

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDescription2(VkSubpassDescription2 const *s1,
                                   VkSubpassDescription2 const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *s1,
                                      VkSubpassDescription2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *s1,
                                      VkSubpassDescription2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDescriptionDepthStencilResolve(
    VkSubpassDescriptionDepthStencilResolve const *s1,
    VkSubpassDescriptionDepthStencilResolve const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 130 && VK_KHR_depth_stencil_resolve
bool compare_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *s1,
    VkSubpassDescriptionDepthStencilResolveKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_depth_stencil_resolve
bool compare_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *s1,
    VkSubpassDescriptionDepthStencilResolveKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassEndInfo(VkSubpassEndInfo const *s1, VkSubpassEndInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *s1, VkSubpassEndInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *s1, VkSubpassEndInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset
bool compare_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s1,
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset
bool compare_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s1,
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkSubpassResolvePerformanceQueryEXT(VkSubpassResolvePerformanceQueryEXT const *s1,
                                                 VkSubpassResolvePerformanceQueryEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkSubpassSampleLocationsEXT(VkSubpassSampleLocationsEXT const *s1,
                                         VkSubpassSampleLocationsEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkSubpassShadingPipelineCreateInfoHUAWEI(
    VkSubpassShadingPipelineCreateInfoHUAWEI const *s1,
    VkSubpassShadingPipelineCreateInfoHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkSubresourceHostMemcpySize(VkSubresourceHostMemcpySize const *s1,
                                         VkSubresourceHostMemcpySize const *s2);
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkSubresourceHostMemcpySizeEXT(VkSubresourceHostMemcpySizeEXT const *s1,
                                            VkSubresourceHostMemcpySizeEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkSubresourceHostMemcpySizeEXT(VkSubresourceHostMemcpySizeEXT const *s1,
                                            VkSubresourceHostMemcpySizeEXT const *s2);
#endif

bool compare_VkSubresourceLayout(VkSubresourceLayout const *s1, VkSubresourceLayout const *s2);

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkSubresourceLayout2(VkSubresourceLayout2 const *s1, VkSubresourceLayout2 const *s2);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 259 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control) ||                                                          \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 257 && VK_EXT_image_compression_control)
bool compare_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *s1,
                                     VkSubresourceLayout2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy &&              \
    VK_EXT_image_compression_control
bool compare_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *s1,
                                     VkSubresourceLayout2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy && VK_EXT_image_compression_control
bool compare_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *s1,
                                     VkSubresourceLayout2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkSubresourceLayout2KHR(VkSubresourceLayout2KHR const *s1,
                                     VkSubresourceLayout2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkSubresourceLayout2KHR(VkSubresourceLayout2KHR const *s1,
                                     VkSubresourceLayout2KHR const *s2);
#endif

#if VK_EXT_display_surface_counter
bool compare_VkSurfaceCapabilities2EXT(VkSurfaceCapabilities2EXT const *s1,
                                       VkSurfaceCapabilities2EXT const *s2);
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkSurfaceCapabilities2KHR(VkSurfaceCapabilities2KHR const *s1,
                                       VkSurfaceCapabilities2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
bool compare_VkSurfaceCapabilitiesFullScreenExclusiveEXT(
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *s1,
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_KHR_surface
bool compare_VkSurfaceCapabilitiesKHR(VkSurfaceCapabilitiesKHR const *s1,
                                      VkSurfaceCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkSurfaceCapabilitiesPresentBarrierNV(VkSurfaceCapabilitiesPresentBarrierNV const *s1,
                                                   VkSurfaceCapabilitiesPresentBarrierNV const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_id2
bool compare_VkSurfaceCapabilitiesPresentId2KHR(VkSurfaceCapabilitiesPresentId2KHR const *s1,
                                                VkSurfaceCapabilitiesPresentId2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2
bool compare_VkSurfaceCapabilitiesPresentWait2KHR(VkSurfaceCapabilitiesPresentWait2KHR const *s1,
                                                  VkSurfaceCapabilitiesPresentWait2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 318 && VK_OHOS_surface
bool compare_VkSurfaceCreateInfoOHOS(VkSurfaceCreateInfoOHOS const *s1,
                                     VkSurfaceCreateInfoOHOS const *s2);
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkSurfaceFormat2KHR(VkSurfaceFormat2KHR const *s1, VkSurfaceFormat2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_KHR_surface
bool compare_VkSurfaceFormatKHR(VkSurfaceFormatKHR const *s1, VkSurfaceFormatKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
bool compare_VkSurfaceFullScreenExclusiveInfoEXT(VkSurfaceFullScreenExclusiveInfoEXT const *s1,
                                                 VkSurfaceFullScreenExclusiveInfoEXT const *s2);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_full_screen_exclusive && VK_KHR_win32_surface) ||          \
    (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 240 && VK_EXT_full_screen_exclusive)
bool compare_VkSurfaceFullScreenExclusiveWin32InfoEXT(
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *s1,
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentModeCompatibilityEXT(VkSurfacePresentModeCompatibilityEXT const *s1,
                                                  VkSurfacePresentModeCompatibilityEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentModeEXT(VkSurfacePresentModeEXT const *s1,
                                     VkSurfacePresentModeEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentScalingCapabilitiesEXT(
    VkSurfacePresentScalingCapabilitiesEXT const *s1,
    VkSurfacePresentScalingCapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_KHR_surface_protected_capabilities
bool compare_VkSurfaceProtectedCapabilitiesKHR(VkSurfaceProtectedCapabilitiesKHR const *s1,
                                               VkSurfaceProtectedCapabilitiesKHR const *s2);
#endif

#if VK_EXT_display_control
bool compare_VkSwapchainCounterCreateInfoEXT(VkSwapchainCounterCreateInfoEXT const *s1,
                                             VkSwapchainCounterCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 240 && VK_KHR_swapchain
bool compare_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *s1,
                                      VkSwapchainCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 241 && VK_KHR_swapchain
bool compare_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *s1,
                                      VkSwapchainCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
bool compare_VkSwapchainDisplayNativeHdrCreateInfoAMD(
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *s1,
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkSwapchainImageCreateInfoANDROID(VkSwapchainImageCreateInfoANDROID const *s1,
                                               VkSwapchainImageCreateInfoANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkSwapchainLatencyCreateInfoNV(VkSwapchainLatencyCreateInfoNV const *s1,
                                            VkSwapchainLatencyCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkSwapchainPresentBarrierCreateInfoNV(VkSwapchainPresentBarrierCreateInfoNV const *s1,
                                                   VkSwapchainPresentBarrierCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentFenceInfoEXT(VkSwapchainPresentFenceInfoEXT const *s1,
                                            VkSwapchainPresentFenceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentModeInfoEXT(VkSwapchainPresentModeInfoEXT const *s1,
                                           VkSwapchainPresentModeInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentModesCreateInfoEXT(VkSwapchainPresentModesCreateInfoEXT const *s1,
                                                  VkSwapchainPresentModesCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentScalingCreateInfoEXT(
    VkSwapchainPresentScalingCreateInfoEXT const *s1,
    VkSwapchainPresentScalingCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkSysmemColorSpaceFUCHSIA(VkSysmemColorSpaceFUCHSIA const *s1,
                                       VkSysmemColorSpaceFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer
bool compare_VkTensorCaptureDescriptorDataInfoARM(VkTensorCaptureDescriptorDataInfoARM const *s1,
                                                  VkTensorCaptureDescriptorDataInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorCopyARM(VkTensorCopyARM const *s1, VkTensorCopyARM const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorCreateInfoARM(VkTensorCreateInfoARM const *s1,
                                   VkTensorCreateInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorDependencyInfoARM(VkTensorDependencyInfoARM const *s1,
                                       VkTensorDependencyInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorDescriptionARM(VkTensorDescriptionARM const *s1,
                                    VkTensorDescriptionARM const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorFormatPropertiesARM(VkTensorFormatPropertiesARM const *s1,
                                         VkTensorFormatPropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorMemoryBarrierARM(VkTensorMemoryBarrierARM const *s1,
                                      VkTensorMemoryBarrierARM const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorMemoryRequirementsInfoARM(VkTensorMemoryRequirementsInfoARM const *s1,
                                               VkTensorMemoryRequirementsInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer
bool compare_VkTensorViewCaptureDescriptorDataInfoARM(
    VkTensorViewCaptureDescriptorDataInfoARM const *s1,
    VkTensorViewCaptureDescriptorDataInfoARM const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorViewCreateInfoARM(VkTensorViewCreateInfoARM const *s1,
                                       VkTensorViewCreateInfoARM const *s2);
#endif

#if VK_AMD_texture_gather_bias_lod
bool compare_VkTextureLODGatherFormatPropertiesAMD(VkTextureLODGatherFormatPropertiesAMD const *s1,
                                                   VkTextureLODGatherFormatPropertiesAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap
bool compare_VkTileMemoryBindInfoQCOM(VkTileMemoryBindInfoQCOM const *s1,
                                      VkTileMemoryBindInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap
bool compare_VkTileMemoryRequirementsQCOM(VkTileMemoryRequirementsQCOM const *s1,
                                          VkTileMemoryRequirementsQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap && VK_QCOM_tile_properties
bool compare_VkTileMemorySizeInfoQCOM(VkTileMemorySizeInfoQCOM const *s1,
                                      VkTileMemorySizeInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties
bool compare_VkTilePropertiesQCOM(VkTilePropertiesQCOM const *s1, VkTilePropertiesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkTimelineSemaphoreSubmitInfo(VkTimelineSemaphoreSubmitInfo const *s1,
                                           VkTimelineSemaphoreSubmitInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkTimelineSemaphoreSubmitInfoKHR(VkTimelineSemaphoreSubmitInfoKHR const *s1,
                                              VkTimelineSemaphoreSubmitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkTimelineSemaphoreSubmitInfoKHR(VkTimelineSemaphoreSubmitInfoKHR const *s1,
                                              VkTimelineSemaphoreSubmitInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_ray_tracing_maintenance1 &&                                \
     VK_KHR_ray_tracing_pipeline) ||                                                               \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 240 && VK_KHR_ray_tracing_maintenance1)
bool compare_VkTraceRaysIndirectCommand2KHR(VkTraceRaysIndirectCommand2KHR const *s1,
                                            VkTraceRaysIndirectCommand2KHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline) ||                                   \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkTraceRaysIndirectCommandKHR(VkTraceRaysIndirectCommandKHR const *s1,
                                           VkTraceRaysIndirectCommandKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkTransformMatrixKHR(VkTransformMatrixKHR const *s1, VkTransformMatrixKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkTransformMatrixNV(VkTransformMatrixNV const *s1, VkTransformMatrixNV const *s2);
#endif

#if VK_EXT_validation_cache
bool compare_VkValidationCacheCreateInfoEXT(VkValidationCacheCreateInfoEXT const *s1,
                                            VkValidationCacheCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_validation_features
bool compare_VkValidationFeaturesEXT(VkValidationFeaturesEXT const *s1,
                                     VkValidationFeaturesEXT const *s2);
#endif

#if VK_EXT_validation_flags
bool compare_VkValidationFlagsEXT(VkValidationFlagsEXT const *s1, VkValidationFlagsEXT const *s2);
#endif

bool compare_VkVertexInputAttributeDescription(VkVertexInputAttributeDescription const *s1,
                                               VkVertexInputAttributeDescription const *s2);

#if (VK_HEADER_VERSION >= 246 && VK_EXT_vertex_input_dynamic_state && VK_EXT_shader_object) ||     \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 245 && VK_EXT_vertex_input_dynamic_state)
bool compare_VkVertexInputAttributeDescription2EXT(VkVertexInputAttributeDescription2EXT const *s1,
                                                   VkVertexInputAttributeDescription2EXT const *s2);
#endif

bool compare_VkVertexInputBindingDescription(VkVertexInputBindingDescription const *s1,
                                             VkVertexInputBindingDescription const *s2);

#if (VK_HEADER_VERSION >= 246 && VK_EXT_vertex_input_dynamic_state && VK_EXT_shader_object) ||     \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 245 && VK_EXT_vertex_input_dynamic_state)
bool compare_VkVertexInputBindingDescription2EXT(VkVertexInputBindingDescription2EXT const *s1,
                                                 VkVertexInputBindingDescription2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkVertexInputBindingDivisorDescription(
    VkVertexInputBindingDivisorDescription const *s1,
    VkVertexInputBindingDivisorDescription const *s2);
#endif

#if VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *s1,
    VkVertexInputBindingDivisorDescriptionEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *s1,
    VkVertexInputBindingDivisorDescriptionEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *s1,
    VkVertexInputBindingDivisorDescriptionEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionKHR(
    VkVertexInputBindingDivisorDescriptionKHR const *s1,
    VkVertexInputBindingDivisorDescriptionKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionKHR(
    VkVertexInputBindingDivisorDescriptionKHR const *s1,
    VkVertexInputBindingDivisorDescriptionKHR const *s2);
#endif

#if VK_NN_vi_surface
bool compare_VkViSurfaceCreateInfoNN(VkViSurfaceCreateInfoNN const *s1,
                                     VkViSurfaceCreateInfoNN const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *s1,
                                       VkVideoBeginCodingInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *s1,
                                       VkVideoBeginCodingInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoBindMemoryKHR(VkVideoBindMemoryKHR const *s1, VkVideoBindMemoryKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *s1,
                                    VkVideoCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 208 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *s1,
                                    VkVideoCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *s1,
                                    VkVideoCapabilitiesKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *s1,
                                    VkVideoCapabilitiesKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoCodingControlInfoKHR(VkVideoCodingControlInfoKHR const *s1,
                                         VkVideoCodingControlInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1CapabilitiesKHR(VkVideoDecodeAV1CapabilitiesKHR const *s1,
                                             VkVideoDecodeAV1CapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1DpbSlotInfoKHR(VkVideoDecodeAV1DpbSlotInfoKHR const *s1,
                                            VkVideoDecodeAV1DpbSlotInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1InlineSessionParametersInfoKHR(
    VkVideoDecodeAV1InlineSessionParametersInfoKHR const *s1,
    VkVideoDecodeAV1InlineSessionParametersInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1PictureInfoKHR(VkVideoDecodeAV1PictureInfoKHR const *s1,
                                            VkVideoDecodeAV1PictureInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1ProfileInfoKHR(VkVideoDecodeAV1ProfileInfoKHR const *s1,
                                            VkVideoDecodeAV1ProfileInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1SessionParametersCreateInfoKHR(
    VkVideoDecodeAV1SessionParametersCreateInfoKHR const *s1,
    VkVideoDecodeAV1SessionParametersCreateInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 207 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoDecodeCapabilitiesKHR(VkVideoDecodeCapabilitiesKHR const *s1,
                                          VkVideoDecodeCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *s1,
                                              VkVideoDecodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 210 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *s1,
                                              VkVideoDecodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *s1,
                                              VkVideoDecodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *s1,
                                              VkVideoDecodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264CapabilitiesKHR(VkVideoDecodeH264CapabilitiesKHR const *s1,
                                              VkVideoDecodeH264CapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264DpbSlotInfoEXT(VkVideoDecodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoDecodeH264DpbSlotInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264DpbSlotInfoKHR(VkVideoDecodeH264DpbSlotInfoKHR const *s1,
                                             VkVideoDecodeH264DpbSlotInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264InlineSessionParametersInfoKHR(
    VkVideoDecodeH264InlineSessionParametersInfoKHR const *s1,
    VkVideoDecodeH264InlineSessionParametersInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264MvcEXT(VkVideoDecodeH264MvcEXT const *s1,
                                     VkVideoDecodeH264MvcEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264MvcInfoEXT(VkVideoDecodeH264MvcInfoEXT const *s1,
                                         VkVideoDecodeH264MvcInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *s1,
                                             VkVideoDecodeH264PictureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *s1,
                                             VkVideoDecodeH264PictureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264PictureInfoKHR(VkVideoDecodeH264PictureInfoKHR const *s1,
                                             VkVideoDecodeH264PictureInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *s1,
                                         VkVideoDecodeH264ProfileEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *s1,
                                         VkVideoDecodeH264ProfileEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264ProfileInfoEXT(VkVideoDecodeH264ProfileInfoEXT const *s1,
                                             VkVideoDecodeH264ProfileInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264ProfileInfoEXT(VkVideoDecodeH264ProfileInfoEXT const *s1,
                                             VkVideoDecodeH264ProfileInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264ProfileInfoKHR(VkVideoDecodeH264ProfileInfoKHR const *s1,
                                             VkVideoDecodeH264ProfileInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264SessionCreateInfoEXT(VkVideoDecodeH264SessionCreateInfoEXT const *s1,
                                                   VkVideoDecodeH264SessionCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersAddInfoKHR(
    VkVideoDecodeH264SessionParametersAddInfoKHR const *s1,
    VkVideoDecodeH264SessionParametersAddInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersCreateInfoKHR(
    VkVideoDecodeH264SessionParametersCreateInfoKHR const *s1,
    VkVideoDecodeH264SessionParametersCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *s1,
                                              VkVideoDecodeH265CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 210 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *s1,
                                              VkVideoDecodeH265CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *s1,
                                              VkVideoDecodeH265CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *s1,
                                              VkVideoDecodeH265CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265CapabilitiesKHR(VkVideoDecodeH265CapabilitiesKHR const *s1,
                                              VkVideoDecodeH265CapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265DpbSlotInfoEXT(VkVideoDecodeH265DpbSlotInfoEXT const *s1,
                                             VkVideoDecodeH265DpbSlotInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265DpbSlotInfoKHR(VkVideoDecodeH265DpbSlotInfoKHR const *s1,
                                             VkVideoDecodeH265DpbSlotInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265InlineSessionParametersInfoKHR(
    VkVideoDecodeH265InlineSessionParametersInfoKHR const *s1,
    VkVideoDecodeH265InlineSessionParametersInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *s1,
                                             VkVideoDecodeH265PictureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 235 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *s1,
                                             VkVideoDecodeH265PictureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 236 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *s1,
                                             VkVideoDecodeH265PictureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265PictureInfoKHR(VkVideoDecodeH265PictureInfoKHR const *s1,
                                             VkVideoDecodeH265PictureInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265ProfileEXT(VkVideoDecodeH265ProfileEXT const *s1,
                                         VkVideoDecodeH265ProfileEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265ProfileInfoEXT(VkVideoDecodeH265ProfileInfoEXT const *s1,
                                             VkVideoDecodeH265ProfileInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265ProfileInfoKHR(VkVideoDecodeH265ProfileInfoKHR const *s1,
                                             VkVideoDecodeH265ProfileInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionCreateInfoEXT(VkVideoDecodeH265SessionCreateInfoEXT const *s1,
                                                   VkVideoDecodeH265SessionCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersAddInfoKHR(
    VkVideoDecodeH265SessionParametersAddInfoKHR const *s1,
    VkVideoDecodeH265SessionParametersAddInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersCreateInfoKHR(
    VkVideoDecodeH265SessionParametersCreateInfoKHR const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 210 && VK_KHR_video_decode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *s1, VkVideoDecodeInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 224 && VK_KHR_video_decode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *s1, VkVideoDecodeInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *s1, VkVideoDecodeInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoDecodeUsageInfoKHR(VkVideoDecodeUsageInfoKHR const *s1,
                                       VkVideoDecodeUsageInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9
bool compare_VkVideoDecodeVP9CapabilitiesKHR(VkVideoDecodeVP9CapabilitiesKHR const *s1,
                                             VkVideoDecodeVP9CapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9
bool compare_VkVideoDecodeVP9PictureInfoKHR(VkVideoDecodeVP9PictureInfoKHR const *s1,
                                            VkVideoDecodeVP9PictureInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9
bool compare_VkVideoDecodeVP9ProfileInfoKHR(VkVideoDecodeVP9ProfileInfoKHR const *s1,
                                            VkVideoDecodeVP9ProfileInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1CapabilitiesKHR(VkVideoEncodeAV1CapabilitiesKHR const *s1,
                                             VkVideoEncodeAV1CapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1DpbSlotInfoKHR(VkVideoEncodeAV1DpbSlotInfoKHR const *s1,
                                            VkVideoEncodeAV1DpbSlotInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1FrameSizeKHR(VkVideoEncodeAV1FrameSizeKHR const *s1,
                                          VkVideoEncodeAV1FrameSizeKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1GopRemainingFrameInfoKHR(
    VkVideoEncodeAV1GopRemainingFrameInfoKHR const *s1,
    VkVideoEncodeAV1GopRemainingFrameInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1PictureInfoKHR(VkVideoEncodeAV1PictureInfoKHR const *s1,
                                            VkVideoEncodeAV1PictureInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1ProfileInfoKHR(VkVideoEncodeAV1ProfileInfoKHR const *s1,
                                            VkVideoEncodeAV1ProfileInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1QIndexKHR(VkVideoEncodeAV1QIndexKHR const *s1,
                                       VkVideoEncodeAV1QIndexKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1QualityLevelPropertiesKHR(
    VkVideoEncodeAV1QualityLevelPropertiesKHR const *s1,
    VkVideoEncodeAV1QualityLevelPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1QuantizationMapCapabilitiesKHR(
    VkVideoEncodeAV1QuantizationMapCapabilitiesKHR const *s1,
    VkVideoEncodeAV1QuantizationMapCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1RateControlInfoKHR(VkVideoEncodeAV1RateControlInfoKHR const *s1,
                                                VkVideoEncodeAV1RateControlInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1RateControlLayerInfoKHR(
    VkVideoEncodeAV1RateControlLayerInfoKHR const *s1,
    VkVideoEncodeAV1RateControlLayerInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1SessionCreateInfoKHR(VkVideoEncodeAV1SessionCreateInfoKHR const *s1,
                                                  VkVideoEncodeAV1SessionCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1SessionParametersCreateInfoKHR(
    VkVideoEncodeAV1SessionParametersCreateInfoKHR const *s1,
    VkVideoEncodeAV1SessionParametersCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *s1,
                                          VkVideoEncodeCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *s1,
                                          VkVideoEncodeCapabilitiesKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *s1,
                                          VkVideoEncodeCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264CapabilitiesKHR(VkVideoEncodeH264CapabilitiesKHR const *s1,
                                              VkVideoEncodeH264CapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH264DpbSlotInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH264DpbSlotInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH264DpbSlotInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264DpbSlotInfoKHR(VkVideoEncodeH264DpbSlotInfoKHR const *s1,
                                             VkVideoEncodeH264DpbSlotInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264EmitPictureParametersEXT(
    VkVideoEncodeH264EmitPictureParametersEXT const *s1,
    VkVideoEncodeH264EmitPictureParametersEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264EmitPictureParametersInfoEXT(
    VkVideoEncodeH264EmitPictureParametersInfoEXT const *s1,
    VkVideoEncodeH264EmitPictureParametersInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264FrameSizeEXT(VkVideoEncodeH264FrameSizeEXT const *s1,
                                           VkVideoEncodeH264FrameSizeEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264FrameSizeKHR(VkVideoEncodeH264FrameSizeKHR const *s1,
                                           VkVideoEncodeH264FrameSizeKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264GopRemainingFrameInfoEXT(
    VkVideoEncodeH264GopRemainingFrameInfoEXT const *s1,
    VkVideoEncodeH264GopRemainingFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264GopRemainingFrameInfoKHR(
    VkVideoEncodeH264GopRemainingFrameInfoKHR const *s1,
    VkVideoEncodeH264GopRemainingFrameInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *s1,
                                           VkVideoEncodeH264NaluSliceEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *s1,
                                           VkVideoEncodeH264NaluSliceEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *s1,
                                           VkVideoEncodeH264NaluSliceEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *s1,
                                               VkVideoEncodeH264NaluSliceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *s1,
                                               VkVideoEncodeH264NaluSliceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *s1,
                                               VkVideoEncodeH264NaluSliceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264NaluSliceInfoKHR(VkVideoEncodeH264NaluSliceInfoKHR const *s1,
                                               VkVideoEncodeH264NaluSliceInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264PictureInfoEXT(VkVideoEncodeH264PictureInfoEXT const *s1,
                                             VkVideoEncodeH264PictureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264PictureInfoKHR(VkVideoEncodeH264PictureInfoKHR const *s1,
                                             VkVideoEncodeH264PictureInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264ProfileEXT(VkVideoEncodeH264ProfileEXT const *s1,
                                         VkVideoEncodeH264ProfileEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264ProfileInfoEXT(VkVideoEncodeH264ProfileInfoEXT const *s1,
                                             VkVideoEncodeH264ProfileInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264ProfileInfoKHR(VkVideoEncodeH264ProfileInfoKHR const *s1,
                                             VkVideoEncodeH264ProfileInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264QpEXT(VkVideoEncodeH264QpEXT const *s1,
                                    VkVideoEncodeH264QpEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264QpKHR(VkVideoEncodeH264QpKHR const *s1,
                                    VkVideoEncodeH264QpKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264QualityLevelPropertiesEXT(
    VkVideoEncodeH264QualityLevelPropertiesEXT const *s1,
    VkVideoEncodeH264QualityLevelPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264QualityLevelPropertiesKHR(
    VkVideoEncodeH264QualityLevelPropertiesKHR const *s1,
    VkVideoEncodeH264QualityLevelPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264QuantizationMapCapabilitiesKHR(
    VkVideoEncodeH264QuantizationMapCapabilitiesKHR const *s1,
    VkVideoEncodeH264QuantizationMapCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 202 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264RateControlInfoKHR(VkVideoEncodeH264RateControlInfoKHR const *s1,
                                                 VkVideoEncodeH264RateControlInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH264RateControlLayerInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH264RateControlLayerInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH264RateControlLayerInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264RateControlLayerInfoKHR(
    VkVideoEncodeH264RateControlLayerInfoKHR const *s1,
    VkVideoEncodeH264RateControlLayerInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264ReferenceListsEXT(VkVideoEncodeH264ReferenceListsEXT const *s1,
                                                VkVideoEncodeH264ReferenceListsEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264ReferenceListsInfoEXT(
    VkVideoEncodeH264ReferenceListsInfoEXT const *s1,
    VkVideoEncodeH264ReferenceListsInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionCreateInfoEXT(VkVideoEncodeH264SessionCreateInfoEXT const *s1,
                                                   VkVideoEncodeH264SessionCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionCreateInfoEXT(VkVideoEncodeH264SessionCreateInfoEXT const *s1,
                                                   VkVideoEncodeH264SessionCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264SessionCreateInfoKHR(VkVideoEncodeH264SessionCreateInfoKHR const *s1,
                                                   VkVideoEncodeH264SessionCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersAddInfoKHR(
    VkVideoEncodeH264SessionParametersAddInfoKHR const *s1,
    VkVideoEncodeH264SessionParametersAddInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersCreateInfoKHR(
    VkVideoEncodeH264SessionParametersCreateInfoKHR const *s1,
    VkVideoEncodeH264SessionParametersCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersFeedbackInfoEXT(
    VkVideoEncodeH264SessionParametersFeedbackInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersFeedbackInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersFeedbackInfoKHR(
    VkVideoEncodeH264SessionParametersFeedbackInfoKHR const *s1,
    VkVideoEncodeH264SessionParametersFeedbackInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersGetInfoEXT(
    VkVideoEncodeH264SessionParametersGetInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersGetInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersGetInfoKHR(
    VkVideoEncodeH264SessionParametersGetInfoKHR const *s1,
    VkVideoEncodeH264SessionParametersGetInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH264VclFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH264VclFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH264VclFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH264VclFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265CapabilitiesKHR(VkVideoEncodeH265CapabilitiesKHR const *s1,
                                              VkVideoEncodeH265CapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH265DpbSlotInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH265DpbSlotInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265DpbSlotInfoKHR(VkVideoEncodeH265DpbSlotInfoKHR const *s1,
                                             VkVideoEncodeH265DpbSlotInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265EmitPictureParametersEXT(
    VkVideoEncodeH265EmitPictureParametersEXT const *s1,
    VkVideoEncodeH265EmitPictureParametersEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265EmitPictureParametersInfoEXT(
    VkVideoEncodeH265EmitPictureParametersInfoEXT const *s1,
    VkVideoEncodeH265EmitPictureParametersInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265FrameSizeEXT(VkVideoEncodeH265FrameSizeEXT const *s1,
                                           VkVideoEncodeH265FrameSizeEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265FrameSizeKHR(VkVideoEncodeH265FrameSizeKHR const *s1,
                                           VkVideoEncodeH265FrameSizeKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265GopRemainingFrameInfoEXT(
    VkVideoEncodeH265GopRemainingFrameInfoEXT const *s1,
    VkVideoEncodeH265GopRemainingFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265GopRemainingFrameInfoKHR(
    VkVideoEncodeH265GopRemainingFrameInfoKHR const *s1,
    VkVideoEncodeH265GopRemainingFrameInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265NaluSliceEXT(VkVideoEncodeH265NaluSliceEXT const *s1,
                                           VkVideoEncodeH265NaluSliceEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265NaluSliceSegmentEXT(VkVideoEncodeH265NaluSliceSegmentEXT const *s1,
                                                  VkVideoEncodeH265NaluSliceSegmentEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s1,
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s1,
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s1,
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265NaluSliceSegmentInfoKHR(
    VkVideoEncodeH265NaluSliceSegmentInfoKHR const *s1,
    VkVideoEncodeH265NaluSliceSegmentInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265PictureInfoEXT(VkVideoEncodeH265PictureInfoEXT const *s1,
                                             VkVideoEncodeH265PictureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265PictureInfoKHR(VkVideoEncodeH265PictureInfoKHR const *s1,
                                             VkVideoEncodeH265PictureInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265ProfileEXT(VkVideoEncodeH265ProfileEXT const *s1,
                                         VkVideoEncodeH265ProfileEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265ProfileInfoEXT(VkVideoEncodeH265ProfileInfoEXT const *s1,
                                             VkVideoEncodeH265ProfileInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265ProfileInfoKHR(VkVideoEncodeH265ProfileInfoKHR const *s1,
                                             VkVideoEncodeH265ProfileInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265QpEXT(VkVideoEncodeH265QpEXT const *s1,
                                    VkVideoEncodeH265QpEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265QpKHR(VkVideoEncodeH265QpKHR const *s1,
                                    VkVideoEncodeH265QpKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265QualityLevelPropertiesEXT(
    VkVideoEncodeH265QualityLevelPropertiesEXT const *s1,
    VkVideoEncodeH265QualityLevelPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265QualityLevelPropertiesKHR(
    VkVideoEncodeH265QualityLevelPropertiesKHR const *s1,
    VkVideoEncodeH265QualityLevelPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265QuantizationMapCapabilitiesKHR(
    VkVideoEncodeH265QuantizationMapCapabilitiesKHR const *s1,
    VkVideoEncodeH265QuantizationMapCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 202 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265RateControlInfoKHR(VkVideoEncodeH265RateControlInfoKHR const *s1,
                                                 VkVideoEncodeH265RateControlInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH265RateControlLayerInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH265RateControlLayerInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH265RateControlLayerInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265RateControlLayerInfoKHR(
    VkVideoEncodeH265RateControlLayerInfoKHR const *s1,
    VkVideoEncodeH265RateControlLayerInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265ReferenceListsEXT(VkVideoEncodeH265ReferenceListsEXT const *s1,
                                                VkVideoEncodeH265ReferenceListsEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265ReferenceListsInfoEXT(
    VkVideoEncodeH265ReferenceListsInfoEXT const *s1,
    VkVideoEncodeH265ReferenceListsInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionCreateInfoEXT(VkVideoEncodeH265SessionCreateInfoEXT const *s1,
                                                   VkVideoEncodeH265SessionCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionCreateInfoEXT(VkVideoEncodeH265SessionCreateInfoEXT const *s1,
                                                   VkVideoEncodeH265SessionCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265SessionCreateInfoKHR(VkVideoEncodeH265SessionCreateInfoKHR const *s1,
                                                   VkVideoEncodeH265SessionCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersAddInfoKHR(
    VkVideoEncodeH265SessionParametersAddInfoKHR const *s1,
    VkVideoEncodeH265SessionParametersAddInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersCreateInfoKHR(
    VkVideoEncodeH265SessionParametersCreateInfoKHR const *s1,
    VkVideoEncodeH265SessionParametersCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersFeedbackInfoEXT(
    VkVideoEncodeH265SessionParametersFeedbackInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersFeedbackInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersFeedbackInfoKHR(
    VkVideoEncodeH265SessionParametersFeedbackInfoKHR const *s1,
    VkVideoEncodeH265SessionParametersFeedbackInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersGetInfoEXT(
    VkVideoEncodeH265SessionParametersGetInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersGetInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersGetInfoKHR(
    VkVideoEncodeH265SessionParametersGetInfoKHR const *s1,
    VkVideoEncodeH265SessionParametersGetInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH265VclFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH265VclFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH265VclFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH265VclFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 210 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 224 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeQualityLevelInfoKHR(VkVideoEncodeQualityLevelInfoKHR const *s1,
                                              VkVideoEncodeQualityLevelInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeQualityLevelPropertiesKHR(
    VkVideoEncodeQualityLevelPropertiesKHR const *s1,
    VkVideoEncodeQualityLevelPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map
bool compare_VkVideoEncodeQuantizationMapCapabilitiesKHR(
    VkVideoEncodeQuantizationMapCapabilitiesKHR const *s1,
    VkVideoEncodeQuantizationMapCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map
bool compare_VkVideoEncodeQuantizationMapInfoKHR(VkVideoEncodeQuantizationMapInfoKHR const *s1,
                                                 VkVideoEncodeQuantizationMapInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map
bool compare_VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR(
    VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR const *s1,
    VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *s1,
                                             VkVideoEncodeRateControlInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *s1,
                                             VkVideoEncodeRateControlInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *s1,
                                             VkVideoEncodeRateControlInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *s1,
                                             VkVideoEncodeRateControlInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeRateControlLayerInfoKHR(VkVideoEncodeRateControlLayerInfoKHR const *s1,
                                                  VkVideoEncodeRateControlLayerInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeRateControlLayerInfoKHR(VkVideoEncodeRateControlLayerInfoKHR const *s1,
                                                  VkVideoEncodeRateControlLayerInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeRateControlLayerInfoKHR(VkVideoEncodeRateControlLayerInfoKHR const *s1,
                                                  VkVideoEncodeRateControlLayerInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeSessionParametersFeedbackInfoKHR(
    VkVideoEncodeSessionParametersFeedbackInfoKHR const *s1,
    VkVideoEncodeSessionParametersFeedbackInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeSessionParametersGetInfoKHR(
    VkVideoEncodeSessionParametersGetInfoKHR const *s1,
    VkVideoEncodeSessionParametersGetInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeUsageInfoKHR(VkVideoEncodeUsageInfoKHR const *s1,
                                       VkVideoEncodeUsageInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEndCodingInfoKHR(VkVideoEndCodingInfoKHR const *s1,
                                     VkVideoEndCodingInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_av1
bool compare_VkVideoFormatAV1QuantizationMapPropertiesKHR(
    VkVideoFormatAV1QuantizationMapPropertiesKHR const *s1,
    VkVideoFormatAV1QuantizationMapPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h265
bool compare_VkVideoFormatH265QuantizationMapPropertiesKHR(
    VkVideoFormatH265QuantizationMapPropertiesKHR const *s1,
    VkVideoFormatH265QuantizationMapPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *s1,
                                        VkVideoFormatPropertiesKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *s1,
                                        VkVideoFormatPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map
bool compare_VkVideoFormatQuantizationMapPropertiesKHR(
    VkVideoFormatQuantizationMapPropertiesKHR const *s1,
    VkVideoFormatQuantizationMapPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoGetMemoryPropertiesKHR(VkVideoGetMemoryPropertiesKHR const *s1,
                                           VkVideoGetMemoryPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_maintenance1
bool compare_VkVideoInlineQueryInfoKHR(VkVideoInlineQueryInfoKHR const *s1,
                                       VkVideoInlineQueryInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoPictureResourceInfoKHR(VkVideoPictureResourceInfoKHR const *s1,
                                           VkVideoPictureResourceInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoPictureResourceKHR(VkVideoPictureResourceKHR const *s1,
                                       VkVideoPictureResourceKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoProfileInfoKHR(VkVideoProfileInfoKHR const *s1,
                                   VkVideoProfileInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoProfileKHR(VkVideoProfileKHR const *s1, VkVideoProfileKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoProfileListInfoKHR(VkVideoProfileListInfoKHR const *s1,
                                       VkVideoProfileListInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoProfilesKHR(VkVideoProfilesKHR const *s1, VkVideoProfilesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoQueueFamilyProperties2KHR(VkVideoQueueFamilyProperties2KHR const *s1,
                                              VkVideoQueueFamilyProperties2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 229 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoReferenceSlotInfoKHR(VkVideoReferenceSlotInfoKHR const *s1,
                                         VkVideoReferenceSlotInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoReferenceSlotInfoKHR(VkVideoReferenceSlotInfoKHR const *s1,
                                         VkVideoReferenceSlotInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoReferenceSlotKHR(VkVideoReferenceSlotKHR const *s1,
                                     VkVideoReferenceSlotKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *s1,
                                         VkVideoSessionCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *s1,
                                         VkVideoSessionCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *s1,
                                         VkVideoSessionCreateInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *s1,
                                         VkVideoSessionCreateInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoSessionMemoryRequirementsKHR(VkVideoSessionMemoryRequirementsKHR const *s1,
                                                 VkVideoSessionMemoryRequirementsKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoSessionParametersCreateInfoKHR(VkVideoSessionParametersCreateInfoKHR const *s1,
                                                   VkVideoSessionParametersCreateInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoSessionParametersCreateInfoKHR(VkVideoSessionParametersCreateInfoKHR const *s1,
                                                   VkVideoSessionParametersCreateInfoKHR const *s2);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoSessionParametersUpdateInfoKHR(VkVideoSessionParametersUpdateInfoKHR const *s1,
                                                   VkVideoSessionParametersUpdateInfoKHR const *s2);
#endif

bool compare_VkViewport(VkViewport const *s1, VkViewport const *s2);

#if VK_NV_viewport_swizzle
bool compare_VkViewportSwizzleNV(VkViewportSwizzleNV const *s1, VkViewportSwizzleNV const *s2);
#endif

#if VK_NV_clip_space_w_scaling
bool compare_VkViewportWScalingNV(VkViewportWScalingNV const *s1, VkViewportWScalingNV const *s2);
#endif

#if VK_KHR_wayland_surface
bool compare_VkWaylandSurfaceCreateInfoKHR(VkWaylandSurfaceCreateInfoKHR const *s1,
                                           VkWaylandSurfaceCreateInfoKHR const *s2);
#endif

#if VK_KHR_win32_keyed_mutex
bool compare_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *s1,
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *s2);
#endif

#if VK_NV_win32_keyed_mutex
bool compare_VkWin32KeyedMutexAcquireReleaseInfoNV(VkWin32KeyedMutexAcquireReleaseInfoNV const *s1,
                                                   VkWin32KeyedMutexAcquireReleaseInfoNV const *s2);
#endif

#if VK_KHR_win32_surface
bool compare_VkWin32SurfaceCreateInfoKHR(VkWin32SurfaceCreateInfoKHR const *s1,
                                         VkWin32SurfaceCreateInfoKHR const *s2);
#endif

bool compare_VkWriteDescriptorSet(VkWriteDescriptorSet const *s1, VkWriteDescriptorSet const *s2);

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkWriteDescriptorSetAccelerationStructureKHR(
    VkWriteDescriptorSetAccelerationStructureKHR const *s1,
    VkWriteDescriptorSetAccelerationStructureKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *s1,
    VkWriteDescriptorSetAccelerationStructureNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_NV_ray_tracing
bool compare_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *s1,
    VkWriteDescriptorSetAccelerationStructureNV const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkWriteDescriptorSetInlineUniformBlock(
    VkWriteDescriptorSetInlineUniformBlock const *s1,
    VkWriteDescriptorSetInlineUniformBlock const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block
bool compare_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *s1,
    VkWriteDescriptorSetInlineUniformBlockEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block
bool compare_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *s1,
    VkWriteDescriptorSetInlineUniformBlockEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkWriteDescriptorSetPartitionedAccelerationStructureNV(
    VkWriteDescriptorSetPartitionedAccelerationStructureNV const *s1,
    VkWriteDescriptorSetPartitionedAccelerationStructureNV const *s2);
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkWriteDescriptorSetTensorARM(VkWriteDescriptorSetTensorARM const *s1,
                                           VkWriteDescriptorSetTensorARM const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkWriteIndirectExecutionSetPipelineEXT(
    VkWriteIndirectExecutionSetPipelineEXT const *s1,
    VkWriteIndirectExecutionSetPipelineEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands && VK_EXT_shader_object
bool compare_VkWriteIndirectExecutionSetShaderEXT(VkWriteIndirectExecutionSetShaderEXT const *s1,
                                                  VkWriteIndirectExecutionSetShaderEXT const *s2);
#endif

#if VK_EXT_hdr_metadata
bool compare_VkXYColorEXT(VkXYColorEXT const *s1, VkXYColorEXT const *s2);
#endif

#if VK_KHR_xcb_surface
bool compare_VkXcbSurfaceCreateInfoKHR(VkXcbSurfaceCreateInfoKHR const *s1,
                                       VkXcbSurfaceCreateInfoKHR const *s2);
#endif

#if VK_KHR_xlib_surface
bool compare_VkXlibSurfaceCreateInfoKHR(VkXlibSurfaceCreateInfoKHR const *s1,
                                        VkXlibSurfaceCreateInfoKHR const *s2);
#endif

#ifdef VK_STRUCT_COMPARE_CONFIG_MAIN

#include <string.h>

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAabbPositionsKHR(VkAabbPositionsKHR const *s1, VkAabbPositionsKHR const *s2) {
  // local, simple types
  if ((s1->minX != s2->minX) || (s1->minY != s2->minY) || (s1->minZ != s2->minZ) ||
      (s1->maxX != s2->maxX) || (s1->maxY != s2->maxY) || (s1->maxZ != s2->maxZ))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkAabbPositionsNV(VkAabbPositionsNV const *s1, VkAabbPositionsNV const *s2) {
  // local, simple types
  if ((s1->minX != s2->minX) || (s1->minY != s2->minY) || (s1->minZ != s2->minZ) ||
      (s1->maxX != s2->maxX) || (s1->maxY != s2->maxY) || (s1->maxZ != s2->maxZ))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureBuildGeometryInfoKHR(
    VkAccelerationStructureBuildGeometryInfoKHR const *s1,
    VkAccelerationStructureBuildGeometryInfoKHR const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags) || (s1->update != s2->update) ||
      (s1->srcAccelerationStructure != s2->srcAccelerationStructure) ||
      (s1->dstAccelerationStructure != s2->dstAccelerationStructure) ||
      (s1->geometryArrayOfPointers != s2->geometryArrayOfPointers) ||
      (s1->geometryCount != s2->geometryCount))
    return false;

  // union types (no selector)
  if (memcmp(&s1->scratchData, &s2->scratchData, sizeof(VkDeviceOrHostAddressKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureBuildGeometryInfoKHR(
    VkAccelerationStructureBuildGeometryInfoKHR const *s1,
    VkAccelerationStructureBuildGeometryInfoKHR const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags) || (s1->mode != s2->mode) ||
      (s1->srcAccelerationStructure != s2->srcAccelerationStructure) ||
      (s1->dstAccelerationStructure != s2->dstAccelerationStructure) ||
      (s1->geometryCount != s2->geometryCount))
    return false;

  // union types (no selector)
  if (memcmp(&s1->scratchData, &s2->scratchData, sizeof(VkDeviceOrHostAddressKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureBuildOffsetInfoKHR(
    VkAccelerationStructureBuildOffsetInfoKHR const *s1,
    VkAccelerationStructureBuildOffsetInfoKHR const *s2) {
  // local, simple types
  if ((s1->primitiveCount != s2->primitiveCount) || (s1->primitiveOffset != s2->primitiveOffset) ||
      (s1->firstVertex != s2->firstVertex) || (s1->transformOffset != s2->transformOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureBuildRangeInfoKHR(
    VkAccelerationStructureBuildRangeInfoKHR const *s1,
    VkAccelerationStructureBuildRangeInfoKHR const *s2) {
  // local, simple types
  if ((s1->primitiveCount != s2->primitiveCount) || (s1->primitiveOffset != s2->primitiveOffset) ||
      (s1->firstVertex != s2->firstVertex) || (s1->transformOffset != s2->transformOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureBuildSizesInfoKHR(
    VkAccelerationStructureBuildSizesInfoKHR const *s1,
    VkAccelerationStructureBuildSizesInfoKHR const *s2) {
  // local, simple types
  if ((s1->accelerationStructureSize != s2->accelerationStructureSize) ||
      (s1->updateScratchSize != s2->updateScratchSize) ||
      (s1->buildScratchSize != s2->buildScratchSize))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_descriptor_buffer &&                                       \
     (VK_KHR_acceleration_structure || VK_NV_ray_tracing)) ||                                      \
    (VK_HEADER_VERSION >= 235 && VK_HEADER_VERSION <= 240 && VK_EXT_descriptor_buffer)
bool compare_VkAccelerationStructureCaptureDescriptorDataInfoEXT(
    VkAccelerationStructureCaptureDescriptorDataInfoEXT const *s1,
    VkAccelerationStructureCaptureDescriptorDataInfoEXT const *s2) {
  // local, simple types
  if ((s1->accelerationStructure != s2->accelerationStructure) ||
      (s1->accelerationStructureNV != s2->accelerationStructureNV))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureCreateGeometryTypeInfoKHR(
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *s1,
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *s2) {
  // local, simple types
  if ((s1->geometryType != s2->geometryType) || (s1->maxPrimitiveCount != s2->maxPrimitiveCount) ||
      (s1->indexType != s2->indexType) || (s1->maxVertexCount != s2->maxVertexCount) ||
      (s1->vertexFormat != s2->vertexFormat) || (s1->allowsTransforms != s2->allowsTransforms))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureCreateInfoKHR(VkAccelerationStructureCreateInfoKHR const *s1,
                                                  VkAccelerationStructureCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->compactedSize != s2->compactedSize) || (s1->type != s2->type) ||
      (s1->flags != s2->flags) || (s1->maxGeometryCount != s2->maxGeometryCount) ||
      (s1->deviceAddress != s2->deviceAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureCreateInfoKHR(VkAccelerationStructureCreateInfoKHR const *s1,
                                                  VkAccelerationStructureCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->createFlags != s2->createFlags) || (s1->buffer != s2->buffer) ||
      (s1->offset != s2->offset) || (s1->size != s2->size) || (s1->type != s2->type) ||
      (s1->deviceAddress != s2->deviceAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureCreateInfoNV(VkAccelerationStructureCreateInfoNV const *s1,
                                                 VkAccelerationStructureCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->compactedSize != s2->compactedSize))
    return false;

  // local, Vulkan struct types
  if (!compare_VkAccelerationStructureInfoNV(&s1->info, &s2->info))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkAccelerationStructureCreateInfoNVX(VkAccelerationStructureCreateInfoNVX const *s1,
                                                  VkAccelerationStructureCreateInfoNVX const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags) ||
      (s1->compactedSize != s2->compactedSize) || (s1->instanceCount != s2->instanceCount) ||
      (s1->geometryCount != s2->geometryCount))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAccelerationStructureDeviceAddressInfoKHR(
    VkAccelerationStructureDeviceAddressInfoKHR const *s1,
    VkAccelerationStructureDeviceAddressInfoKHR const *s2) {
  // local, simple types
  if ((s1->accelerationStructure != s2->accelerationStructure))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAccelerationStructureGeometryAabbsDataKHR(
    VkAccelerationStructureGeometryAabbsDataKHR const *s1,
    VkAccelerationStructureGeometryAabbsDataKHR const *s2) {
  // local, simple types
  if ((s1->stride != s2->stride))
    return false;

  // union types (no selector)
  if (memcmp(&s1->data, &s2->data, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAccelerationStructureGeometryInstancesDataKHR(
    VkAccelerationStructureGeometryInstancesDataKHR const *s1,
    VkAccelerationStructureGeometryInstancesDataKHR const *s2) {
  // local, simple types
  if ((s1->arrayOfPointers != s2->arrayOfPointers))
    return false;

  // union types (no selector)
  if (memcmp(&s1->data, &s2->data, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAccelerationStructureGeometryKHR(VkAccelerationStructureGeometryKHR const *s1,
                                                VkAccelerationStructureGeometryKHR const *s2) {
  // local, simple types
  if ((s1->geometryType != s2->geometryType) || (s1->flags != s2->flags))
    return false;

  // union types (with selector)
  switch (s1->geometryType) {
  // VkAccelerationStructureGeometryDataKHR
  case VK_GEOMETRY_TYPE_TRIANGLES_KHR:
    if (!compare_VkAccelerationStructureGeometryTrianglesDataKHR(&s1->geometry.triangles,
                                                                 &s2->geometry.triangles))
      return false;

  case VK_GEOMETRY_TYPE_AABBS_KHR:
    if (!compare_VkAccelerationStructureGeometryAabbsDataKHR(&s1->geometry.aabbs,
                                                             &s2->geometry.aabbs))
      return false;

#if VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing && VK_ENABLE_BETA_EXTENSIONS
  case VK_GEOMETRY_TYPE_INSTANCES_KHR:
#endif
#if VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing && VK_ENABLE_BETA_EXTENSIONS
    if (!compare_VkAccelerationStructureGeometryInstancesDataKHR(&s1->geometry.instances,
                                                                 &s2->geometry.instances))
      return false;
#endif

  default:;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres
bool compare_VkAccelerationStructureGeometryLinearSweptSpheresDataNV(
    VkAccelerationStructureGeometryLinearSweptSpheresDataNV const *s1,
    VkAccelerationStructureGeometryLinearSweptSpheresDataNV const *s2) {
  // local, simple types
  if ((s1->vertexFormat != s2->vertexFormat) || (s1->vertexStride != s2->vertexStride) ||
      (s1->radiusFormat != s2->radiusFormat) || (s1->radiusStride != s2->radiusStride) ||
      (s1->indexType != s2->indexType) || (s1->indexStride != s2->indexStride) ||
      (s1->indexingMode != s2->indexingMode) || (s1->endCapsMode != s2->endCapsMode))
    return false;

  // union types (no selector)
  if (memcmp(&s1->vertexData, &s2->vertexData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->radiusData, &s2->radiusData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->indexData, &s2->indexData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureGeometryMotionTrianglesDataNV(
    VkAccelerationStructureGeometryMotionTrianglesDataNV const *s1,
    VkAccelerationStructureGeometryMotionTrianglesDataNV const *s2) {
  // union types (no selector)
  if (memcmp(&s1->vertexData, &s2->vertexData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres
bool compare_VkAccelerationStructureGeometrySpheresDataNV(
    VkAccelerationStructureGeometrySpheresDataNV const *s1,
    VkAccelerationStructureGeometrySpheresDataNV const *s2) {
  // local, simple types
  if ((s1->vertexFormat != s2->vertexFormat) || (s1->vertexStride != s2->vertexStride) ||
      (s1->radiusFormat != s2->radiusFormat) || (s1->radiusStride != s2->radiusStride) ||
      (s1->indexType != s2->indexType) || (s1->indexStride != s2->indexStride))
    return false;

  // union types (no selector)
  if (memcmp(&s1->vertexData, &s2->vertexData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->radiusData, &s2->radiusData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->indexData, &s2->indexData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureGeometryTrianglesDataKHR(
    VkAccelerationStructureGeometryTrianglesDataKHR const *s1,
    VkAccelerationStructureGeometryTrianglesDataKHR const *s2) {
  // local, simple types
  if ((s1->vertexFormat != s2->vertexFormat) || (s1->vertexStride != s2->vertexStride) ||
      (s1->indexType != s2->indexType))
    return false;

  // union types (no selector)
  if (memcmp(&s1->vertexData, &s2->vertexData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->indexData, &s2->indexData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->transformData, &s2->transformData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureGeometryTrianglesDataKHR(
    VkAccelerationStructureGeometryTrianglesDataKHR const *s1,
    VkAccelerationStructureGeometryTrianglesDataKHR const *s2) {
  // local, simple types
  if ((s1->vertexFormat != s2->vertexFormat) || (s1->vertexStride != s2->vertexStride) ||
      (s1->maxVertex != s2->maxVertex) || (s1->indexType != s2->indexType))
    return false;

  // union types (no selector)
  if (memcmp(&s1->vertexData, &s2->vertexData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->indexData, &s2->indexData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->transformData, &s2->transformData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureInfoNV(VkAccelerationStructureInfoNV const *s1,
                                           VkAccelerationStructureInfoNV const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags) ||
      (s1->instanceCount != s2->instanceCount) || (s1->geometryCount != s2->geometryCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 138 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR const *s1,
                                                VkAccelerationStructureInstanceKHR const *s2) {
  // local, simple types
  if ((s1->instanceCustomIndex != s2->instanceCustomIndex) || (s1->mask != s2->mask) ||
      (s1->instanceShaderBindingTableRecordOffset != s2->instanceShaderBindingTableRecordOffset) ||
      (s1->flags != s2->flags) ||
      (s1->accelerationStructureReference != s2->accelerationStructureReference))
    return false;

  // local, Vulkan struct types
  if (!compare_VkTransformMatrixKHR(&s1->transform, &s2->transform))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkAccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR const *s1,
                                                VkAccelerationStructureInstanceKHR const *s2) {
  // local, simple types
  if ((s1->instanceCustomIndex != s2->instanceCustomIndex) || (s1->mask != s2->mask) ||
      (s1->instanceShaderBindingTableRecordOffset != s2->instanceShaderBindingTableRecordOffset) ||
      (s1->flags != s2->flags) ||
      (s1->accelerationStructureReference != s2->accelerationStructureReference))
    return false;

  // local, Vulkan struct types
  if (!compare_VkTransformMatrixKHR(&s1->transform, &s2->transform))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureInstanceNV(VkAccelerationStructureInstanceNV const *s1,
                                               VkAccelerationStructureInstanceNV const *s2) {
  // local, simple types
  if ((s1->instanceCustomIndex != s2->instanceCustomIndex) || (s1->mask != s2->mask) ||
      (s1->instanceShaderBindingTableRecordOffset != s2->instanceShaderBindingTableRecordOffset) ||
      (s1->flags != s2->flags) ||
      (s1->accelerationStructureReference != s2->accelerationStructureReference))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureMatrixMotionInstanceNV(
    VkAccelerationStructureMatrixMotionInstanceNV const *s1,
    VkAccelerationStructureMatrixMotionInstanceNV const *s2) {
  // local, simple types
  if ((s1->instanceCustomIndex != s2->instanceCustomIndex) || (s1->mask != s2->mask) ||
      (s1->instanceShaderBindingTableRecordOffset != s2->instanceShaderBindingTableRecordOffset) ||
      (s1->flags != s2->flags) ||
      (s1->accelerationStructureReference != s2->accelerationStructureReference))
    return false;

  // local, Vulkan struct types
  if (!compare_VkTransformMatrixKHR(&s1->transformT0, &s2->transformT0) ||
      !compare_VkTransformMatrixKHR(&s1->transformT1, &s2->transformT1))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureMemoryRequirementsInfoKHR(
    VkAccelerationStructureMemoryRequirementsInfoKHR const *s1,
    VkAccelerationStructureMemoryRequirementsInfoKHR const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->buildType != s2->buildType) ||
      (s1->accelerationStructure != s2->accelerationStructure))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureMemoryRequirementsInfoNV(
    VkAccelerationStructureMemoryRequirementsInfoNV const *s1,
    VkAccelerationStructureMemoryRequirementsInfoNV const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->accelerationStructure != s2->accelerationStructure))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkAccelerationStructureMemoryRequirementsInfoNVX(
    VkAccelerationStructureMemoryRequirementsInfoNVX const *s1,
    VkAccelerationStructureMemoryRequirementsInfoNVX const *s2) {
  // local, simple types
  if ((s1->accelerationStructure != s2->accelerationStructure))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureMotionInfoNV(VkAccelerationStructureMotionInfoNV const *s1,
                                                 VkAccelerationStructureMotionInfoNV const *s2) {
  // local, simple types
  if ((s1->maxInstances != s2->maxInstances) || (s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureMotionInstanceNV(
    VkAccelerationStructureMotionInstanceNV const *s1,
    VkAccelerationStructureMotionInstanceNV const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags))
    return false;

  // union types (with selector)
  switch (s1->type) {
  // VkAccelerationStructureMotionInstanceDataNV
  case VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV:
    if (!compare_VkAccelerationStructureInstanceKHR(&s1->data.staticInstance,
                                                    &s2->data.staticInstance))
      return false;

  case VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV:
    if (!compare_VkAccelerationStructureMatrixMotionInstanceNV(&s1->data.matrixMotionInstance,
                                                               &s2->data.matrixMotionInstance))
      return false;

  case VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV:
    if (!compare_VkAccelerationStructureSRTMotionInstanceNV(&s1->data.srtMotionInstance,
                                                            &s2->data.srtMotionInstance))
      return false;

  default:;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureSRTMotionInstanceNV(
    VkAccelerationStructureSRTMotionInstanceNV const *s1,
    VkAccelerationStructureSRTMotionInstanceNV const *s2) {
  // local, simple types
  if ((s1->instanceCustomIndex != s2->instanceCustomIndex) || (s1->mask != s2->mask) ||
      (s1->instanceShaderBindingTableRecordOffset != s2->instanceShaderBindingTableRecordOffset) ||
      (s1->flags != s2->flags) ||
      (s1->accelerationStructureReference != s2->accelerationStructureReference))
    return false;

  // local, Vulkan struct types
  if (!compare_VkSRTDataNV(&s1->transformT0, &s2->transformT0) ||
      !compare_VkSRTDataNV(&s1->transformT1, &s2->transformT1))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureTrianglesDisplacementMicromapNV(
    VkAccelerationStructureTrianglesDisplacementMicromapNV const *s1,
    VkAccelerationStructureTrianglesDisplacementMicromapNV const *s2) {
  // local, simple types
  if ((s1->displacementBiasAndScaleFormat != s2->displacementBiasAndScaleFormat) ||
      (s1->displacementVectorFormat != s2->displacementVectorFormat) ||
      (s1->displacementBiasAndScaleStride != s2->displacementBiasAndScaleStride) ||
      (s1->displacementVectorStride != s2->displacementVectorStride) ||
      (s1->displacedMicromapPrimitiveFlagsStride != s2->displacedMicromapPrimitiveFlagsStride) ||
      (s1->indexType != s2->indexType) || (s1->indexStride != s2->indexStride) ||
      (s1->baseTriangle != s2->baseTriangle) || (s1->usageCountsCount != s2->usageCountsCount) ||
      (s1->micromap != s2->micromap))
    return false;

  // union types (no selector)
  if (memcmp(&s1->displacementBiasAndScaleBuffer, &s2->displacementBiasAndScaleBuffer,
             sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->displacementVectorBuffer, &s2->displacementVectorBuffer,
             sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->displacedMicromapPrimitiveFlags, &s2->displacedMicromapPrimitiveFlags,
             sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->indexBuffer, &s2->indexBuffer, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkAccelerationStructureTrianglesOpacityMicromapEXT(
    VkAccelerationStructureTrianglesOpacityMicromapEXT const *s1,
    VkAccelerationStructureTrianglesOpacityMicromapEXT const *s2) {
  // local, simple types
  if ((s1->indexType != s2->indexType) || (s1->indexStride != s2->indexStride) ||
      (s1->baseTriangle != s2->baseTriangle) || (s1->usageCountsCount != s2->usageCountsCount) ||
      (s1->micromap != s2->micromap))
    return false;

  // union types (no selector)
  if (memcmp(&s1->indexBuffer, &s2->indexBuffer, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureVersionInfoKHR(
    VkAccelerationStructureVersionInfoKHR const *s1,
    VkAccelerationStructureVersionInfoKHR const *s2) {
  // non-local members

  // pVersionData - 2*VK_UUID_SIZE
  if (s1->pVersionData != s2->pVersionData &&
      (s1->pVersionData == NULL || s2->pVersionData == NULL ||
       memcmp(s1->pVersionData, s2->pVersionData, 2 * VK_UUID_SIZE) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkAccelerationStructureVersionKHR(VkAccelerationStructureVersionKHR const *s1,
                                               VkAccelerationStructureVersionKHR const *s2) {
  // non-local members

  // versionData - 2*VK_UUID_SIZE
  if (s1->versionData != s2->versionData &&
      (s1->versionData == NULL || s2->versionData == NULL ||
       memcmp(s1->versionData, s2->versionData, 2 * VK_UUID_SIZE) != 0))
    return false;
  return true;
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkAcquireNextImageInfoKHR(VkAcquireNextImageInfoKHR const *s1,
                                       VkAcquireNextImageInfoKHR const *s2) {
  // local, simple types
  if ((s1->swapchain != s2->swapchain) || (s1->timeout != s2->timeout) ||
      (s1->semaphore != s2->semaphore) || (s1->fence != s2->fence) ||
      (s1->deviceMask != s2->deviceMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkAcquireProfilingLockInfoKHR(VkAcquireProfilingLockInfoKHR const *s1,
                                           VkAcquireProfilingLockInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->timeout != s2->timeout))
    return false;

  return true;
}
#endif

bool compare_VkAllocationCallbacks(VkAllocationCallbacks const *s1,
                                   VkAllocationCallbacks const *s2) {
  // local, simple types
  if ((s1->pfnAllocation != s2->pfnAllocation) || (s1->pfnReallocation != s2->pfnReallocation) ||
      (s1->pfnFree != s2->pfnFree) || (s1->pfnInternalAllocation != s2->pfnInternalAllocation) ||
      (s1->pfnInternalFree != s2->pfnInternalFree))
    return false;

  // non-local members
  if (s1->pUserData != s2->pUserData)
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling
bool compare_VkAmigoProfilingSubmitInfoSEC(VkAmigoProfilingSubmitInfoSEC const *s1,
                                           VkAmigoProfilingSubmitInfoSEC const *s2) {
  // local, simple types
  if ((s1->firstDrawTimestamp != s2->firstDrawTimestamp) ||
      (s1->swapBufferTimestamp != s2->swapBufferTimestamp))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 &&                                        \
    VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s1,
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->externalFormat != s2->externalFormat) ||
      (s1->formatFeatures != s2->formatFeatures) ||
      (s1->suggestedYcbcrModel != s2->suggestedYcbcrModel) ||
      (s1->suggestedYcbcrRange != s2->suggestedYcbcrRange) ||
      (s1->suggestedXChromaOffset != s2->suggestedXChromaOffset) ||
      (s1->suggestedYChromaOffset != s2->suggestedYChromaOffset))
    return false;

  // local, Vulkan struct types
  if (!compare_VkComponentMapping(&s1->samplerYcbcrConversionComponents,
                                  &s2->samplerYcbcrConversionComponents))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 281 && VK_ANDROID_external_memory_android_hardware_buffer &&             \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer && VK_KHR_format_feature_flags2) ||        \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer)
bool compare_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s1,
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->externalFormat != s2->externalFormat) ||
      (s1->formatFeatures != s2->formatFeatures) ||
      (s1->suggestedYcbcrModel != s2->suggestedYcbcrModel) ||
      (s1->suggestedYcbcrRange != s2->suggestedYcbcrRange) ||
      (s1->suggestedXChromaOffset != s2->suggestedXChromaOffset) ||
      (s1->suggestedYChromaOffset != s2->suggestedYChromaOffset))
    return false;

  // local, Vulkan struct types
  if (!compare_VkComponentMapping(&s1->samplerYcbcrConversionComponents,
                                  &s2->samplerYcbcrConversionComponents))
    return false;

  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferFormatPropertiesANDROID(
    VkAndroidHardwareBufferFormatPropertiesANDROID const *s1,
    VkAndroidHardwareBufferFormatPropertiesANDROID const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->externalFormat != s2->externalFormat) ||
      (s1->formatFeatures != s2->formatFeatures) ||
      (s1->suggestedYcbcrModel != s2->suggestedYcbcrModel) ||
      (s1->suggestedYcbcrRange != s2->suggestedYcbcrRange) ||
      (s1->suggestedXChromaOffset != s2->suggestedXChromaOffset) ||
      (s1->suggestedYChromaOffset != s2->suggestedYChromaOffset))
    return false;

  // local, Vulkan struct types
  if (!compare_VkComponentMapping(&s1->samplerYcbcrConversionComponents,
                                  &s2->samplerYcbcrConversionComponents))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve
bool compare_VkAndroidHardwareBufferFormatResolvePropertiesANDROID(
    VkAndroidHardwareBufferFormatResolvePropertiesANDROID const *s1,
    VkAndroidHardwareBufferFormatResolvePropertiesANDROID const *s2) {
  // local, simple types
  if ((s1->colorAttachmentFormat != s2->colorAttachmentFormat))
    return false;

  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferPropertiesANDROID(
    VkAndroidHardwareBufferPropertiesANDROID const *s1,
    VkAndroidHardwareBufferPropertiesANDROID const *s2) {
  // local, simple types
  if ((s1->allocationSize != s2->allocationSize) || (s1->memoryTypeBits != s2->memoryTypeBits))
    return false;

  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferUsageANDROID(VkAndroidHardwareBufferUsageANDROID const *s1,
                                                 VkAndroidHardwareBufferUsageANDROID const *s2) {
  // local, simple types
  if ((s1->androidHardwareBufferUsage != s2->androidHardwareBufferUsage))
    return false;

  return true;
}
#endif

#if VK_KHR_android_surface
bool compare_VkAndroidSurfaceCreateInfoKHR(VkAndroidSurfaceCreateInfoKHR const *s1,
                                           VkAndroidSurfaceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // non-local members
  if (s1->window != s2->window)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag
bool compare_VkAntiLagDataAMD(VkAntiLagDataAMD const *s1, VkAntiLagDataAMD const *s2) {
  // local, simple types
  if ((s1->mode != s2->mode) || (s1->maxFPS != s2->maxFPS))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag
bool compare_VkAntiLagPresentationInfoAMD(VkAntiLagPresentationInfoAMD const *s1,
                                          VkAntiLagPresentationInfoAMD const *s2) {
  // local, simple types
  if ((s1->stage != s2->stage) || (s1->frameIndex != s2->frameIndex))
    return false;

  return true;
}
#endif

bool compare_VkApplicationInfo(VkApplicationInfo const *s1, VkApplicationInfo const *s2) {
  // local, simple types
  if ((s1->applicationVersion != s2->applicationVersion) ||
      (s1->engineVersion != s2->engineVersion) || (s1->apiVersion != s2->apiVersion))
    return false;

  // non-local members

  // pApplicationName - null-terminated
  if (s1->pApplicationName != s2->pApplicationName &&
      (s1->pApplicationName == NULL || s2->pApplicationName == NULL ||
       strcmp(s1->pApplicationName, s2->pApplicationName) != 0))
    return false;

  // pEngineName - null-terminated
  if (s1->pEngineName != s2->pEngineName && (s1->pEngineName == NULL || s2->pEngineName == NULL ||
                                             strcmp(s1->pEngineName, s2->pEngineName) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 241 && VK_EXT_application_parameters
bool compare_VkApplicationParametersEXT(VkApplicationParametersEXT const *s1,
                                        VkApplicationParametersEXT const *s2) {
  // local, simple types
  if ((s1->vendorID != s2->vendorID) || (s1->deviceID != s2->deviceID) || (s1->key != s2->key) ||
      (s1->value != s2->value))
    return false;

  return true;
}
#endif

bool compare_VkAttachmentDescription(VkAttachmentDescription const *s1,
                                     VkAttachmentDescription const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->format != s2->format) || (s1->samples != s2->samples) ||
      (s1->loadOp != s2->loadOp) || (s1->storeOp != s2->storeOp) ||
      (s1->stencilLoadOp != s2->stencilLoadOp) || (s1->stencilStoreOp != s2->stencilStoreOp) ||
      (s1->initialLayout != s2->initialLayout) || (s1->finalLayout != s2->finalLayout))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentDescription2(VkAttachmentDescription2 const *s1,
                                      VkAttachmentDescription2 const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->format != s2->format) || (s1->samples != s2->samples) ||
      (s1->loadOp != s2->loadOp) || (s1->storeOp != s2->storeOp) ||
      (s1->stencilLoadOp != s2->stencilLoadOp) || (s1->stencilStoreOp != s2->stencilStoreOp) ||
      (s1->initialLayout != s2->initialLayout) || (s1->finalLayout != s2->finalLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *s1,
                                         VkAttachmentDescription2KHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->format != s2->format) || (s1->samples != s2->samples) ||
      (s1->loadOp != s2->loadOp) || (s1->storeOp != s2->storeOp) ||
      (s1->stencilLoadOp != s2->stencilLoadOp) || (s1->stencilStoreOp != s2->stencilStoreOp) ||
      (s1->initialLayout != s2->initialLayout) || (s1->finalLayout != s2->finalLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *s1,
                                         VkAttachmentDescription2KHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->format != s2->format) || (s1->samples != s2->samples) ||
      (s1->loadOp != s2->loadOp) || (s1->storeOp != s2->storeOp) ||
      (s1->stencilLoadOp != s2->stencilLoadOp) || (s1->stencilStoreOp != s2->stencilStoreOp) ||
      (s1->initialLayout != s2->initialLayout) || (s1->finalLayout != s2->finalLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentDescriptionStencilLayout(VkAttachmentDescriptionStencilLayout const *s1,
                                                  VkAttachmentDescriptionStencilLayout const *s2) {
  // local, simple types
  if ((s1->stencilInitialLayout != s2->stencilInitialLayout) ||
      (s1->stencilFinalLayout != s2->stencilFinalLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *s1,
    VkAttachmentDescriptionStencilLayoutKHR const *s2) {
  // local, simple types
  if ((s1->stencilInitialLayout != s2->stencilInitialLayout) ||
      (s1->stencilFinalLayout != s2->stencilFinalLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *s1,
    VkAttachmentDescriptionStencilLayoutKHR const *s2) {
  // local, simple types
  if ((s1->stencilInitialLayout != s2->stencilInitialLayout) ||
      (s1->stencilFinalLayout != s2->stencilFinalLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_unified_image_layouts &&                                    \
    VK_EXT_attachment_feedback_loop_layout && ((VK_VERSION_1_3 || VK_KHR_dynamic_rendering))
bool compare_VkAttachmentFeedbackLoopInfoEXT(VkAttachmentFeedbackLoopInfoEXT const *s1,
                                             VkAttachmentFeedbackLoopInfoEXT const *s2) {
  // local, simple types
  if ((s1->feedbackLoopEnable != s2->feedbackLoopEnable))
    return false;

  return true;
}
#endif

bool compare_VkAttachmentReference(VkAttachmentReference const *s1,
                                   VkAttachmentReference const *s2) {
  // local, simple types
  if ((s1->attachment != s2->attachment) || (s1->layout != s2->layout))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentReference2(VkAttachmentReference2 const *s1,
                                    VkAttachmentReference2 const *s2) {
  // local, simple types
  if ((s1->attachment != s2->attachment) || (s1->layout != s2->layout) ||
      (s1->aspectMask != s2->aspectMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *s1,
                                       VkAttachmentReference2KHR const *s2) {
  // local, simple types
  if ((s1->attachment != s2->attachment) || (s1->layout != s2->layout) ||
      (s1->aspectMask != s2->aspectMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *s1,
                                       VkAttachmentReference2KHR const *s2) {
  // local, simple types
  if ((s1->attachment != s2->attachment) || (s1->layout != s2->layout) ||
      (s1->aspectMask != s2->aspectMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentReferenceStencilLayout(VkAttachmentReferenceStencilLayout const *s1,
                                                VkAttachmentReferenceStencilLayout const *s2) {
  // local, simple types
  if ((s1->stencilLayout != s2->stencilLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentReferenceStencilLayoutKHR(
    VkAttachmentReferenceStencilLayoutKHR const *s1,
    VkAttachmentReferenceStencilLayoutKHR const *s2) {
  // local, simple types
  if ((s1->stencilLayout != s2->stencilLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentReferenceStencilLayoutKHR(
    VkAttachmentReferenceStencilLayoutKHR const *s1,
    VkAttachmentReferenceStencilLayoutKHR const *s2) {
  // local, simple types
  if ((s1->stencilLayout != s2->stencilLayout))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_AMD_mixed_attachment_samples &&                                \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_AMD_mixed_attachment_samples) ||                                                           \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
bool compare_VkAttachmentSampleCountInfoAMD(VkAttachmentSampleCountInfoAMD const *s1,
                                            VkAttachmentSampleCountInfoAMD const *s2) {
  // local, simple types
  if ((s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthStencilAttachmentSamples != s2->depthStencilAttachmentSamples))
    return false;

  // non-local members

  // pColorAttachmentSamples - colorAttachmentCount
  if (s1->pColorAttachmentSamples != s2->pColorAttachmentSamples &&
      (s1->pColorAttachmentSamples == NULL || s2->pColorAttachmentSamples == NULL ||
       memcmp(s1->pColorAttachmentSamples, s2->pColorAttachmentSamples,
              (s1->colorAttachmentCount) * sizeof(VkSampleCountFlagBits)) != 0))
    return false;
  return true;
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_framebuffer_mixed_samples &&                                \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_NV_framebuffer_mixed_samples) ||                                                           \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
bool compare_VkAttachmentSampleCountInfoNV(VkAttachmentSampleCountInfoNV const *s1,
                                           VkAttachmentSampleCountInfoNV const *s2) {
  // local, simple types
  if ((s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthStencilAttachmentSamples != s2->depthStencilAttachmentSamples))
    return false;

  // non-local members

  // pColorAttachmentSamples - colorAttachmentCount
  if (s1->pColorAttachmentSamples != s2->pColorAttachmentSamples &&
      (s1->pColorAttachmentSamples == NULL || s2->pColorAttachmentSamples == NULL ||
       memcmp(s1->pColorAttachmentSamples, s2->pColorAttachmentSamples,
              (s1->colorAttachmentCount) * sizeof(VkSampleCountFlagBits)) != 0))
    return false;
  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkAttachmentSampleLocationsEXT(VkAttachmentSampleLocationsEXT const *s1,
                                            VkAttachmentSampleLocationsEXT const *s2) {
  // local, simple types
  if ((s1->attachmentIndex != s2->attachmentIndex))
    return false;

  // local, Vulkan struct types
  if (!compare_VkSampleLocationsInfoEXT(&s1->sampleLocationsInfo, &s2->sampleLocationsInfo))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkBindAccelerationStructureMemoryInfoKHR(
    VkBindAccelerationStructureMemoryInfoKHR const *s1,
    VkBindAccelerationStructureMemoryInfoKHR const *s2) {
  // local, simple types
  if ((s1->accelerationStructure != s2->accelerationStructure) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->deviceIndexCount != s2->deviceIndexCount))
    return false;

  // non-local members

  // pDeviceIndices - deviceIndexCount
  if (s1->pDeviceIndices != s2->pDeviceIndices &&
      (s1->pDeviceIndices == NULL || s2->pDeviceIndices == NULL ||
       memcmp(s1->pDeviceIndices, s2->pDeviceIndices, (s1->deviceIndexCount) * sizeof(uint32_t)) !=
           0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *s1,
    VkBindAccelerationStructureMemoryInfoNV const *s2) {
  // local, simple types
  if ((s1->accelerationStructure != s2->accelerationStructure) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->deviceIndexCount != s2->deviceIndexCount))
    return false;

  // non-local members

  // pDeviceIndices - deviceIndexCount
  if (s1->pDeviceIndices != s2->pDeviceIndices &&
      (s1->pDeviceIndices == NULL || s2->pDeviceIndices == NULL ||
       memcmp(s1->pDeviceIndices, s2->pDeviceIndices, (s1->deviceIndexCount) * sizeof(uint32_t)) !=
           0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_NV_ray_tracing
bool compare_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *s1,
    VkBindAccelerationStructureMemoryInfoNV const *s2) {
  // local, simple types
  if ((s1->accelerationStructure != s2->accelerationStructure) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->deviceIndexCount != s2->deviceIndexCount))
    return false;

  // non-local members

  // pDeviceIndices - deviceIndexCount
  if (s1->pDeviceIndices != s2->pDeviceIndices &&
      (s1->pDeviceIndices == NULL || s2->pDeviceIndices == NULL ||
       memcmp(s1->pDeviceIndices, s2->pDeviceIndices, (s1->deviceIndexCount) * sizeof(uint32_t)) !=
           0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkBindAccelerationStructureMemoryInfoNVX(
    VkBindAccelerationStructureMemoryInfoNVX const *s1,
    VkBindAccelerationStructureMemoryInfoNVX const *s2) {
  // local, simple types
  if ((s1->accelerationStructure != s2->accelerationStructure) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->deviceIndexCount != s2->deviceIndexCount))
    return false;

  // non-local members

  // pDeviceIndices - deviceIndexCount
  if (s1->pDeviceIndices != s2->pDeviceIndices &&
      (s1->pDeviceIndices == NULL || s2->pDeviceIndices == NULL ||
       memcmp(s1->pDeviceIndices, s2->pDeviceIndices, (s1->deviceIndexCount) * sizeof(uint32_t)) !=
           0))
    return false;
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBindBufferMemoryDeviceGroupInfo(VkBindBufferMemoryDeviceGroupInfo const *s1,
                                               VkBindBufferMemoryDeviceGroupInfo const *s2) {
  // local, simple types
  if ((s1->deviceIndexCount != s2->deviceIndexCount))
    return false;

  // non-local members

  // pDeviceIndices - deviceIndexCount
  if (s1->pDeviceIndices != s2->pDeviceIndices &&
      (s1->pDeviceIndices == NULL || s2->pDeviceIndices == NULL ||
       memcmp(s1->pDeviceIndices, s2->pDeviceIndices, (s1->deviceIndexCount) * sizeof(uint32_t)) !=
           0))
    return false;
  return true;
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_device_group && VK_KHR_bind_memory2) ||                    \
    (VK_HEADER_VERSION <= 240 && VK_KHR_device_group)
bool compare_VkBindBufferMemoryDeviceGroupInfoKHR(VkBindBufferMemoryDeviceGroupInfoKHR const *s1,
                                                  VkBindBufferMemoryDeviceGroupInfoKHR const *s2) {
  // local, simple types
  if ((s1->deviceIndexCount != s2->deviceIndexCount))
    return false;

  // non-local members

  // pDeviceIndices - deviceIndexCount
  if (s1->pDeviceIndices != s2->pDeviceIndices &&
      (s1->pDeviceIndices == NULL || s2->pDeviceIndices == NULL ||
       memcmp(s1->pDeviceIndices, s2->pDeviceIndices, (s1->deviceIndexCount) * sizeof(uint32_t)) !=
           0))
    return false;
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBindBufferMemoryInfo(VkBindBufferMemoryInfo const *s1,
                                    VkBindBufferMemoryInfo const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset))
    return false;

  return true;
}
#endif

#if VK_KHR_bind_memory2
bool compare_VkBindBufferMemoryInfoKHR(VkBindBufferMemoryInfoKHR const *s1,
                                       VkBindBufferMemoryInfoKHR const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkBindDataGraphPipelineSessionMemoryInfoARM(
    VkBindDataGraphPipelineSessionMemoryInfoARM const *s1,
    VkBindDataGraphPipelineSessionMemoryInfoARM const *s2) {
  // local, simple types
  if ((s1->session != s2->session) || (s1->bindPoint != s2->bindPoint) ||
      (s1->objectIndex != s2->objectIndex) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_maintenance6 && VK_EXT_descriptor_buffer
bool compare_VkBindDescriptorBufferEmbeddedSamplersInfoEXT(
    VkBindDescriptorBufferEmbeddedSamplersInfoEXT const *s1,
    VkBindDescriptorBufferEmbeddedSamplersInfoEXT const *s2) {
  // local, simple types
  if ((s1->stageFlags != s2->stageFlags) || (s1->layout != s2->layout) || (s1->set != s2->set))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkBindDescriptorSetsInfo(VkBindDescriptorSetsInfo const *s1,
                                      VkBindDescriptorSetsInfo const *s2) {
  // local, simple types
  if ((s1->stageFlags != s2->stageFlags) || (s1->layout != s2->layout) ||
      (s1->firstSet != s2->firstSet) || (s1->descriptorSetCount != s2->descriptorSetCount) ||
      (s1->dynamicOffsetCount != s2->dynamicOffsetCount))
    return false;

  // non-local members

  // pDescriptorSets - descriptorSetCount
  if (s1->pDescriptorSets != s2->pDescriptorSets &&
      (s1->pDescriptorSets == NULL || s2->pDescriptorSets == NULL ||
       memcmp(s1->pDescriptorSets, s2->pDescriptorSets,
              (s1->descriptorSetCount) * sizeof(VkDescriptorSet)) != 0))
    return false;

  // pDynamicOffsets - dynamicOffsetCount
  if (s1->pDynamicOffsets != s2->pDynamicOffsets &&
      (s1->pDynamicOffsets == NULL || s2->pDynamicOffsets == NULL ||
       memcmp(s1->pDynamicOffsets, s2->pDynamicOffsets,
              (s1->dynamicOffsetCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6
bool compare_VkBindDescriptorSetsInfoKHR(VkBindDescriptorSetsInfoKHR const *s1,
                                         VkBindDescriptorSetsInfoKHR const *s2) {
  // local, simple types
  if ((s1->stageFlags != s2->stageFlags) || (s1->layout != s2->layout) ||
      (s1->firstSet != s2->firstSet) || (s1->descriptorSetCount != s2->descriptorSetCount) ||
      (s1->dynamicOffsetCount != s2->dynamicOffsetCount))
    return false;

  // non-local members

  // pDescriptorSets - descriptorSetCount
  if (s1->pDescriptorSets != s2->pDescriptorSets &&
      (s1->pDescriptorSets == NULL || s2->pDescriptorSets == NULL ||
       memcmp(s1->pDescriptorSets, s2->pDescriptorSets,
              (s1->descriptorSetCount) * sizeof(VkDescriptorSet)) != 0))
    return false;

  // pDynamicOffsets - dynamicOffsetCount
  if (s1->pDynamicOffsets != s2->pDynamicOffsets &&
      (s1->pDynamicOffsets == NULL || s2->pDynamicOffsets == NULL ||
       memcmp(s1->pDynamicOffsets, s2->pDynamicOffsets,
              (s1->dynamicOffsetCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6
bool compare_VkBindDescriptorSetsInfoKHR(VkBindDescriptorSetsInfoKHR const *s1,
                                         VkBindDescriptorSetsInfoKHR const *s2) {
  // local, simple types
  if ((s1->stageFlags != s2->stageFlags) || (s1->layout != s2->layout) ||
      (s1->firstSet != s2->firstSet) || (s1->descriptorSetCount != s2->descriptorSetCount) ||
      (s1->dynamicOffsetCount != s2->dynamicOffsetCount))
    return false;

  // non-local members

  // pDescriptorSets - descriptorSetCount
  if (s1->pDescriptorSets != s2->pDescriptorSets &&
      (s1->pDescriptorSets == NULL || s2->pDescriptorSets == NULL ||
       memcmp(s1->pDescriptorSets, s2->pDescriptorSets,
              (s1->descriptorSetCount) * sizeof(VkDescriptorSet)) != 0))
    return false;

  // pDynamicOffsets - dynamicOffsetCount
  if (s1->pDynamicOffsets != s2->pDynamicOffsets &&
      (s1->pDynamicOffsets == NULL || s2->pDynamicOffsets == NULL ||
       memcmp(s1->pDynamicOffsets, s2->pDynamicOffsets,
              (s1->dynamicOffsetCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBindImageMemoryDeviceGroupInfo(VkBindImageMemoryDeviceGroupInfo const *s1,
                                              VkBindImageMemoryDeviceGroupInfo const *s2) {
  // local, simple types
  if ((s1->deviceIndexCount != s2->deviceIndexCount) ||
      (s1->splitInstanceBindRegionCount != s2->splitInstanceBindRegionCount))
    return false;

  // non-local members

  // pDeviceIndices - deviceIndexCount
  if (s1->pDeviceIndices != s2->pDeviceIndices &&
      (s1->pDeviceIndices == NULL || s2->pDeviceIndices == NULL ||
       memcmp(s1->pDeviceIndices, s2->pDeviceIndices, (s1->deviceIndexCount) * sizeof(uint32_t)) !=
           0))
    return false;
  return true;
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_device_group && VK_KHR_bind_memory2) ||                    \
    (VK_HEADER_VERSION <= 240 && VK_KHR_device_group)
bool compare_VkBindImageMemoryDeviceGroupInfoKHR(VkBindImageMemoryDeviceGroupInfoKHR const *s1,
                                                 VkBindImageMemoryDeviceGroupInfoKHR const *s2) {
  // local, simple types
  if ((s1->deviceIndexCount != s2->deviceIndexCount) ||
      (s1->splitInstanceBindRegionCount != s2->splitInstanceBindRegionCount))
    return false;

  // non-local members

  // pDeviceIndices - deviceIndexCount
  if (s1->pDeviceIndices != s2->pDeviceIndices &&
      (s1->pDeviceIndices == NULL || s2->pDeviceIndices == NULL ||
       memcmp(s1->pDeviceIndices, s2->pDeviceIndices, (s1->deviceIndexCount) * sizeof(uint32_t)) !=
           0))
    return false;
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBindImageMemoryInfo(VkBindImageMemoryInfo const *s1,
                                   VkBindImageMemoryInfo const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset))
    return false;

  return true;
}
#endif

#if VK_KHR_bind_memory2
bool compare_VkBindImageMemoryInfoKHR(VkBindImageMemoryInfoKHR const *s1,
                                      VkBindImageMemoryInfoKHR const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkBindImageMemorySwapchainInfoKHR(VkBindImageMemorySwapchainInfoKHR const *s1,
                                               VkBindImageMemorySwapchainInfoKHR const *s2) {
  // local, simple types
  if ((s1->swapchain != s2->swapchain) || (s1->imageIndex != s2->imageIndex))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBindImagePlaneMemoryInfo(VkBindImagePlaneMemoryInfo const *s1,
                                        VkBindImagePlaneMemoryInfo const *s2) {
  // local, simple types
  if ((s1->planeAspect != s2->planeAspect))
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkBindImagePlaneMemoryInfoKHR(VkBindImagePlaneMemoryInfoKHR const *s1,
                                           VkBindImagePlaneMemoryInfoKHR const *s2) {
  // local, simple types
  if ((s1->planeAspect != s2->planeAspect))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkBindIndexBufferIndirectCommandEXT(VkBindIndexBufferIndirectCommandEXT const *s1,
                                                 VkBindIndexBufferIndirectCommandEXT const *s2) {
  // local, simple types
  if ((s1->bufferAddress != s2->bufferAddress) || (s1->size != s2->size) ||
      (s1->indexType != s2->indexType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindIndexBufferIndirectCommandNV(VkBindIndexBufferIndirectCommandNV const *s1,
                                                VkBindIndexBufferIndirectCommandNV const *s2) {
  // local, simple types
  if ((s1->bufferAddress != s2->bufferAddress) || (s1->size != s2->size) ||
      (s1->indexType != s2->indexType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkBindMemoryStatus(VkBindMemoryStatus const *s1, VkBindMemoryStatus const *s2) {
  // non-local members
  if (s1->pResult != s2->pResult)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6
bool compare_VkBindMemoryStatusKHR(VkBindMemoryStatusKHR const *s1,
                                   VkBindMemoryStatusKHR const *s2) {
  // non-local members
  if (s1->pResult != s2->pResult)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6
bool compare_VkBindMemoryStatusKHR(VkBindMemoryStatusKHR const *s1,
                                   VkBindMemoryStatusKHR const *s2) {
  // non-local members
  if (s1->pResult != s2->pResult)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute
bool compare_VkBindPipelineIndirectCommandNV(VkBindPipelineIndirectCommandNV const *s1,
                                             VkBindPipelineIndirectCommandNV const *s2) {
  // local, simple types
  if ((s1->pipelineAddress != s2->pipelineAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindShaderGroupIndirectCommandNV(VkBindShaderGroupIndirectCommandNV const *s1,
                                                VkBindShaderGroupIndirectCommandNV const *s2) {
  // local, simple types
  if ((s1->groupIndex != s2->groupIndex))
    return false;

  return true;
}
#endif

bool compare_VkBindSparseInfo(VkBindSparseInfo const *s1, VkBindSparseInfo const *s2) {
  // local, simple types
  if ((s1->waitSemaphoreCount != s2->waitSemaphoreCount) ||
      (s1->bufferBindCount != s2->bufferBindCount) ||
      (s1->imageOpaqueBindCount != s2->imageOpaqueBindCount) ||
      (s1->imageBindCount != s2->imageBindCount) ||
      (s1->signalSemaphoreCount != s2->signalSemaphoreCount))
    return false;

  // non-local members

  // pWaitSemaphores - waitSemaphoreCount
  if (s1->pWaitSemaphores != s2->pWaitSemaphores &&
      (s1->pWaitSemaphores == NULL || s2->pWaitSemaphores == NULL ||
       memcmp(s1->pWaitSemaphores, s2->pWaitSemaphores,
              (s1->waitSemaphoreCount) * sizeof(VkSemaphore)) != 0))
    return false;

  // pSignalSemaphores - signalSemaphoreCount
  if (s1->pSignalSemaphores != s2->pSignalSemaphores &&
      (s1->pSignalSemaphores == NULL || s2->pSignalSemaphores == NULL ||
       memcmp(s1->pSignalSemaphores, s2->pSignalSemaphores,
              (s1->signalSemaphoreCount) * sizeof(VkSemaphore)) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkBindTensorMemoryInfoARM(VkBindTensorMemoryInfoARM const *s1,
                                       VkBindTensorMemoryInfoARM const *s2) {
  // local, simple types
  if ((s1->tensor != s2->tensor) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkBindVertexBufferIndirectCommandEXT(VkBindVertexBufferIndirectCommandEXT const *s1,
                                                  VkBindVertexBufferIndirectCommandEXT const *s2) {
  // local, simple types
  if ((s1->bufferAddress != s2->bufferAddress) || (s1->size != s2->size) ||
      (s1->stride != s2->stride))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindVertexBufferIndirectCommandNV(VkBindVertexBufferIndirectCommandNV const *s1,
                                                 VkBindVertexBufferIndirectCommandNV const *s2) {
  // local, simple types
  if ((s1->bufferAddress != s2->bufferAddress) || (s1->size != s2->size) ||
      (s1->stride != s2->stride))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkBindVideoSessionMemoryInfoKHR(VkBindVideoSessionMemoryInfoKHR const *s1,
                                             VkBindVideoSessionMemoryInfoKHR const *s2) {
  // local, simple types
  if ((s1->memoryBindIndex != s2->memoryBindIndex) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->memorySize != s2->memorySize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights
bool compare_VkBlitImageCubicWeightsInfoQCOM(VkBlitImageCubicWeightsInfoQCOM const *s1,
                                             VkBlitImageCubicWeightsInfoQCOM const *s2) {
  // local, simple types
  if ((s1->cubicWeights != s2->cubicWeights))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBlitImageInfo2(VkBlitImageInfo2 const *s1, VkBlitImageInfo2 const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount) || (s1->filter != s2->filter))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *s1, VkBlitImageInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount) || (s1->filter != s2->filter))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *s1, VkBlitImageInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount) || (s1->filter != s2->filter))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkBufferCaptureDescriptorDataInfoEXT(VkBufferCaptureDescriptorDataInfoEXT const *s1,
                                                  VkBufferCaptureDescriptorDataInfoEXT const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionBufferCreateInfoFUCHSIA(
    VkBufferCollectionBufferCreateInfoFUCHSIA const *s1,
    VkBufferCollectionBufferCreateInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->collection != s2->collection) || (s1->index != s2->index))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionConstraintsInfoFUCHSIA(
    VkBufferCollectionConstraintsInfoFUCHSIA const *s1,
    VkBufferCollectionConstraintsInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->minBufferCount != s2->minBufferCount) || (s1->maxBufferCount != s2->maxBufferCount) ||
      (s1->minBufferCountForCamping != s2->minBufferCountForCamping) ||
      (s1->minBufferCountForDedicatedSlack != s2->minBufferCountForDedicatedSlack) ||
      (s1->minBufferCountForSharedSlack != s2->minBufferCountForSharedSlack))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionCreateInfoFUCHSIA(VkBufferCollectionCreateInfoFUCHSIA const *s1,
                                                 VkBufferCollectionCreateInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->collectionToken != s2->collectionToken))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionImageCreateInfoFUCHSIA(
    VkBufferCollectionImageCreateInfoFUCHSIA const *s1,
    VkBufferCollectionImageCreateInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->collection != s2->collection) || (s1->index != s2->index))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionPropertiesFUCHSIA(VkBufferCollectionPropertiesFUCHSIA const *s1,
                                                 VkBufferCollectionPropertiesFUCHSIA const *s2) {
  // local, simple types
  if ((s1->memoryTypeBits != s2->memoryTypeBits) || (s1->bufferCount != s2->bufferCount) ||
      (s1->createInfoIndex != s2->createInfoIndex) ||
      (s1->sysmemPixelFormat != s2->sysmemPixelFormat) ||
      (s1->formatFeatures != s2->formatFeatures) ||
      (s1->suggestedYcbcrModel != s2->suggestedYcbcrModel) ||
      (s1->suggestedYcbcrRange != s2->suggestedYcbcrRange) ||
      (s1->suggestedXChromaOffset != s2->suggestedXChromaOffset) ||
      (s1->suggestedYChromaOffset != s2->suggestedYChromaOffset))
    return false;

  // local, Vulkan struct types
  if (!compare_VkSysmemColorSpaceFUCHSIA(&s1->sysmemColorSpaceIndex, &s2->sysmemColorSpaceIndex) ||
      !compare_VkComponentMapping(&s1->samplerYcbcrConversionComponents,
                                  &s2->samplerYcbcrConversionComponents))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferConstraintsInfoFUCHSIA(VkBufferConstraintsInfoFUCHSIA const *s1,
                                            VkBufferConstraintsInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->requiredFormatFeatures != s2->requiredFormatFeatures))
    return false;

  // local, Vulkan struct types
  if (!compare_VkBufferCreateInfo(&s1->createInfo, &s2->createInfo) ||
      !compare_VkBufferCollectionConstraintsInfoFUCHSIA(&s1->bufferCollectionConstraints,
                                                        &s2->bufferCollectionConstraints))
    return false;

  return true;
}
#endif

bool compare_VkBufferCopy(VkBufferCopy const *s1, VkBufferCopy const *s2) {
  // local, simple types
  if ((s1->srcOffset != s2->srcOffset) || (s1->dstOffset != s2->dstOffset) ||
      (s1->size != s2->size))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferCopy2(VkBufferCopy2 const *s1, VkBufferCopy2 const *s2) {
  // local, simple types
  if ((s1->srcOffset != s2->srcOffset) || (s1->dstOffset != s2->dstOffset) ||
      (s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkBufferCopy2KHR(VkBufferCopy2KHR const *s1, VkBufferCopy2KHR const *s2) {
  // local, simple types
  if ((s1->srcOffset != s2->srcOffset) || (s1->dstOffset != s2->dstOffset) ||
      (s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkBufferCopy2KHR(VkBufferCopy2KHR const *s1, VkBufferCopy2KHR const *s2) {
  // local, simple types
  if ((s1->srcOffset != s2->srcOffset) || (s1->dstOffset != s2->dstOffset) ||
      (s1->size != s2->size))
    return false;

  return true;
}
#endif

bool compare_VkBufferCreateInfo(VkBufferCreateInfo const *s1, VkBufferCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->size != s2->size) || (s1->usage != s2->usage) ||
      (s1->sharingMode != s2->sharingMode) ||
      (s1->queueFamilyIndexCount != s2->queueFamilyIndexCount))
    return false;

  // non-local members

  // pQueueFamilyIndices - queueFamilyIndexCount
  if (s1->pQueueFamilyIndices != s2->pQueueFamilyIndices &&
      (s1->pQueueFamilyIndices == NULL || s2->pQueueFamilyIndices == NULL ||
       memcmp(s1->pQueueFamilyIndices, s2->pQueueFamilyIndices,
              (s1->queueFamilyIndexCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 103 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *s1,
                                                VkBufferDeviceAddressCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->deviceAddress != s2->deviceAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *s1,
                                                VkBufferDeviceAddressCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->deviceAddress != s2->deviceAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkBufferDeviceAddressInfo(VkBufferDeviceAddressInfo const *s1,
                                       VkBufferDeviceAddressInfo const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 128 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *s1,
                                          VkBufferDeviceAddressInfoEXT const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *s1,
                                          VkBufferDeviceAddressInfoEXT const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *s1,
                                          VkBufferDeviceAddressInfoEXT const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address
bool compare_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *s1,
                                          VkBufferDeviceAddressInfoKHR const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address
bool compare_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *s1,
                                          VkBufferDeviceAddressInfoKHR const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

bool compare_VkBufferImageCopy(VkBufferImageCopy const *s1, VkBufferImageCopy const *s2) {
  // local, simple types
  if ((s1->bufferOffset != s2->bufferOffset) || (s1->bufferRowLength != s2->bufferRowLength) ||
      (s1->bufferImageHeight != s2->bufferImageHeight))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferImageCopy2(VkBufferImageCopy2 const *s1, VkBufferImageCopy2 const *s2) {
  // local, simple types
  if ((s1->bufferOffset != s2->bufferOffset) || (s1->bufferRowLength != s2->bufferRowLength) ||
      (s1->bufferImageHeight != s2->bufferImageHeight))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *s1,
                                   VkBufferImageCopy2KHR const *s2) {
  // local, simple types
  if ((s1->bufferOffset != s2->bufferOffset) || (s1->bufferRowLength != s2->bufferRowLength) ||
      (s1->bufferImageHeight != s2->bufferImageHeight))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *s1,
                                   VkBufferImageCopy2KHR const *s2) {
  // local, simple types
  if ((s1->bufferOffset != s2->bufferOffset) || (s1->bufferRowLength != s2->bufferRowLength) ||
      (s1->bufferImageHeight != s2->bufferImageHeight))
    return false;

  return true;
}
#endif

bool compare_VkBufferMemoryBarrier(VkBufferMemoryBarrier const *s1,
                                   VkBufferMemoryBarrier const *s2) {
  // local, simple types
  if ((s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->buffer != s2->buffer) ||
      (s1->offset != s2->offset) || (s1->size != s2->size))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferMemoryBarrier2(VkBufferMemoryBarrier2 const *s1,
                                    VkBufferMemoryBarrier2 const *s2) {
  // local, simple types
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->buffer != s2->buffer) ||
      (s1->offset != s2->offset) || (s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *s1,
                                       VkBufferMemoryBarrier2KHR const *s2) {
  // local, simple types
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->buffer != s2->buffer) ||
      (s1->offset != s2->offset) || (s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *s1,
                                       VkBufferMemoryBarrier2KHR const *s2) {
  // local, simple types
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->buffer != s2->buffer) ||
      (s1->offset != s2->offset) || (s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBufferMemoryRequirementsInfo2(VkBufferMemoryRequirementsInfo2 const *s1,
                                             VkBufferMemoryRequirementsInfo2 const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkBufferMemoryRequirementsInfo2KHR(VkBufferMemoryRequirementsInfo2KHR const *s1,
                                                VkBufferMemoryRequirementsInfo2KHR const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkBufferOpaqueCaptureAddressCreateInfo(
    VkBufferOpaqueCaptureAddressCreateInfo const *s1,
    VkBufferOpaqueCaptureAddressCreateInfo const *s2) {
  // local, simple types
  if ((s1->opaqueCaptureAddress != s2->opaqueCaptureAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address
bool compare_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s1,
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->opaqueCaptureAddress != s2->opaqueCaptureAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address
bool compare_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s1,
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->opaqueCaptureAddress != s2->opaqueCaptureAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkBufferUsageFlags2CreateInfo(VkBufferUsageFlags2CreateInfo const *s1,
                                           VkBufferUsageFlags2CreateInfo const *s2) {
  // local, simple types
  if ((s1->usage != s2->usage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkBufferUsageFlags2CreateInfoKHR(VkBufferUsageFlags2CreateInfoKHR const *s1,
                                              VkBufferUsageFlags2CreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->usage != s2->usage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkBufferUsageFlags2CreateInfoKHR(VkBufferUsageFlags2CreateInfoKHR const *s1,
                                              VkBufferUsageFlags2CreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->usage != s2->usage))
    return false;

  return true;
}
#endif

bool compare_VkBufferViewCreateInfo(VkBufferViewCreateInfo const *s1,
                                    VkBufferViewCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->buffer != s2->buffer) || (s1->format != s2->format) ||
      (s1->offset != s2->offset) || (s1->range != s2->range))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkBuildPartitionedAccelerationStructureIndirectCommandNV(
    VkBuildPartitionedAccelerationStructureIndirectCommandNV const *s1,
    VkBuildPartitionedAccelerationStructureIndirectCommandNV const *s2) {
  // local, simple types
  if ((s1->opType != s2->opType) || (s1->argCount != s2->argCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkStridedDeviceAddressNV(&s1->argData, &s2->argData))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkBuildPartitionedAccelerationStructureInfoNV(
    VkBuildPartitionedAccelerationStructureInfoNV const *s1,
    VkBuildPartitionedAccelerationStructureInfoNV const *s2) {
  // local, simple types
  if ((s1->srcAccelerationStructureData != s2->srcAccelerationStructureData) ||
      (s1->dstAccelerationStructureData != s2->dstAccelerationStructureData) ||
      (s1->scratchData != s2->scratchData) || (s1->srcInfos != s2->srcInfos) ||
      (s1->srcInfosCount != s2->srcInfosCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkPartitionedAccelerationStructureInstancesInputNV(&s1->input, &s2->input))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 272 && VK_EXT_calibrated_timestamps
bool compare_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *s1,
                                          VkCalibratedTimestampInfoEXT const *s2) {
  // local, simple types
  if ((s1->timeDomain != s2->timeDomain))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 273 && VK_EXT_calibrated_timestamps
bool compare_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *s1,
                                          VkCalibratedTimestampInfoEXT const *s2) {
  // local, simple types
  if ((s1->timeDomain != s2->timeDomain))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 273 && VK_KHR_calibrated_timestamps
bool compare_VkCalibratedTimestampInfoKHR(VkCalibratedTimestampInfoKHR const *s1,
                                          VkCalibratedTimestampInfoKHR const *s2) {
  // local, simple types
  if ((s1->timeDomain != s2->timeDomain))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkCheckpointData2NV(VkCheckpointData2NV const *s1, VkCheckpointData2NV const *s2) {
  // local, simple types
  if ((s1->stage != s2->stage))
    return false;

  // non-local members
  if (s1->pCheckpointMarker != s2->pCheckpointMarker)
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_device_diagnostic_checkpoints &&                            \
     (VK_VERSION_1_3 || VK_KHR_synchronization2)) ||                                               \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_synchronization2 &&            \
     VK_NV_device_diagnostic_checkpoints) ||                                                       \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_KHR_synchronization2)
bool compare_VkCheckpointData2NV(VkCheckpointData2NV const *s1, VkCheckpointData2NV const *s2) {
  // local, simple types
  if ((s1->stage != s2->stage))
    return false;

  // non-local members
  if (s1->pCheckpointMarker != s2->pCheckpointMarker)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
bool compare_VkCheckpointDataNV(VkCheckpointDataNV const *s1, VkCheckpointDataNV const *s2) {
  // local, simple types
  if ((s1->stage != s2->stage))
    return false;

  // non-local members
  if (s1->pCheckpointMarker != s2->pCheckpointMarker)
    return false;

  return true;
}
#endif

bool compare_VkClearAttachment(VkClearAttachment const *s1, VkClearAttachment const *s2) {
  // local, simple types
  if ((s1->aspectMask != s2->aspectMask) || (s1->colorAttachment != s2->colorAttachment))
    return false;

  // union types (no selector)
  if (memcmp(&s1->clearValue, &s2->clearValue, sizeof(VkClearValue)) != 0)
    return false;

  return true;
}

bool compare_VkClearDepthStencilValue(VkClearDepthStencilValue const *s1,
                                      VkClearDepthStencilValue const *s2) {
  // local, simple types
  if ((s1->depth != s2->depth) || (s1->stencil != s2->stencil))
    return false;

  return true;
}

bool compare_VkClearRect(VkClearRect const *s1, VkClearRect const *s2) {
  // local, simple types
  if ((s1->baseArrayLayer != s2->baseArrayLayer) || (s1->layerCount != s2->layerCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkRect2D(&s1->rect, &s2->rect))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV(
    VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV const *s1,
    VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV const *s2) {
  // local, simple types
  if ((s1->clusterReferencesCount != s2->clusterReferencesCount) ||
      (s1->clusterReferencesStride != s2->clusterReferencesStride) ||
      (s1->clusterReferences != s2->clusterReferences))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureBuildTriangleClusterInfoNV(
    VkClusterAccelerationStructureBuildTriangleClusterInfoNV const *s1,
    VkClusterAccelerationStructureBuildTriangleClusterInfoNV const *s2) {
  // local, simple types
  if ((s1->clusterID != s2->clusterID) || (s1->clusterFlags != s2->clusterFlags) ||
      (s1->triangleCount != s2->triangleCount) || (s1->vertexCount != s2->vertexCount) ||
      (s1->positionTruncateBitCount != s2->positionTruncateBitCount) ||
      (s1->indexType != s2->indexType) ||
      (s1->opacityMicromapIndexType != s2->opacityMicromapIndexType) ||
      (s1->indexBufferStride != s2->indexBufferStride) ||
      (s1->vertexBufferStride != s2->vertexBufferStride) ||
      (s1->geometryIndexAndFlagsBufferStride != s2->geometryIndexAndFlagsBufferStride) ||
      (s1->opacityMicromapIndexBufferStride != s2->opacityMicromapIndexBufferStride) ||
      (s1->indexBuffer != s2->indexBuffer) || (s1->vertexBuffer != s2->vertexBuffer) ||
      (s1->geometryIndexAndFlagsBuffer != s2->geometryIndexAndFlagsBuffer) ||
      (s1->opacityMicromapArray != s2->opacityMicromapArray) ||
      (s1->opacityMicromapIndexBuffer != s2->opacityMicromapIndexBuffer))
    return false;

  // local, Vulkan struct types
  if (!compare_VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV(
          &s1->baseGeometryIndexAndGeometryFlags, &s2->baseGeometryIndexAndGeometryFlags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV(
    VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV const *s1,
    VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV const *s2) {
  // local, simple types
  if ((s1->clusterID != s2->clusterID) || (s1->clusterFlags != s2->clusterFlags) ||
      (s1->triangleCount != s2->triangleCount) || (s1->vertexCount != s2->vertexCount) ||
      (s1->positionTruncateBitCount != s2->positionTruncateBitCount) ||
      (s1->indexType != s2->indexType) ||
      (s1->opacityMicromapIndexType != s2->opacityMicromapIndexType) ||
      (s1->indexBufferStride != s2->indexBufferStride) ||
      (s1->vertexBufferStride != s2->vertexBufferStride) ||
      (s1->geometryIndexAndFlagsBufferStride != s2->geometryIndexAndFlagsBufferStride) ||
      (s1->opacityMicromapIndexBufferStride != s2->opacityMicromapIndexBufferStride) ||
      (s1->indexBuffer != s2->indexBuffer) || (s1->vertexBuffer != s2->vertexBuffer) ||
      (s1->geometryIndexAndFlagsBuffer != s2->geometryIndexAndFlagsBuffer) ||
      (s1->opacityMicromapArray != s2->opacityMicromapArray) ||
      (s1->opacityMicromapIndexBuffer != s2->opacityMicromapIndexBuffer) ||
      (s1->instantiationBoundingBoxLimit != s2->instantiationBoundingBoxLimit))
    return false;

  // local, Vulkan struct types
  if (!compare_VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV(
          &s1->baseGeometryIndexAndGeometryFlags, &s2->baseGeometryIndexAndGeometryFlags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureClustersBottomLevelInputNV(
    VkClusterAccelerationStructureClustersBottomLevelInputNV const *s1,
    VkClusterAccelerationStructureClustersBottomLevelInputNV const *s2) {
  // local, simple types
  if ((s1->maxTotalClusterCount != s2->maxTotalClusterCount) ||
      (s1->maxClusterCountPerAccelerationStructure != s2->maxClusterCountPerAccelerationStructure))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureCommandsInfoNV(
    VkClusterAccelerationStructureCommandsInfoNV const *s1,
    VkClusterAccelerationStructureCommandsInfoNV const *s2) {
  // local, simple types
  if ((s1->dstImplicitData != s2->dstImplicitData) || (s1->scratchData != s2->scratchData) ||
      (s1->srcInfosCount != s2->srcInfosCount) ||
      (s1->addressResolutionFlags != s2->addressResolutionFlags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkClusterAccelerationStructureInputInfoNV(&s1->input, &s2->input) ||
      !compare_VkStridedDeviceAddressRegionKHR(&s1->dstAddressesArray, &s2->dstAddressesArray) ||
      !compare_VkStridedDeviceAddressRegionKHR(&s1->dstSizesArray, &s2->dstSizesArray) ||
      !compare_VkStridedDeviceAddressRegionKHR(&s1->srcInfosArray, &s2->srcInfosArray))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV(
    VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV const *s1,
    VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV const *s2) {
  // local, simple types
  if ((s1->geometryIndex != s2->geometryIndex) || (s1->reserved != s2->reserved) ||
      (s1->geometryFlags != s2->geometryFlags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureGetTemplateIndicesInfoNV(
    VkClusterAccelerationStructureGetTemplateIndicesInfoNV const *s1,
    VkClusterAccelerationStructureGetTemplateIndicesInfoNV const *s2) {
  // local, simple types
  if ((s1->clusterTemplateAddress != s2->clusterTemplateAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureInputInfoNV(
    VkClusterAccelerationStructureInputInfoNV const *s1,
    VkClusterAccelerationStructureInputInfoNV const *s2) {
  // local, simple types
  if ((s1->maxAccelerationStructureCount != s2->maxAccelerationStructureCount) ||
      (s1->flags != s2->flags) || (s1->opType != s2->opType) || (s1->opMode != s2->opMode))
    return false;

  // union types (with selector)
  switch (s1->opType) {
  // VkClusterAccelerationStructureOpInputNV
  case VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_CLUSTERS_BOTTOM_LEVEL_NV:
    if (!compare_VkClusterAccelerationStructureClustersBottomLevelInputNV(
            s1->opInput.pClustersBottomLevel, s2->opInput.pClustersBottomLevel))
      return false;

  case VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_NV:
  case VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_TEMPLATE_NV:
  case VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_INSTANTIATE_TRIANGLE_CLUSTER_NV:
#if VK_HEADER_VERSION >= 319
  case VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_GET_CLUSTER_TEMPLATE_INDICES_NV:
#endif
    if (!compare_VkClusterAccelerationStructureTriangleClusterInputNV(
            s1->opInput.pTriangleClusters, s2->opInput.pTriangleClusters))
      return false;

  case VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MOVE_OBJECTS_NV:
    if (!compare_VkClusterAccelerationStructureMoveObjectsInputNV(s1->opInput.pMoveObjects,
                                                                  s2->opInput.pMoveObjects))
      return false;

  default:;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureInstantiateClusterInfoNV(
    VkClusterAccelerationStructureInstantiateClusterInfoNV const *s1,
    VkClusterAccelerationStructureInstantiateClusterInfoNV const *s2) {
  // local, simple types
  if ((s1->clusterIdOffset != s2->clusterIdOffset) ||
      (s1->geometryIndexOffset != s2->geometryIndexOffset) || (s1->reserved != s2->reserved) ||
      (s1->clusterTemplateAddress != s2->clusterTemplateAddress))
    return false;

  // local, Vulkan struct types
  if (!compare_VkStridedDeviceAddressNV(&s1->vertexBuffer, &s2->vertexBuffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureMoveObjectsInfoNV(
    VkClusterAccelerationStructureMoveObjectsInfoNV const *s1,
    VkClusterAccelerationStructureMoveObjectsInfoNV const *s2) {
  // local, simple types
  if ((s1->srcAccelerationStructure != s2->srcAccelerationStructure))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureMoveObjectsInputNV(
    VkClusterAccelerationStructureMoveObjectsInputNV const *s1,
    VkClusterAccelerationStructureMoveObjectsInputNV const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->noMoveOverlap != s2->noMoveOverlap) ||
      (s1->maxMovedBytes != s2->maxMovedBytes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkClusterAccelerationStructureTriangleClusterInputNV(
    VkClusterAccelerationStructureTriangleClusterInputNV const *s1,
    VkClusterAccelerationStructureTriangleClusterInputNV const *s2) {
  // local, simple types
  if ((s1->vertexFormat != s2->vertexFormat) ||
      (s1->maxGeometryIndexValue != s2->maxGeometryIndexValue) ||
      (s1->maxClusterUniqueGeometryCount != s2->maxClusterUniqueGeometryCount) ||
      (s1->maxClusterTriangleCount != s2->maxClusterTriangleCount) ||
      (s1->maxClusterVertexCount != s2->maxClusterVertexCount) ||
      (s1->maxTotalTriangleCount != s2->maxTotalTriangleCount) ||
      (s1->maxTotalVertexCount != s2->maxTotalVertexCount) ||
      (s1->minPositionTruncateBitCount != s2->minPositionTruncateBitCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkCmdProcessCommandsInfoNVX(VkCmdProcessCommandsInfoNVX const *s1,
                                         VkCmdProcessCommandsInfoNVX const *s2) {
  // local, simple types
  if ((s1->objectTable != s2->objectTable) ||
      (s1->indirectCommandsLayout != s2->indirectCommandsLayout) ||
      (s1->indirectCommandsTokenCount != s2->indirectCommandsTokenCount) ||
      (s1->maxSequencesCount != s2->maxSequencesCount) ||
      (s1->targetCommandBuffer != s2->targetCommandBuffer) ||
      (s1->sequencesCountBuffer != s2->sequencesCountBuffer) ||
      (s1->sequencesCountOffset != s2->sequencesCountOffset) ||
      (s1->sequencesIndexBuffer != s2->sequencesIndexBuffer) ||
      (s1->sequencesIndexOffset != s2->sequencesIndexOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkCmdReserveSpaceForCommandsInfoNVX(VkCmdReserveSpaceForCommandsInfoNVX const *s1,
                                                 VkCmdReserveSpaceForCommandsInfoNVX const *s2) {
  // local, simple types
  if ((s1->objectTable != s2->objectTable) ||
      (s1->indirectCommandsLayout != s2->indirectCommandsLayout) ||
      (s1->maxSequencesCount != s2->maxSequencesCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkCoarseSampleLocationNV(VkCoarseSampleLocationNV const *s1,
                                      VkCoarseSampleLocationNV const *s2) {
  // local, simple types
  if ((s1->pixelX != s2->pixelX) || (s1->pixelY != s2->pixelY) || (s1->sample != s2->sample))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkCoarseSampleOrderCustomNV(VkCoarseSampleOrderCustomNV const *s1,
                                         VkCoarseSampleOrderCustomNV const *s2) {
  // local, simple types
  if ((s1->shadingRate != s2->shadingRate) || (s1->sampleCount != s2->sampleCount) ||
      (s1->sampleLocationCount != s2->sampleLocationCount))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_extended_dynamic_state3 && VK_EXT_shader_object) ||        \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 245 && VK_EXT_extended_dynamic_state3)
bool compare_VkColorBlendAdvancedEXT(VkColorBlendAdvancedEXT const *s1,
                                     VkColorBlendAdvancedEXT const *s2) {
  // local, simple types
  if ((s1->advancedBlendOp != s2->advancedBlendOp) ||
      (s1->srcPremultiplied != s2->srcPremultiplied) ||
      (s1->dstPremultiplied != s2->dstPremultiplied) || (s1->blendOverlap != s2->blendOverlap) ||
      (s1->clampResults != s2->clampResults))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_extended_dynamic_state3 && VK_EXT_shader_object) ||        \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 245 && VK_EXT_extended_dynamic_state3)
bool compare_VkColorBlendEquationEXT(VkColorBlendEquationEXT const *s1,
                                     VkColorBlendEquationEXT const *s2) {
  // local, simple types
  if ((s1->srcColorBlendFactor != s2->srcColorBlendFactor) ||
      (s1->dstColorBlendFactor != s2->dstColorBlendFactor) ||
      (s1->colorBlendOp != s2->colorBlendOp) ||
      (s1->srcAlphaBlendFactor != s2->srcAlphaBlendFactor) ||
      (s1->dstAlphaBlendFactor != s2->dstAlphaBlendFactor) ||
      (s1->alphaBlendOp != s2->alphaBlendOp))
    return false;

  return true;
}
#endif

bool compare_VkCommandBufferAllocateInfo(VkCommandBufferAllocateInfo const *s1,
                                         VkCommandBufferAllocateInfo const *s2) {
  // local, simple types
  if ((s1->commandPool != s2->commandPool) || (s1->level != s2->level) ||
      (s1->commandBufferCount != s2->commandBufferCount))
    return false;

  return true;
}

bool compare_VkCommandBufferBeginInfo(VkCommandBufferBeginInfo const *s1,
                                      VkCommandBufferBeginInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *s1,
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *s2) {
  // local, simple types
  if ((s1->conditionalRenderingEnable != s2->conditionalRenderingEnable))
    return false;

  return true;
}
#endif

bool compare_VkCommandBufferInheritanceInfo(VkCommandBufferInheritanceInfo const *s1,
                                            VkCommandBufferInheritanceInfo const *s2) {
  // local, simple types
  if ((s1->renderPass != s2->renderPass) || (s1->subpass != s2->subpass) ||
      (s1->framebuffer != s2->framebuffer) ||
      (s1->occlusionQueryEnable != s2->occlusionQueryEnable) ||
      (s1->queryFlags != s2->queryFlags) || (s1->pipelineStatistics != s2->pipelineStatistics))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
bool compare_VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *s1,
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *s2) {
  // local, simple types
  if ((s1->transform != s2->transform))
    return false;

  // local, Vulkan struct types
  if (!compare_VkRect2D(&s1->renderArea, &s2->renderArea))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_VERSION_1_3
bool compare_VkCommandBufferInheritanceRenderingInfo(
    VkCommandBufferInheritanceRenderingInfo const *s1,
    VkCommandBufferInheritanceRenderingInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->viewMask != s2->viewMask) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat) ||
      (s1->rasterizationSamples != s2->rasterizationSamples))
    return false;

  // non-local members

  // pColorAttachmentFormats - colorAttachmentCount
  if (s1->pColorAttachmentFormats != s2->pColorAttachmentFormats &&
      (s1->pColorAttachmentFormats == NULL || s2->pColorAttachmentFormats == NULL ||
       memcmp(s1->pColorAttachmentFormats, s2->pColorAttachmentFormats,
              (s1->colorAttachmentCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_VERSION_1_3
bool compare_VkCommandBufferInheritanceRenderingInfo(
    VkCommandBufferInheritanceRenderingInfo const *s1,
    VkCommandBufferInheritanceRenderingInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->viewMask != s2->viewMask) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat) ||
      (s1->rasterizationSamples != s2->rasterizationSamples))
    return false;

  // non-local members

  // pColorAttachmentFormats - colorAttachmentCount
  if (s1->pColorAttachmentFormats != s2->pColorAttachmentFormats &&
      (s1->pColorAttachmentFormats == NULL || s2->pColorAttachmentFormats == NULL ||
       memcmp(s1->pColorAttachmentFormats, s2->pColorAttachmentFormats,
              (s1->colorAttachmentCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering
bool compare_VkCommandBufferInheritanceRenderingInfoKHR(
    VkCommandBufferInheritanceRenderingInfoKHR const *s1,
    VkCommandBufferInheritanceRenderingInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->viewMask != s2->viewMask) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat) ||
      (s1->rasterizationSamples != s2->rasterizationSamples))
    return false;

  // non-local members

  // pColorAttachmentFormats - colorAttachmentCount
  if (s1->pColorAttachmentFormats != s2->pColorAttachmentFormats &&
      (s1->pColorAttachmentFormats == NULL || s2->pColorAttachmentFormats == NULL ||
       memcmp(s1->pColorAttachmentFormats, s2->pColorAttachmentFormats,
              (s1->colorAttachmentCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering
bool compare_VkCommandBufferInheritanceRenderingInfoKHR(
    VkCommandBufferInheritanceRenderingInfoKHR const *s1,
    VkCommandBufferInheritanceRenderingInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->viewMask != s2->viewMask) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat) ||
      (s1->rasterizationSamples != s2->rasterizationSamples))
    return false;

  // non-local members

  // pColorAttachmentFormats - colorAttachmentCount
  if (s1->pColorAttachmentFormats != s2->pColorAttachmentFormats &&
      (s1->pColorAttachmentFormats == NULL || s2->pColorAttachmentFormats == NULL ||
       memcmp(s1->pColorAttachmentFormats, s2->pColorAttachmentFormats,
              (s1->colorAttachmentCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
bool compare_VkCommandBufferInheritanceViewportScissorInfoNV(
    VkCommandBufferInheritanceViewportScissorInfoNV const *s1,
    VkCommandBufferInheritanceViewportScissorInfoNV const *s2) {
  // local, simple types
  if ((s1->viewportScissor2D != s2->viewportScissor2D) ||
      (s1->viewportDepthCount != s2->viewportDepthCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCommandBufferSubmitInfo(VkCommandBufferSubmitInfo const *s1,
                                       VkCommandBufferSubmitInfo const *s2) {
  // local, simple types
  if ((s1->commandBuffer != s2->commandBuffer) || (s1->deviceMask != s2->deviceMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *s1,
                                          VkCommandBufferSubmitInfoKHR const *s2) {
  // local, simple types
  if ((s1->commandBuffer != s2->commandBuffer) || (s1->deviceMask != s2->deviceMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *s1,
                                          VkCommandBufferSubmitInfoKHR const *s2) {
  // local, simple types
  if ((s1->commandBuffer != s2->commandBuffer) || (s1->deviceMask != s2->deviceMask))
    return false;

  return true;
}
#endif

bool compare_VkCommandPoolCreateInfo(VkCommandPoolCreateInfo const *s1,
                                     VkCommandPoolCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->queueFamilyIndex != s2->queueFamilyIndex))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkCommandPoolMemoryConsumption(VkCommandPoolMemoryConsumption const *s1,
                                            VkCommandPoolMemoryConsumption const *s2) {
  // local, simple types
  if ((s1->commandPoolAllocated != s2->commandPoolAllocated) ||
      (s1->commandPoolReservedSize != s2->commandPoolReservedSize) ||
      (s1->commandBufferAllocated != s2->commandBufferAllocated))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkCommandPoolMemoryReservationCreateInfo(
    VkCommandPoolMemoryReservationCreateInfo const *s1,
    VkCommandPoolMemoryReservationCreateInfo const *s2) {
  // local, simple types
  if ((s1->commandPoolReservedSize != s2->commandPoolReservedSize) ||
      (s1->commandPoolMaxCommandBuffers != s2->commandPoolMaxCommandBuffers))
    return false;

  return true;
}
#endif

bool compare_VkComponentMapping(VkComponentMapping const *s1, VkComponentMapping const *s2) {
  // local, simple types
  if ((s1->r != s2->r) || (s1->g != s2->g) || (s1->b != s2->b) || (s1->a != s2->a))
    return false;

  return true;
}

bool compare_VkComputePipelineCreateInfo(VkComputePipelineCreateInfo const *s1,
                                         VkComputePipelineCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->layout != s2->layout) ||
      (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex))
    return false;

  // local, Vulkan struct types
  if (!compare_VkPipelineShaderStageCreateInfo(&s1->stage, &s2->stage))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute
bool compare_VkComputePipelineIndirectBufferInfoNV(
    VkComputePipelineIndirectBufferInfoNV const *s1,
    VkComputePipelineIndirectBufferInfoNV const *s2) {
  // local, simple types
  if ((s1->deviceAddress != s2->deviceAddress) || (s1->size != s2->size) ||
      (s1->pipelineDeviceAddressCaptureReplay != s2->pipelineDeviceAddressCaptureReplay))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkConditionalRenderingBeginInfoEXT(VkConditionalRenderingBeginInfoEXT const *s1,
                                                VkConditionalRenderingBeginInfoEXT const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer) || (s1->offset != s2->offset) || (s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkConformanceVersion(VkConformanceVersion const *s1, VkConformanceVersion const *s2) {
  // local, simple types
  if ((s1->major != s2->major) || (s1->minor != s2->minor) || (s1->subminor != s2->subminor) ||
      (s1->patch != s2->patch))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 130 && VK_KHR_driver_properties
bool compare_VkConformanceVersionKHR(VkConformanceVersionKHR const *s1,
                                     VkConformanceVersionKHR const *s2) {
  // local, simple types
  if ((s1->major != s2->major) || (s1->minor != s2->minor) || (s1->subminor != s2->subminor) ||
      (s1->patch != s2->patch))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_driver_properties
bool compare_VkConformanceVersionKHR(VkConformanceVersionKHR const *s1,
                                     VkConformanceVersionKHR const *s2) {
  // local, simple types
  if ((s1->major != s2->major) || (s1->minor != s2->minor) || (s1->subminor != s2->subminor) ||
      (s1->patch != s2->patch))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector
bool compare_VkConvertCooperativeVectorMatrixInfoNV(
    VkConvertCooperativeVectorMatrixInfoNV const *s1,
    VkConvertCooperativeVectorMatrixInfoNV const *s2) {
  // local, simple types
  if ((s1->srcSize != s2->srcSize) || (s1->srcComponentType != s2->srcComponentType) ||
      (s1->dstComponentType != s2->dstComponentType) || (s1->numRows != s2->numRows) ||
      (s1->numColumns != s2->numColumns) || (s1->srcLayout != s2->srcLayout) ||
      (s1->srcStride != s2->srcStride) || (s1->dstLayout != s2->dstLayout) ||
      (s1->dstStride != s2->dstStride))
    return false;

  // union types (no selector)
  if (memcmp(&s1->srcData, &s2->srcData, sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->dstData, &s2->dstData, sizeof(VkDeviceOrHostAddressKHR)) != 0)
    return false;

  // non-local members
  if (s1->pDstSize != s2->pDstSize)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2
bool compare_VkCooperativeMatrixFlexibleDimensionsPropertiesNV(
    VkCooperativeMatrixFlexibleDimensionsPropertiesNV const *s1,
    VkCooperativeMatrixFlexibleDimensionsPropertiesNV const *s2) {
  // local, simple types
  if ((s1->MGranularity != s2->MGranularity) || (s1->NGranularity != s2->NGranularity) ||
      (s1->KGranularity != s2->KGranularity) || (s1->AType != s2->AType) ||
      (s1->BType != s2->BType) || (s1->CType != s2->CType) || (s1->ResultType != s2->ResultType) ||
      (s1->saturatingAccumulation != s2->saturatingAccumulation) || (s1->scope != s2->scope) ||
      (s1->workgroupInvocations != s2->workgroupInvocations))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix
bool compare_VkCooperativeMatrixPropertiesKHR(VkCooperativeMatrixPropertiesKHR const *s1,
                                              VkCooperativeMatrixPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->MSize != s2->MSize) || (s1->NSize != s2->NSize) || (s1->KSize != s2->KSize) ||
      (s1->AType != s2->AType) || (s1->BType != s2->BType) || (s1->CType != s2->CType) ||
      (s1->ResultType != s2->ResultType) ||
      (s1->saturatingAccumulation != s2->saturatingAccumulation) || (s1->scope != s2->scope))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkCooperativeMatrixPropertiesNV(VkCooperativeMatrixPropertiesNV const *s1,
                                             VkCooperativeMatrixPropertiesNV const *s2) {
  // local, simple types
  if ((s1->MSize != s2->MSize) || (s1->NSize != s2->NSize) || (s1->KSize != s2->KSize) ||
      (s1->AType != s2->AType) || (s1->BType != s2->BType) || (s1->CType != s2->CType) ||
      (s1->DType != s2->DType) || (s1->scope != s2->scope))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector
bool compare_VkCooperativeVectorPropertiesNV(VkCooperativeVectorPropertiesNV const *s1,
                                             VkCooperativeVectorPropertiesNV const *s2) {
  // local, simple types
  if ((s1->inputType != s2->inputType) || (s1->inputInterpretation != s2->inputInterpretation) ||
      (s1->matrixInterpretation != s2->matrixInterpretation) ||
      (s1->biasInterpretation != s2->biasInterpretation) || (s1->resultType != s2->resultType) ||
      (s1->transpose != s2->transpose))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkCopyAccelerationStructureInfoKHR(VkCopyAccelerationStructureInfoKHR const *s1,
                                                VkCopyAccelerationStructureInfoKHR const *s2) {
  // local, simple types
  if ((s1->src != s2->src) || (s1->dst != s2->dst) || (s1->mode != s2->mode))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkCopyAccelerationStructureToMemoryInfoKHR(
    VkCopyAccelerationStructureToMemoryInfoKHR const *s1,
    VkCopyAccelerationStructureToMemoryInfoKHR const *s2) {
  // local, simple types
  if ((s1->src != s2->src) || (s1->mode != s2->mode))
    return false;

  // union types (no selector)
  if (memcmp(&s1->dst, &s2->dst, sizeof(VkDeviceOrHostAddressKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyBufferInfo2(VkCopyBufferInfo2 const *s1, VkCopyBufferInfo2 const *s2) {
  // local, simple types
  if ((s1->srcBuffer != s2->srcBuffer) || (s1->dstBuffer != s2->dstBuffer) ||
      (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *s1, VkCopyBufferInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcBuffer != s2->srcBuffer) || (s1->dstBuffer != s2->dstBuffer) ||
      (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *s1, VkCopyBufferInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcBuffer != s2->srcBuffer) || (s1->dstBuffer != s2->dstBuffer) ||
      (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyBufferToImageInfo2(VkCopyBufferToImageInfo2 const *s1,
                                      VkCopyBufferToImageInfo2 const *s2) {
  // local, simple types
  if ((s1->srcBuffer != s2->srcBuffer) || (s1->dstImage != s2->dstImage) ||
      (s1->dstImageLayout != s2->dstImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *s1,
                                         VkCopyBufferToImageInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcBuffer != s2->srcBuffer) || (s1->dstImage != s2->dstImage) ||
      (s1->dstImageLayout != s2->dstImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *s1,
                                         VkCopyBufferToImageInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcBuffer != s2->srcBuffer) || (s1->dstImage != s2->dstImage) ||
      (s1->dstImageLayout != s2->dstImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 159 && VK_QCOM_rotated_copy_commands
bool compare_VkCopyCommandTransformInfoQCOM(VkCopyCommandTransformInfoQCOM const *s1,
                                            VkCopyCommandTransformInfoQCOM const *s2) {
  // local, simple types
  if ((s1->transform != s2->transform))
    return false;

  return true;
}
#endif

bool compare_VkCopyDescriptorSet(VkCopyDescriptorSet const *s1, VkCopyDescriptorSet const *s2) {
  // local, simple types
  if ((s1->srcSet != s2->srcSet) || (s1->srcBinding != s2->srcBinding) ||
      (s1->srcArrayElement != s2->srcArrayElement) || (s1->dstSet != s2->dstSet) ||
      (s1->dstBinding != s2->dstBinding) || (s1->dstArrayElement != s2->dstArrayElement) ||
      (s1->descriptorCount != s2->descriptorCount))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyImageInfo2(VkCopyImageInfo2 const *s1, VkCopyImageInfo2 const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *s1, VkCopyImageInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *s1, VkCopyImageInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyImageToBufferInfo2(VkCopyImageToBufferInfo2 const *s1,
                                      VkCopyImageToBufferInfo2 const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstBuffer != s2->dstBuffer) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *s1,
                                         VkCopyImageToBufferInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstBuffer != s2->dstBuffer) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *s1,
                                         VkCopyImageToBufferInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstBuffer != s2->dstBuffer) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkCopyImageToImageInfo(VkCopyImageToImageInfo const *s1,
                                    VkCopyImageToImageInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->srcImage != s2->srcImage) ||
      (s1->srcImageLayout != s2->srcImageLayout) || (s1->dstImage != s2->dstImage) ||
      (s1->dstImageLayout != s2->dstImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkCopyImageToImageInfoEXT(VkCopyImageToImageInfoEXT const *s1,
                                       VkCopyImageToImageInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->srcImage != s2->srcImage) ||
      (s1->srcImageLayout != s2->srcImageLayout) || (s1->dstImage != s2->dstImage) ||
      (s1->dstImageLayout != s2->dstImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkCopyImageToImageInfoEXT(VkCopyImageToImageInfoEXT const *s1,
                                       VkCopyImageToImageInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->srcImage != s2->srcImage) ||
      (s1->srcImageLayout != s2->srcImageLayout) || (s1->dstImage != s2->dstImage) ||
      (s1->dstImageLayout != s2->dstImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkCopyImageToMemoryInfo(VkCopyImageToMemoryInfo const *s1,
                                     VkCopyImageToMemoryInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->srcImage != s2->srcImage) ||
      (s1->srcImageLayout != s2->srcImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkCopyImageToMemoryInfoEXT(VkCopyImageToMemoryInfoEXT const *s1,
                                        VkCopyImageToMemoryInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->srcImage != s2->srcImage) ||
      (s1->srcImageLayout != s2->srcImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkCopyImageToMemoryInfoEXT(VkCopyImageToMemoryInfoEXT const *s1,
                                        VkCopyImageToMemoryInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->srcImage != s2->srcImage) ||
      (s1->srcImageLayout != s2->srcImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkCopyMemoryIndirectCommandNV(VkCopyMemoryIndirectCommandNV const *s1,
                                           VkCopyMemoryIndirectCommandNV const *s2) {
  // local, simple types
  if ((s1->srcAddress != s2->srcAddress) || (s1->dstAddress != s2->dstAddress) ||
      (s1->size != s2->size))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkCopyMemoryToAccelerationStructureInfoKHR(
    VkCopyMemoryToAccelerationStructureInfoKHR const *s1,
    VkCopyMemoryToAccelerationStructureInfoKHR const *s2) {
  // local, simple types
  if ((s1->dst != s2->dst) || (s1->mode != s2->mode))
    return false;

  // union types (no selector)
  if (memcmp(&s1->src, &s2->src, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkCopyMemoryToImageIndirectCommandNV(VkCopyMemoryToImageIndirectCommandNV const *s1,
                                                  VkCopyMemoryToImageIndirectCommandNV const *s2) {
  // local, simple types
  if ((s1->srcAddress != s2->srcAddress) || (s1->bufferRowLength != s2->bufferRowLength) ||
      (s1->bufferImageHeight != s2->bufferImageHeight))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkCopyMemoryToImageInfo(VkCopyMemoryToImageInfo const *s1,
                                     VkCopyMemoryToImageInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->dstImage != s2->dstImage) ||
      (s1->dstImageLayout != s2->dstImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkCopyMemoryToImageInfoEXT(VkCopyMemoryToImageInfoEXT const *s1,
                                        VkCopyMemoryToImageInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->dstImage != s2->dstImage) ||
      (s1->dstImageLayout != s2->dstImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkCopyMemoryToImageInfoEXT(VkCopyMemoryToImageInfoEXT const *s1,
                                        VkCopyMemoryToImageInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->dstImage != s2->dstImage) ||
      (s1->dstImageLayout != s2->dstImageLayout) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkCopyMemoryToMicromapInfoEXT(VkCopyMemoryToMicromapInfoEXT const *s1,
                                           VkCopyMemoryToMicromapInfoEXT const *s2) {
  // local, simple types
  if ((s1->dst != s2->dst) || (s1->mode != s2->mode))
    return false;

  // union types (no selector)
  if (memcmp(&s1->src, &s2->src, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkCopyMicromapInfoEXT(VkCopyMicromapInfoEXT const *s1,
                                   VkCopyMicromapInfoEXT const *s2) {
  // local, simple types
  if ((s1->src != s2->src) || (s1->dst != s2->dst) || (s1->mode != s2->mode))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkCopyMicromapToMemoryInfoEXT(VkCopyMicromapToMemoryInfoEXT const *s1,
                                           VkCopyMicromapToMemoryInfoEXT const *s2) {
  // local, simple types
  if ((s1->src != s2->src) || (s1->mode != s2->mode))
    return false;

  // union types (no selector)
  if (memcmp(&s1->dst, &s2->dst, sizeof(VkDeviceOrHostAddressKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkCopyTensorInfoARM(VkCopyTensorInfoARM const *s1, VkCopyTensorInfoARM const *s2) {
  // local, simple types
  if ((s1->srcTensor != s2->srcTensor) || (s1->dstTensor != s2->dstTensor) ||
      (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuFunctionCreateInfoNVX(VkCuFunctionCreateInfoNVX const *s1,
                                       VkCuFunctionCreateInfoNVX const *s2) {
  // local, simple types
  if ((s1->module != s2->module))
    return false;

  // non-local members

  // pName - null-terminated
  if (s1->pName != s2->pName &&
      (s1->pName == NULL || s2->pName == NULL || strcmp(s1->pName, s2->pName) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuLaunchInfoNVX(VkCuLaunchInfoNVX const *s1, VkCuLaunchInfoNVX const *s2) {
  // local, simple types
  if ((s1->function != s2->function) || (s1->gridDimX != s2->gridDimX) ||
      (s1->gridDimY != s2->gridDimY) || (s1->gridDimZ != s2->gridDimZ) ||
      (s1->blockDimX != s2->blockDimX) || (s1->blockDimY != s2->blockDimY) ||
      (s1->blockDimZ != s2->blockDimZ) || (s1->sharedMemBytes != s2->sharedMemBytes) ||
      (s1->paramCount != s2->paramCount) || (s1->extraCount != s2->extraCount))
    return false;

  // non-local members

  // pParams - paramCount
  if (s1->pParams != s2->pParams && (s1->pParams == NULL || s2->pParams == NULL ||
                                     memcmp(s1->pParams, s2->pParams, s1->paramCount) != 0))
    return false;

  // pExtras - extraCount
  if (s1->pExtras != s2->pExtras && (s1->pExtras == NULL || s2->pExtras == NULL ||
                                     memcmp(s1->pExtras, s2->pExtras, s1->extraCount) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuModuleCreateInfoNVX(VkCuModuleCreateInfoNVX const *s1,
                                     VkCuModuleCreateInfoNVX const *s2) {
  // local, simple types
  if ((s1->dataSize != s2->dataSize))
    return false;

  // non-local members

  // pData - dataSize
  if (s1->pData != s2->pData &&
      (s1->pData == NULL || s2->pData == NULL || memcmp(s1->pData, s2->pData, s1->dataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_NVX_binary_import
bool compare_VkCuModuleTexturingModeCreateInfoNVX(VkCuModuleTexturingModeCreateInfoNVX const *s1,
                                                  VkCuModuleTexturingModeCreateInfoNVX const *s2) {
  // local, simple types
  if ((s1->use64bitTexturing != s2->use64bitTexturing))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkCudaFunctionCreateInfoNV(VkCudaFunctionCreateInfoNV const *s1,
                                        VkCudaFunctionCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->module != s2->module))
    return false;

  // non-local members

  // pName - null-terminated
  if (s1->pName != s2->pName &&
      (s1->pName == NULL || s2->pName == NULL || strcmp(s1->pName, s2->pName) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkCudaLaunchInfoNV(VkCudaLaunchInfoNV const *s1, VkCudaLaunchInfoNV const *s2) {
  // local, simple types
  if ((s1->function != s2->function) || (s1->gridDimX != s2->gridDimX) ||
      (s1->gridDimY != s2->gridDimY) || (s1->gridDimZ != s2->gridDimZ) ||
      (s1->blockDimX != s2->blockDimX) || (s1->blockDimY != s2->blockDimY) ||
      (s1->blockDimZ != s2->blockDimZ) || (s1->sharedMemBytes != s2->sharedMemBytes) ||
      (s1->paramCount != s2->paramCount) || (s1->extraCount != s2->extraCount))
    return false;

  // non-local members

  // pParams - paramCount
  if (s1->pParams != s2->pParams && (s1->pParams == NULL || s2->pParams == NULL ||
                                     memcmp(s1->pParams, s2->pParams, s1->paramCount) != 0))
    return false;

  // pExtras - extraCount
  if (s1->pExtras != s2->pExtras && (s1->pExtras == NULL || s2->pExtras == NULL ||
                                     memcmp(s1->pExtras, s2->pExtras, s1->extraCount) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkCudaModuleCreateInfoNV(VkCudaModuleCreateInfoNV const *s1,
                                      VkCudaModuleCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->dataSize != s2->dataSize))
    return false;

  // non-local members

  // pData - dataSize
  if (s1->pData != s2->pData &&
      (s1->pData == NULL || s2->pData == NULL || memcmp(s1->pData, s2->pData, s1->dataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkD3D12FenceSubmitInfoKHR(VkD3D12FenceSubmitInfoKHR const *s1,
                                       VkD3D12FenceSubmitInfoKHR const *s2) {
  // local, simple types
  if ((s1->waitSemaphoreValuesCount != s2->waitSemaphoreValuesCount) ||
      (s1->signalSemaphoreValuesCount != s2->signalSemaphoreValuesCount))
    return false;

  // non-local members

  // pWaitSemaphoreValues - waitSemaphoreValuesCount
  if (s1->pWaitSemaphoreValues != s2->pWaitSemaphoreValues &&
      (s1->pWaitSemaphoreValues == NULL || s2->pWaitSemaphoreValues == NULL ||
       memcmp(s1->pWaitSemaphoreValues, s2->pWaitSemaphoreValues,
              (s1->waitSemaphoreValuesCount) * sizeof(uint64_t)) != 0))
    return false;

  // pSignalSemaphoreValues - signalSemaphoreValuesCount
  if (s1->pSignalSemaphoreValues != s2->pSignalSemaphoreValues &&
      (s1->pSignalSemaphoreValues == NULL || s2->pSignalSemaphoreValues == NULL ||
       memcmp(s1->pSignalSemaphoreValues, s2->pSignalSemaphoreValues,
              (s1->signalSemaphoreValuesCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineCompilerControlCreateInfoARM(
    VkDataGraphPipelineCompilerControlCreateInfoARM const *s1,
    VkDataGraphPipelineCompilerControlCreateInfoARM const *s2) {
  // non-local members

  // pVendorOptions - null-terminated
  if (s1->pVendorOptions != s2->pVendorOptions &&
      (s1->pVendorOptions == NULL || s2->pVendorOptions == NULL ||
       strcmp(s1->pVendorOptions, s2->pVendorOptions) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineConstantARM(VkDataGraphPipelineConstantARM const *s1,
                                            VkDataGraphPipelineConstantARM const *s2) {
  // local, simple types
  if ((s1->id != s2->id))
    return false;

  // non-local members
  if (s1->pConstantData != s2->pConstantData)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph && VK_ARM_tensors
bool compare_VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM(
    VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM const *s1,
    VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM const *s2) {
  // local, simple types
  if ((s1->dimension != s2->dimension) || (s1->zeroCount != s2->zeroCount) ||
      (s1->groupSize != s2->groupSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineCreateInfoARM(VkDataGraphPipelineCreateInfoARM const *s1,
                                              VkDataGraphPipelineCreateInfoARM const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->layout != s2->layout) ||
      (s1->resourceInfoCount != s2->resourceInfoCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineDispatchInfoARM(VkDataGraphPipelineDispatchInfoARM const *s1,
                                                VkDataGraphPipelineDispatchInfoARM const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineIdentifierCreateInfoARM(
    VkDataGraphPipelineIdentifierCreateInfoARM const *s1,
    VkDataGraphPipelineIdentifierCreateInfoARM const *s2) {
  // local, simple types
  if ((s1->identifierSize != s2->identifierSize))
    return false;

  // non-local members

  // pIdentifier - identifierSize
  if (s1->pIdentifier != s2->pIdentifier &&
      (s1->pIdentifier == NULL || s2->pIdentifier == NULL ||
       memcmp(s1->pIdentifier, s2->pIdentifier, (s1->identifierSize) * sizeof(uint8_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineInfoARM(VkDataGraphPipelineInfoARM const *s1,
                                        VkDataGraphPipelineInfoARM const *s2) {
  // local, simple types
  if ((s1->dataGraphPipeline != s2->dataGraphPipeline))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelinePropertyQueryResultARM(
    VkDataGraphPipelinePropertyQueryResultARM const *s1,
    VkDataGraphPipelinePropertyQueryResultARM const *s2) {
  // local, simple types
  if ((s1->property != s2->property) || (s1->isText != s2->isText) ||
      (s1->dataSize != s2->dataSize))
    return false;

  // non-local members

  // pData - dataSize
  if (s1->pData != s2->pData &&
      (s1->pData == NULL || s2->pData == NULL || memcmp(s1->pData, s2->pData, s1->dataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineResourceInfoARM(VkDataGraphPipelineResourceInfoARM const *s1,
                                                VkDataGraphPipelineResourceInfoARM const *s2) {
  // local, simple types
  if ((s1->descriptorSet != s2->descriptorSet) || (s1->binding != s2->binding) ||
      (s1->arrayElement != s2->arrayElement))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineSessionBindPointRequirementARM(
    VkDataGraphPipelineSessionBindPointRequirementARM const *s1,
    VkDataGraphPipelineSessionBindPointRequirementARM const *s2) {
  // local, simple types
  if ((s1->bindPoint != s2->bindPoint) || (s1->bindPointType != s2->bindPointType) ||
      (s1->numObjects != s2->numObjects))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineSessionBindPointRequirementsInfoARM(
    VkDataGraphPipelineSessionBindPointRequirementsInfoARM const *s1,
    VkDataGraphPipelineSessionBindPointRequirementsInfoARM const *s2) {
  // local, simple types
  if ((s1->session != s2->session))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineSessionCreateInfoARM(
    VkDataGraphPipelineSessionCreateInfoARM const *s1,
    VkDataGraphPipelineSessionCreateInfoARM const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->dataGraphPipeline != s2->dataGraphPipeline))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineSessionMemoryRequirementsInfoARM(
    VkDataGraphPipelineSessionMemoryRequirementsInfoARM const *s1,
    VkDataGraphPipelineSessionMemoryRequirementsInfoARM const *s2) {
  // local, simple types
  if ((s1->session != s2->session) || (s1->bindPoint != s2->bindPoint) ||
      (s1->objectIndex != s2->objectIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphPipelineShaderModuleCreateInfoARM(
    VkDataGraphPipelineShaderModuleCreateInfoARM const *s1,
    VkDataGraphPipelineShaderModuleCreateInfoARM const *s2) {
  // local, simple types
  if ((s1->module != s2->module) || (s1->constantCount != s2->constantCount))
    return false;

  // non-local members

  // pName - null-terminated
  if (s1->pName != s2->pName &&
      (s1->pName == NULL || s2->pName == NULL || strcmp(s1->pName, s2->pName) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkDataGraphProcessingEngineCreateInfoARM(
    VkDataGraphProcessingEngineCreateInfoARM const *s1,
    VkDataGraphProcessingEngineCreateInfoARM const *s2) {
  // local, simple types
  if ((s1->processingEngineCount != s2->processingEngineCount))
    return false;

  return true;
}
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerMarkerInfoEXT(VkDebugMarkerMarkerInfoEXT const *s1,
                                        VkDebugMarkerMarkerInfoEXT const *s2) {
  // local array members
  if (memcmp(s1->color, s2->color, 4 * sizeof(float)) != 0)
    return false;
  // non-local members

  // pMarkerName - null-terminated
  if (s1->pMarkerName != s2->pMarkerName && (s1->pMarkerName == NULL || s2->pMarkerName == NULL ||
                                             strcmp(s1->pMarkerName, s2->pMarkerName) != 0))
    return false;
  return true;
}
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerObjectNameInfoEXT(VkDebugMarkerObjectNameInfoEXT const *s1,
                                            VkDebugMarkerObjectNameInfoEXT const *s2) {
  // local, simple types
  if ((s1->objectType != s2->objectType) || (s1->object != s2->object))
    return false;

  // non-local members

  // pObjectName - null-terminated
  if (s1->pObjectName != s2->pObjectName && (s1->pObjectName == NULL || s2->pObjectName == NULL ||
                                             strcmp(s1->pObjectName, s2->pObjectName) != 0))
    return false;
  return true;
}
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerObjectTagInfoEXT(VkDebugMarkerObjectTagInfoEXT const *s1,
                                           VkDebugMarkerObjectTagInfoEXT const *s2) {
  // local, simple types
  if ((s1->objectType != s2->objectType) || (s1->object != s2->object) ||
      (s1->tagName != s2->tagName) || (s1->tagSize != s2->tagSize))
    return false;

  // non-local members

  // pTag - tagSize
  if (s1->pTag != s2->pTag &&
      (s1->pTag == NULL || s2->pTag == NULL || memcmp(s1->pTag, s2->pTag, s1->tagSize) != 0))
    return false;
  return true;
}
#endif

#if VK_EXT_debug_report
bool compare_VkDebugReportCallbackCreateInfoEXT(VkDebugReportCallbackCreateInfoEXT const *s1,
                                                VkDebugReportCallbackCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->pfnCallback != s2->pfnCallback))
    return false;

  // non-local members
  if (s1->pUserData != s2->pUserData)
    return false;

  return true;
}
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsLabelEXT(VkDebugUtilsLabelEXT const *s1, VkDebugUtilsLabelEXT const *s2) {
  // local array members
  if (memcmp(s1->color, s2->color, 4 * sizeof(float)) != 0)
    return false;
  // non-local members

  // pLabelName - null-terminated
  if (s1->pLabelName != s2->pLabelName && (s1->pLabelName == NULL || s2->pLabelName == NULL ||
                                           strcmp(s1->pLabelName, s2->pLabelName) != 0))
    return false;
  return true;
}
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsMessengerCallbackDataEXT(VkDebugUtilsMessengerCallbackDataEXT const *s1,
                                                  VkDebugUtilsMessengerCallbackDataEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->messageIdNumber != s2->messageIdNumber) ||
      (s1->queueLabelCount != s2->queueLabelCount) ||
      (s1->cmdBufLabelCount != s2->cmdBufLabelCount) || (s1->objectCount != s2->objectCount))
    return false;

  // non-local members

  // pMessageIdName - null-terminated
  if (s1->pMessageIdName != s2->pMessageIdName &&
      (s1->pMessageIdName == NULL || s2->pMessageIdName == NULL ||
       strcmp(s1->pMessageIdName, s2->pMessageIdName) != 0))
    return false;

  // pMessage - null-terminated
  if (s1->pMessage != s2->pMessage &&
      (s1->pMessage == NULL || s2->pMessage == NULL || strcmp(s1->pMessage, s2->pMessage) != 0))
    return false;
  return true;
}
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsMessengerCreateInfoEXT(VkDebugUtilsMessengerCreateInfoEXT const *s1,
                                                VkDebugUtilsMessengerCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->messageSeverity != s2->messageSeverity) ||
      (s1->messageType != s2->messageType) || (s1->pfnUserCallback != s2->pfnUserCallback))
    return false;

  // non-local members
  if (s1->pUserData != s2->pUserData)
    return false;

  return true;
}
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsObjectNameInfoEXT(VkDebugUtilsObjectNameInfoEXT const *s1,
                                           VkDebugUtilsObjectNameInfoEXT const *s2) {
  // local, simple types
  if ((s1->objectType != s2->objectType) || (s1->objectHandle != s2->objectHandle))
    return false;

  // non-local members

  // pObjectName - null-terminated
  if (s1->pObjectName != s2->pObjectName && (s1->pObjectName == NULL || s2->pObjectName == NULL ||
                                             strcmp(s1->pObjectName, s2->pObjectName) != 0))
    return false;
  return true;
}
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsObjectTagInfoEXT(VkDebugUtilsObjectTagInfoEXT const *s1,
                                          VkDebugUtilsObjectTagInfoEXT const *s2) {
  // local, simple types
  if ((s1->objectType != s2->objectType) || (s1->objectHandle != s2->objectHandle) ||
      (s1->tagName != s2->tagName) || (s1->tagSize != s2->tagSize))
    return false;

  // non-local members

  // pTag - tagSize
  if (s1->pTag != s2->pTag &&
      (s1->pTag == NULL || s2->pTag == NULL || memcmp(s1->pTag, s2->pTag, s1->tagSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkDecompressMemoryRegionNV(VkDecompressMemoryRegionNV const *s1,
                                        VkDecompressMemoryRegionNV const *s2) {
  // local, simple types
  if ((s1->srcAddress != s2->srcAddress) || (s1->dstAddress != s2->dstAddress) ||
      (s1->compressedSize != s2->compressedSize) ||
      (s1->decompressedSize != s2->decompressedSize) ||
      (s1->decompressionMethod != s2->decompressionMethod))
    return false;

  return true;
}
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationBufferCreateInfoNV(
    VkDedicatedAllocationBufferCreateInfoNV const *s1,
    VkDedicatedAllocationBufferCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->dedicatedAllocation != s2->dedicatedAllocation))
    return false;

  return true;
}
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationImageCreateInfoNV(
    VkDedicatedAllocationImageCreateInfoNV const *s1,
    VkDedicatedAllocationImageCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->dedicatedAllocation != s2->dedicatedAllocation))
    return false;

  return true;
}
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationMemoryAllocateInfoNV(
    VkDedicatedAllocationMemoryAllocateInfoNV const *s1,
    VkDedicatedAllocationMemoryAllocateInfoNV const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_deferred_host_operations &&     \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkDeferredOperationInfoKHR(VkDeferredOperationInfoKHR const *s1,
                                        VkDeferredOperationInfoKHR const *s2) {
  // local, simple types
  if ((s1->operationHandle != s2->operationHandle))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDependencyInfo(VkDependencyInfo const *s1, VkDependencyInfo const *s2) {
  // local, simple types
  if ((s1->dependencyFlags != s2->dependencyFlags) ||
      (s1->memoryBarrierCount != s2->memoryBarrierCount) ||
      (s1->bufferMemoryBarrierCount != s2->bufferMemoryBarrierCount) ||
      (s1->imageMemoryBarrierCount != s2->imageMemoryBarrierCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkDependencyInfoKHR(VkDependencyInfoKHR const *s1, VkDependencyInfoKHR const *s2) {
  // local, simple types
  if ((s1->dependencyFlags != s2->dependencyFlags) ||
      (s1->memoryBarrierCount != s2->memoryBarrierCount) ||
      (s1->bufferMemoryBarrierCount != s2->bufferMemoryBarrierCount) ||
      (s1->imageMemoryBarrierCount != s2->imageMemoryBarrierCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkDependencyInfoKHR(VkDependencyInfoKHR const *s1, VkDependencyInfoKHR const *s2) {
  // local, simple types
  if ((s1->dependencyFlags != s2->dependencyFlags) ||
      (s1->memoryBarrierCount != s2->memoryBarrierCount) ||
      (s1->bufferMemoryBarrierCount != s2->bufferMemoryBarrierCount) ||
      (s1->imageMemoryBarrierCount != s2->imageMemoryBarrierCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control
bool compare_VkDepthBiasInfoEXT(VkDepthBiasInfoEXT const *s1, VkDepthBiasInfoEXT const *s2) {
  // local, simple types
  if ((s1->depthBiasConstantFactor != s2->depthBiasConstantFactor) ||
      (s1->depthBiasClamp != s2->depthBiasClamp) ||
      (s1->depthBiasSlopeFactor != s2->depthBiasSlopeFactor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control
bool compare_VkDepthBiasRepresentationInfoEXT(VkDepthBiasRepresentationInfoEXT const *s1,
                                              VkDepthBiasRepresentationInfoEXT const *s2) {
  // local, simple types
  if ((s1->depthBiasRepresentation != s2->depthBiasRepresentation) ||
      (s1->depthBiasExact != s2->depthBiasExact))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control
bool compare_VkDepthClampRangeEXT(VkDepthClampRangeEXT const *s1, VkDepthClampRangeEXT const *s2) {
  // local, simple types
  if ((s1->minDepthClamp != s2->minDepthClamp) || (s1->maxDepthClamp != s2->maxDepthClamp))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkDescriptorAccelerationStructureInfoNVX(
    VkDescriptorAccelerationStructureInfoNVX const *s1,
    VkDescriptorAccelerationStructureInfoNVX const *s2) {
  // local, simple types
  if ((s1->accelerationStructureCount != s2->accelerationStructureCount))
    return false;

  // non-local members

  // pAccelerationStructures - accelerationStructureCount
  if (s1->pAccelerationStructures != s2->pAccelerationStructures &&
      (s1->pAccelerationStructures == NULL || s2->pAccelerationStructures == NULL ||
       memcmp(s1->pAccelerationStructures, s2->pAccelerationStructures,
              (s1->accelerationStructureCount) * sizeof(VkAccelerationStructureNVX)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorAddressInfoEXT(VkDescriptorAddressInfoEXT const *s1,
                                        VkDescriptorAddressInfoEXT const *s2) {
  // local, simple types
  if ((s1->address != s2->address) || (s1->range != s2->range) || (s1->format != s2->format))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorBufferBindingInfoEXT(VkDescriptorBufferBindingInfoEXT const *s1,
                                              VkDescriptorBufferBindingInfoEXT const *s2) {
  // local, simple types
  if ((s1->address != s2->address) || (s1->usage != s2->usage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(
    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT const *s1,
    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

bool compare_VkDescriptorBufferInfo(VkDescriptorBufferInfo const *s1,
                                    VkDescriptorBufferInfo const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer) || (s1->offset != s2->offset) || (s1->range != s2->range))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorGetInfoEXT(VkDescriptorGetInfoEXT const *s1,
                                    VkDescriptorGetInfoEXT const *s2) {
  // local, simple types
  if ((s1->type != s2->type))
    return false;

  // union types (with selector)
  switch (s1->type) {
  // VkDescriptorDataEXT
  case VK_DESCRIPTOR_TYPE_SAMPLER:
    if (s1->data.pSampler != s2->data.pSampler)
      return false;

  case VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER:
    if (!compare_VkDescriptorImageInfo(s1->data.pCombinedImageSampler,
                                       s2->data.pCombinedImageSampler))
      return false;

  case VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
    if (!compare_VkDescriptorImageInfo(s1->data.pInputAttachmentImage,
                                       s2->data.pInputAttachmentImage))
      return false;

  case VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
    if (!compare_VkDescriptorImageInfo(s1->data.pSampledImage, s2->data.pSampledImage))
      return false;

  case VK_DESCRIPTOR_TYPE_STORAGE_IMAGE:
    if (!compare_VkDescriptorImageInfo(s1->data.pStorageImage, s2->data.pStorageImage))
      return false;

  case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
    if (!compare_VkDescriptorAddressInfoEXT(s1->data.pUniformTexelBuffer,
                                            s2->data.pUniformTexelBuffer))
      return false;

  case VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
    if (!compare_VkDescriptorAddressInfoEXT(s1->data.pStorageTexelBuffer,
                                            s2->data.pStorageTexelBuffer))
      return false;

  case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
    if (!compare_VkDescriptorAddressInfoEXT(s1->data.pUniformBuffer, s2->data.pUniformBuffer))
      return false;

  case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER:
    if (!compare_VkDescriptorAddressInfoEXT(s1->data.pStorageBuffer, s2->data.pStorageBuffer))
      return false;

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  case VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR:
#endif
#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV:
#endif
#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS) ||                                                                 \
    (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
    if (s1->data.accelerationStructure != s2->data.accelerationStructure)
      return false;
#endif

  default:;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer
bool compare_VkDescriptorGetTensorInfoARM(VkDescriptorGetTensorInfoARM const *s1,
                                          VkDescriptorGetTensorInfoARM const *s2) {
  // local, simple types
  if ((s1->tensorView != s2->tensorView))
    return false;

  return true;
}
#endif

bool compare_VkDescriptorImageInfo(VkDescriptorImageInfo const *s1,
                                   VkDescriptorImageInfo const *s2) {
  // local, simple types
  if ((s1->sampler != s2->sampler) || (s1->imageView != s2->imageView) ||
      (s1->imageLayout != s2->imageLayout))
    return false;

  return true;
}

bool compare_VkDescriptorPoolCreateInfo(VkDescriptorPoolCreateInfo const *s1,
                                        VkDescriptorPoolCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->maxSets != s2->maxSets) ||
      (s1->poolSizeCount != s2->poolSizeCount))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDescriptorPoolInlineUniformBlockCreateInfo(
    VkDescriptorPoolInlineUniformBlockCreateInfo const *s1,
    VkDescriptorPoolInlineUniformBlockCreateInfo const *s2) {
  // local, simple types
  if ((s1->maxInlineUniformBlockBindings != s2->maxInlineUniformBlockBindings))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block
bool compare_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s1,
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->maxInlineUniformBlockBindings != s2->maxInlineUniformBlockBindings))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block
bool compare_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s1,
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->maxInlineUniformBlockBindings != s2->maxInlineUniformBlockBindings))
    return false;

  return true;
}
#endif

bool compare_VkDescriptorPoolSize(VkDescriptorPoolSize const *s1, VkDescriptorPoolSize const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->descriptorCount != s2->descriptorCount))
    return false;

  return true;
}

bool compare_VkDescriptorSetAllocateInfo(VkDescriptorSetAllocateInfo const *s1,
                                         VkDescriptorSetAllocateInfo const *s2) {
  // local, simple types
  if ((s1->descriptorPool != s2->descriptorPool) ||
      (s1->descriptorSetCount != s2->descriptorSetCount))
    return false;

  // non-local members

  // pSetLayouts - descriptorSetCount
  if (s1->pSetLayouts != s2->pSetLayouts &&
      (s1->pSetLayouts == NULL || s2->pSetLayouts == NULL ||
       memcmp(s1->pSetLayouts, s2->pSetLayouts,
              (s1->descriptorSetCount) * sizeof(VkDescriptorSetLayout)) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkDescriptorSetBindingReferenceVALVE(VkDescriptorSetBindingReferenceVALVE const *s1,
                                                  VkDescriptorSetBindingReferenceVALVE const *s2) {
  // local, simple types
  if ((s1->descriptorSetLayout != s2->descriptorSetLayout) || (s1->binding != s2->binding))
    return false;

  return true;
}
#endif

bool compare_VkDescriptorSetLayoutBinding(VkDescriptorSetLayoutBinding const *s1,
                                          VkDescriptorSetLayoutBinding const *s2) {
  // local, simple types
  if ((s1->binding != s2->binding) || (s1->descriptorType != s2->descriptorType) ||
      (s1->descriptorCount != s2->descriptorCount) || (s1->stageFlags != s2->stageFlags))
    return false;

  // non-local members

  // pImmutableSamplers - descriptorCount
  if (s1->pImmutableSamplers != s2->pImmutableSamplers &&
      (s1->pImmutableSamplers == NULL || s2->pImmutableSamplers == NULL ||
       memcmp(s1->pImmutableSamplers, s2->pImmutableSamplers,
              (s1->descriptorCount) * sizeof(VkSampler)) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetLayoutBindingFlagsCreateInfo(
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *s1,
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *s2) {
  // local, simple types
  if ((s1->bindingCount != s2->bindingCount))
    return false;

  // non-local members

  // pBindingFlags - bindingCount
  if (s1->pBindingFlags != s2->pBindingFlags &&
      (s1->pBindingFlags == NULL || s2->pBindingFlags == NULL ||
       memcmp(s1->pBindingFlags, s2->pBindingFlags,
              (s1->bindingCount) * sizeof(VkDescriptorBindingFlags)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s1,
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->bindingCount != s2->bindingCount))
    return false;

  // non-local members

  // pBindingFlags - bindingCount
  if (s1->pBindingFlags != s2->pBindingFlags &&
      (s1->pBindingFlags == NULL || s2->pBindingFlags == NULL ||
       memcmp(s1->pBindingFlags, s2->pBindingFlags,
              (s1->bindingCount) * sizeof(VkDescriptorBindingFlagsEXT)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s1,
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->bindingCount != s2->bindingCount))
    return false;

  // non-local members

  // pBindingFlags - bindingCount
  if (s1->pBindingFlags != s2->pBindingFlags &&
      (s1->pBindingFlags == NULL || s2->pBindingFlags == NULL ||
       memcmp(s1->pBindingFlags, s2->pBindingFlags,
              (s1->bindingCount) * sizeof(VkDescriptorBindingFlags)) != 0))
    return false;
  return true;
}
#endif

bool compare_VkDescriptorSetLayoutCreateInfo(VkDescriptorSetLayoutCreateInfo const *s1,
                                             VkDescriptorSetLayoutCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->bindingCount != s2->bindingCount))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkDescriptorSetLayoutHostMappingInfoVALVE(
    VkDescriptorSetLayoutHostMappingInfoVALVE const *s1,
    VkDescriptorSetLayoutHostMappingInfoVALVE const *s2) {
  // local, simple types
  if ((s1->descriptorOffset != s2->descriptorOffset) || (s1->descriptorSize != s2->descriptorSize))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorSetLayoutSupport(VkDescriptorSetLayoutSupport const *s1,
                                          VkDescriptorSetLayoutSupport const *s2) {
  // local, simple types
  if ((s1->supported != s2->supported))
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance3
bool compare_VkDescriptorSetLayoutSupportKHR(VkDescriptorSetLayoutSupportKHR const *s1,
                                             VkDescriptorSetLayoutSupportKHR const *s2) {
  // local, simple types
  if ((s1->supported != s2->supported))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetVariableDescriptorCountAllocateInfo(
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *s1,
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *s2) {
  // local, simple types
  if ((s1->descriptorSetCount != s2->descriptorSetCount))
    return false;

  // non-local members

  // pDescriptorCounts - descriptorSetCount
  if (s1->pDescriptorCounts != s2->pDescriptorCounts &&
      (s1->pDescriptorCounts == NULL || s2->pDescriptorCounts == NULL ||
       memcmp(s1->pDescriptorCounts, s2->pDescriptorCounts,
              (s1->descriptorSetCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s1,
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s2) {
  // local, simple types
  if ((s1->descriptorSetCount != s2->descriptorSetCount))
    return false;

  // non-local members

  // pDescriptorCounts - descriptorSetCount
  if (s1->pDescriptorCounts != s2->pDescriptorCounts &&
      (s1->pDescriptorCounts == NULL || s2->pDescriptorCounts == NULL ||
       memcmp(s1->pDescriptorCounts, s2->pDescriptorCounts,
              (s1->descriptorSetCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s1,
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s2) {
  // local, simple types
  if ((s1->descriptorSetCount != s2->descriptorSetCount))
    return false;

  // non-local members

  // pDescriptorCounts - descriptorSetCount
  if (s1->pDescriptorCounts != s2->pDescriptorCounts &&
      (s1->pDescriptorCounts == NULL || s2->pDescriptorCounts == NULL ||
       memcmp(s1->pDescriptorCounts, s2->pDescriptorCounts,
              (s1->descriptorSetCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetVariableDescriptorCountLayoutSupport(
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *s1,
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *s2) {
  // local, simple types
  if ((s1->maxVariableDescriptorCount != s2->maxVariableDescriptorCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s1,
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s2) {
  // local, simple types
  if ((s1->maxVariableDescriptorCount != s2->maxVariableDescriptorCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s1,
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s2) {
  // local, simple types
  if ((s1->maxVariableDescriptorCount != s2->maxVariableDescriptorCount))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorUpdateTemplateCreateInfo(VkDescriptorUpdateTemplateCreateInfo const *s1,
                                                  VkDescriptorUpdateTemplateCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) ||
      (s1->descriptorUpdateEntryCount != s2->descriptorUpdateEntryCount) ||
      (s1->templateType != s2->templateType) ||
      (s1->descriptorSetLayout != s2->descriptorSetLayout) ||
      (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->pipelineLayout != s2->pipelineLayout) || (s1->set != s2->set))
    return false;

  return true;
}
#endif

#if VK_KHR_descriptor_update_template
bool compare_VkDescriptorUpdateTemplateCreateInfoKHR(
    VkDescriptorUpdateTemplateCreateInfoKHR const *s1,
    VkDescriptorUpdateTemplateCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) ||
      (s1->descriptorUpdateEntryCount != s2->descriptorUpdateEntryCount) ||
      (s1->templateType != s2->templateType) ||
      (s1->descriptorSetLayout != s2->descriptorSetLayout) ||
      (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->pipelineLayout != s2->pipelineLayout) || (s1->set != s2->set))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorUpdateTemplateEntry(VkDescriptorUpdateTemplateEntry const *s1,
                                             VkDescriptorUpdateTemplateEntry const *s2) {
  // local, simple types
  if ((s1->dstBinding != s2->dstBinding) || (s1->dstArrayElement != s2->dstArrayElement) ||
      (s1->descriptorCount != s2->descriptorCount) || (s1->descriptorType != s2->descriptorType) ||
      (s1->offset != s2->offset) || (s1->stride != s2->stride))
    return false;

  return true;
}
#endif

#if VK_KHR_descriptor_update_template
bool compare_VkDescriptorUpdateTemplateEntryKHR(VkDescriptorUpdateTemplateEntryKHR const *s1,
                                                VkDescriptorUpdateTemplateEntryKHR const *s2) {
  // local, simple types
  if ((s1->dstBinding != s2->dstBinding) || (s1->dstArrayElement != s2->dstArrayElement) ||
      (s1->descriptorCount != s2->descriptorCount) || (s1->descriptorType != s2->descriptorType) ||
      (s1->offset != s2->offset) || (s1->stride != s2->stride))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report
bool compare_VkDeviceAddressBindingCallbackDataEXT(
    VkDeviceAddressBindingCallbackDataEXT const *s1,
    VkDeviceAddressBindingCallbackDataEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->baseAddress != s2->baseAddress) || (s1->size != s2->size) ||
      (s1->bindingType != s2->bindingType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDeviceBufferMemoryRequirements(VkDeviceBufferMemoryRequirements const *s1,
                                              VkDeviceBufferMemoryRequirements const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4
bool compare_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *s1,
                                                 VkDeviceBufferMemoryRequirementsKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4
bool compare_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *s1,
                                                 VkDeviceBufferMemoryRequirementsKHR const *s2) {
  return true;
}
#endif

bool compare_VkDeviceCreateInfo(VkDeviceCreateInfo const *s1, VkDeviceCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->queueCreateInfoCount != s2->queueCreateInfoCount) ||
      (s1->enabledLayerCount != s2->enabledLayerCount) ||
      (s1->enabledExtensionCount != s2->enabledExtensionCount))
    return false;

  // non-local members

  // ppEnabledLayerNames - enabledLayerCount,null-terminated
  for (size_t i = 0; i < s1->enabledLayerCount; ++i) {
    if (s1->ppEnabledLayerNames[i] != s2->ppEnabledLayerNames[i] &&
        (s1->ppEnabledLayerNames[i] == NULL || s2->ppEnabledLayerNames[i] == NULL ||
         strcmp(s1->ppEnabledLayerNames[i], s2->ppEnabledLayerNames[i]) != 0))
      return false;
  }

  // ppEnabledExtensionNames - enabledExtensionCount,null-terminated
  for (size_t i = 0; i < s1->enabledExtensionCount; ++i) {
    if (s1->ppEnabledExtensionNames[i] != s2->ppEnabledExtensionNames[i] &&
        (s1->ppEnabledExtensionNames[i] == NULL || s2->ppEnabledExtensionNames[i] == NULL ||
         strcmp(s1->ppEnabledExtensionNames[i], s2->ppEnabledExtensionNames[i]) != 0))
      return false;
  }
  return true;
}

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkDeviceDeviceMemoryReportCreateInfoEXT(
    VkDeviceDeviceMemoryReportCreateInfoEXT const *s1,
    VkDeviceDeviceMemoryReportCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->pfnUserCallback != s2->pfnUserCallback))
    return false;

  // non-local members
  if (s1->pUserData != s2->pUserData)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
bool compare_VkDeviceDiagnosticsConfigCreateInfoNV(
    VkDeviceDiagnosticsConfigCreateInfoNV const *s1,
    VkDeviceDiagnosticsConfigCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_EXT_display_control
bool compare_VkDeviceEventInfoEXT(VkDeviceEventInfoEXT const *s1, VkDeviceEventInfoEXT const *s2) {
  // local, simple types
  if ((s1->deviceEvent != s2->deviceEvent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultAddressInfoEXT(VkDeviceFaultAddressInfoEXT const *s1,
                                         VkDeviceFaultAddressInfoEXT const *s2) {
  // local, simple types
  if ((s1->addressType != s2->addressType) || (s1->reportedAddress != s2->reportedAddress) ||
      (s1->addressPrecision != s2->addressPrecision))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultCountsEXT(VkDeviceFaultCountsEXT const *s1,
                                    VkDeviceFaultCountsEXT const *s2) {
  // local, simple types
  if ((s1->addressInfoCount != s2->addressInfoCount) ||
      (s1->vendorInfoCount != s2->vendorInfoCount) ||
      (s1->vendorBinarySize != s2->vendorBinarySize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultInfoEXT(VkDeviceFaultInfoEXT const *s1, VkDeviceFaultInfoEXT const *s2) {
  // local array members
  if (strncmp(s1->description, s2->description, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  // non-local members
  if (s1->pVendorBinaryData != s2->pVendorBinaryData)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 246 && VK_EXT_device_fault
bool compare_VkDeviceFaultVendorBinaryHeaderVersionOneEXT(
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s1,
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s2) {
  // local, simple types
  if ((s1->headerSize != s2->headerSize) || (s1->headerVersion != s2->headerVersion) ||
      (s1->vendorID != s2->vendorID) || (s1->deviceID != s2->deviceID) ||
      (s1->driverVersion != s2->driverVersion) ||
      (s1->applicationNameOffset != s2->applicationNameOffset) ||
      (s1->applicationVersion != s2->applicationVersion) ||
      (s1->engineNameOffset != s2->engineNameOffset))
    return false;

  // local array members
  if (memcmp(s1->pipelineCacheUUID, s2->pipelineCacheUUID, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 247 && VK_EXT_device_fault
bool compare_VkDeviceFaultVendorBinaryHeaderVersionOneEXT(
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s1,
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s2) {
  // local, simple types
  if ((s1->headerSize != s2->headerSize) || (s1->headerVersion != s2->headerVersion) ||
      (s1->vendorID != s2->vendorID) || (s1->deviceID != s2->deviceID) ||
      (s1->driverVersion != s2->driverVersion) ||
      (s1->applicationNameOffset != s2->applicationNameOffset) ||
      (s1->applicationVersion != s2->applicationVersion) ||
      (s1->engineNameOffset != s2->engineNameOffset) || (s1->engineVersion != s2->engineVersion) ||
      (s1->apiVersion != s2->apiVersion))
    return false;

  // local array members
  if (memcmp(s1->pipelineCacheUUID, s2->pipelineCacheUUID, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultVendorInfoEXT(VkDeviceFaultVendorInfoEXT const *s1,
                                        VkDeviceFaultVendorInfoEXT const *s2) {
  // local, simple types
  if ((s1->vendorFaultCode != s2->vendorFaultCode) || (s1->vendorFaultData != s2->vendorFaultData))
    return false;

  // local array members
  if (strncmp(s1->description, s2->description, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkDeviceGeneratedCommandsFeaturesNVX(VkDeviceGeneratedCommandsFeaturesNVX const *s1,
                                                  VkDeviceGeneratedCommandsFeaturesNVX const *s2) {
  // local, simple types
  if ((s1->computeBindingPointSupport != s2->computeBindingPointSupport))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkDeviceGeneratedCommandsLimitsNVX(VkDeviceGeneratedCommandsLimitsNVX const *s1,
                                                VkDeviceGeneratedCommandsLimitsNVX const *s2) {
  // local, simple types
  if ((s1->maxIndirectCommandsLayoutTokenCount != s2->maxIndirectCommandsLayoutTokenCount) ||
      (s1->maxObjectEntryCounts != s2->maxObjectEntryCounts) ||
      (s1->minSequenceCountBufferOffsetAlignment != s2->minSequenceCountBufferOffsetAlignment) ||
      (s1->minSequenceIndexBufferOffsetAlignment != s2->minSequenceIndexBufferOffsetAlignment) ||
      (s1->minCommandsTokenBufferOffsetAlignment != s2->minCommandsTokenBufferOffsetAlignment))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupBindSparseInfo(VkDeviceGroupBindSparseInfo const *s1,
                                         VkDeviceGroupBindSparseInfo const *s2) {
  // local, simple types
  if ((s1->resourceDeviceIndex != s2->resourceDeviceIndex) ||
      (s1->memoryDeviceIndex != s2->memoryDeviceIndex))
    return false;

  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupBindSparseInfoKHR(VkDeviceGroupBindSparseInfoKHR const *s1,
                                            VkDeviceGroupBindSparseInfoKHR const *s2) {
  // local, simple types
  if ((s1->resourceDeviceIndex != s2->resourceDeviceIndex) ||
      (s1->memoryDeviceIndex != s2->memoryDeviceIndex))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupCommandBufferBeginInfo(VkDeviceGroupCommandBufferBeginInfo const *s1,
                                                 VkDeviceGroupCommandBufferBeginInfo const *s2) {
  // local, simple types
  if ((s1->deviceMask != s2->deviceMask))
    return false;

  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupCommandBufferBeginInfoKHR(
    VkDeviceGroupCommandBufferBeginInfoKHR const *s1,
    VkDeviceGroupCommandBufferBeginInfoKHR const *s2) {
  // local, simple types
  if ((s1->deviceMask != s2->deviceMask))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupDeviceCreateInfo(VkDeviceGroupDeviceCreateInfo const *s1,
                                           VkDeviceGroupDeviceCreateInfo const *s2) {
  // local, simple types
  if ((s1->physicalDeviceCount != s2->physicalDeviceCount))
    return false;

  // non-local members

  // pPhysicalDevices - physicalDeviceCount
  if (s1->pPhysicalDevices != s2->pPhysicalDevices &&
      (s1->pPhysicalDevices == NULL || s2->pPhysicalDevices == NULL ||
       memcmp(s1->pPhysicalDevices, s2->pPhysicalDevices,
              (s1->physicalDeviceCount) * sizeof(VkPhysicalDevice)) != 0))
    return false;
  return true;
}
#endif

#if VK_KHR_device_group_creation
bool compare_VkDeviceGroupDeviceCreateInfoKHR(VkDeviceGroupDeviceCreateInfoKHR const *s1,
                                              VkDeviceGroupDeviceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->physicalDeviceCount != s2->physicalDeviceCount))
    return false;

  // non-local members

  // pPhysicalDevices - physicalDeviceCount
  if (s1->pPhysicalDevices != s2->pPhysicalDevices &&
      (s1->pPhysicalDevices == NULL || s2->pPhysicalDevices == NULL ||
       memcmp(s1->pPhysicalDevices, s2->pPhysicalDevices,
              (s1->physicalDeviceCount) * sizeof(VkPhysicalDevice)) != 0))
    return false;
  return true;
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group &&      \
     VK_KHR_surface) ||                                                                            \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkDeviceGroupPresentCapabilitiesKHR(VkDeviceGroupPresentCapabilitiesKHR const *s1,
                                                 VkDeviceGroupPresentCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->modes != s2->modes))
    return false;

  // local array members
  if (memcmp(s1->presentMask, s2->presentMask, VK_MAX_DEVICE_GROUP_SIZE * sizeof(uint32_t)) != 0)
    return false;
  return true;
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkDeviceGroupPresentInfoKHR(VkDeviceGroupPresentInfoKHR const *s1,
                                         VkDeviceGroupPresentInfoKHR const *s2) {
  // local, simple types
  if ((s1->swapchainCount != s2->swapchainCount) || (s1->mode != s2->mode))
    return false;

  // non-local members

  // pDeviceMasks - swapchainCount
  if (s1->pDeviceMasks != s2->pDeviceMasks &&
      (s1->pDeviceMasks == NULL || s2->pDeviceMasks == NULL ||
       memcmp(s1->pDeviceMasks, s2->pDeviceMasks, (s1->swapchainCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupRenderPassBeginInfo(VkDeviceGroupRenderPassBeginInfo const *s1,
                                              VkDeviceGroupRenderPassBeginInfo const *s2) {
  // local, simple types
  if ((s1->deviceMask != s2->deviceMask) ||
      (s1->deviceRenderAreaCount != s2->deviceRenderAreaCount))
    return false;

  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupRenderPassBeginInfoKHR(VkDeviceGroupRenderPassBeginInfoKHR const *s1,
                                                 VkDeviceGroupRenderPassBeginInfoKHR const *s2) {
  // local, simple types
  if ((s1->deviceMask != s2->deviceMask) ||
      (s1->deviceRenderAreaCount != s2->deviceRenderAreaCount))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupSubmitInfo(VkDeviceGroupSubmitInfo const *s1,
                                     VkDeviceGroupSubmitInfo const *s2) {
  // local, simple types
  if ((s1->waitSemaphoreCount != s2->waitSemaphoreCount) ||
      (s1->commandBufferCount != s2->commandBufferCount) ||
      (s1->signalSemaphoreCount != s2->signalSemaphoreCount))
    return false;

  // non-local members

  // pWaitSemaphoreDeviceIndices - waitSemaphoreCount
  if (s1->pWaitSemaphoreDeviceIndices != s2->pWaitSemaphoreDeviceIndices &&
      (s1->pWaitSemaphoreDeviceIndices == NULL || s2->pWaitSemaphoreDeviceIndices == NULL ||
       memcmp(s1->pWaitSemaphoreDeviceIndices, s2->pWaitSemaphoreDeviceIndices,
              (s1->waitSemaphoreCount) * sizeof(uint32_t)) != 0))
    return false;

  // pCommandBufferDeviceMasks - commandBufferCount
  if (s1->pCommandBufferDeviceMasks != s2->pCommandBufferDeviceMasks &&
      (s1->pCommandBufferDeviceMasks == NULL || s2->pCommandBufferDeviceMasks == NULL ||
       memcmp(s1->pCommandBufferDeviceMasks, s2->pCommandBufferDeviceMasks,
              (s1->commandBufferCount) * sizeof(uint32_t)) != 0))
    return false;

  // pSignalSemaphoreDeviceIndices - signalSemaphoreCount
  if (s1->pSignalSemaphoreDeviceIndices != s2->pSignalSemaphoreDeviceIndices &&
      (s1->pSignalSemaphoreDeviceIndices == NULL || s2->pSignalSemaphoreDeviceIndices == NULL ||
       memcmp(s1->pSignalSemaphoreDeviceIndices, s2->pSignalSemaphoreDeviceIndices,
              (s1->signalSemaphoreCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupSubmitInfoKHR(VkDeviceGroupSubmitInfoKHR const *s1,
                                        VkDeviceGroupSubmitInfoKHR const *s2) {
  // local, simple types
  if ((s1->waitSemaphoreCount != s2->waitSemaphoreCount) ||
      (s1->commandBufferCount != s2->commandBufferCount) ||
      (s1->signalSemaphoreCount != s2->signalSemaphoreCount))
    return false;

  // non-local members

  // pWaitSemaphoreDeviceIndices - waitSemaphoreCount
  if (s1->pWaitSemaphoreDeviceIndices != s2->pWaitSemaphoreDeviceIndices &&
      (s1->pWaitSemaphoreDeviceIndices == NULL || s2->pWaitSemaphoreDeviceIndices == NULL ||
       memcmp(s1->pWaitSemaphoreDeviceIndices, s2->pWaitSemaphoreDeviceIndices,
              (s1->waitSemaphoreCount) * sizeof(uint32_t)) != 0))
    return false;

  // pCommandBufferDeviceMasks - commandBufferCount
  if (s1->pCommandBufferDeviceMasks != s2->pCommandBufferDeviceMasks &&
      (s1->pCommandBufferDeviceMasks == NULL || s2->pCommandBufferDeviceMasks == NULL ||
       memcmp(s1->pCommandBufferDeviceMasks, s2->pCommandBufferDeviceMasks,
              (s1->commandBufferCount) * sizeof(uint32_t)) != 0))
    return false;

  // pSignalSemaphoreDeviceIndices - signalSemaphoreCount
  if (s1->pSignalSemaphoreDeviceIndices != s2->pSignalSemaphoreDeviceIndices &&
      (s1->pSignalSemaphoreDeviceIndices == NULL || s2->pSignalSemaphoreDeviceIndices == NULL ||
       memcmp(s1->pSignalSemaphoreDeviceIndices, s2->pSignalSemaphoreDeviceIndices,
              (s1->signalSemaphoreCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkDeviceGroupSwapchainCreateInfoKHR(VkDeviceGroupSwapchainCreateInfoKHR const *s1,
                                                 VkDeviceGroupSwapchainCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->modes != s2->modes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDeviceImageMemoryRequirements(VkDeviceImageMemoryRequirements const *s1,
                                             VkDeviceImageMemoryRequirements const *s2) {
  // local, simple types
  if ((s1->planeAspect != s2->planeAspect))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4
bool compare_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *s1,
                                                VkDeviceImageMemoryRequirementsKHR const *s2) {
  // local, simple types
  if ((s1->planeAspect != s2->planeAspect))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4
bool compare_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *s1,
                                                VkDeviceImageMemoryRequirementsKHR const *s2) {
  // local, simple types
  if ((s1->planeAspect != s2->planeAspect))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkDeviceImageSubresourceInfo(VkDeviceImageSubresourceInfo const *s1,
                                          VkDeviceImageSubresourceInfo const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkDeviceImageSubresourceInfoKHR(VkDeviceImageSubresourceInfoKHR const *s1,
                                             VkDeviceImageSubresourceInfoKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkDeviceImageSubresourceInfoKHR(VkDeviceImageSubresourceInfoKHR const *s1,
                                             VkDeviceImageSubresourceInfoKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDeviceMemoryOpaqueCaptureAddressInfo(
    VkDeviceMemoryOpaqueCaptureAddressInfo const *s1,
    VkDeviceMemoryOpaqueCaptureAddressInfo const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address
bool compare_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s1,
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address
bool compare_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s1,
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior
bool compare_VkDeviceMemoryOverallocationCreateInfoAMD(
    VkDeviceMemoryOverallocationCreateInfoAMD const *s1,
    VkDeviceMemoryOverallocationCreateInfoAMD const *s2) {
  // local, simple types
  if ((s1->overallocationBehavior != s2->overallocationBehavior))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkDeviceMemoryReportCallbackDataEXT(VkDeviceMemoryReportCallbackDataEXT const *s1,
                                                 VkDeviceMemoryReportCallbackDataEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->type != s2->type) ||
      (s1->memoryObjectId != s2->memoryObjectId) || (s1->size != s2->size) ||
      (s1->objectType != s2->objectType) || (s1->objectHandle != s2->objectHandle) ||
      (s1->heapIndex != s2->heapIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkDeviceObjectReservationCreateInfo(VkDeviceObjectReservationCreateInfo const *s1,
                                                 VkDeviceObjectReservationCreateInfo const *s2) {
  // local, simple types
  if ((s1->pipelineCacheCreateInfoCount != s2->pipelineCacheCreateInfoCount) ||
      (s1->pipelinePoolSizeCount != s2->pipelinePoolSizeCount) ||
      (s1->semaphoreRequestCount != s2->semaphoreRequestCount) ||
      (s1->commandBufferRequestCount != s2->commandBufferRequestCount) ||
      (s1->fenceRequestCount != s2->fenceRequestCount) ||
      (s1->deviceMemoryRequestCount != s2->deviceMemoryRequestCount) ||
      (s1->bufferRequestCount != s2->bufferRequestCount) ||
      (s1->imageRequestCount != s2->imageRequestCount) ||
      (s1->eventRequestCount != s2->eventRequestCount) ||
      (s1->queryPoolRequestCount != s2->queryPoolRequestCount) ||
      (s1->bufferViewRequestCount != s2->bufferViewRequestCount) ||
      (s1->imageViewRequestCount != s2->imageViewRequestCount) ||
      (s1->layeredImageViewRequestCount != s2->layeredImageViewRequestCount) ||
      (s1->pipelineCacheRequestCount != s2->pipelineCacheRequestCount) ||
      (s1->pipelineLayoutRequestCount != s2->pipelineLayoutRequestCount) ||
      (s1->renderPassRequestCount != s2->renderPassRequestCount) ||
      (s1->graphicsPipelineRequestCount != s2->graphicsPipelineRequestCount) ||
      (s1->computePipelineRequestCount != s2->computePipelineRequestCount) ||
      (s1->descriptorSetLayoutRequestCount != s2->descriptorSetLayoutRequestCount) ||
      (s1->samplerRequestCount != s2->samplerRequestCount) ||
      (s1->descriptorPoolRequestCount != s2->descriptorPoolRequestCount) ||
      (s1->descriptorSetRequestCount != s2->descriptorSetRequestCount) ||
      (s1->framebufferRequestCount != s2->framebufferRequestCount) ||
      (s1->commandPoolRequestCount != s2->commandPoolRequestCount) ||
      (s1->samplerYcbcrConversionRequestCount != s2->samplerYcbcrConversionRequestCount) ||
      (s1->surfaceRequestCount != s2->surfaceRequestCount) ||
      (s1->swapchainRequestCount != s2->swapchainRequestCount) ||
      (s1->displayModeRequestCount != s2->displayModeRequestCount) ||
      (s1->subpassDescriptionRequestCount != s2->subpassDescriptionRequestCount) ||
      (s1->attachmentDescriptionRequestCount != s2->attachmentDescriptionRequestCount) ||
      (s1->descriptorSetLayoutBindingRequestCount != s2->descriptorSetLayoutBindingRequestCount) ||
      (s1->descriptorSetLayoutBindingLimit != s2->descriptorSetLayoutBindingLimit) ||
      (s1->maxImageViewMipLevels != s2->maxImageViewMipLevels) ||
      (s1->maxImageViewArrayLayers != s2->maxImageViewArrayLayers) ||
      (s1->maxLayeredImageViewMipLevels != s2->maxLayeredImageViewMipLevels) ||
      (s1->maxOcclusionQueriesPerPool != s2->maxOcclusionQueriesPerPool) ||
      (s1->maxPipelineStatisticsQueriesPerPool != s2->maxPipelineStatisticsQueriesPerPool) ||
      (s1->maxTimestampQueriesPerPool != s2->maxTimestampQueriesPerPool) ||
      (s1->maxImmutableSamplersPerDescriptorSetLayout !=
       s2->maxImmutableSamplersPerDescriptorSetLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkDevicePipelineBinaryInternalCacheControlKHR(
    VkDevicePipelineBinaryInternalCacheControlKHR const *s1,
    VkDevicePipelineBinaryInternalCacheControlKHR const *s2) {
  // local, simple types
  if ((s1->disableInternalCache != s2->disableInternalCache))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDevicePrivateDataCreateInfo(VkDevicePrivateDataCreateInfo const *s1,
                                           VkDevicePrivateDataCreateInfo const *s2) {
  // local, simple types
  if ((s1->privateDataSlotRequestCount != s2->privateDataSlotRequestCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data
bool compare_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *s1,
                                              VkDevicePrivateDataCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->privateDataSlotRequestCount != s2->privateDataSlotRequestCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_private_data
bool compare_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *s1,
                                              VkDevicePrivateDataCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->privateDataSlotRequestCount != s2->privateDataSlotRequestCount))
    return false;

  return true;
}
#endif

bool compare_VkDeviceQueueCreateInfo(VkDeviceQueueCreateInfo const *s1,
                                     VkDeviceQueueCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->queueFamilyIndex != s2->queueFamilyIndex) ||
      (s1->queueCount != s2->queueCount))
    return false;

  // non-local members

  // pQueuePriorities - queueCount
  if (s1->pQueuePriorities != s2->pQueuePriorities &&
      (s1->pQueuePriorities == NULL || s2->pQueuePriorities == NULL ||
       memcmp(s1->pQueuePriorities, s2->pQueuePriorities, (s1->queueCount) * sizeof(float)) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkDeviceQueueGlobalPriorityCreateInfo(
    VkDeviceQueueGlobalPriorityCreateInfo const *s1,
    VkDeviceQueueGlobalPriorityCreateInfo const *s2) {
  // local, simple types
  if ((s1->globalPriority != s2->globalPriority))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 203 && VK_EXT_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->globalPriority != s2->globalPriority))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->globalPriority != s2->globalPriority))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->globalPriority != s2->globalPriority))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoKHR(
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->globalPriority != s2->globalPriority))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoKHR(
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->globalPriority != s2->globalPriority))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceQueueInfo2(VkDeviceQueueInfo2 const *s1, VkDeviceQueueInfo2 const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->queueFamilyIndex != s2->queueFamilyIndex) ||
      (s1->queueIndex != s2->queueIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls
bool compare_VkDeviceQueueShaderCoreControlCreateInfoARM(
    VkDeviceQueueShaderCoreControlCreateInfoARM const *s1,
    VkDeviceQueueShaderCoreControlCreateInfoARM const *s2) {
  // local, simple types
  if ((s1->shaderCoreCount != s2->shaderCoreCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2 && VKSC_VERSION_1_0
bool compare_VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV(
    VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV const *s1,
    VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->semaphoreSciSyncPoolRequestCount != s2->semaphoreSciSyncPoolRequestCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkDeviceTensorMemoryRequirementsARM(VkDeviceTensorMemoryRequirementsARM const *s1,
                                                 VkDeviceTensorMemoryRequirementsARM const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 236 && VK_HEADER_VERSION <= 236 && VK_LUNARG_direct_driver_loading
bool compare_VkDirectDriverLoadingInfoLUNARG(VkDirectDriverLoadingInfoLUNARG const *s1,
                                             VkDirectDriverLoadingInfoLUNARG const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->pfnGetInstanceProcAddr != s2->pfnGetInstanceProcAddr))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_LUNARG_direct_driver_loading
bool compare_VkDirectDriverLoadingInfoLUNARG(VkDirectDriverLoadingInfoLUNARG const *s1,
                                             VkDirectDriverLoadingInfoLUNARG const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->pfnGetInstanceProcAddr != s2->pfnGetInstanceProcAddr))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 236 && VK_LUNARG_direct_driver_loading
bool compare_VkDirectDriverLoadingListLUNARG(VkDirectDriverLoadingListLUNARG const *s1,
                                             VkDirectDriverLoadingListLUNARG const *s2) {
  // local, simple types
  if ((s1->mode != s2->mode) || (s1->driverCount != s2->driverCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface
bool compare_VkDirectFBSurfaceCreateInfoEXT(VkDirectFBSurfaceCreateInfoEXT const *s1,
                                            VkDirectFBSurfaceCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // non-local members
  if (s1->dfb != s2->dfb)
    return false;

  if (s1->surface != s2->surface)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkDispatchGraphCountInfoAMDX(VkDispatchGraphCountInfoAMDX const *s1,
                                          VkDispatchGraphCountInfoAMDX const *s2) {
  // local, simple types
  if ((s1->count != s2->count) || (s1->stride != s2->stride))
    return false;

  // union types (no selector)
  if (memcmp(&s1->infos, &s2->infos, sizeof(VkDeviceOrHostAddressConstAMDX)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkDispatchGraphInfoAMDX(VkDispatchGraphInfoAMDX const *s1,
                                     VkDispatchGraphInfoAMDX const *s2) {
  // local, simple types
  if ((s1->nodeIndex != s2->nodeIndex) || (s1->payloadCount != s2->payloadCount) ||
      (s1->payloadStride != s2->payloadStride))
    return false;

  // union types (no selector)
  if (memcmp(&s1->payloads, &s2->payloads, sizeof(VkDeviceOrHostAddressConstAMDX)) != 0)
    return false;

  return true;
}
#endif

bool compare_VkDispatchIndirectCommand(VkDispatchIndirectCommand const *s1,
                                       VkDispatchIndirectCommand const *s2) {
  // local, simple types
  if ((s1->x != s2->x) || (s1->y != s2->y) || (s1->z != s2->z))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkDispatchTileInfoQCOM(VkDispatchTileInfoQCOM const *s1,
                                    VkDispatchTileInfoQCOM const *s2) {
  return true;
}
#endif

#if VK_EXT_display_control
bool compare_VkDisplayEventInfoEXT(VkDisplayEventInfoEXT const *s1,
                                   VkDisplayEventInfoEXT const *s2) {
  // local, simple types
  if ((s1->displayEvent != s2->displayEvent))
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplayModeCreateInfoKHR(VkDisplayModeCreateInfoKHR const *s1,
                                        VkDisplayModeCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkDisplayModeParametersKHR(&s1->parameters, &s2->parameters))
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplayModeParametersKHR(VkDisplayModeParametersKHR const *s1,
                                        VkDisplayModeParametersKHR const *s2) {
  // local, simple types
  if ((s1->refreshRate != s2->refreshRate))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->visibleRegion, &s2->visibleRegion))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayModeProperties2KHR(VkDisplayModeProperties2KHR const *s1,
                                         VkDisplayModeProperties2KHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkDisplayModePropertiesKHR(&s1->displayModeProperties, &s2->displayModeProperties))
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplayModePropertiesKHR(VkDisplayModePropertiesKHR const *s1,
                                        VkDisplayModePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->displayMode != s2->displayMode))
    return false;

  // local, Vulkan struct types
  if (!compare_VkDisplayModeParametersKHR(&s1->parameters, &s2->parameters))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_NV_display_stereo
bool compare_VkDisplayModeStereoPropertiesNV(VkDisplayModeStereoPropertiesNV const *s1,
                                             VkDisplayModeStereoPropertiesNV const *s2) {
  // local, simple types
  if ((s1->hdmi3DSupported != s2->hdmi3DSupported))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
bool compare_VkDisplayNativeHdrSurfaceCapabilitiesAMD(
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *s1,
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *s2) {
  // local, simple types
  if ((s1->localDimmingSupport != s2->localDimmingSupport))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneCapabilities2KHR(VkDisplayPlaneCapabilities2KHR const *s1,
                                            VkDisplayPlaneCapabilities2KHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkDisplayPlaneCapabilitiesKHR(&s1->capabilities, &s2->capabilities))
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplayPlaneCapabilitiesKHR(VkDisplayPlaneCapabilitiesKHR const *s1,
                                           VkDisplayPlaneCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->supportedAlpha != s2->supportedAlpha))
    return false;

  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->minSrcPosition, &s2->minSrcPosition) ||
      !compare_VkOffset2D(&s1->maxSrcPosition, &s2->maxSrcPosition) ||
      !compare_VkExtent2D(&s1->minSrcExtent, &s2->minSrcExtent) ||
      !compare_VkExtent2D(&s1->maxSrcExtent, &s2->maxSrcExtent) ||
      !compare_VkOffset2D(&s1->minDstPosition, &s2->minDstPosition) ||
      !compare_VkOffset2D(&s1->maxDstPosition, &s2->maxDstPosition) ||
      !compare_VkExtent2D(&s1->minDstExtent, &s2->minDstExtent) ||
      !compare_VkExtent2D(&s1->maxDstExtent, &s2->maxDstExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneInfo2KHR(VkDisplayPlaneInfo2KHR const *s1,
                                    VkDisplayPlaneInfo2KHR const *s2) {
  // local, simple types
  if ((s1->mode != s2->mode) || (s1->planeIndex != s2->planeIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneProperties2KHR(VkDisplayPlaneProperties2KHR const *s1,
                                          VkDisplayPlaneProperties2KHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkDisplayPlanePropertiesKHR(&s1->displayPlaneProperties,
                                           &s2->displayPlaneProperties))
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplayPlanePropertiesKHR(VkDisplayPlanePropertiesKHR const *s1,
                                         VkDisplayPlanePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->currentDisplay != s2->currentDisplay) ||
      (s1->currentStackIndex != s2->currentStackIndex))
    return false;

  return true;
}
#endif

#if VK_EXT_display_control
bool compare_VkDisplayPowerInfoEXT(VkDisplayPowerInfoEXT const *s1,
                                   VkDisplayPowerInfoEXT const *s2) {
  // local, simple types
  if ((s1->powerState != s2->powerState))
    return false;

  return true;
}
#endif

#if VK_KHR_display_swapchain
bool compare_VkDisplayPresentInfoKHR(VkDisplayPresentInfoKHR const *s1,
                                     VkDisplayPresentInfoKHR const *s2) {
  // local, simple types
  if ((s1->persistent != s2->persistent))
    return false;

  // local, Vulkan struct types
  if (!compare_VkRect2D(&s1->srcRect, &s2->srcRect) ||
      !compare_VkRect2D(&s1->dstRect, &s2->dstRect))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayProperties2KHR(VkDisplayProperties2KHR const *s1,
                                     VkDisplayProperties2KHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkDisplayPropertiesKHR(&s1->displayProperties, &s2->displayProperties))
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplayPropertiesKHR(VkDisplayPropertiesKHR const *s1,
                                    VkDisplayPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->display != s2->display) || (s1->supportedTransforms != s2->supportedTransforms) ||
      (s1->planeReorderPossible != s2->planeReorderPossible) ||
      (s1->persistentContent != s2->persistentContent))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->physicalDimensions, &s2->physicalDimensions) ||
      !compare_VkExtent2D(&s1->physicalResolution, &s2->physicalResolution))
    return false;

  // non-local members

  // displayName - null-terminated
  if (s1->displayName != s2->displayName && (s1->displayName == NULL || s2->displayName == NULL ||
                                             strcmp(s1->displayName, s2->displayName) != 0))
    return false;
  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplaySurfaceCreateInfoKHR(VkDisplaySurfaceCreateInfoKHR const *s1,
                                           VkDisplaySurfaceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->displayMode != s2->displayMode) ||
      (s1->planeIndex != s2->planeIndex) || (s1->planeStackIndex != s2->planeStackIndex) ||
      (s1->transform != s2->transform) || (s1->globalAlpha != s2->globalAlpha) ||
      (s1->alphaMode != s2->alphaMode))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->imageExtent, &s2->imageExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_NV_display_stereo
bool compare_VkDisplaySurfaceStereoCreateInfoNV(VkDisplaySurfaceStereoCreateInfoNV const *s1,
                                                VkDisplaySurfaceStereoCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->stereoType != s2->stereoType))
    return false;

  return true;
}
#endif

bool compare_VkDrawIndexedIndirectCommand(VkDrawIndexedIndirectCommand const *s1,
                                          VkDrawIndexedIndirectCommand const *s2) {
  // local, simple types
  if ((s1->indexCount != s2->indexCount) || (s1->instanceCount != s2->instanceCount) ||
      (s1->firstIndex != s2->firstIndex) || (s1->vertexOffset != s2->vertexOffset) ||
      (s1->firstInstance != s2->firstInstance))
    return false;

  return true;
}

bool compare_VkDrawIndirectCommand(VkDrawIndirectCommand const *s1,
                                   VkDrawIndirectCommand const *s2) {
  // local, simple types
  if ((s1->vertexCount != s2->vertexCount) || (s1->instanceCount != s2->instanceCount) ||
      (s1->firstVertex != s2->firstVertex) || (s1->firstInstance != s2->firstInstance))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkDrawIndirectCountIndirectCommandEXT(
    VkDrawIndirectCountIndirectCommandEXT const *s1,
    VkDrawIndirectCountIndirectCommandEXT const *s2) {
  // local, simple types
  if ((s1->bufferAddress != s2->bufferAddress) || (s1->stride != s2->stride) ||
      (s1->commandCount != s2->commandCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkDrawMeshTasksIndirectCommandEXT(VkDrawMeshTasksIndirectCommandEXT const *s1,
                                               VkDrawMeshTasksIndirectCommandEXT const *s2) {
  // local, simple types
  if ((s1->groupCountX != s2->groupCountX) || (s1->groupCountY != s2->groupCountY) ||
      (s1->groupCountZ != s2->groupCountZ))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkDrawMeshTasksIndirectCommandNV(VkDrawMeshTasksIndirectCommandNV const *s1,
                                              VkDrawMeshTasksIndirectCommandNV const *s2) {
  // local, simple types
  if ((s1->taskCount != s2->taskCount) || (s1->firstTask != s2->firstTask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierProperties2EXT(VkDrmFormatModifierProperties2EXT const *s1,
                                               VkDrmFormatModifierProperties2EXT const *s2) {
  // local, simple types
  if ((s1->drmFormatModifier != s2->drmFormatModifier) ||
      (s1->drmFormatModifierPlaneCount != s2->drmFormatModifierPlaneCount) ||
      (s1->drmFormatModifierTilingFeatures != s2->drmFormatModifierTilingFeatures))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 281 && VK_EXT_image_drm_format_modifier &&                               \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 && VK_EXT_image_drm_format_modifier &&   \
     VK_KHR_format_feature_flags2) ||                                                              \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_EXT_image_drm_format_modifier)
bool compare_VkDrmFormatModifierProperties2EXT(VkDrmFormatModifierProperties2EXT const *s1,
                                               VkDrmFormatModifierProperties2EXT const *s2) {
  // local, simple types
  if ((s1->drmFormatModifier != s2->drmFormatModifier) ||
      (s1->drmFormatModifierPlaneCount != s2->drmFormatModifierPlaneCount) ||
      (s1->drmFormatModifierTilingFeatures != s2->drmFormatModifierTilingFeatures))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierPropertiesEXT(VkDrmFormatModifierPropertiesEXT const *s1,
                                              VkDrmFormatModifierPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->drmFormatModifier != s2->drmFormatModifier) ||
      (s1->drmFormatModifierPlaneCount != s2->drmFormatModifierPlaneCount) ||
      (s1->drmFormatModifierTilingFeatures != s2->drmFormatModifierTilingFeatures))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 281 && VK_EXT_image_drm_format_modifier &&                               \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 && VK_EXT_image_drm_format_modifier &&   \
     VK_KHR_format_feature_flags2) ||                                                              \
    (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 240 && VK_EXT_image_drm_format_modifier)
bool compare_VkDrmFormatModifierPropertiesList2EXT(
    VkDrmFormatModifierPropertiesList2EXT const *s1,
    VkDrmFormatModifierPropertiesList2EXT const *s2) {
  // local, simple types
  if ((s1->drmFormatModifierCount != s2->drmFormatModifierCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierPropertiesListEXT(VkDrmFormatModifierPropertiesListEXT const *s1,
                                                  VkDrmFormatModifierPropertiesListEXT const *s2) {
  // local, simple types
  if ((s1->drmFormatModifierCount != s2->drmFormatModifierCount))
    return false;

  return true;
}
#endif

bool compare_VkEventCreateInfo(VkEventCreateInfo const *s1, VkEventCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkExecutionGraphPipelineCreateInfoAMDX(
    VkExecutionGraphPipelineCreateInfoAMDX const *s1,
    VkExecutionGraphPipelineCreateInfoAMDX const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->stageCount != s2->stageCount) ||
      (s1->layout != s2->layout) || (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&              \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkExecutionGraphPipelineScratchSizeAMDX(
    VkExecutionGraphPipelineScratchSizeAMDX const *s1,
    VkExecutionGraphPipelineScratchSizeAMDX const *s2) {
  // local, simple types
  if ((s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkExecutionGraphPipelineScratchSizeAMDX(
    VkExecutionGraphPipelineScratchSizeAMDX const *s1,
    VkExecutionGraphPipelineScratchSizeAMDX const *s2) {
  // local, simple types
  if ((s1->minSize != s2->minSize) || (s1->maxSize != s2->maxSize) ||
      (s1->sizeGranularity != s2->sizeGranularity))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExportFenceCreateInfo(VkExportFenceCreateInfo const *s1,
                                     VkExportFenceCreateInfo const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence
bool compare_VkExportFenceCreateInfoKHR(VkExportFenceCreateInfoKHR const *s1,
                                        VkExportFenceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2
bool compare_VkExportFenceSciSyncInfoNV(VkExportFenceSciSyncInfoNV const *s1,
                                        VkExportFenceSciSyncInfoNV const *s2) {
  // local, simple types
  if ((s1->pAttributes != s2->pAttributes))
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_win32
bool compare_VkExportFenceWin32HandleInfoKHR(VkExportFenceWin32HandleInfoKHR const *s1,
                                             VkExportFenceWin32HandleInfoKHR const *s2) {
  // local, simple types
  if ((s1->dwAccess != s2->dwAccess) || (s1->name != s2->name))
    return false;

  // non-local members
  if (s1->pAttributes != s2->pAttributes)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExportMemoryAllocateInfo(VkExportMemoryAllocateInfo const *s1,
                                        VkExportMemoryAllocateInfo const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory
bool compare_VkExportMemoryAllocateInfoKHR(VkExportMemoryAllocateInfoKHR const *s1,
                                           VkExportMemoryAllocateInfoKHR const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_NV_external_memory
bool compare_VkExportMemoryAllocateInfoNV(VkExportMemoryAllocateInfoNV const *s1,
                                          VkExportMemoryAllocateInfoNV const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkExportMemorySciBufInfoNV(VkExportMemorySciBufInfoNV const *s1,
                                        VkExportMemorySciBufInfoNV const *s2) {
  // local, simple types
  if ((s1->pAttributes != s2->pAttributes))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_win32
bool compare_VkExportMemoryWin32HandleInfoKHR(VkExportMemoryWin32HandleInfoKHR const *s1,
                                              VkExportMemoryWin32HandleInfoKHR const *s2) {
  // local, simple types
  if ((s1->dwAccess != s2->dwAccess) || (s1->name != s2->name))
    return false;

  // non-local members
  if (s1->pAttributes != s2->pAttributes)
    return false;

  return true;
}
#endif

#if VK_NV_external_memory_win32
bool compare_VkExportMemoryWin32HandleInfoNV(VkExportMemoryWin32HandleInfoNV const *s1,
                                             VkExportMemoryWin32HandleInfoNV const *s2) {
  // local, simple types
  if ((s1->dwAccess != s2->dwAccess))
    return false;

  // non-local members
  if (s1->pAttributes != s2->pAttributes)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalBufferInfoEXT(VkExportMetalBufferInfoEXT const *s1,
                                        VkExportMetalBufferInfoEXT const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory) || (s1->mtlBuffer != s2->mtlBuffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalCommandQueueInfoEXT(VkExportMetalCommandQueueInfoEXT const *s1,
                                              VkExportMetalCommandQueueInfoEXT const *s2) {
  // local, simple types
  if ((s1->queue != s2->queue) || (s1->mtlCommandQueue != s2->mtlCommandQueue))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalDeviceInfoEXT(VkExportMetalDeviceInfoEXT const *s1,
                                        VkExportMetalDeviceInfoEXT const *s2) {
  // local, simple types
  if ((s1->mtlDevice != s2->mtlDevice))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalIOSurfaceInfoEXT(VkExportMetalIOSurfaceInfoEXT const *s1,
                                           VkExportMetalIOSurfaceInfoEXT const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->ioSurface != s2->ioSurface))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalObjectCreateInfoEXT(VkExportMetalObjectCreateInfoEXT const *s1,
                                              VkExportMetalObjectCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->exportObjectType != s2->exportObjectType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalObjectsInfoEXT(VkExportMetalObjectsInfoEXT const *s1,
                                         VkExportMetalObjectsInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalSharedEventInfoEXT(VkExportMetalSharedEventInfoEXT const *s1,
                                             VkExportMetalSharedEventInfoEXT const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->event != s2->event) ||
      (s1->mtlSharedEvent != s2->mtlSharedEvent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalTextureInfoEXT(VkExportMetalTextureInfoEXT const *s1,
                                         VkExportMetalTextureInfoEXT const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->imageView != s2->imageView) ||
      (s1->bufferView != s2->bufferView) || (s1->plane != s2->plane) ||
      (s1->mtlTexture != s2->mtlTexture))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExportSemaphoreCreateInfo(VkExportSemaphoreCreateInfo const *s1,
                                         VkExportSemaphoreCreateInfo const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore
bool compare_VkExportSemaphoreCreateInfoKHR(VkExportSemaphoreCreateInfoKHR const *s1,
                                            VkExportSemaphoreCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync
bool compare_VkExportSemaphoreSciSyncInfoNV(VkExportSemaphoreSciSyncInfoNV const *s1,
                                            VkExportSemaphoreSciSyncInfoNV const *s2) {
  // local, simple types
  if ((s1->pAttributes != s2->pAttributes))
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkExportSemaphoreWin32HandleInfoKHR(VkExportSemaphoreWin32HandleInfoKHR const *s1,
                                                 VkExportSemaphoreWin32HandleInfoKHR const *s2) {
  // local, simple types
  if ((s1->dwAccess != s2->dwAccess) || (s1->name != s2->name))
    return false;

  // non-local members
  if (s1->pAttributes != s2->pAttributes)
    return false;

  return true;
}
#endif

bool compare_VkExtensionProperties(VkExtensionProperties const *s1,
                                   VkExtensionProperties const *s2) {
  // local, simple types
  if ((s1->specVersion != s2->specVersion))
    return false;

  // local array members
  if (strncmp(s1->extensionName, s2->extensionName, VK_MAX_EXTENSION_NAME_SIZE) != 0)
    return false;
  return true;
}

bool compare_VkExtent2D(VkExtent2D const *s1, VkExtent2D const *s2) {
  // local, simple types
  if ((s1->width != s2->width) || (s1->height != s2->height))
    return false;

  return true;
}

bool compare_VkExtent3D(VkExtent3D const *s1, VkExtent3D const *s2) {
  // local, simple types
  if ((s1->width != s2->width) || (s1->height != s2->height) || (s1->depth != s2->depth))
    return false;

  return true;
}

#if VK_VERSION_1_1
bool compare_VkExternalBufferProperties(VkExternalBufferProperties const *s1,
                                        VkExternalBufferProperties const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExternalMemoryProperties(&s1->externalMemoryProperties,
                                          &s2->externalMemoryProperties))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalBufferPropertiesKHR(VkExternalBufferPropertiesKHR const *s1,
                                           VkExternalBufferPropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue
bool compare_VkExternalComputeQueueCreateInfoNV(VkExternalComputeQueueCreateInfoNV const *s1,
                                                VkExternalComputeQueueCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->preferredQueue != s2->preferredQueue))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue
bool compare_VkExternalComputeQueueDataParamsNV(VkExternalComputeQueueDataParamsNV const *s1,
                                                VkExternalComputeQueueDataParamsNV const *s2) {
  // local, simple types
  if ((s1->deviceIndex != s2->deviceIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue
bool compare_VkExternalComputeQueueDeviceCreateInfoNV(
    VkExternalComputeQueueDeviceCreateInfoNV const *s1,
    VkExternalComputeQueueDeviceCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->reservedExternalQueues != s2->reservedExternalQueues))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalFenceProperties(VkExternalFenceProperties const *s1,
                                       VkExternalFenceProperties const *s2) {
  // local, simple types
  if ((s1->exportFromImportedHandleTypes != s2->exportFromImportedHandleTypes) ||
      (s1->compatibleHandleTypes != s2->compatibleHandleTypes) ||
      (s1->externalFenceFeatures != s2->externalFenceFeatures))
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_capabilities
bool compare_VkExternalFencePropertiesKHR(VkExternalFencePropertiesKHR const *s1,
                                          VkExternalFencePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->exportFromImportedHandleTypes != s2->exportFromImportedHandleTypes) ||
      (s1->compatibleHandleTypes != s2->compatibleHandleTypes) ||
      (s1->externalFenceFeatures != s2->externalFenceFeatures))
    return false;

  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkExternalFormatANDROID(VkExternalFormatANDROID const *s1,
                                     VkExternalFormatANDROID const *s2) {
  // local, simple types
  if ((s1->externalFormat != s2->externalFormat))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer
bool compare_VkExternalFormatQNX(VkExternalFormatQNX const *s1, VkExternalFormatQNX const *s2) {
  // local, simple types
  if ((s1->externalFormat != s2->externalFormat))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalImageFormatProperties(VkExternalImageFormatProperties const *s1,
                                             VkExternalImageFormatProperties const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExternalMemoryProperties(&s1->externalMemoryProperties,
                                          &s2->externalMemoryProperties))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalImageFormatPropertiesKHR(VkExternalImageFormatPropertiesKHR const *s1,
                                                VkExternalImageFormatPropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_NV_external_memory_capabilities
bool compare_VkExternalImageFormatPropertiesNV(VkExternalImageFormatPropertiesNV const *s1,
                                               VkExternalImageFormatPropertiesNV const *s2) {
  // local, simple types
  if ((s1->externalMemoryFeatures != s2->externalMemoryFeatures) ||
      (s1->exportFromImportedHandleTypes != s2->exportFromImportedHandleTypes) ||
      (s1->compatibleHandleTypes != s2->compatibleHandleTypes))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageFormatProperties(&s1->imageFormatProperties, &s2->imageFormatProperties))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 252 && VK_EXT_external_memory_acquire_unmodified
bool compare_VkExternalMemoryAcquireUnmodifiedEXT(VkExternalMemoryAcquireUnmodifiedEXT const *s1,
                                                  VkExternalMemoryAcquireUnmodifiedEXT const *s2) {
  // local, simple types
  if ((s1->acquireUnmodifiedMemory != s2->acquireUnmodifiedMemory))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryBufferCreateInfo(VkExternalMemoryBufferCreateInfo const *s1,
                                              VkExternalMemoryBufferCreateInfo const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory
bool compare_VkExternalMemoryBufferCreateInfoKHR(VkExternalMemoryBufferCreateInfoKHR const *s1,
                                                 VkExternalMemoryBufferCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryImageCreateInfo(VkExternalMemoryImageCreateInfo const *s1,
                                             VkExternalMemoryImageCreateInfo const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory
bool compare_VkExternalMemoryImageCreateInfoKHR(VkExternalMemoryImageCreateInfoKHR const *s1,
                                                VkExternalMemoryImageCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_NV_external_memory
bool compare_VkExternalMemoryImageCreateInfoNV(VkExternalMemoryImageCreateInfoNV const *s1,
                                               VkExternalMemoryImageCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryProperties(VkExternalMemoryProperties const *s1,
                                        VkExternalMemoryProperties const *s2) {
  // local, simple types
  if ((s1->externalMemoryFeatures != s2->externalMemoryFeatures) ||
      (s1->exportFromImportedHandleTypes != s2->exportFromImportedHandleTypes) ||
      (s1->compatibleHandleTypes != s2->compatibleHandleTypes))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalMemoryPropertiesKHR(VkExternalMemoryPropertiesKHR const *s1,
                                           VkExternalMemoryPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->externalMemoryFeatures != s2->externalMemoryFeatures) ||
      (s1->exportFromImportedHandleTypes != s2->exportFromImportedHandleTypes) ||
      (s1->compatibleHandleTypes != s2->compatibleHandleTypes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkExternalMemoryTensorCreateInfoARM(VkExternalMemoryTensorCreateInfoARM const *s1,
                                                 VkExternalMemoryTensorCreateInfoARM const *s2) {
  // local, simple types
  if ((s1->handleTypes != s2->handleTypes))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalSemaphoreProperties(VkExternalSemaphoreProperties const *s1,
                                           VkExternalSemaphoreProperties const *s2) {
  // local, simple types
  if ((s1->exportFromImportedHandleTypes != s2->exportFromImportedHandleTypes) ||
      (s1->compatibleHandleTypes != s2->compatibleHandleTypes) ||
      (s1->externalSemaphoreFeatures != s2->externalSemaphoreFeatures))
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_capabilities
bool compare_VkExternalSemaphorePropertiesKHR(VkExternalSemaphorePropertiesKHR const *s1,
                                              VkExternalSemaphorePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->exportFromImportedHandleTypes != s2->exportFromImportedHandleTypes) ||
      (s1->compatibleHandleTypes != s2->compatibleHandleTypes) ||
      (s1->externalSemaphoreFeatures != s2->externalSemaphoreFeatures))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkExternalTensorPropertiesARM(VkExternalTensorPropertiesARM const *s1,
                                           VkExternalTensorPropertiesARM const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExternalMemoryProperties(&s1->externalMemoryProperties,
                                          &s2->externalMemoryProperties))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkFaultCallbackInfo(VkFaultCallbackInfo const *s1, VkFaultCallbackInfo const *s2) {
  // local, simple types
  if ((s1->faultCount != s2->faultCount) || (s1->pfnFaultCallback != s2->pfnFaultCallback))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkFaultData(VkFaultData const *s1, VkFaultData const *s2) {
  // local, simple types
  if ((s1->faultLevel != s2->faultLevel) || (s1->faultType != s2->faultType))
    return false;

  return true;
}
#endif

bool compare_VkFenceCreateInfo(VkFenceCreateInfo const *s1, VkFenceCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}

#if VK_KHR_external_fence_fd
bool compare_VkFenceGetFdInfoKHR(VkFenceGetFdInfoKHR const *s1, VkFenceGetFdInfoKHR const *s2) {
  // local, simple types
  if ((s1->fence != s2->fence) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2
bool compare_VkFenceGetSciSyncInfoNV(VkFenceGetSciSyncInfoNV const *s1,
                                     VkFenceGetSciSyncInfoNV const *s2) {
  // local, simple types
  if ((s1->fence != s2->fence) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_win32
bool compare_VkFenceGetWin32HandleInfoKHR(VkFenceGetWin32HandleInfoKHR const *s1,
                                          VkFenceGetWin32HandleInfoKHR const *s2) {
  // local, simple types
  if ((s1->fence != s2->fence) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
bool compare_VkFilterCubicImageViewImageFormatPropertiesEXT(
    VkFilterCubicImageViewImageFormatPropertiesEXT const *s1,
    VkFilterCubicImageViewImageFormatPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->filterCubic != s2->filterCubic) || (s1->filterCubicMinmax != s2->filterCubicMinmax))
    return false;

  return true;
}
#endif

bool compare_VkFormatProperties(VkFormatProperties const *s1, VkFormatProperties const *s2) {
  // local, simple types
  if ((s1->linearTilingFeatures != s2->linearTilingFeatures) ||
      (s1->optimalTilingFeatures != s2->optimalTilingFeatures) ||
      (s1->bufferFeatures != s2->bufferFeatures))
    return false;

  return true;
}

#if VK_VERSION_1_1
bool compare_VkFormatProperties2(VkFormatProperties2 const *s1, VkFormatProperties2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkFormatProperties(&s1->formatProperties, &s2->formatProperties))
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkFormatProperties2KHR(VkFormatProperties2KHR const *s1,
                                    VkFormatProperties2KHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkFormatProperties3(VkFormatProperties3 const *s1, VkFormatProperties3 const *s2) {
  // local, simple types
  if ((s1->linearTilingFeatures != s2->linearTilingFeatures) ||
      (s1->optimalTilingFeatures != s2->optimalTilingFeatures) ||
      (s1->bufferFeatures != s2->bufferFeatures))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_format_feature_flags2
bool compare_VkFormatProperties3KHR(VkFormatProperties3KHR const *s1,
                                    VkFormatProperties3KHR const *s2) {
  // local, simple types
  if ((s1->linearTilingFeatures != s2->linearTilingFeatures) ||
      (s1->optimalTilingFeatures != s2->optimalTilingFeatures) ||
      (s1->bufferFeatures != s2->bufferFeatures))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_format_feature_flags2
bool compare_VkFormatProperties3KHR(VkFormatProperties3KHR const *s1,
                                    VkFormatProperties3KHR const *s2) {
  // local, simple types
  if ((s1->linearTilingFeatures != s2->linearTilingFeatures) ||
      (s1->optimalTilingFeatures != s2->optimalTilingFeatures) ||
      (s1->bufferFeatures != s2->bufferFeatures))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkFragmentShadingRateAttachmentInfoKHR(
    VkFragmentShadingRateAttachmentInfoKHR const *s1,
    VkFragmentShadingRateAttachmentInfoKHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->shadingRateAttachmentTexelSize, &s2->shadingRateAttachmentTexelSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 264 && VK_EXT_frame_boundary
bool compare_VkFrameBoundaryEXT(VkFrameBoundaryEXT const *s1, VkFrameBoundaryEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->frameID != s2->frameID) ||
      (s1->imageCount != s2->imageCount) || (s1->bufferCount != s2->bufferCount) ||
      (s1->tagName != s2->tagName) || (s1->tagSize != s2->tagSize))
    return false;

  // non-local members

  // pImages - imageCount
  if (s1->pImages != s2->pImages &&
      (s1->pImages == NULL || s2->pImages == NULL ||
       memcmp(s1->pImages, s2->pImages, (s1->imageCount) * sizeof(VkImage)) != 0))
    return false;

  // pBuffers - bufferCount
  if (s1->pBuffers != s2->pBuffers &&
      (s1->pBuffers == NULL || s2->pBuffers == NULL ||
       memcmp(s1->pBuffers, s2->pBuffers, (s1->bufferCount) * sizeof(VkBuffer)) != 0))
    return false;

  // pTag - tagSize
  if (s1->pTag != s2->pTag &&
      (s1->pTag == NULL || s2->pTag == NULL || memcmp(s1->pTag, s2->pTag, s1->tagSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_frame_boundary
bool compare_VkFrameBoundaryTensorsARM(VkFrameBoundaryTensorsARM const *s1,
                                       VkFrameBoundaryTensorsARM const *s2) {
  // local, simple types
  if ((s1->tensorCount != s2->tensorCount))
    return false;

  // non-local members

  // pTensors - tensorCount
  if (s1->pTensors != s2->pTensors &&
      (s1->pTensors == NULL || s2->pTensors == NULL ||
       memcmp(s1->pTensors, s2->pTensors, (s1->tensorCount) * sizeof(VkTensorARM)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 142 && VK_VERSION_1_2
bool compare_VkFramebufferAttachmentImageInfo(VkFramebufferAttachmentImageInfo const *s1,
                                              VkFramebufferAttachmentImageInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->usage != s2->usage) || (s1->width != s2->width) ||
      (s1->height != s2->height) || (s1->layerCount != s2->layerCount) ||
      (s1->viewFormatCount != s2->viewFormatCount))
    return false;

  // non-local members

  // pViewFormats - viewFormatCount
  if (s1->pViewFormats != s2->pViewFormats &&
      (s1->pViewFormats == NULL || s2->pViewFormats == NULL ||
       memcmp(s1->pViewFormats, s2->pViewFormats, (s1->viewFormatCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130
bool compare_VkFramebufferAttachmentImageInfoKHR(VkFramebufferAttachmentImageInfoKHR const *s1,
                                                 VkFramebufferAttachmentImageInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->usage != s2->usage) || (s1->width != s2->width) ||
      (s1->height != s2->height) || (s1->layerCount != s2->layerCount) ||
      (s1->viewFormatCount != s2->viewFormatCount))
    return false;

  // non-local members

  // pViewFormats - viewFormatCount
  if (s1->pViewFormats != s2->pViewFormats &&
      (s1->pViewFormats == NULL || s2->pViewFormats == NULL ||
       memcmp(s1->pViewFormats, s2->pViewFormats, (s1->viewFormatCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer
bool compare_VkFramebufferAttachmentImageInfoKHR(VkFramebufferAttachmentImageInfoKHR const *s1,
                                                 VkFramebufferAttachmentImageInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->usage != s2->usage) || (s1->width != s2->width) ||
      (s1->height != s2->height) || (s1->layerCount != s2->layerCount) ||
      (s1->viewFormatCount != s2->viewFormatCount))
    return false;

  // non-local members

  // pViewFormats - viewFormatCount
  if (s1->pViewFormats != s2->pViewFormats &&
      (s1->pViewFormats == NULL || s2->pViewFormats == NULL ||
       memcmp(s1->pViewFormats, s2->pViewFormats, (s1->viewFormatCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkFramebufferAttachmentsCreateInfo(VkFramebufferAttachmentsCreateInfo const *s1,
                                                VkFramebufferAttachmentsCreateInfo const *s2) {
  // local, simple types
  if ((s1->attachmentImageInfoCount != s2->attachmentImageInfoCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer
bool compare_VkFramebufferAttachmentsCreateInfoKHR(
    VkFramebufferAttachmentsCreateInfoKHR const *s1,
    VkFramebufferAttachmentsCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->attachmentImageInfoCount != s2->attachmentImageInfoCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer
bool compare_VkFramebufferAttachmentsCreateInfoKHR(
    VkFramebufferAttachmentsCreateInfoKHR const *s1,
    VkFramebufferAttachmentsCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->attachmentImageInfoCount != s2->attachmentImageInfoCount))
    return false;

  return true;
}
#endif

bool compare_VkFramebufferCreateInfo(VkFramebufferCreateInfo const *s1,
                                     VkFramebufferCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->renderPass != s2->renderPass) ||
      (s1->attachmentCount != s2->attachmentCount) || (s1->width != s2->width) ||
      (s1->height != s2->height) || (s1->layers != s2->layers))
    return false;

  // non-local members

  // pAttachments - attachmentCount
  if (s1->pAttachments != s2->pAttachments &&
      (s1->pAttachments == NULL || s2->pAttachments == NULL ||
       memcmp(s1->pAttachments, s2->pAttachments, (s1->attachmentCount) * sizeof(VkImageView)) !=
           0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkFramebufferMixedSamplesCombinationNV(
    VkFramebufferMixedSamplesCombinationNV const *s1,
    VkFramebufferMixedSamplesCombinationNV const *s2) {
  // local, simple types
  if ((s1->coverageReductionMode != s2->coverageReductionMode) ||
      (s1->rasterizationSamples != s2->rasterizationSamples) ||
      (s1->depthStencilSamples != s2->depthStencilSamples) ||
      (s1->colorSamples != s2->colorSamples))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkGeneratedCommandsInfoEXT(VkGeneratedCommandsInfoEXT const *s1,
                                        VkGeneratedCommandsInfoEXT const *s2) {
  // local, simple types
  if ((s1->shaderStages != s2->shaderStages) ||
      (s1->indirectExecutionSet != s2->indirectExecutionSet) ||
      (s1->indirectCommandsLayout != s2->indirectCommandsLayout) ||
      (s1->indirectAddress != s2->indirectAddress) ||
      (s1->indirectAddressSize != s2->indirectAddressSize) ||
      (s1->preprocessAddress != s2->preprocessAddress) ||
      (s1->preprocessSize != s2->preprocessSize) ||
      (s1->maxSequenceCount != s2->maxSequenceCount) ||
      (s1->sequenceCountAddress != s2->sequenceCountAddress) ||
      (s1->maxDrawCount != s2->maxDrawCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGeneratedCommandsInfoNV(VkGeneratedCommandsInfoNV const *s1,
                                       VkGeneratedCommandsInfoNV const *s2) {
  // local, simple types
  if ((s1->pipelineBindPoint != s2->pipelineBindPoint) || (s1->pipeline != s2->pipeline) ||
      (s1->indirectCommandsLayout != s2->indirectCommandsLayout) ||
      (s1->streamCount != s2->streamCount) || (s1->sequencesCount != s2->sequencesCount) ||
      (s1->preprocessBuffer != s2->preprocessBuffer) ||
      (s1->preprocessOffset != s2->preprocessOffset) ||
      (s1->preprocessSize != s2->preprocessSize) ||
      (s1->sequencesCountBuffer != s2->sequencesCountBuffer) ||
      (s1->sequencesCountOffset != s2->sequencesCountOffset) ||
      (s1->sequencesIndexBuffer != s2->sequencesIndexBuffer) ||
      (s1->sequencesIndexOffset != s2->sequencesIndexOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkGeneratedCommandsMemoryRequirementsInfoEXT(
    VkGeneratedCommandsMemoryRequirementsInfoEXT const *s1,
    VkGeneratedCommandsMemoryRequirementsInfoEXT const *s2) {
  // local, simple types
  if ((s1->indirectExecutionSet != s2->indirectExecutionSet) ||
      (s1->indirectCommandsLayout != s2->indirectCommandsLayout) ||
      (s1->maxSequenceCount != s2->maxSequenceCount) || (s1->maxDrawCount != s2->maxDrawCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGeneratedCommandsMemoryRequirementsInfoNV(
    VkGeneratedCommandsMemoryRequirementsInfoNV const *s1,
    VkGeneratedCommandsMemoryRequirementsInfoNV const *s2) {
  // local, simple types
  if ((s1->pipelineBindPoint != s2->pipelineBindPoint) || (s1->pipeline != s2->pipeline) ||
      (s1->indirectCommandsLayout != s2->indirectCommandsLayout) ||
      (s1->maxSequencesCount != s2->maxSequencesCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkGeneratedCommandsPipelineInfoEXT(VkGeneratedCommandsPipelineInfoEXT const *s1,
                                                VkGeneratedCommandsPipelineInfoEXT const *s2) {
  // local, simple types
  if ((s1->pipeline != s2->pipeline))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkGeneratedCommandsShaderInfoEXT(VkGeneratedCommandsShaderInfoEXT const *s1,
                                              VkGeneratedCommandsShaderInfoEXT const *s2) {
  // local, simple types
  if ((s1->shaderCount != s2->shaderCount))
    return false;

  // non-local members

  // pShaders - shaderCount
  if (s1->pShaders != s2->pShaders &&
      (s1->pShaders == NULL || s2->pShaders == NULL ||
       memcmp(s1->pShaders, s2->pShaders, (s1->shaderCount) * sizeof(VkShaderEXT)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryAABBNV(VkGeometryAABBNV const *s1, VkGeometryAABBNV const *s2) {
  // local, simple types
  if ((s1->aabbData != s2->aabbData) || (s1->numAABBs != s2->numAABBs) ||
      (s1->stride != s2->stride) || (s1->offset != s2->offset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryAABBNVX(VkGeometryAABBNVX const *s1, VkGeometryAABBNVX const *s2) {
  // local, simple types
  if ((s1->aabbData != s2->aabbData) || (s1->numAABBs != s2->numAABBs) ||
      (s1->stride != s2->stride) || (s1->offset != s2->offset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryDataNV(VkGeometryDataNV const *s1, VkGeometryDataNV const *s2) {
  // local, Vulkan struct types
  if (!compare_VkGeometryTrianglesNV(&s1->triangles, &s2->triangles) ||
      !compare_VkGeometryAABBNV(&s1->aabbs, &s2->aabbs))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryDataNVX(VkGeometryDataNVX const *s1, VkGeometryDataNVX const *s2) {
  // local, Vulkan struct types
  if (!compare_VkGeometryTrianglesNVX(&s1->triangles, &s2->triangles) ||
      !compare_VkGeometryAABBNVX(&s1->aabbs, &s2->aabbs))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 134 && VK_NV_ray_tracing
bool compare_VkGeometryNV(VkGeometryNV const *s1, VkGeometryNV const *s2) {
  // local, simple types
  if ((s1->geometryType != s2->geometryType) || (s1->flags != s2->flags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkGeometryDataNV(&s1->geometry, &s2->geometry))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkGeometryNV(VkGeometryNV const *s1, VkGeometryNV const *s2) {
  // local, simple types
  if ((s1->geometryType != s2->geometryType) || (s1->flags != s2->flags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkGeometryDataNV(&s1->geometry, &s2->geometry))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryNVX(VkGeometryNVX const *s1, VkGeometryNVX const *s2) {
  // local, simple types
  if ((s1->geometryType != s2->geometryType) || (s1->flags != s2->flags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkGeometryDataNVX(&s1->geometry, &s2->geometry))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryTrianglesNV(VkGeometryTrianglesNV const *s1,
                                   VkGeometryTrianglesNV const *s2) {
  // local, simple types
  if ((s1->vertexData != s2->vertexData) || (s1->vertexOffset != s2->vertexOffset) ||
      (s1->vertexCount != s2->vertexCount) || (s1->vertexStride != s2->vertexStride) ||
      (s1->vertexFormat != s2->vertexFormat) || (s1->indexData != s2->indexData) ||
      (s1->indexOffset != s2->indexOffset) || (s1->indexCount != s2->indexCount) ||
      (s1->indexType != s2->indexType) || (s1->transformData != s2->transformData) ||
      (s1->transformOffset != s2->transformOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryTrianglesNVX(VkGeometryTrianglesNVX const *s1,
                                    VkGeometryTrianglesNVX const *s2) {
  // local, simple types
  if ((s1->vertexData != s2->vertexData) || (s1->vertexOffset != s2->vertexOffset) ||
      (s1->vertexCount != s2->vertexCount) || (s1->vertexStride != s2->vertexStride) ||
      (s1->vertexFormat != s2->vertexFormat) || (s1->indexData != s2->indexData) ||
      (s1->indexOffset != s2->indexOffset) || (s1->indexCount != s2->indexCount) ||
      (s1->indexType != s2->indexType) || (s1->transformData != s2->transformData) ||
      (s1->transformOffset != s2->transformOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 266 && VK_HEADER_VERSION <= 270 && VK_NV_low_latency2
bool compare_VkGetLatencyMarkerInfoNV(VkGetLatencyMarkerInfoNV const *s1,
                                      VkGetLatencyMarkerInfoNV const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 271 && VK_NV_low_latency2
bool compare_VkGetLatencyMarkerInfoNV(VkGetLatencyMarkerInfoNV const *s1,
                                      VkGetLatencyMarkerInfoNV const *s2) {
  // local, simple types
  if ((s1->timingCount != s2->timingCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 240
bool compare_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *s1,
                                          VkGraphicsPipelineCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->stageCount != s2->stageCount) ||
      (s1->layout != s2->layout) || (s1->renderPass != s2->renderPass) ||
      (s1->subpass != s2->subpass) || (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241
bool compare_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *s1,
                                          VkGraphicsPipelineCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->stageCount != s2->stageCount) ||
      (s1->layout != s2->layout) || (s1->renderPass != s2->renderPass) ||
      (s1->subpass != s2->subpass) || (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkGraphicsPipelineLibraryCreateInfoEXT(
    VkGraphicsPipelineLibraryCreateInfoEXT const *s1,
    VkGraphicsPipelineLibraryCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGraphicsPipelineShaderGroupsCreateInfoNV(
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *s1,
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->groupCount != s2->groupCount) || (s1->pipelineCount != s2->pipelineCount))
    return false;

  // non-local members

  // pPipelines - pipelineCount
  if (s1->pPipelines != s2->pPipelines &&
      (s1->pPipelines == NULL || s2->pPipelines == NULL ||
       memcmp(s1->pPipelines, s2->pPipelines, (s1->pipelineCount) * sizeof(VkPipeline)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGraphicsShaderGroupCreateInfoNV(VkGraphicsShaderGroupCreateInfoNV const *s1,
                                               VkGraphicsShaderGroupCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->stageCount != s2->stageCount))
    return false;

  return true;
}
#endif

#if VK_EXT_hdr_metadata
bool compare_VkHdrMetadataEXT(VkHdrMetadataEXT const *s1, VkHdrMetadataEXT const *s2) {
  // local, simple types
  if ((s1->maxLuminance != s2->maxLuminance) || (s1->minLuminance != s2->minLuminance) ||
      (s1->maxContentLightLevel != s2->maxContentLightLevel) ||
      (s1->maxFrameAverageLightLevel != s2->maxFrameAverageLightLevel))
    return false;

  // local, Vulkan struct types
  if (!compare_VkXYColorEXT(&s1->displayPrimaryRed, &s2->displayPrimaryRed) ||
      !compare_VkXYColorEXT(&s1->displayPrimaryGreen, &s2->displayPrimaryGreen) ||
      !compare_VkXYColorEXT(&s1->displayPrimaryBlue, &s2->displayPrimaryBlue) ||
      !compare_VkXYColorEXT(&s1->whitePoint, &s2->whitePoint))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 301 && VK_HUAWEI_hdr_vivid
bool compare_VkHdrVividDynamicMetadataHUAWEI(VkHdrVividDynamicMetadataHUAWEI const *s1,
                                             VkHdrVividDynamicMetadataHUAWEI const *s2) {
  // local, simple types
  if ((s1->dynamicMetadataSize != s2->dynamicMetadataSize))
    return false;

  // non-local members

  // pDynamicMetadata - dynamicMetadataSize
  if (s1->pDynamicMetadata != s2->pDynamicMetadata &&
      (s1->pDynamicMetadata == NULL || s2->pDynamicMetadata == NULL ||
       memcmp(s1->pDynamicMetadata, s2->pDynamicMetadata, s1->dynamicMetadataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface
bool compare_VkHeadlessSurfaceCreateInfoEXT(VkHeadlessSurfaceCreateInfoEXT const *s1,
                                            VkHeadlessSurfaceCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkHostImageCopyDevicePerformanceQuery(
    VkHostImageCopyDevicePerformanceQuery const *s1,
    VkHostImageCopyDevicePerformanceQuery const *s2) {
  // local, simple types
  if ((s1->optimalDeviceAccess != s2->optimalDeviceAccess) ||
      (s1->identicalMemoryLayout != s2->identicalMemoryLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkHostImageCopyDevicePerformanceQueryEXT(
    VkHostImageCopyDevicePerformanceQueryEXT const *s1,
    VkHostImageCopyDevicePerformanceQueryEXT const *s2) {
  // local, simple types
  if ((s1->optimalDeviceAccess != s2->optimalDeviceAccess) ||
      (s1->identicalMemoryLayout != s2->identicalMemoryLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkHostImageCopyDevicePerformanceQueryEXT(
    VkHostImageCopyDevicePerformanceQueryEXT const *s1,
    VkHostImageCopyDevicePerformanceQueryEXT const *s2) {
  // local, simple types
  if ((s1->optimalDeviceAccess != s2->optimalDeviceAccess) ||
      (s1->identicalMemoryLayout != s2->identicalMemoryLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkHostImageLayoutTransitionInfo(VkHostImageLayoutTransitionInfo const *s1,
                                             VkHostImageLayoutTransitionInfo const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->oldLayout != s2->oldLayout) ||
      (s1->newLayout != s2->newLayout))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceRange(&s1->subresourceRange, &s2->subresourceRange))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkHostImageLayoutTransitionInfoEXT(VkHostImageLayoutTransitionInfoEXT const *s1,
                                                VkHostImageLayoutTransitionInfoEXT const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->oldLayout != s2->oldLayout) ||
      (s1->newLayout != s2->newLayout))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceRange(&s1->subresourceRange, &s2->subresourceRange))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkHostImageLayoutTransitionInfoEXT(VkHostImageLayoutTransitionInfoEXT const *s1,
                                                VkHostImageLayoutTransitionInfoEXT const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->oldLayout != s2->oldLayout) ||
      (s1->newLayout != s2->newLayout))
    return false;

  return true;
}
#endif

#if VK_MVK_ios_surface
bool compare_VkIOSSurfaceCreateInfoMVK(VkIOSSurfaceCreateInfoMVK const *s1,
                                       VkIOSSurfaceCreateInfoMVK const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // non-local members
  if (s1->pView != s2->pView)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control
bool compare_VkImageAlignmentControlCreateInfoMESA(
    VkImageAlignmentControlCreateInfoMESA const *s1,
    VkImageAlignmentControlCreateInfoMESA const *s2) {
  // local, simple types
  if ((s1->maximumRequestedAlignment != s2->maximumRequestedAlignment))
    return false;

  return true;
}
#endif

bool compare_VkImageBlit(VkImageBlit const *s1, VkImageBlit const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource))
    return false;

  // local array members
  if (memcmp(s1->srcOffsets, s2->srcOffsets, 2 * sizeof(VkOffset3D)) != 0)
    return false;
  if (memcmp(s1->dstOffsets, s2->dstOffsets, 2 * sizeof(VkOffset3D)) != 0)
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageBlit2(VkImageBlit2 const *s1, VkImageBlit2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource))
    return false;

  // local array members
  if (memcmp(s1->srcOffsets, s2->srcOffsets, 2 * sizeof(VkOffset3D)) != 0)
    return false;
  if (memcmp(s1->dstOffsets, s2->dstOffsets, 2 * sizeof(VkOffset3D)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkImageBlit2KHR(VkImageBlit2KHR const *s1, VkImageBlit2KHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource))
    return false;

  // local array members
  if (memcmp(s1->srcOffsets, s2->srcOffsets, 2 * sizeof(VkOffset3D)) != 0)
    return false;
  if (memcmp(s1->dstOffsets, s2->dstOffsets, 2 * sizeof(VkOffset3D)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkImageBlit2KHR(VkImageBlit2KHR const *s1, VkImageBlit2KHR const *s2) { return true; }
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkImageCaptureDescriptorDataInfoEXT(VkImageCaptureDescriptorDataInfoEXT const *s1,
                                                 VkImageCaptureDescriptorDataInfoEXT const *s2) {
  // local, simple types
  if ((s1->image != s2->image))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkImageCompressionControlEXT(VkImageCompressionControlEXT const *s1,
                                          VkImageCompressionControlEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) ||
      (s1->compressionControlPlaneCount != s2->compressionControlPlaneCount))
    return false;

  // non-local members

  // pFixedRateFlags - compressionControlPlaneCount
  if (s1->pFixedRateFlags != s2->pFixedRateFlags &&
      (s1->pFixedRateFlags == NULL || s2->pFixedRateFlags == NULL ||
       memcmp(s1->pFixedRateFlags, s2->pFixedRateFlags,
              (s1->compressionControlPlaneCount) * sizeof(VkImageCompressionFixedRateFlagsEXT)) !=
           0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkImageCompressionPropertiesEXT(VkImageCompressionPropertiesEXT const *s1,
                                             VkImageCompressionPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->imageCompressionFlags != s2->imageCompressionFlags) ||
      (s1->imageCompressionFixedRateFlags != s2->imageCompressionFixedRateFlags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImageConstraintsInfoFUCHSIA(VkImageConstraintsInfoFUCHSIA const *s1,
                                           VkImageConstraintsInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->formatConstraintsCount != s2->formatConstraintsCount) || (s1->flags != s2->flags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkBufferCollectionConstraintsInfoFUCHSIA(&s1->bufferCollectionConstraints,
                                                        &s2->bufferCollectionConstraints))
    return false;

  return true;
}
#endif

bool compare_VkImageCopy(VkImageCopy const *s1, VkImageCopy const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageCopy2(VkImageCopy2 const *s1, VkImageCopy2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkImageCopy2KHR(VkImageCopy2KHR const *s1, VkImageCopy2KHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkImageCopy2KHR(VkImageCopy2KHR const *s1, VkImageCopy2KHR const *s2) { return true; }
#endif

bool compare_VkImageCreateInfo(VkImageCreateInfo const *s1, VkImageCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->imageType != s2->imageType) || (s1->format != s2->format) ||
      (s1->mipLevels != s2->mipLevels) || (s1->arrayLayers != s2->arrayLayers) ||
      (s1->samples != s2->samples) || (s1->tiling != s2->tiling) || (s1->usage != s2->usage) ||
      (s1->sharingMode != s2->sharingMode) ||
      (s1->queueFamilyIndexCount != s2->queueFamilyIndexCount) ||
      (s1->initialLayout != s2->initialLayout))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent3D(&s1->extent, &s2->extent))
    return false;

  // non-local members

  // pQueueFamilyIndices - queueFamilyIndexCount
  if (s1->pQueueFamilyIndices != s2->pQueueFamilyIndices &&
      (s1->pQueueFamilyIndices == NULL || s2->pQueueFamilyIndices == NULL ||
       memcmp(s1->pQueueFamilyIndices, s2->pQueueFamilyIndices,
              (s1->queueFamilyIndexCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierExplicitCreateInfoEXT(
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *s1,
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->drmFormatModifier != s2->drmFormatModifier) ||
      (s1->drmFormatModifierPlaneCount != s2->drmFormatModifierPlaneCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierListCreateInfoEXT(
    VkImageDrmFormatModifierListCreateInfoEXT const *s1,
    VkImageDrmFormatModifierListCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->drmFormatModifierCount != s2->drmFormatModifierCount))
    return false;

  // non-local members

  // pDrmFormatModifiers - drmFormatModifierCount
  if (s1->pDrmFormatModifiers != s2->pDrmFormatModifiers &&
      (s1->pDrmFormatModifiers == NULL || s2->pDrmFormatModifiers == NULL ||
       memcmp(s1->pDrmFormatModifiers, s2->pDrmFormatModifiers,
              (s1->drmFormatModifierCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierPropertiesEXT(
    VkImageDrmFormatModifierPropertiesEXT const *s1,
    VkImageDrmFormatModifierPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->drmFormatModifier != s2->drmFormatModifier))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImageFormatConstraintsInfoFUCHSIA(VkImageFormatConstraintsInfoFUCHSIA const *s1,
                                                 VkImageFormatConstraintsInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->requiredFormatFeatures != s2->requiredFormatFeatures) || (s1->flags != s2->flags) ||
      (s1->sysmemPixelFormat != s2->sysmemPixelFormat) ||
      (s1->colorSpaceCount != s2->colorSpaceCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageCreateInfo(&s1->imageCreateInfo, &s2->imageCreateInfo))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkImageFormatListCreateInfo(VkImageFormatListCreateInfo const *s1,
                                         VkImageFormatListCreateInfo const *s2) {
  // local, simple types
  if ((s1->viewFormatCount != s2->viewFormatCount))
    return false;

  // non-local members

  // pViewFormats - viewFormatCount
  if (s1->pViewFormats != s2->pViewFormats &&
      (s1->pViewFormats == NULL || s2->pViewFormats == NULL ||
       memcmp(s1->pViewFormats, s2->pViewFormats, (s1->viewFormatCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION <= 130 && VK_KHR_image_format_list
bool compare_VkImageFormatListCreateInfoKHR(VkImageFormatListCreateInfoKHR const *s1,
                                            VkImageFormatListCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->viewFormatCount != s2->viewFormatCount))
    return false;

  // non-local members

  // pViewFormats - viewFormatCount
  if (s1->pViewFormats != s2->pViewFormats &&
      (s1->pViewFormats == NULL || s2->pViewFormats == NULL ||
       memcmp(s1->pViewFormats, s2->pViewFormats, (s1->viewFormatCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_image_format_list
bool compare_VkImageFormatListCreateInfoKHR(VkImageFormatListCreateInfoKHR const *s1,
                                            VkImageFormatListCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->viewFormatCount != s2->viewFormatCount))
    return false;

  // non-local members

  // pViewFormats - viewFormatCount
  if (s1->pViewFormats != s2->pViewFormats &&
      (s1->pViewFormats == NULL || s2->pViewFormats == NULL ||
       memcmp(s1->pViewFormats, s2->pViewFormats, (s1->viewFormatCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

bool compare_VkImageFormatProperties(VkImageFormatProperties const *s1,
                                     VkImageFormatProperties const *s2) {
  // local, simple types
  if ((s1->maxMipLevels != s2->maxMipLevels) || (s1->maxArrayLayers != s2->maxArrayLayers) ||
      (s1->sampleCounts != s2->sampleCounts) || (s1->maxResourceSize != s2->maxResourceSize))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent3D(&s1->maxExtent, &s2->maxExtent))
    return false;

  return true;
}

#if VK_VERSION_1_1
bool compare_VkImageFormatProperties2(VkImageFormatProperties2 const *s1,
                                      VkImageFormatProperties2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageFormatProperties(&s1->imageFormatProperties, &s2->imageFormatProperties))
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkImageFormatProperties2KHR(VkImageFormatProperties2KHR const *s1,
                                         VkImageFormatProperties2KHR const *s2) {
  return true;
}
#endif

bool compare_VkImageMemoryBarrier(VkImageMemoryBarrier const *s1, VkImageMemoryBarrier const *s2) {
  // local, simple types
  if ((s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->oldLayout != s2->oldLayout) || (s1->newLayout != s2->newLayout) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->image != s2->image))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceRange(&s1->subresourceRange, &s2->subresourceRange))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageMemoryBarrier2(VkImageMemoryBarrier2 const *s1,
                                   VkImageMemoryBarrier2 const *s2) {
  // local, simple types
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->oldLayout != s2->oldLayout) || (s1->newLayout != s2->newLayout) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->image != s2->image))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceRange(&s1->subresourceRange, &s2->subresourceRange))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *s1,
                                      VkImageMemoryBarrier2KHR const *s2) {
  // local, simple types
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->oldLayout != s2->oldLayout) || (s1->newLayout != s2->newLayout) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->image != s2->image))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceRange(&s1->subresourceRange, &s2->subresourceRange))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *s1,
                                      VkImageMemoryBarrier2KHR const *s2) {
  // local, simple types
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->oldLayout != s2->oldLayout) || (s1->newLayout != s2->newLayout) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->image != s2->image))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkImageMemoryRequirementsInfo2(VkImageMemoryRequirementsInfo2 const *s1,
                                            VkImageMemoryRequirementsInfo2 const *s2) {
  // local, simple types
  if ((s1->image != s2->image))
    return false;

  return true;
}
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkImageMemoryRequirementsInfo2KHR(VkImageMemoryRequirementsInfo2KHR const *s1,
                                               VkImageMemoryRequirementsInfo2KHR const *s2) {
  // local, simple types
  if ((s1->image != s2->image))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface
bool compare_VkImagePipeSurfaceCreateInfoFUCHSIA(VkImagePipeSurfaceCreateInfoFUCHSIA const *s1,
                                                 VkImagePipeSurfaceCreateInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->imagePipeHandle != s2->imagePipeHandle))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkImagePlaneMemoryRequirementsInfo(VkImagePlaneMemoryRequirementsInfo const *s1,
                                                VkImagePlaneMemoryRequirementsInfo const *s2) {
  // local, simple types
  if ((s1->planeAspect != s2->planeAspect))
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkImagePlaneMemoryRequirementsInfoKHR(
    VkImagePlaneMemoryRequirementsInfoKHR const *s1,
    VkImagePlaneMemoryRequirementsInfoKHR const *s2) {
  // local, simple types
  if ((s1->planeAspect != s2->planeAspect))
    return false;

  return true;
}
#endif

bool compare_VkImageResolve(VkImageResolve const *s1, VkImageResolve const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageResolve2(VkImageResolve2 const *s1, VkImageResolve2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkImageResolve2KHR(VkImageResolve2KHR const *s1, VkImageResolve2KHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkImageResolve2KHR(VkImageResolve2KHR const *s1, VkImageResolve2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkImageSparseMemoryRequirementsInfo2(VkImageSparseMemoryRequirementsInfo2 const *s1,
                                                  VkImageSparseMemoryRequirementsInfo2 const *s2) {
  // local, simple types
  if ((s1->image != s2->image))
    return false;

  return true;
}
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkImageSparseMemoryRequirementsInfo2KHR(
    VkImageSparseMemoryRequirementsInfo2KHR const *s1,
    VkImageSparseMemoryRequirementsInfo2KHR const *s2) {
  // local, simple types
  if ((s1->image != s2->image))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkImageStencilUsageCreateInfo(VkImageStencilUsageCreateInfo const *s1,
                                           VkImageStencilUsageCreateInfo const *s2) {
  // local, simple types
  if ((s1->stencilUsage != s2->stencilUsage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 93 && VK_HEADER_VERSION <= 130 && VK_EXT_separate_stencil_usage
bool compare_VkImageStencilUsageCreateInfoEXT(VkImageStencilUsageCreateInfoEXT const *s1,
                                              VkImageStencilUsageCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->stencilUsage != s2->stencilUsage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_separate_stencil_usage
bool compare_VkImageStencilUsageCreateInfoEXT(VkImageStencilUsageCreateInfoEXT const *s1,
                                              VkImageStencilUsageCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->stencilUsage != s2->stencilUsage))
    return false;

  return true;
}
#endif

bool compare_VkImageSubresource(VkImageSubresource const *s1, VkImageSubresource const *s2) {
  // local, simple types
  if ((s1->aspectMask != s2->aspectMask) || (s1->mipLevel != s2->mipLevel) ||
      (s1->arrayLayer != s2->arrayLayer))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkImageSubresource2(VkImageSubresource2 const *s1, VkImageSubresource2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresource(&s1->imageSubresource, &s2->imageSubresource))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 259 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control) ||                                                          \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 257 && VK_EXT_image_compression_control)
bool compare_VkImageSubresource2EXT(VkImageSubresource2EXT const *s1,
                                    VkImageSubresource2EXT const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresource(&s1->imageSubresource, &s2->imageSubresource))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy &&              \
    VK_EXT_image_compression_control
bool compare_VkImageSubresource2EXT(VkImageSubresource2EXT const *s1,
                                    VkImageSubresource2EXT const *s2) {
  // local, Vulkan struct types
  if (!compare_VkImageSubresource(&s1->imageSubresource, &s2->imageSubresource))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy && VK_EXT_image_compression_control
bool compare_VkImageSubresource2EXT(VkImageSubresource2EXT const *s1,
                                    VkImageSubresource2EXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkImageSubresource2KHR(VkImageSubresource2KHR const *s1,
                                    VkImageSubresource2KHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkImageSubresource2KHR(VkImageSubresource2KHR const *s1,
                                    VkImageSubresource2KHR const *s2) {
  return true;
}
#endif

bool compare_VkImageSubresourceLayers(VkImageSubresourceLayers const *s1,
                                      VkImageSubresourceLayers const *s2) {
  // local, simple types
  if ((s1->aspectMask != s2->aspectMask) || (s1->mipLevel != s2->mipLevel) ||
      (s1->baseArrayLayer != s2->baseArrayLayer) || (s1->layerCount != s2->layerCount))
    return false;

  return true;
}

bool compare_VkImageSubresourceRange(VkImageSubresourceRange const *s1,
                                     VkImageSubresourceRange const *s2) {
  // local, simple types
  if ((s1->aspectMask != s2->aspectMask) || (s1->baseMipLevel != s2->baseMipLevel) ||
      (s1->levelCount != s2->levelCount) || (s1->baseArrayLayer != s2->baseArrayLayer) ||
      (s1->layerCount != s2->layerCount))
    return false;

  return true;
}

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
bool compare_VkImageSwapchainCreateInfoKHR(VkImageSwapchainCreateInfoKHR const *s1,
                                           VkImageSwapchainCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->swapchain != s2->swapchain))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkImageToMemoryCopy(VkImageToMemoryCopy const *s1, VkImageToMemoryCopy const *s2) {
  // local, simple types
  if ((s1->memoryRowLength != s2->memoryRowLength) ||
      (s1->memoryImageHeight != s2->memoryImageHeight))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent))
    return false;

  // non-local members
  if (s1->pHostPointer != s2->pHostPointer)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkImageToMemoryCopyEXT(VkImageToMemoryCopyEXT const *s1,
                                    VkImageToMemoryCopyEXT const *s2) {
  // local, simple types
  if ((s1->memoryRowLength != s2->memoryRowLength) ||
      (s1->memoryImageHeight != s2->memoryImageHeight))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent))
    return false;

  // non-local members
  if (s1->pHostPointer != s2->pHostPointer)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkImageToMemoryCopyEXT(VkImageToMemoryCopyEXT const *s1,
                                    VkImageToMemoryCopyEXT const *s2) {
  // local, simple types
  if ((s1->memoryRowLength != s2->memoryRowLength) ||
      (s1->memoryImageHeight != s2->memoryImageHeight))
    return false;

  // non-local members
  if (s1->pHostPointer != s2->pHostPointer)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
bool compare_VkImageViewASTCDecodeModeEXT(VkImageViewASTCDecodeModeEXT const *s1,
                                          VkImageViewASTCDecodeModeEXT const *s2) {
  // local, simple types
  if ((s1->decodeMode != s2->decodeMode))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 137 && VK_NVX_image_view_handle
bool compare_VkImageViewAddressPropertiesNVX(VkImageViewAddressPropertiesNVX const *s1,
                                             VkImageViewAddressPropertiesNVX const *s2) {
  // local, simple types
  if ((s1->deviceAddress != s2->deviceAddress) || (s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkImageViewCaptureDescriptorDataInfoEXT(
    VkImageViewCaptureDescriptorDataInfoEXT const *s1,
    VkImageViewCaptureDescriptorDataInfoEXT const *s2) {
  // local, simple types
  if ((s1->imageView != s2->imageView))
    return false;

  return true;
}
#endif

bool compare_VkImageViewCreateInfo(VkImageViewCreateInfo const *s1,
                                   VkImageViewCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->image != s2->image) || (s1->viewType != s2->viewType) ||
      (s1->format != s2->format))
    return false;

  // local, Vulkan struct types
  if (!compare_VkComponentMapping(&s1->components, &s2->components) ||
      !compare_VkImageSubresourceRange(&s1->subresourceRange, &s2->subresourceRange))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 102 && VK_NVX_image_view_handle
bool compare_VkImageViewHandleInfoNVX(VkImageViewHandleInfoNVX const *s1,
                                      VkImageViewHandleInfoNVX const *s2) {
  // local, simple types
  if ((s1->imageView != s2->imageView) || (s1->descriptorType != s2->descriptorType) ||
      (s1->sampler != s2->sampler))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod
bool compare_VkImageViewMinLodCreateInfoEXT(VkImageViewMinLodCreateInfoEXT const *s1,
                                            VkImageViewMinLodCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->minLod != s2->minLod))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkImageViewSampleWeightCreateInfoQCOM(
    VkImageViewSampleWeightCreateInfoQCOM const *s1,
    VkImageViewSampleWeightCreateInfoQCOM const *s2) {
  // local, simple types
  if ((s1->numPhases != s2->numPhases))
    return false;

  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->filterCenter, &s2->filterCenter) ||
      !compare_VkExtent2D(&s1->filterSize, &s2->filterSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_EXT_image_sliced_view_of_3d
bool compare_VkImageViewSlicedCreateInfoEXT(VkImageViewSlicedCreateInfoEXT const *s1,
                                            VkImageViewSlicedCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->sliceOffset != s2->sliceOffset) || (s1->sliceCount != s2->sliceCount))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkImageViewUsageCreateInfo(VkImageViewUsageCreateInfo const *s1,
                                        VkImageViewUsageCreateInfo const *s2) {
  // local, simple types
  if ((s1->usage != s2->usage))
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance2
bool compare_VkImageViewUsageCreateInfoKHR(VkImageViewUsageCreateInfoKHR const *s1,
                                           VkImageViewUsageCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->usage != s2->usage))
    return false;

  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkImportAndroidHardwareBufferInfoANDROID(
    VkImportAndroidHardwareBufferInfoANDROID const *s1,
    VkImportAndroidHardwareBufferInfoANDROID const *s2) {
  // non-local members
  if (s1->buffer != s2->buffer)
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_fd
bool compare_VkImportFenceFdInfoKHR(VkImportFenceFdInfoKHR const *s1,
                                    VkImportFenceFdInfoKHR const *s2) {
  // local, simple types
  if ((s1->fence != s2->fence) || (s1->flags != s2->flags) || (s1->handleType != s2->handleType) ||
      (s1->fd != s2->fd))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2
bool compare_VkImportFenceSciSyncInfoNV(VkImportFenceSciSyncInfoNV const *s1,
                                        VkImportFenceSciSyncInfoNV const *s2) {
  // local, simple types
  if ((s1->fence != s2->fence) || (s1->handleType != s2->handleType))
    return false;

  // non-local members
  if (s1->handle != s2->handle)
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_win32
bool compare_VkImportFenceWin32HandleInfoKHR(VkImportFenceWin32HandleInfoKHR const *s1,
                                             VkImportFenceWin32HandleInfoKHR const *s2) {
  // local, simple types
  if ((s1->fence != s2->fence) || (s1->flags != s2->flags) || (s1->handleType != s2->handleType) ||
      (s1->handle != s2->handle) || (s1->name != s2->name))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImportMemoryBufferCollectionFUCHSIA(
    VkImportMemoryBufferCollectionFUCHSIA const *s1,
    VkImportMemoryBufferCollectionFUCHSIA const *s2) {
  // local, simple types
  if ((s1->collection != s2->collection) || (s1->index != s2->index))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_fd
bool compare_VkImportMemoryFdInfoKHR(VkImportMemoryFdInfoKHR const *s1,
                                     VkImportMemoryFdInfoKHR const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType) || (s1->fd != s2->fd))
    return false;

  return true;
}
#endif

#if VK_EXT_external_memory_host
bool compare_VkImportMemoryHostPointerInfoEXT(VkImportMemoryHostPointerInfoEXT const *s1,
                                              VkImportMemoryHostPointerInfoEXT const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType))
    return false;

  // non-local members
  if (s1->pHostPointer != s2->pHostPointer)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal
bool compare_VkImportMemoryMetalHandleInfoEXT(VkImportMemoryMetalHandleInfoEXT const *s1,
                                              VkImportMemoryMetalHandleInfoEXT const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType))
    return false;

  // non-local members
  if (s1->handle != s2->handle)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkImportMemorySciBufInfoNV(VkImportMemorySciBufInfoNV const *s1,
                                        VkImportMemorySciBufInfoNV const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType) || (s1->handle != s2->handle))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_win32
bool compare_VkImportMemoryWin32HandleInfoKHR(VkImportMemoryWin32HandleInfoKHR const *s1,
                                              VkImportMemoryWin32HandleInfoKHR const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType) || (s1->handle != s2->handle) || (s1->name != s2->name))
    return false;

  return true;
}
#endif

#if VK_NV_external_memory_win32
bool compare_VkImportMemoryWin32HandleInfoNV(VkImportMemoryWin32HandleInfoNV const *s1,
                                             VkImportMemoryWin32HandleInfoNV const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType) || (s1->handle != s2->handle))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkImportMemoryZirconHandleInfoFUCHSIA(
    VkImportMemoryZirconHandleInfoFUCHSIA const *s1,
    VkImportMemoryZirconHandleInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType) || (s1->handle != s2->handle))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalBufferInfoEXT(VkImportMetalBufferInfoEXT const *s1,
                                        VkImportMetalBufferInfoEXT const *s2) {
  // local, simple types
  if ((s1->mtlBuffer != s2->mtlBuffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalIOSurfaceInfoEXT(VkImportMetalIOSurfaceInfoEXT const *s1,
                                           VkImportMetalIOSurfaceInfoEXT const *s2) {
  // local, simple types
  if ((s1->ioSurface != s2->ioSurface))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalSharedEventInfoEXT(VkImportMetalSharedEventInfoEXT const *s1,
                                             VkImportMetalSharedEventInfoEXT const *s2) {
  // local, simple types
  if ((s1->mtlSharedEvent != s2->mtlSharedEvent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalTextureInfoEXT(VkImportMetalTextureInfoEXT const *s1,
                                         VkImportMetalTextureInfoEXT const *s2) {
  // local, simple types
  if ((s1->plane != s2->plane) || (s1->mtlTexture != s2->mtlTexture))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer
bool compare_VkImportScreenBufferInfoQNX(VkImportScreenBufferInfoQNX const *s1,
                                         VkImportScreenBufferInfoQNX const *s2) {
  // non-local members
  if (s1->buffer != s2->buffer)
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_fd
bool compare_VkImportSemaphoreFdInfoKHR(VkImportSemaphoreFdInfoKHR const *s1,
                                        VkImportSemaphoreFdInfoKHR const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->flags != s2->flags) ||
      (s1->handleType != s2->handleType) || (s1->fd != s2->fd))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync
bool compare_VkImportSemaphoreSciSyncInfoNV(VkImportSemaphoreSciSyncInfoNV const *s1,
                                            VkImportSemaphoreSciSyncInfoNV const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->handleType != s2->handleType))
    return false;

  // non-local members
  if (s1->handle != s2->handle)
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkImportSemaphoreWin32HandleInfoKHR(VkImportSemaphoreWin32HandleInfoKHR const *s1,
                                                 VkImportSemaphoreWin32HandleInfoKHR const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->flags != s2->flags) ||
      (s1->handleType != s2->handleType) || (s1->handle != s2->handle) || (s1->name != s2->name))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
bool compare_VkImportSemaphoreZirconHandleInfoFUCHSIA(
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *s1,
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->flags != s2->flags) ||
      (s1->handleType != s2->handleType) || (s1->zirconHandle != s2->zirconHandle))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsExecutionSetTokenEXT(
    VkIndirectCommandsExecutionSetTokenEXT const *s1,
    VkIndirectCommandsExecutionSetTokenEXT const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->shaderStages != s2->shaderStages))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsIndexBufferTokenEXT(
    VkIndirectCommandsIndexBufferTokenEXT const *s1,
    VkIndirectCommandsIndexBufferTokenEXT const *s2) {
  // local, simple types
  if ((s1->mode != s2->mode))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsLayoutCreateInfoEXT(
    VkIndirectCommandsLayoutCreateInfoEXT const *s1,
    VkIndirectCommandsLayoutCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->shaderStages != s2->shaderStages) ||
      (s1->indirectStride != s2->indirectStride) || (s1->pipelineLayout != s2->pipelineLayout) ||
      (s1->tokenCount != s2->tokenCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsLayoutCreateInfoNV(VkIndirectCommandsLayoutCreateInfoNV const *s1,
                                                  VkIndirectCommandsLayoutCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->tokenCount != s2->tokenCount) || (s1->streamCount != s2->streamCount))
    return false;

  // non-local members

  // pStreamStrides - streamCount
  if (s1->pStreamStrides != s2->pStreamStrides &&
      (s1->pStreamStrides == NULL || s2->pStreamStrides == NULL ||
       memcmp(s1->pStreamStrides, s2->pStreamStrides, (s1->streamCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsLayoutCreateInfoNVX(
    VkIndirectCommandsLayoutCreateInfoNVX const *s1,
    VkIndirectCommandsLayoutCreateInfoNVX const *s2) {
  // local, simple types
  if ((s1->pipelineBindPoint != s2->pipelineBindPoint) || (s1->flags != s2->flags) ||
      (s1->tokenCount != s2->tokenCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsLayoutTokenEXT(VkIndirectCommandsLayoutTokenEXT const *s1,
                                              VkIndirectCommandsLayoutTokenEXT const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->offset != s2->offset))
    return false;

  // union types (with selector)
  switch (s1->type) {
  // VkIndirectCommandsTokenDataEXT
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_EXT:
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_SEQUENCE_INDEX_EXT:
    if (!compare_VkIndirectCommandsPushConstantTokenEXT(s1->data.pPushConstant,
                                                        s2->data.pPushConstant))
      return false;

  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_EXT:
    if (!compare_VkIndirectCommandsVertexBufferTokenEXT(s1->data.pVertexBuffer,
                                                        s2->data.pVertexBuffer))
      return false;

  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_EXT:
    if (!compare_VkIndirectCommandsIndexBufferTokenEXT(s1->data.pIndexBuffer,
                                                       s2->data.pIndexBuffer))
      return false;

  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_EXECUTION_SET_EXT:
    if (!compare_VkIndirectCommandsExecutionSetTokenEXT(s1->data.pExecutionSet,
                                                        s2->data.pExecutionSet))
      return false;

  default:;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsLayoutTokenNV(VkIndirectCommandsLayoutTokenNV const *s1,
                                             VkIndirectCommandsLayoutTokenNV const *s2) {
  // local, simple types
  if ((s1->tokenType != s2->tokenType) || (s1->stream != s2->stream) ||
      (s1->offset != s2->offset) || (s1->vertexBindingUnit != s2->vertexBindingUnit) ||
      (s1->vertexDynamicStride != s2->vertexDynamicStride) ||
      (s1->pushconstantPipelineLayout != s2->pushconstantPipelineLayout) ||
      (s1->pushconstantShaderStageFlags != s2->pushconstantShaderStageFlags) ||
      (s1->pushconstantOffset != s2->pushconstantOffset) ||
      (s1->pushconstantSize != s2->pushconstantSize) ||
      (s1->indirectStateFlags != s2->indirectStateFlags) ||
      (s1->indexTypeCount != s2->indexTypeCount))
    return false;

  // non-local members

  // pIndexTypes - indexTypeCount
  if (s1->pIndexTypes != s2->pIndexTypes &&
      (s1->pIndexTypes == NULL || s2->pIndexTypes == NULL ||
       memcmp(s1->pIndexTypes, s2->pIndexTypes, (s1->indexTypeCount) * sizeof(VkIndexType)) != 0))
    return false;

  // pIndexTypeValues - indexTypeCount
  if (s1->pIndexTypeValues != s2->pIndexTypeValues &&
      (s1->pIndexTypeValues == NULL || s2->pIndexTypeValues == NULL ||
       memcmp(s1->pIndexTypeValues, s2->pIndexTypeValues,
              (s1->indexTypeCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsLayoutTokenNVX(VkIndirectCommandsLayoutTokenNVX const *s1,
                                              VkIndirectCommandsLayoutTokenNVX const *s2) {
  // local, simple types
  if ((s1->tokenType != s2->tokenType) || (s1->bindingUnit != s2->bindingUnit) ||
      (s1->dynamicCount != s2->dynamicCount) || (s1->divisor != s2->divisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsPushConstantTokenEXT(
    VkIndirectCommandsPushConstantTokenEXT const *s1,
    VkIndirectCommandsPushConstantTokenEXT const *s2) {
  // local, Vulkan struct types
  if (!compare_VkPushConstantRange(&s1->updateRange, &s2->updateRange))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsStreamNV(VkIndirectCommandsStreamNV const *s1,
                                        VkIndirectCommandsStreamNV const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer) || (s1->offset != s2->offset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsTokenNVX(VkIndirectCommandsTokenNVX const *s1,
                                        VkIndirectCommandsTokenNVX const *s2) {
  // local, simple types
  if ((s1->tokenType != s2->tokenType) || (s1->buffer != s2->buffer) || (s1->offset != s2->offset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectCommandsVertexBufferTokenEXT(
    VkIndirectCommandsVertexBufferTokenEXT const *s1,
    VkIndirectCommandsVertexBufferTokenEXT const *s2) {
  // local, simple types
  if ((s1->vertexBindingUnit != s2->vertexBindingUnit))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectExecutionSetCreateInfoEXT(VkIndirectExecutionSetCreateInfoEXT const *s1,
                                                 VkIndirectExecutionSetCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->type != s2->type))
    return false;

  // union types (with selector)
  switch (s1->type) {
  // VkIndirectExecutionSetInfoEXT
  case VK_INDIRECT_EXECUTION_SET_INFO_TYPE_PIPELINES_EXT:
    if (!compare_VkIndirectExecutionSetPipelineInfoEXT(s1->info.pPipelineInfo,
                                                       s2->info.pPipelineInfo))
      return false;

  case VK_INDIRECT_EXECUTION_SET_INFO_TYPE_SHADER_OBJECTS_EXT:
    if (!compare_VkIndirectExecutionSetShaderInfoEXT(s1->info.pShaderInfo, s2->info.pShaderInfo))
      return false;

  default:;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectExecutionSetPipelineInfoEXT(
    VkIndirectExecutionSetPipelineInfoEXT const *s1,
    VkIndirectExecutionSetPipelineInfoEXT const *s2) {
  // local, simple types
  if ((s1->initialPipeline != s2->initialPipeline) ||
      (s1->maxPipelineCount != s2->maxPipelineCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectExecutionSetShaderInfoEXT(VkIndirectExecutionSetShaderInfoEXT const *s1,
                                                 VkIndirectExecutionSetShaderInfoEXT const *s2) {
  // local, simple types
  if ((s1->shaderCount != s2->shaderCount) || (s1->maxShaderCount != s2->maxShaderCount) ||
      (s1->pushConstantRangeCount != s2->pushConstantRangeCount))
    return false;

  // non-local members

  // pInitialShaders - shaderCount
  if (s1->pInitialShaders != s2->pInitialShaders &&
      (s1->pInitialShaders == NULL || s2->pInitialShaders == NULL ||
       memcmp(s1->pInitialShaders, s2->pInitialShaders, (s1->shaderCount) * sizeof(VkShaderEXT)) !=
           0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkIndirectExecutionSetShaderLayoutInfoEXT(
    VkIndirectExecutionSetShaderLayoutInfoEXT const *s1,
    VkIndirectExecutionSetShaderLayoutInfoEXT const *s2) {
  // local, simple types
  if ((s1->setLayoutCount != s2->setLayoutCount))
    return false;

  // non-local members

  // pSetLayouts - setLayoutCount
  if (s1->pSetLayouts != s2->pSetLayouts &&
      (s1->pSetLayouts == NULL || s2->pSetLayouts == NULL ||
       memcmp(s1->pSetLayouts, s2->pSetLayouts,
              (s1->setLayoutCount) * sizeof(VkDescriptorSetLayout)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkInitializePerformanceApiInfoINTEL(VkInitializePerformanceApiInfoINTEL const *s1,
                                                 VkInitializePerformanceApiInfoINTEL const *s2) {
  // non-local members
  if (s1->pUserData != s2->pUserData)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkInputAttachmentAspectReference(VkInputAttachmentAspectReference const *s1,
                                              VkInputAttachmentAspectReference const *s2) {
  // local, simple types
  if ((s1->subpass != s2->subpass) || (s1->inputAttachmentIndex != s2->inputAttachmentIndex) ||
      (s1->aspectMask != s2->aspectMask))
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance2
bool compare_VkInputAttachmentAspectReferenceKHR(VkInputAttachmentAspectReferenceKHR const *s1,
                                                 VkInputAttachmentAspectReferenceKHR const *s2) {
  // local, simple types
  if ((s1->subpass != s2->subpass) || (s1->inputAttachmentIndex != s2->inputAttachmentIndex) ||
      (s1->aspectMask != s2->aspectMask))
    return false;

  return true;
}
#endif

bool compare_VkInstanceCreateInfo(VkInstanceCreateInfo const *s1, VkInstanceCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->enabledLayerCount != s2->enabledLayerCount) ||
      (s1->enabledExtensionCount != s2->enabledExtensionCount))
    return false;

  // non-local members

  // ppEnabledLayerNames - enabledLayerCount,null-terminated
  for (size_t i = 0; i < s1->enabledLayerCount; ++i) {
    if (s1->ppEnabledLayerNames[i] != s2->ppEnabledLayerNames[i] &&
        (s1->ppEnabledLayerNames[i] == NULL || s2->ppEnabledLayerNames[i] == NULL ||
         strcmp(s1->ppEnabledLayerNames[i], s2->ppEnabledLayerNames[i]) != 0))
      return false;
  }

  // ppEnabledExtensionNames - enabledExtensionCount,null-terminated
  for (size_t i = 0; i < s1->enabledExtensionCount; ++i) {
    if (s1->ppEnabledExtensionNames[i] != s2->ppEnabledExtensionNames[i] &&
        (s1->ppEnabledExtensionNames[i] == NULL || s2->ppEnabledExtensionNames[i] == NULL ||
         strcmp(s1->ppEnabledExtensionNames[i], s2->ppEnabledExtensionNames[i]) != 0))
      return false;
  }
  return true;
}

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkLatencySleepInfoNV(VkLatencySleepInfoNV const *s1, VkLatencySleepInfoNV const *s2) {
  // local, simple types
  if ((s1->signalSemaphore != s2->signalSemaphore) || (s1->value != s2->value))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkLatencySleepModeInfoNV(VkLatencySleepModeInfoNV const *s1,
                                      VkLatencySleepModeInfoNV const *s2) {
  // local, simple types
  if ((s1->lowLatencyMode != s2->lowLatencyMode) || (s1->lowLatencyBoost != s2->lowLatencyBoost) ||
      (s1->minimumIntervalUs != s2->minimumIntervalUs))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkLatencySubmissionPresentIdNV(VkLatencySubmissionPresentIdNV const *s1,
                                            VkLatencySubmissionPresentIdNV const *s2) {
  // local, simple types
  if ((s1->presentID != s2->presentID))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkLatencySurfaceCapabilitiesNV(VkLatencySurfaceCapabilitiesNV const *s1,
                                            VkLatencySurfaceCapabilitiesNV const *s2) {
  // local, simple types
  if ((s1->presentModeCount != s2->presentModeCount))
    return false;

  // non-local members

  // pPresentModes - presentModeCount
  if (s1->pPresentModes != s2->pPresentModes &&
      (s1->pPresentModes == NULL || s2->pPresentModes == NULL ||
       memcmp(s1->pPresentModes, s2->pPresentModes,
              (s1->presentModeCount) * sizeof(VkPresentModeKHR)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkLatencyTimingsFrameReportNV(VkLatencyTimingsFrameReportNV const *s1,
                                           VkLatencyTimingsFrameReportNV const *s2) {
  // local, simple types
  if ((s1->presentID != s2->presentID) || (s1->inputSampleTimeUs != s2->inputSampleTimeUs) ||
      (s1->simStartTimeUs != s2->simStartTimeUs) || (s1->simEndTimeUs != s2->simEndTimeUs) ||
      (s1->renderSubmitStartTimeUs != s2->renderSubmitStartTimeUs) ||
      (s1->renderSubmitEndTimeUs != s2->renderSubmitEndTimeUs) ||
      (s1->presentStartTimeUs != s2->presentStartTimeUs) ||
      (s1->presentEndTimeUs != s2->presentEndTimeUs) ||
      (s1->driverStartTimeUs != s2->driverStartTimeUs) ||
      (s1->driverEndTimeUs != s2->driverEndTimeUs) ||
      (s1->osRenderQueueStartTimeUs != s2->osRenderQueueStartTimeUs) ||
      (s1->osRenderQueueEndTimeUs != s2->osRenderQueueEndTimeUs) ||
      (s1->gpuRenderStartTimeUs != s2->gpuRenderStartTimeUs) ||
      (s1->gpuRenderEndTimeUs != s2->gpuRenderEndTimeUs))
    return false;

  return true;
}
#endif

bool compare_VkLayerProperties(VkLayerProperties const *s1, VkLayerProperties const *s2) {
  // local, simple types
  if ((s1->specVersion != s2->specVersion) ||
      (s1->implementationVersion != s2->implementationVersion))
    return false;

  // local array members
  if (strncmp(s1->layerName, s2->layerName, VK_MAX_EXTENSION_NAME_SIZE) != 0)
    return false;
  if (strncmp(s1->description, s2->description, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 272 && VK_EXT_layer_settings
bool compare_VkLayerSettingEXT(VkLayerSettingEXT const *s1, VkLayerSettingEXT const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->valueCount != s2->valueCount))
    return false;

  // non-local members

  // pLayerName - null-terminated
  if (s1->pLayerName != s2->pLayerName && (s1->pLayerName == NULL || s2->pLayerName == NULL ||
                                           strcmp(s1->pLayerName, s2->pLayerName) != 0))
    return false;

  // pSettingName - null-terminated
  if (s1->pSettingName != s2->pSettingName &&
      (s1->pSettingName == NULL || s2->pSettingName == NULL ||
       strcmp(s1->pSettingName, s2->pSettingName) != 0))
    return false;

  // pValues - valueCount
  if (s1->pValues != s2->pValues) {
    if (s1->pValues == NULL || s2->pValues == NULL)
      return false;

    switch (s1->type) {
    case VK_LAYER_SETTING_TYPE_BOOL32_EXT:
      if (memcmp(s1->pValues, s2->pValues, s1->valueCount * sizeof(VkBool32)) != 0)
        return false;
    case VK_LAYER_SETTING_TYPE_INT32_EXT:
      if (memcmp(s1->pValues, s2->pValues, s1->valueCount * sizeof(int32_t)) != 0)
        return false;
    case VK_LAYER_SETTING_TYPE_INT64_EXT:
      if (memcmp(s1->pValues, s2->pValues, s1->valueCount * sizeof(int64_t)) != 0)
        return false;
    case VK_LAYER_SETTING_TYPE_UINT32_EXT:
      if (memcmp(s1->pValues, s2->pValues, s1->valueCount * sizeof(uint32_t)) != 0)
        return false;
    case VK_LAYER_SETTING_TYPE_UINT64_EXT:
      if (memcmp(s1->pValues, s2->pValues, s1->valueCount * sizeof(uint64_t)) != 0)
        return false;
    case VK_LAYER_SETTING_TYPE_FLOAT32_EXT:
      if (memcmp(s1->pValues, s2->pValues, s1->valueCount * sizeof(float)) != 0)
        return false;
    case VK_LAYER_SETTING_TYPE_FLOAT64_EXT:
      if (memcmp(s1->pValues, s2->pValues, s1->valueCount * sizeof(double)) != 0)
        return false;
    case VK_LAYER_SETTING_TYPE_STRING_EXT:
      if (strncmp((char const *)s1->pValues, (char const *)s2->pValues, s1->valueCount) != 0)
        return false;
    default:
      break;
    }
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 272 && VK_EXT_layer_settings
bool compare_VkLayerSettingsCreateInfoEXT(VkLayerSettingsCreateInfoEXT const *s1,
                                          VkLayerSettingsCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->settingCount != s2->settingCount))
    return false;

  return true;
}
#endif

#if VK_MVK_macos_surface
bool compare_VkMacOSSurfaceCreateInfoMVK(VkMacOSSurfaceCreateInfoMVK const *s1,
                                         VkMacOSSurfaceCreateInfoMVK const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // non-local members
  if (s1->pView != s2->pView)
    return false;

  return true;
}
#endif

bool compare_VkMappedMemoryRange(VkMappedMemoryRange const *s1, VkMappedMemoryRange const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory) || (s1->offset != s2->offset) || (s1->size != s2->size))
    return false;

  return true;
}

#if VK_VERSION_1_1
bool compare_VkMemoryAllocateFlagsInfo(VkMemoryAllocateFlagsInfo const *s1,
                                       VkMemoryAllocateFlagsInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->deviceMask != s2->deviceMask))
    return false;

  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkMemoryAllocateFlagsInfoKHR(VkMemoryAllocateFlagsInfoKHR const *s1,
                                          VkMemoryAllocateFlagsInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->deviceMask != s2->deviceMask))
    return false;

  return true;
}
#endif

bool compare_VkMemoryAllocateInfo(VkMemoryAllocateInfo const *s1, VkMemoryAllocateInfo const *s2) {
  // local, simple types
  if ((s1->allocationSize != s2->allocationSize) || (s1->memoryTypeIndex != s2->memoryTypeIndex))
    return false;

  return true;
}

bool compare_VkMemoryBarrier(VkMemoryBarrier const *s1, VkMemoryBarrier const *s2) {
  // local, simple types
  if ((s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkMemoryBarrier2(VkMemoryBarrier2 const *s1, VkMemoryBarrier2 const *s2) {
  // local, simple types
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *s1, VkMemoryBarrier2KHR const *s2) {
  // local, simple types
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *s1, VkMemoryBarrier2KHR const *s2) {
  // local, simple types
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 305 && VK_KHR_maintenance8
bool compare_VkMemoryBarrierAccessFlags3KHR(VkMemoryBarrierAccessFlags3KHR const *s1,
                                            VkMemoryBarrierAccessFlags3KHR const *s2) {
  // local, simple types
  if ((s1->srcAccessMask3 != s2->srcAccessMask3) || (s1->dstAccessMask3 != s2->dstAccessMask3))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryDedicatedAllocateInfo(VkMemoryDedicatedAllocateInfo const *s1,
                                           VkMemoryDedicatedAllocateInfo const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

#if VK_KHR_dedicated_allocation
bool compare_VkMemoryDedicatedAllocateInfoKHR(VkMemoryDedicatedAllocateInfoKHR const *s1,
                                              VkMemoryDedicatedAllocateInfoKHR const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkMemoryDedicatedAllocateInfoTensorARM(
    VkMemoryDedicatedAllocateInfoTensorARM const *s1,
    VkMemoryDedicatedAllocateInfoTensorARM const *s2) {
  // local, simple types
  if ((s1->tensor != s2->tensor))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryDedicatedRequirements(VkMemoryDedicatedRequirements const *s1,
                                           VkMemoryDedicatedRequirements const *s2) {
  // local, simple types
  if ((s1->prefersDedicatedAllocation != s2->prefersDedicatedAllocation) ||
      (s1->requiresDedicatedAllocation != s2->requiresDedicatedAllocation))
    return false;

  return true;
}
#endif

#if VK_KHR_dedicated_allocation
bool compare_VkMemoryDedicatedRequirementsKHR(VkMemoryDedicatedRequirementsKHR const *s1,
                                              VkMemoryDedicatedRequirementsKHR const *s2) {
  // local, simple types
  if ((s1->prefersDedicatedAllocation != s2->prefersDedicatedAllocation) ||
      (s1->requiresDedicatedAllocation != s2->requiresDedicatedAllocation))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_fd
bool compare_VkMemoryFdPropertiesKHR(VkMemoryFdPropertiesKHR const *s1,
                                     VkMemoryFdPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->memoryTypeBits != s2->memoryTypeBits))
    return false;

  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *s1,
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_fd
bool compare_VkMemoryGetFdInfoKHR(VkMemoryGetFdInfoKHR const *s1, VkMemoryGetFdInfoKHR const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal
bool compare_VkMemoryGetMetalHandleInfoEXT(VkMemoryGetMetalHandleInfoEXT const *s1,
                                           VkMemoryGetMetalHandleInfoEXT const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
bool compare_VkMemoryGetRemoteAddressInfoNV(VkMemoryGetRemoteAddressInfoNV const *s1,
                                            VkMemoryGetRemoteAddressInfoNV const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkMemoryGetSciBufInfoNV(VkMemoryGetSciBufInfoNV const *s1,
                                     VkMemoryGetSciBufInfoNV const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_win32
bool compare_VkMemoryGetWin32HandleInfoKHR(VkMemoryGetWin32HandleInfoKHR const *s1,
                                           VkMemoryGetWin32HandleInfoKHR const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkMemoryGetZirconHandleInfoFUCHSIA(VkMemoryGetZirconHandleInfoFUCHSIA const *s1,
                                                VkMemoryGetZirconHandleInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

bool compare_VkMemoryHeap(VkMemoryHeap const *s1, VkMemoryHeap const *s2) {
  // local, simple types
  if ((s1->size != s2->size) || (s1->flags != s2->flags))
    return false;

  return true;
}

#if VK_EXT_external_memory_host
bool compare_VkMemoryHostPointerPropertiesEXT(VkMemoryHostPointerPropertiesEXT const *s1,
                                              VkMemoryHostPointerPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->memoryTypeBits != s2->memoryTypeBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkMemoryMapInfo(VkMemoryMapInfo const *s1, VkMemoryMapInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->memory != s2->memory) || (s1->offset != s2->offset) ||
      (s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 244 && VK_HEADER_VERSION <= 302 && VK_KHR_map_memory2
bool compare_VkMemoryMapInfoKHR(VkMemoryMapInfoKHR const *s1, VkMemoryMapInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->memory != s2->memory) || (s1->offset != s2->offset) ||
      (s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_map_memory2
bool compare_VkMemoryMapInfoKHR(VkMemoryMapInfoKHR const *s1, VkMemoryMapInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->memory != s2->memory) || (s1->offset != s2->offset) ||
      (s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed
bool compare_VkMemoryMapPlacedInfoEXT(VkMemoryMapPlacedInfoEXT const *s1,
                                      VkMemoryMapPlacedInfoEXT const *s2) {
  // non-local members
  if (s1->pPlacedAddress != s2->pPlacedAddress)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal
bool compare_VkMemoryMetalHandlePropertiesEXT(VkMemoryMetalHandlePropertiesEXT const *s1,
                                              VkMemoryMetalHandlePropertiesEXT const *s2) {
  // local, simple types
  if ((s1->memoryTypeBits != s2->memoryTypeBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkMemoryOpaqueCaptureAddressAllocateInfo(
    VkMemoryOpaqueCaptureAddressAllocateInfo const *s1,
    VkMemoryOpaqueCaptureAddressAllocateInfo const *s2) {
  // local, simple types
  if ((s1->opaqueCaptureAddress != s2->opaqueCaptureAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address
bool compare_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s1,
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s2) {
  // local, simple types
  if ((s1->opaqueCaptureAddress != s2->opaqueCaptureAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address
bool compare_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s1,
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s2) {
  // local, simple types
  if ((s1->opaqueCaptureAddress != s2->opaqueCaptureAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
bool compare_VkMemoryPriorityAllocateInfoEXT(VkMemoryPriorityAllocateInfoEXT const *s1,
                                             VkMemoryPriorityAllocateInfoEXT const *s2) {
  // local, simple types
  if ((s1->priority != s2->priority))
    return false;

  return true;
}
#endif

bool compare_VkMemoryRequirements(VkMemoryRequirements const *s1, VkMemoryRequirements const *s2) {
  // local, simple types
  if ((s1->size != s2->size) || (s1->alignment != s2->alignment) ||
      (s1->memoryTypeBits != s2->memoryTypeBits))
    return false;

  return true;
}

#if VK_VERSION_1_1
bool compare_VkMemoryRequirements2(VkMemoryRequirements2 const *s1,
                                   VkMemoryRequirements2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkMemoryRequirements(&s1->memoryRequirements, &s2->memoryRequirements))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 281 && VK_KHR_get_memory_requirements2 && VK_NV_ray_tracing &&           \
     (VK_KHR_get_memory_requirements2 || VK_VERSION_1_1)) ||                                       \
    (VK_HEADER_VERSION >= 142 && VK_HEADER_VERSION <= 280 && VK_KHR_get_memory_requirements2 &&    \
     VK_NV_ray_tracing) ||                                                                         \
    (VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 141 && VK_VERSION_1_1 &&                      \
     VK_KHR_get_memory_requirements2 && VK_NV_ray_tracing) ||                                      \
    (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_VERSION_1_1 &&                       \
     VK_KHR_get_memory_requirements2 && VK_NVX_raytracing) ||                                      \
    (VK_HEADER_VERSION <= 84 && VK_KHR_get_memory_requirements2)
bool compare_VkMemoryRequirements2KHR(VkMemoryRequirements2KHR const *s1,
                                      VkMemoryRequirements2KHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkMemorySciBufPropertiesNV(VkMemorySciBufPropertiesNV const *s1,
                                        VkMemorySciBufPropertiesNV const *s2) {
  // local, simple types
  if ((s1->memoryTypeBits != s2->memoryTypeBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkMemoryToImageCopy(VkMemoryToImageCopy const *s1, VkMemoryToImageCopy const *s2) {
  // local, simple types
  if ((s1->memoryRowLength != s2->memoryRowLength) ||
      (s1->memoryImageHeight != s2->memoryImageHeight))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent))
    return false;

  // non-local members
  if (s1->pHostPointer != s2->pHostPointer)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkMemoryToImageCopyEXT(VkMemoryToImageCopyEXT const *s1,
                                    VkMemoryToImageCopyEXT const *s2) {
  // local, simple types
  if ((s1->memoryRowLength != s2->memoryRowLength) ||
      (s1->memoryImageHeight != s2->memoryImageHeight))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent))
    return false;

  // non-local members
  if (s1->pHostPointer != s2->pHostPointer)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkMemoryToImageCopyEXT(VkMemoryToImageCopyEXT const *s1,
                                    VkMemoryToImageCopyEXT const *s2) {
  // local, simple types
  if ((s1->memoryRowLength != s2->memoryRowLength) ||
      (s1->memoryImageHeight != s2->memoryImageHeight))
    return false;

  // non-local members
  if (s1->pHostPointer != s2->pHostPointer)
    return false;

  return true;
}
#endif

bool compare_VkMemoryType(VkMemoryType const *s1, VkMemoryType const *s2) {
  // local, simple types
  if ((s1->propertyFlags != s2->propertyFlags) || (s1->heapIndex != s2->heapIndex))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkMemoryUnmapInfo(VkMemoryUnmapInfo const *s1, VkMemoryUnmapInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->memory != s2->memory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 244 && VK_HEADER_VERSION <= 302 && VK_KHR_map_memory2
bool compare_VkMemoryUnmapInfoKHR(VkMemoryUnmapInfoKHR const *s1, VkMemoryUnmapInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->memory != s2->memory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_map_memory2
bool compare_VkMemoryUnmapInfoKHR(VkMemoryUnmapInfoKHR const *s1, VkMemoryUnmapInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->memory != s2->memory))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_win32
bool compare_VkMemoryWin32HandlePropertiesKHR(VkMemoryWin32HandlePropertiesKHR const *s1,
                                              VkMemoryWin32HandlePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->memoryTypeBits != s2->memoryTypeBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkMemoryZirconHandlePropertiesFUCHSIA(
    VkMemoryZirconHandlePropertiesFUCHSIA const *s1,
    VkMemoryZirconHandlePropertiesFUCHSIA const *s2) {
  // local, simple types
  if ((s1->memoryTypeBits != s2->memoryTypeBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface
bool compare_VkMetalSurfaceCreateInfoEXT(VkMetalSurfaceCreateInfoEXT const *s1,
                                         VkMetalSurfaceCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // non-local members
  if (s1->pLayer != s2->pLayer)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapBuildInfoEXT(VkMicromapBuildInfoEXT const *s1,
                                    VkMicromapBuildInfoEXT const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags) || (s1->mode != s2->mode) ||
      (s1->dstMicromap != s2->dstMicromap) || (s1->usageCountsCount != s2->usageCountsCount) ||
      (s1->triangleArrayStride != s2->triangleArrayStride))
    return false;

  // union types (no selector)
  if (memcmp(&s1->data, &s2->data, sizeof(VkDeviceOrHostAddressConstKHR)) != 0 ||
      memcmp(&s1->scratchData, &s2->scratchData, sizeof(VkDeviceOrHostAddressKHR)) != 0 ||
      memcmp(&s1->triangleArray, &s2->triangleArray, sizeof(VkDeviceOrHostAddressConstKHR)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapBuildSizesInfoEXT(VkMicromapBuildSizesInfoEXT const *s1,
                                         VkMicromapBuildSizesInfoEXT const *s2) {
  // local, simple types
  if ((s1->micromapSize != s2->micromapSize) || (s1->buildScratchSize != s2->buildScratchSize) ||
      (s1->discardable != s2->discardable))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapCreateInfoEXT(VkMicromapCreateInfoEXT const *s1,
                                     VkMicromapCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->createFlags != s2->createFlags) || (s1->buffer != s2->buffer) ||
      (s1->offset != s2->offset) || (s1->size != s2->size) || (s1->type != s2->type) ||
      (s1->deviceAddress != s2->deviceAddress))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapTriangleEXT(VkMicromapTriangleEXT const *s1,
                                   VkMicromapTriangleEXT const *s2) {
  // local, simple types
  if ((s1->dataOffset != s2->dataOffset) || (s1->subdivisionLevel != s2->subdivisionLevel) ||
      (s1->format != s2->format))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapUsageEXT(VkMicromapUsageEXT const *s1, VkMicromapUsageEXT const *s2) {
  // local, simple types
  if ((s1->count != s2->count) || (s1->subdivisionLevel != s2->subdivisionLevel) ||
      (s1->format != s2->format))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapVersionInfoEXT(VkMicromapVersionInfoEXT const *s1,
                                      VkMicromapVersionInfoEXT const *s2) {
  // non-local members

  // pVersionData - 2*VK_UUID_SIZE
  if (s1->pVersionData != s2->pVersionData &&
      (s1->pVersionData == NULL || s2->pVersionData == NULL ||
       memcmp(s1->pVersionData, s2->pVersionData, 2 * VK_UUID_SIZE) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface
bool compare_VkMirSurfaceCreateInfoKHR(VkMirSurfaceCreateInfoKHR const *s1,
                                       VkMirSurfaceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // non-local members
  if (s1->connection != s2->connection)
    return false;

  if (s1->mirSurface != s2->mirSurface)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkMultiDrawIndexedInfoEXT(VkMultiDrawIndexedInfoEXT const *s1,
                                       VkMultiDrawIndexedInfoEXT const *s2) {
  // local, simple types
  if ((s1->firstIndex != s2->firstIndex) || (s1->indexCount != s2->indexCount) ||
      (s1->vertexOffset != s2->vertexOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkMultiDrawInfoEXT(VkMultiDrawInfoEXT const *s1, VkMultiDrawInfoEXT const *s2) {
  // local, simple types
  if ((s1->firstVertex != s2->firstVertex) || (s1->vertexCount != s2->vertexCount))
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkMultisamplePropertiesEXT(VkMultisamplePropertiesEXT const *s1,
                                        VkMultisamplePropertiesEXT const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxSampleLocationGridSize, &s2->maxSampleLocationGridSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkMultisampledRenderToSingleSampledInfoEXT(
    VkMultisampledRenderToSingleSampledInfoEXT const *s1,
    VkMultisampledRenderToSingleSampledInfoEXT const *s2) {
  // local, simple types
  if ((s1->multisampledRenderToSingleSampledEnable !=
       s2->multisampledRenderToSingleSampledEnable) ||
      (s1->rasterizationSamples != s2->rasterizationSamples))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NVX_multiview_per_view_attributes &&                           \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_NVX_multiview_per_view_attributes) ||                                                      \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
bool compare_VkMultiviewPerViewAttributesInfoNVX(VkMultiviewPerViewAttributesInfoNVX const *s1,
                                                 VkMultiviewPerViewAttributesInfoNVX const *s2) {
  // local, simple types
  if ((s1->perViewAttributes != s2->perViewAttributes) ||
      (s1->perViewAttributesPositionXOnly != s2->perViewAttributesPositionXOnly))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_QCOM_multiview_per_view_render_areas
bool compare_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(
    VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM const *s1,
    VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM const *s2) {
  // local, simple types
  if ((s1->perViewRenderAreaCount != s2->perViewRenderAreaCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeCreateInfoEXT(VkMutableDescriptorTypeCreateInfoEXT const *s1,
                                                  VkMutableDescriptorTypeCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->mutableDescriptorTypeListCount != s2->mutableDescriptorTypeListCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *s1,
    VkMutableDescriptorTypeCreateInfoVALVE const *s2) {
  // local, simple types
  if ((s1->mutableDescriptorTypeListCount != s2->mutableDescriptorTypeListCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *s1,
    VkMutableDescriptorTypeCreateInfoVALVE const *s2) {
  // local, simple types
  if ((s1->mutableDescriptorTypeListCount != s2->mutableDescriptorTypeListCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeListEXT(VkMutableDescriptorTypeListEXT const *s1,
                                            VkMutableDescriptorTypeListEXT const *s2) {
  // local, simple types
  if ((s1->descriptorTypeCount != s2->descriptorTypeCount))
    return false;

  // non-local members

  // pDescriptorTypes - descriptorTypeCount
  if (s1->pDescriptorTypes != s2->pDescriptorTypes &&
      (s1->pDescriptorTypes == NULL || s2->pDescriptorTypes == NULL ||
       memcmp(s1->pDescriptorTypes, s2->pDescriptorTypes,
              (s1->descriptorTypeCount) * sizeof(VkDescriptorType)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *s1,
                                              VkMutableDescriptorTypeListVALVE const *s2) {
  // local, simple types
  if ((s1->descriptorTypeCount != s2->descriptorTypeCount))
    return false;

  // non-local members

  // pDescriptorTypes - descriptorTypeCount
  if (s1->pDescriptorTypes != s2->pDescriptorTypes &&
      (s1->pDescriptorTypes == NULL || s2->pDescriptorTypes == NULL ||
       memcmp(s1->pDescriptorTypes, s2->pDescriptorTypes,
              (s1->descriptorTypeCount) * sizeof(VkDescriptorType)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *s1,
                                              VkMutableDescriptorTypeListVALVE const *s2) {
  // local, simple types
  if ((s1->descriptorTypeCount != s2->descriptorTypeCount))
    return false;

  // non-local members

  // pDescriptorTypes - descriptorTypeCount
  if (s1->pDescriptorTypes != s2->pDescriptorTypes &&
      (s1->pDescriptorTypes == NULL || s2->pDescriptorTypes == NULL ||
       memcmp(s1->pDescriptorTypes, s2->pDescriptorTypes,
              (s1->descriptorTypeCount) * sizeof(VkDescriptorType)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION <= 116 && VK_ANDROID_native_buffer
bool compare_VkNativeBufferANDROID(VkNativeBufferANDROID const *s1,
                                   VkNativeBufferANDROID const *s2) {
  // local, simple types
  if ((s1->stride != s2->stride) || (s1->format != s2->format) || (s1->usage != s2->usage))
    return false;

  // non-local members
  if (s1->handle != s2->handle)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkNativeBufferANDROID(VkNativeBufferANDROID const *s1,
                                   VkNativeBufferANDROID const *s2) {
  // local, simple types
  if ((s1->stride != s2->stride) || (s1->format != s2->format) || (s1->usage != s2->usage))
    return false;

  // local, Vulkan struct types
  if (!compare_VkNativeBufferUsage2ANDROID(&s1->usage2, &s2->usage2))
    return false;

  // non-local members
  if (s1->handle != s2->handle)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkNativeBufferUsage2ANDROID(VkNativeBufferUsage2ANDROID const *s1,
                                         VkNativeBufferUsage2ANDROID const *s2) {
  // local, simple types
  if ((s1->consumer != s2->consumer) || (s1->producer != s2->producer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 318 && VK_OHOS_surface
bool compare_VkOHSurfaceCreateInfoOHOS(VkOHSurfaceCreateInfoOHOS const *s1,
                                       VkOHSurfaceCreateInfoOHOS const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // non-local members
  if (s1->window != s2->window)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableCreateInfoNVX(VkObjectTableCreateInfoNVX const *s1,
                                        VkObjectTableCreateInfoNVX const *s2) {
  // local, simple types
  if ((s1->objectCount != s2->objectCount) ||
      (s1->maxUniformBuffersPerDescriptor != s2->maxUniformBuffersPerDescriptor) ||
      (s1->maxStorageBuffersPerDescriptor != s2->maxStorageBuffersPerDescriptor) ||
      (s1->maxStorageImagesPerDescriptor != s2->maxStorageImagesPerDescriptor) ||
      (s1->maxSampledImagesPerDescriptor != s2->maxSampledImagesPerDescriptor) ||
      (s1->maxPipelineLayouts != s2->maxPipelineLayouts))
    return false;

  // non-local members

  // pObjectEntryTypes - objectCount
  if (s1->pObjectEntryTypes != s2->pObjectEntryTypes &&
      (s1->pObjectEntryTypes == NULL || s2->pObjectEntryTypes == NULL ||
       memcmp(s1->pObjectEntryTypes, s2->pObjectEntryTypes,
              (s1->objectCount) * sizeof(VkObjectEntryTypeNVX)) != 0))
    return false;

  // pObjectEntryCounts - objectCount
  if (s1->pObjectEntryCounts != s2->pObjectEntryCounts &&
      (s1->pObjectEntryCounts == NULL || s2->pObjectEntryCounts == NULL ||
       memcmp(s1->pObjectEntryCounts, s2->pObjectEntryCounts,
              (s1->objectCount) * sizeof(uint32_t)) != 0))
    return false;

  // pObjectEntryUsageFlags - objectCount
  if (s1->pObjectEntryUsageFlags != s2->pObjectEntryUsageFlags &&
      (s1->pObjectEntryUsageFlags == NULL || s2->pObjectEntryUsageFlags == NULL ||
       memcmp(s1->pObjectEntryUsageFlags, s2->pObjectEntryUsageFlags,
              (s1->objectCount) * sizeof(VkObjectEntryUsageFlagsNVX)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableDescriptorSetEntryNVX(VkObjectTableDescriptorSetEntryNVX const *s1,
                                                VkObjectTableDescriptorSetEntryNVX const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags) ||
      (s1->pipelineLayout != s2->pipelineLayout) || (s1->descriptorSet != s2->descriptorSet))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableEntryNVX(VkObjectTableEntryNVX const *s1,
                                   VkObjectTableEntryNVX const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableIndexBufferEntryNVX(VkObjectTableIndexBufferEntryNVX const *s1,
                                              VkObjectTableIndexBufferEntryNVX const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags) || (s1->buffer != s2->buffer) ||
      (s1->indexType != s2->indexType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTablePipelineEntryNVX(VkObjectTablePipelineEntryNVX const *s1,
                                           VkObjectTablePipelineEntryNVX const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags) || (s1->pipeline != s2->pipeline))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTablePushConstantEntryNVX(VkObjectTablePushConstantEntryNVX const *s1,
                                               VkObjectTablePushConstantEntryNVX const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags) ||
      (s1->pipelineLayout != s2->pipelineLayout) || (s1->stageFlags != s2->stageFlags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableVertexBufferEntryNVX(VkObjectTableVertexBufferEntryNVX const *s1,
                                               VkObjectTableVertexBufferEntryNVX const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->flags != s2->flags) || (s1->buffer != s2->buffer))
    return false;

  return true;
}
#endif

bool compare_VkOffset2D(VkOffset2D const *s1, VkOffset2D const *s2) {
  // local, simple types
  if ((s1->x != s2->x) || (s1->y != s2->y))
    return false;

  return true;
}

bool compare_VkOffset3D(VkOffset3D const *s1, VkOffset3D const *s2) {
  // local, simple types
  if ((s1->x != s2->x) || (s1->y != s2->y) || (s1->z != s2->z))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkOpaqueCaptureDescriptorDataCreateInfoEXT(
    VkOpaqueCaptureDescriptorDataCreateInfoEXT const *s1,
    VkOpaqueCaptureDescriptorDataCreateInfoEXT const *s2) {
  // non-local members
  if (s1->opaqueCaptureDescriptorData != s2->opaqueCaptureDescriptorData)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowExecuteInfoNV(VkOpticalFlowExecuteInfoNV const *s1,
                                        VkOpticalFlowExecuteInfoNV const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowImageFormatInfoNV(VkOpticalFlowImageFormatInfoNV const *s1,
                                            VkOpticalFlowImageFormatInfoNV const *s2) {
  // local, simple types
  if ((s1->usage != s2->usage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowImageFormatPropertiesNV(VkOpticalFlowImageFormatPropertiesNV const *s1,
                                                  VkOpticalFlowImageFormatPropertiesNV const *s2) {
  // local, simple types
  if ((s1->format != s2->format))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowSessionCreateInfoNV(VkOpticalFlowSessionCreateInfoNV const *s1,
                                              VkOpticalFlowSessionCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->width != s2->width) || (s1->height != s2->height) ||
      (s1->imageFormat != s2->imageFormat) || (s1->flowVectorFormat != s2->flowVectorFormat) ||
      (s1->costFormat != s2->costFormat) || (s1->outputGridSize != s2->outputGridSize) ||
      (s1->hintGridSize != s2->hintGridSize) || (s1->performanceLevel != s2->performanceLevel) ||
      (s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowSessionCreatePrivateDataInfoNV(
    VkOpticalFlowSessionCreatePrivateDataInfoNV const *s1,
    VkOpticalFlowSessionCreatePrivateDataInfoNV const *s2) {
  // local, simple types
  if ((s1->id != s2->id) || (s1->size != s2->size))
    return false;

  // non-local members
  if (s1->pPrivateData != s2->pPrivateData)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkOutOfBandQueueTypeInfoNV(VkOutOfBandQueueTypeInfoNV const *s1,
                                        VkOutOfBandQueueTypeInfoNV const *s2) {
  // local, simple types
  if ((s1->queueType != s2->queueType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPartitionedAccelerationStructureFlagsNV(
    VkPartitionedAccelerationStructureFlagsNV const *s1,
    VkPartitionedAccelerationStructureFlagsNV const *s2) {
  // local, simple types
  if ((s1->enablePartitionTranslation != s2->enablePartitionTranslation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPartitionedAccelerationStructureInstancesInputNV(
    VkPartitionedAccelerationStructureInstancesInputNV const *s1,
    VkPartitionedAccelerationStructureInstancesInputNV const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->instanceCount != s2->instanceCount) ||
      (s1->maxInstancePerPartitionCount != s2->maxInstancePerPartitionCount) ||
      (s1->partitionCount != s2->partitionCount) ||
      (s1->maxInstanceInGlobalPartitionCount != s2->maxInstanceInGlobalPartitionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPartitionedAccelerationStructureUpdateInstanceDataNV(
    VkPartitionedAccelerationStructureUpdateInstanceDataNV const *s1,
    VkPartitionedAccelerationStructureUpdateInstanceDataNV const *s2) {
  // local, simple types
  if ((s1->instanceIndex != s2->instanceIndex) ||
      (s1->instanceContributionToHitGroupIndex != s2->instanceContributionToHitGroupIndex) ||
      (s1->accelerationStructure != s2->accelerationStructure))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPartitionedAccelerationStructureWriteInstanceDataNV(
    VkPartitionedAccelerationStructureWriteInstanceDataNV const *s1,
    VkPartitionedAccelerationStructureWriteInstanceDataNV const *s2) {
  // local, simple types
  if ((s1->instanceID != s2->instanceID) || (s1->instanceMask != s2->instanceMask) ||
      (s1->instanceContributionToHitGroupIndex != s2->instanceContributionToHitGroupIndex) ||
      (s1->instanceFlags != s2->instanceFlags) || (s1->instanceIndex != s2->instanceIndex) ||
      (s1->partitionIndex != s2->partitionIndex) ||
      (s1->accelerationStructure != s2->accelerationStructure))
    return false;

  // local, Vulkan struct types
  if (!compare_VkTransformMatrixKHR(&s1->transform, &s2->transform))
    return false;

  // local array members
  if (memcmp(s1->explicitAABB, s2->explicitAABB, 6 * sizeof(float)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPartitionedAccelerationStructureWritePartitionTranslationDataNV(
    VkPartitionedAccelerationStructureWritePartitionTranslationDataNV const *s1,
    VkPartitionedAccelerationStructureWritePartitionTranslationDataNV const *s2) {
  // local, simple types
  if ((s1->partitionIndex != s2->partitionIndex))
    return false;

  // local array members
  if (memcmp(s1->partitionTranslation, s2->partitionTranslation, 3 * sizeof(float)) != 0)
    return false;
  return true;
}
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPastPresentationTimingGOOGLE(VkPastPresentationTimingGOOGLE const *s1,
                                            VkPastPresentationTimingGOOGLE const *s2) {
  // local, simple types
  if ((s1->presentID != s2->presentID) || (s1->desiredPresentTime != s2->desiredPresentTime) ||
      (s1->actualPresentTime != s2->actualPresentTime) ||
      (s1->earliestPresentTime != s2->earliestPresentTime) ||
      (s1->presentMargin != s2->presentMargin))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkPerTileBeginInfoQCOM(VkPerTileBeginInfoQCOM const *s1,
                                    VkPerTileBeginInfoQCOM const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkPerTileEndInfoQCOM(VkPerTileEndInfoQCOM const *s1, VkPerTileEndInfoQCOM const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceConfigurationAcquireInfoINTEL(
    VkPerformanceConfigurationAcquireInfoINTEL const *s1,
    VkPerformanceConfigurationAcquireInfoINTEL const *s2) {
  // local, simple types
  if ((s1->type != s2->type))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceCounterDescriptionKHR(VkPerformanceCounterDescriptionKHR const *s1,
                                                VkPerformanceCounterDescriptionKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // local array members
  if (strncmp(s1->name, s2->name, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  if (strncmp(s1->category, s2->category, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  if (strncmp(s1->description, s2->description, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceCounterKHR(VkPerformanceCounterKHR const *s1,
                                     VkPerformanceCounterKHR const *s2) {
  // local, simple types
  if ((s1->unit != s2->unit) || (s1->scope != s2->scope) || (s1->storage != s2->storage))
    return false;

  // local array members
  if (memcmp(s1->uuid, s2->uuid, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceMarkerInfoINTEL(VkPerformanceMarkerInfoINTEL const *s1,
                                          VkPerformanceMarkerInfoINTEL const *s2) {
  // local, simple types
  if ((s1->marker != s2->marker))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceOverrideInfoINTEL(VkPerformanceOverrideInfoINTEL const *s1,
                                            VkPerformanceOverrideInfoINTEL const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->enable != s2->enable) || (s1->parameter != s2->parameter))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_KHR_performance_query && VKSC_VERSION_1_0
bool compare_VkPerformanceQueryReservationInfoKHR(VkPerformanceQueryReservationInfoKHR const *s1,
                                                  VkPerformanceQueryReservationInfoKHR const *s2) {
  // local, simple types
  if ((s1->maxPerformanceQueriesPerPool != s2->maxPerformanceQueriesPerPool))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceQuerySubmitInfoKHR(VkPerformanceQuerySubmitInfoKHR const *s1,
                                             VkPerformanceQuerySubmitInfoKHR const *s2) {
  // local, simple types
  if ((s1->counterPassIndex != s2->counterPassIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceStreamMarkerInfoINTEL(VkPerformanceStreamMarkerInfoINTEL const *s1,
                                                VkPerformanceStreamMarkerInfoINTEL const *s2) {
  // local, simple types
  if ((s1->marker != s2->marker))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceValueINTEL(VkPerformanceValueINTEL const *s1,
                                     VkPerformanceValueINTEL const *s2) {
  // local, simple types
  if ((s1->type != s2->type))
    return false;

  // union types (with selector)
  switch (s1->type) {
  // VkPerformanceValueDataINTEL
  case VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL:
    if (s1->data.value32 != s2->data.value32)
      return false;

  case VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL:
    if (s1->data.value64 != s2->data.value64)
      return false;

  case VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL:
    if (s1->data.valueFloat != s2->data.valueFloat)
      return false;

  case VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL:
    if (s1->data.valueBool != s2->data.valueBool)
      return false;

  case VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL:
    if (s1->data.valueString != s2->data.valueString)
      return false;

  default:;
  }

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDevice16BitStorageFeatures(VkPhysicalDevice16BitStorageFeatures const *s1,
                                                  VkPhysicalDevice16BitStorageFeatures const *s2) {
  // local, simple types
  if ((s1->storageBuffer16BitAccess != s2->storageBuffer16BitAccess) ||
      (s1->uniformAndStorageBuffer16BitAccess != s2->uniformAndStorageBuffer16BitAccess) ||
      (s1->storagePushConstant16 != s2->storagePushConstant16) ||
      (s1->storageInputOutput16 != s2->storageInputOutput16))
    return false;

  return true;
}
#endif

#if VK_KHR_16bit_storage
bool compare_VkPhysicalDevice16BitStorageFeaturesKHR(
    VkPhysicalDevice16BitStorageFeaturesKHR const *s1,
    VkPhysicalDevice16BitStorageFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->storageBuffer16BitAccess != s2->storageBuffer16BitAccess) ||
      (s1->uniformAndStorageBuffer16BitAccess != s2->uniformAndStorageBuffer16BitAccess) ||
      (s1->storagePushConstant16 != s2->storagePushConstant16) ||
      (s1->storageInputOutput16 != s2->storageInputOutput16))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 149 && VK_EXT_4444_formats
bool compare_VkPhysicalDevice4444FormatsFeaturesEXT(
    VkPhysicalDevice4444FormatsFeaturesEXT const *s1,
    VkPhysicalDevice4444FormatsFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->formatA4R4G4B4 != s2->formatA4R4G4B4) || (s1->formatA4B4G4R4 != s2->formatA4B4G4R4))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDevice8BitStorageFeatures(VkPhysicalDevice8BitStorageFeatures const *s1,
                                                 VkPhysicalDevice8BitStorageFeatures const *s2) {
  // local, simple types
  if ((s1->storageBuffer8BitAccess != s2->storageBuffer8BitAccess) ||
      (s1->uniformAndStorageBuffer8BitAccess != s2->uniformAndStorageBuffer8BitAccess) ||
      (s1->storagePushConstant8 != s2->storagePushConstant8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130 && VK_KHR_8bit_storage
bool compare_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *s1,
    VkPhysicalDevice8BitStorageFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->storageBuffer8BitAccess != s2->storageBuffer8BitAccess) ||
      (s1->uniformAndStorageBuffer8BitAccess != s2->uniformAndStorageBuffer8BitAccess) ||
      (s1->storagePushConstant8 != s2->storagePushConstant8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_8bit_storage
bool compare_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *s1,
    VkPhysicalDevice8BitStorageFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->storageBuffer8BitAccess != s2->storageBuffer8BitAccess) ||
      (s1->uniformAndStorageBuffer8BitAccess != s2->uniformAndStorageBuffer8BitAccess) ||
      (s1->storagePushConstant8 != s2->storagePushConstant8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
bool compare_VkPhysicalDeviceASTCDecodeFeaturesEXT(
    VkPhysicalDeviceASTCDecodeFeaturesEXT const *s1,
    VkPhysicalDeviceASTCDecodeFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->decodeModeSharedExponent != s2->decodeModeSharedExponent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkPhysicalDeviceAccelerationStructureFeaturesKHR(
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *s1,
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->accelerationStructure != s2->accelerationStructure) ||
      (s1->accelerationStructureCaptureReplay != s2->accelerationStructureCaptureReplay) ||
      (s1->accelerationStructureIndirectBuild != s2->accelerationStructureIndirectBuild) ||
      (s1->accelerationStructureHostCommands != s2->accelerationStructureHostCommands) ||
      (s1->descriptorBindingAccelerationStructureUpdateAfterBind !=
       s2->descriptorBindingAccelerationStructureUpdateAfterBind))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkPhysicalDeviceAccelerationStructurePropertiesKHR(
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *s1,
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxGeometryCount != s2->maxGeometryCount) ||
      (s1->maxInstanceCount != s2->maxInstanceCount) ||
      (s1->maxPrimitiveCount != s2->maxPrimitiveCount) ||
      (s1->maxPerStageDescriptorAccelerationStructures !=
       s2->maxPerStageDescriptorAccelerationStructures) ||
      (s1->maxPerStageDescriptorUpdateAfterBindAccelerationStructures !=
       s2->maxPerStageDescriptorUpdateAfterBindAccelerationStructures) ||
      (s1->maxDescriptorSetAccelerationStructures != s2->maxDescriptorSetAccelerationStructures) ||
      (s1->maxDescriptorSetUpdateAfterBindAccelerationStructures !=
       s2->maxDescriptorSetUpdateAfterBindAccelerationStructures) ||
      (s1->minAccelerationStructureScratchOffsetAlignment !=
       s2->minAccelerationStructureScratchOffsetAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report
bool compare_VkPhysicalDeviceAddressBindingReportFeaturesEXT(
    VkPhysicalDeviceAddressBindingReportFeaturesEXT const *s1,
    VkPhysicalDeviceAddressBindingReportFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->reportAddressBinding != s2->reportAddressBinding))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling
bool compare_VkPhysicalDeviceAmigoProfilingFeaturesSEC(
    VkPhysicalDeviceAmigoProfilingFeaturesSEC const *s1,
    VkPhysicalDeviceAmigoProfilingFeaturesSEC const *s2) {
  // local, simple types
  if ((s1->amigoProfiling != s2->amigoProfiling))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag
bool compare_VkPhysicalDeviceAntiLagFeaturesAMD(VkPhysicalDeviceAntiLagFeaturesAMD const *s1,
                                                VkPhysicalDeviceAntiLagFeaturesAMD const *s2) {
  // local, simple types
  if ((s1->antiLag != s2->antiLag))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 250 && VK_EXT_attachment_feedback_loop_dynamic_state
bool compare_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(
    VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT const *s1,
    VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->attachmentFeedbackLoopDynamicState != s2->attachmentFeedbackLoopDynamicState))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 224 && VK_EXT_attachment_feedback_loop_layout
bool compare_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(
    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT const *s1,
    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->attachmentFeedbackLoopLayout != s2->attachmentFeedbackLoopLayout))
    return false;

  return true;
}
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *s1,
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->advancedBlendCoherentOperations != s2->advancedBlendCoherentOperations))
    return false;

  return true;
}
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *s1,
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->advancedBlendMaxColorAttachments != s2->advancedBlendMaxColorAttachments) ||
      (s1->advancedBlendIndependentBlend != s2->advancedBlendIndependentBlend) ||
      (s1->advancedBlendNonPremultipliedSrcColor != s2->advancedBlendNonPremultipliedSrcColor) ||
      (s1->advancedBlendNonPremultipliedDstColor != s2->advancedBlendNonPremultipliedDstColor) ||
      (s1->advancedBlendCorrelatedOverlap != s2->advancedBlendCorrelatedOverlap) ||
      (s1->advancedBlendAllOperations != s2->advancedBlendAllOperations))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
bool compare_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *s1,
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->borderColorSwizzle != s2->borderColorSwizzle) ||
      (s1->borderColorSwizzleFromImage != s2->borderColorSwizzleFromImage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 105 && VK_EXT_buffer_device_address
bool compare_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s1,
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address
bool compare_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s1,
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceBufferDeviceAddressFeatures(
    VkPhysicalDeviceBufferDeviceAddressFeatures const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeatures const *s2) {
  // local, simple types
  if ((s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address
bool compare_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address
bool compare_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address
bool compare_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkPhysicalDeviceClusterAccelerationStructureFeaturesNV(
    VkPhysicalDeviceClusterAccelerationStructureFeaturesNV const *s1,
    VkPhysicalDeviceClusterAccelerationStructureFeaturesNV const *s2) {
  // local, simple types
  if ((s1->clusterAccelerationStructure != s2->clusterAccelerationStructure))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkPhysicalDeviceClusterAccelerationStructurePropertiesNV(
    VkPhysicalDeviceClusterAccelerationStructurePropertiesNV const *s1,
    VkPhysicalDeviceClusterAccelerationStructurePropertiesNV const *s2) {
  // local, simple types
  if ((s1->maxVerticesPerCluster != s2->maxVerticesPerCluster) ||
      (s1->maxTrianglesPerCluster != s2->maxTrianglesPerCluster) ||
      (s1->clusterScratchByteAlignment != s2->clusterScratchByteAlignment) ||
      (s1->clusterByteAlignment != s2->clusterByteAlignment) ||
      (s1->clusterTemplateByteAlignment != s2->clusterTemplateByteAlignment) ||
      (s1->clusterBottomLevelByteAlignment != s2->clusterBottomLevelByteAlignment) ||
      (s1->clusterTemplateBoundsByteAlignment != s2->clusterTemplateBoundsByteAlignment) ||
      (s1->maxClusterGeometryIndex != s2->maxClusterGeometryIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 239 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI const *s2) {
  // local, simple types
  if ((s1->clustercullingShader != s2->clustercullingShader) ||
      (s1->multiviewClusterCullingShader != s2->multiviewClusterCullingShader))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 239 && VK_HEADER_VERSION <= 242 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s2) {
  // local, simple types
  if ((s1->maxOutputClusterCount != s2->maxOutputClusterCount))
    return false;

  // local array members
  if (memcmp(s1->maxWorkGroupCount, s2->maxWorkGroupCount, 3 * sizeof(uint32_t)) != 0)
    return false;
  if (memcmp(s1->maxWorkGroupSize, s2->maxWorkGroupSize, 3 * sizeof(uint32_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s2) {
  // local, simple types
  if ((s1->maxOutputClusterCount != s2->maxOutputClusterCount) ||
      (s1->indirectBufferOffsetAlignment != s2->indirectBufferOffsetAlignment))
    return false;

  // local array members
  if (memcmp(s1->maxWorkGroupCount, s2->maxWorkGroupCount, 3 * sizeof(uint32_t)) != 0)
    return false;
  if (memcmp(s1->maxWorkGroupSize, s2->maxWorkGroupSize, 3 * sizeof(uint32_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 272 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI const *s2) {
  // local, simple types
  if ((s1->clusterShadingRate != s2->clusterShadingRate))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 121 && VK_AMD_device_coherent_memory
bool compare_VkPhysicalDeviceCoherentMemoryFeaturesAMD(
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *s1,
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *s2) {
  // local, simple types
  if ((s1->deviceCoherentMemory != s2->deviceCoherentMemory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
bool compare_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *s1,
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->colorWriteEnable != s2->colorWriteEnable))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 293 && VK_NV_command_buffer_inheritance
bool compare_VkPhysicalDeviceCommandBufferInheritanceFeaturesNV(
    VkPhysicalDeviceCommandBufferInheritanceFeaturesNV const *s1,
    VkPhysicalDeviceCommandBufferInheritanceFeaturesNV const *s2) {
  // local, simple types
  if ((s1->commandBufferInheritance != s2->commandBufferInheritance))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 295 && VK_KHR_compute_shader_derivatives
bool compare_VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR const *s1,
    VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->computeDerivativeGroupQuads != s2->computeDerivativeGroupQuads) ||
      (s1->computeDerivativeGroupLinear != s2->computeDerivativeGroupLinear))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 294 && VK_NV_compute_shader_derivatives
bool compare_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s1,
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s2) {
  // local, simple types
  if ((s1->computeDerivativeGroupQuads != s2->computeDerivativeGroupQuads) ||
      (s1->computeDerivativeGroupLinear != s2->computeDerivativeGroupLinear))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 295 && VK_NV_compute_shader_derivatives
bool compare_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s1,
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s2) {
  // local, simple types
  if ((s1->computeDerivativeGroupQuads != s2->computeDerivativeGroupQuads) ||
      (s1->computeDerivativeGroupLinear != s2->computeDerivativeGroupLinear))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 295 && VK_KHR_compute_shader_derivatives
bool compare_VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR(
    VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR const *s1,
    VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->meshAndTaskShaderDerivatives != s2->meshAndTaskShaderDerivatives))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *s1,
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->conditionalRendering != s2->conditionalRendering) ||
      (s1->inheritedConditionalRendering != s2->inheritedConditionalRendering))
    return false;

  return true;
}
#endif

#if VK_EXT_conservative_rasterization
bool compare_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->primitiveOverestimationSize != s2->primitiveOverestimationSize) ||
      (s1->maxExtraPrimitiveOverestimationSize != s2->maxExtraPrimitiveOverestimationSize) ||
      (s1->extraPrimitiveOverestimationSizeGranularity !=
       s2->extraPrimitiveOverestimationSizeGranularity) ||
      (s1->primitiveUnderestimation != s2->primitiveUnderestimation) ||
      (s1->conservativePointAndLineRasterization != s2->conservativePointAndLineRasterization) ||
      (s1->degenerateTrianglesRasterized != s2->degenerateTrianglesRasterized) ||
      (s1->degenerateLinesRasterized != s2->degenerateLinesRasterized) ||
      (s1->fullyCoveredFragmentShaderInputVariable !=
       s2->fullyCoveredFragmentShaderInputVariable) ||
      (s1->conservativeRasterizationPostDepthCoverage !=
       s2->conservativeRasterizationPostDepthCoverage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2
bool compare_VkPhysicalDeviceCooperativeMatrix2FeaturesNV(
    VkPhysicalDeviceCooperativeMatrix2FeaturesNV const *s1,
    VkPhysicalDeviceCooperativeMatrix2FeaturesNV const *s2) {
  // local, simple types
  if ((s1->cooperativeMatrixWorkgroupScope != s2->cooperativeMatrixWorkgroupScope) ||
      (s1->cooperativeMatrixFlexibleDimensions != s2->cooperativeMatrixFlexibleDimensions) ||
      (s1->cooperativeMatrixReductions != s2->cooperativeMatrixReductions) ||
      (s1->cooperativeMatrixConversions != s2->cooperativeMatrixConversions) ||
      (s1->cooperativeMatrixPerElementOperations != s2->cooperativeMatrixPerElementOperations) ||
      (s1->cooperativeMatrixTensorAddressing != s2->cooperativeMatrixTensorAddressing) ||
      (s1->cooperativeMatrixBlockLoads != s2->cooperativeMatrixBlockLoads))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2
bool compare_VkPhysicalDeviceCooperativeMatrix2PropertiesNV(
    VkPhysicalDeviceCooperativeMatrix2PropertiesNV const *s1,
    VkPhysicalDeviceCooperativeMatrix2PropertiesNV const *s2) {
  // local, simple types
  if ((s1->cooperativeMatrixWorkgroupScopeMaxWorkgroupSize !=
       s2->cooperativeMatrixWorkgroupScopeMaxWorkgroupSize) ||
      (s1->cooperativeMatrixFlexibleDimensionsMaxDimension !=
       s2->cooperativeMatrixFlexibleDimensionsMaxDimension) ||
      (s1->cooperativeMatrixWorkgroupScopeReservedSharedMemory !=
       s2->cooperativeMatrixWorkgroupScopeReservedSharedMemory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixFeaturesKHR(
    VkPhysicalDeviceCooperativeMatrixFeaturesKHR const *s1,
    VkPhysicalDeviceCooperativeMatrixFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->cooperativeMatrix != s2->cooperativeMatrix) ||
      (s1->cooperativeMatrixRobustBufferAccess != s2->cooperativeMatrixRobustBufferAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixFeaturesNV(
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *s1,
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *s2) {
  // local, simple types
  if ((s1->cooperativeMatrix != s2->cooperativeMatrix) ||
      (s1->cooperativeMatrixRobustBufferAccess != s2->cooperativeMatrixRobustBufferAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixPropertiesKHR(
    VkPhysicalDeviceCooperativeMatrixPropertiesKHR const *s1,
    VkPhysicalDeviceCooperativeMatrixPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->cooperativeMatrixSupportedStages != s2->cooperativeMatrixSupportedStages))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *s1,
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *s2) {
  // local, simple types
  if ((s1->cooperativeMatrixSupportedStages != s2->cooperativeMatrixSupportedStages))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector
bool compare_VkPhysicalDeviceCooperativeVectorFeaturesNV(
    VkPhysicalDeviceCooperativeVectorFeaturesNV const *s1,
    VkPhysicalDeviceCooperativeVectorFeaturesNV const *s2) {
  // local, simple types
  if ((s1->cooperativeVector != s2->cooperativeVector) ||
      (s1->cooperativeVectorTraining != s2->cooperativeVectorTraining))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector
bool compare_VkPhysicalDeviceCooperativeVectorPropertiesNV(
    VkPhysicalDeviceCooperativeVectorPropertiesNV const *s1,
    VkPhysicalDeviceCooperativeVectorPropertiesNV const *s2) {
  // local, simple types
  if ((s1->cooperativeVectorSupportedStages != s2->cooperativeVectorSupportedStages) ||
      (s1->cooperativeVectorTrainingFloat16Accumulation !=
       s2->cooperativeVectorTrainingFloat16Accumulation) ||
      (s1->cooperativeVectorTrainingFloat32Accumulation !=
       s2->cooperativeVectorTrainingFloat32Accumulation) ||
      (s1->maxCooperativeVectorComponents != s2->maxCooperativeVectorComponents))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(
    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV const *s1,
    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV const *s2) {
  // local, simple types
  if ((s1->indirectCopy != s2->indirectCopy))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(
    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV const *s1,
    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV const *s2) {
  // local, simple types
  if ((s1->supportedQueues != s2->supportedQueues))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_corner_sampled_image
bool compare_VkPhysicalDeviceCornerSampledImageFeaturesNV(
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *s1,
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *s2) {
  // local, simple types
  if ((s1->cornerSampledImage != s2->cornerSampledImage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkPhysicalDeviceCoverageReductionModeFeaturesNV(
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *s1,
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *s2) {
  // local, simple types
  if ((s1->coverageReductionMode != s2->coverageReductionMode))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_clamp
bool compare_VkPhysicalDeviceCubicClampFeaturesQCOM(
    VkPhysicalDeviceCubicClampFeaturesQCOM const *s1,
    VkPhysicalDeviceCubicClampFeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->cubicRangeClamp != s2->cubicRangeClamp))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights
bool compare_VkPhysicalDeviceCubicWeightsFeaturesQCOM(
    VkPhysicalDeviceCubicWeightsFeaturesQCOM const *s1,
    VkPhysicalDeviceCubicWeightsFeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->selectableCubicWeights != s2->selectableCubicWeights))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceCudaKernelLaunchFeaturesNV(
    VkPhysicalDeviceCudaKernelLaunchFeaturesNV const *s1,
    VkPhysicalDeviceCudaKernelLaunchFeaturesNV const *s2) {
  // local, simple types
  if ((s1->cudaKernelLaunchFeatures != s2->cudaKernelLaunchFeatures))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceCudaKernelLaunchPropertiesNV(
    VkPhysicalDeviceCudaKernelLaunchPropertiesNV const *s1,
    VkPhysicalDeviceCudaKernelLaunchPropertiesNV const *s2) {
  // local, simple types
  if ((s1->computeCapabilityMinor != s2->computeCapabilityMinor) ||
      (s1->computeCapabilityMajor != s2->computeCapabilityMajor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
bool compare_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *s1,
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->customBorderColors != s2->customBorderColors) ||
      (s1->customBorderColorWithoutFormat != s2->customBorderColorWithoutFormat))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
bool compare_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *s1,
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxCustomBorderColorSamplers != s2->maxCustomBorderColorSamplers))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkPhysicalDeviceDataGraphFeaturesARM(VkPhysicalDeviceDataGraphFeaturesARM const *s1,
                                                  VkPhysicalDeviceDataGraphFeaturesARM const *s2) {
  // local, simple types
  if ((s1->dataGraph != s2->dataGraph) ||
      (s1->dataGraphUpdateAfterBind != s2->dataGraphUpdateAfterBind) ||
      (s1->dataGraphSpecializationConstants != s2->dataGraphSpecializationConstants) ||
      (s1->dataGraphDescriptorBuffer != s2->dataGraphDescriptorBuffer) ||
      (s1->dataGraphShaderModule != s2->dataGraphShaderModule))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_HEADER_VERSION <= 319 && VK_ARM_data_graph
bool compare_VkPhysicalDeviceDataGraphOperationSupportARM(
    VkPhysicalDeviceDataGraphOperationSupportARM const *s1,
    VkPhysicalDeviceDataGraphOperationSupportARM const *s2) {
  // local, simple types
  if ((s1->operationType != s2->operationType) || (s1->version != s2->version))
    return false;

  // local array members
  if (memcmp(s1->name, s2->name,
             VK_MAX_PHYSICAL_DEVICE_DATA_GRAPH_OPERATION_SET_NAME_SIZE_ARM * sizeof(char)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 320 && VK_ARM_data_graph
bool compare_VkPhysicalDeviceDataGraphOperationSupportARM(
    VkPhysicalDeviceDataGraphOperationSupportARM const *s1,
    VkPhysicalDeviceDataGraphOperationSupportARM const *s2) {
  // local, simple types
  if ((s1->operationType != s2->operationType) || (s1->version != s2->version))
    return false;

  // local array members
  if (strncmp(s1->name, s2->name, VK_MAX_PHYSICAL_DEVICE_DATA_GRAPH_OPERATION_SET_NAME_SIZE_ARM) !=
      0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkPhysicalDeviceDataGraphProcessingEngineARM(
    VkPhysicalDeviceDataGraphProcessingEngineARM const *s1,
    VkPhysicalDeviceDataGraphProcessingEngineARM const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->isForeign != s2->isForeign))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 99 && VK_NV_dedicated_allocation_image_aliasing
bool compare_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *s1,
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *s2) {
  // local, simple types
  if ((s1->dedicatedAllocationImageAliasing != s2->dedicatedAllocationImageAliasing))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control
bool compare_VkPhysicalDeviceDepthBiasControlFeaturesEXT(
    VkPhysicalDeviceDepthBiasControlFeaturesEXT const *s1,
    VkPhysicalDeviceDepthBiasControlFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->depthBiasControl != s2->depthBiasControl) ||
      (s1->leastRepresentableValueForceUnormRepresentation !=
       s2->leastRepresentableValueForceUnormRepresentation) ||
      (s1->floatRepresentation != s2->floatRepresentation) ||
      (s1->depthBiasExact != s2->depthBiasExact))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control
bool compare_VkPhysicalDeviceDepthClampControlFeaturesEXT(
    VkPhysicalDeviceDepthClampControlFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClampControlFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->depthClampControl != s2->depthClampControl))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 304 && VK_EXT_depth_clamp_zero_one
bool compare_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->depthClampZeroOne != s2->depthClampZeroOne))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 305 && VK_EXT_depth_clamp_zero_one
bool compare_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->depthClampZeroOne != s2->depthClampZeroOne))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 305 && VK_KHR_depth_clamp_zero_one
bool compare_VkPhysicalDeviceDepthClampZeroOneFeaturesKHR(
    VkPhysicalDeviceDepthClampZeroOneFeaturesKHR const *s1,
    VkPhysicalDeviceDepthClampZeroOneFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->depthClampZeroOne != s2->depthClampZeroOne))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control
bool compare_VkPhysicalDeviceDepthClipControlFeaturesEXT(
    VkPhysicalDeviceDepthClipControlFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClipControlFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->depthClipControl != s2->depthClipControl))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
bool compare_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->depthClipEnable != s2->depthClipEnable))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDepthStencilResolveProperties(
    VkPhysicalDeviceDepthStencilResolveProperties const *s1,
    VkPhysicalDeviceDepthStencilResolveProperties const *s2) {
  // local, simple types
  if ((s1->supportedDepthResolveModes != s2->supportedDepthResolveModes) ||
      (s1->supportedStencilResolveModes != s2->supportedStencilResolveModes) ||
      (s1->independentResolveNone != s2->independentResolveNone) ||
      (s1->independentResolve != s2->independentResolve))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 130 && VK_KHR_depth_stencil_resolve
bool compare_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s1,
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->supportedDepthResolveModes != s2->supportedDepthResolveModes) ||
      (s1->supportedStencilResolveModes != s2->supportedStencilResolveModes) ||
      (s1->independentResolveNone != s2->independentResolveNone) ||
      (s1->independentResolve != s2->independentResolve))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_depth_stencil_resolve
bool compare_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s1,
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->supportedDepthResolveModes != s2->supportedDepthResolveModes) ||
      (s1->supportedStencilResolveModes != s2->supportedStencilResolveModes) ||
      (s1->independentResolveNone != s2->independentResolveNone) ||
      (s1->independentResolve != s2->independentResolve))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->combinedImageSamplerDensityMapDescriptorSize !=
       s2->combinedImageSamplerDensityMapDescriptorSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferFeaturesEXT(
    VkPhysicalDeviceDescriptorBufferFeaturesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->descriptorBuffer != s2->descriptorBuffer) ||
      (s1->descriptorBufferCaptureReplay != s2->descriptorBufferCaptureReplay) ||
      (s1->descriptorBufferImageLayoutIgnored != s2->descriptorBufferImageLayoutIgnored) ||
      (s1->descriptorBufferPushDescriptors != s2->descriptorBufferPushDescriptors))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->combinedImageSamplerDescriptorSingleArray !=
       s2->combinedImageSamplerDescriptorSingleArray) ||
      (s1->bufferlessPushDescriptors != s2->bufferlessPushDescriptors) ||
      (s1->allowSamplerImageViewPostSubmitCreation !=
       s2->allowSamplerImageViewPostSubmitCreation) ||
      (s1->descriptorBufferOffsetAlignment != s2->descriptorBufferOffsetAlignment) ||
      (s1->maxDescriptorBufferBindings != s2->maxDescriptorBufferBindings) ||
      (s1->maxResourceDescriptorBufferBindings != s2->maxResourceDescriptorBufferBindings) ||
      (s1->maxSamplerDescriptorBufferBindings != s2->maxSamplerDescriptorBufferBindings) ||
      (s1->maxEmbeddedImmutableSamplerBindings != s2->maxEmbeddedImmutableSamplerBindings) ||
      (s1->maxEmbeddedImmutableSamplers != s2->maxEmbeddedImmutableSamplers) ||
      (s1->bufferCaptureReplayDescriptorDataSize != s2->bufferCaptureReplayDescriptorDataSize) ||
      (s1->imageCaptureReplayDescriptorDataSize != s2->imageCaptureReplayDescriptorDataSize) ||
      (s1->imageViewCaptureReplayDescriptorDataSize !=
       s2->imageViewCaptureReplayDescriptorDataSize) ||
      (s1->samplerCaptureReplayDescriptorDataSize != s2->samplerCaptureReplayDescriptorDataSize) ||
      (s1->accelerationStructureCaptureReplayDescriptorDataSize !=
       s2->accelerationStructureCaptureReplayDescriptorDataSize) ||
      (s1->samplerDescriptorSize != s2->samplerDescriptorSize) ||
      (s1->combinedImageSamplerDescriptorSize != s2->combinedImageSamplerDescriptorSize) ||
      (s1->sampledImageDescriptorSize != s2->sampledImageDescriptorSize) ||
      (s1->storageImageDescriptorSize != s2->storageImageDescriptorSize) ||
      (s1->uniformTexelBufferDescriptorSize != s2->uniformTexelBufferDescriptorSize) ||
      (s1->robustUniformTexelBufferDescriptorSize != s2->robustUniformTexelBufferDescriptorSize) ||
      (s1->storageTexelBufferDescriptorSize != s2->storageTexelBufferDescriptorSize) ||
      (s1->robustStorageTexelBufferDescriptorSize != s2->robustStorageTexelBufferDescriptorSize) ||
      (s1->uniformBufferDescriptorSize != s2->uniformBufferDescriptorSize) ||
      (s1->robustUniformBufferDescriptorSize != s2->robustUniformBufferDescriptorSize) ||
      (s1->storageBufferDescriptorSize != s2->storageBufferDescriptorSize) ||
      (s1->robustStorageBufferDescriptorSize != s2->robustStorageBufferDescriptorSize) ||
      (s1->inputAttachmentDescriptorSize != s2->inputAttachmentDescriptorSize) ||
      (s1->accelerationStructureDescriptorSize != s2->accelerationStructureDescriptorSize) ||
      (s1->maxSamplerDescriptorBufferRange != s2->maxSamplerDescriptorBufferRange) ||
      (s1->maxResourceDescriptorBufferRange != s2->maxResourceDescriptorBufferRange) ||
      (s1->samplerDescriptorBufferAddressSpaceSize !=
       s2->samplerDescriptorBufferAddressSpaceSize) ||
      (s1->resourceDescriptorBufferAddressSpaceSize !=
       s2->resourceDescriptorBufferAddressSpaceSize) ||
      (s1->descriptorBufferAddressSpaceSize != s2->descriptorBufferAddressSpaceSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferTensorFeaturesARM(
    VkPhysicalDeviceDescriptorBufferTensorFeaturesARM const *s1,
    VkPhysicalDeviceDescriptorBufferTensorFeaturesARM const *s2) {
  // local, simple types
  if ((s1->descriptorBufferTensorDescriptors != s2->descriptorBufferTensorDescriptors))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferTensorPropertiesARM(
    VkPhysicalDeviceDescriptorBufferTensorPropertiesARM const *s1,
    VkPhysicalDeviceDescriptorBufferTensorPropertiesARM const *s2) {
  // local, simple types
  if ((s1->tensorCaptureReplayDescriptorDataSize != s2->tensorCaptureReplayDescriptorDataSize) ||
      (s1->tensorViewCaptureReplayDescriptorDataSize !=
       s2->tensorViewCaptureReplayDescriptorDataSize) ||
      (s1->tensorDescriptorSize != s2->tensorDescriptorSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDescriptorIndexingFeatures(
    VkPhysicalDeviceDescriptorIndexingFeatures const *s1,
    VkPhysicalDeviceDescriptorIndexingFeatures const *s2) {
  // local, simple types
  if ((s1->shaderInputAttachmentArrayDynamicIndexing !=
       s2->shaderInputAttachmentArrayDynamicIndexing) ||
      (s1->shaderUniformTexelBufferArrayDynamicIndexing !=
       s2->shaderUniformTexelBufferArrayDynamicIndexing) ||
      (s1->shaderStorageTexelBufferArrayDynamicIndexing !=
       s2->shaderStorageTexelBufferArrayDynamicIndexing) ||
      (s1->shaderUniformBufferArrayNonUniformIndexing !=
       s2->shaderUniformBufferArrayNonUniformIndexing) ||
      (s1->shaderSampledImageArrayNonUniformIndexing !=
       s2->shaderSampledImageArrayNonUniformIndexing) ||
      (s1->shaderStorageBufferArrayNonUniformIndexing !=
       s2->shaderStorageBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageImageArrayNonUniformIndexing !=
       s2->shaderStorageImageArrayNonUniformIndexing) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexing !=
       s2->shaderInputAttachmentArrayNonUniformIndexing) ||
      (s1->shaderUniformTexelBufferArrayNonUniformIndexing !=
       s2->shaderUniformTexelBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageTexelBufferArrayNonUniformIndexing !=
       s2->shaderStorageTexelBufferArrayNonUniformIndexing) ||
      (s1->descriptorBindingUniformBufferUpdateAfterBind !=
       s2->descriptorBindingUniformBufferUpdateAfterBind) ||
      (s1->descriptorBindingSampledImageUpdateAfterBind !=
       s2->descriptorBindingSampledImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageImageUpdateAfterBind !=
       s2->descriptorBindingStorageImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageBufferUpdateAfterBind !=
       s2->descriptorBindingStorageBufferUpdateAfterBind) ||
      (s1->descriptorBindingUniformTexelBufferUpdateAfterBind !=
       s2->descriptorBindingUniformTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingStorageTexelBufferUpdateAfterBind !=
       s2->descriptorBindingStorageTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingUpdateUnusedWhilePending !=
       s2->descriptorBindingUpdateUnusedWhilePending) ||
      (s1->descriptorBindingPartiallyBound != s2->descriptorBindingPartiallyBound) ||
      (s1->descriptorBindingVariableDescriptorCount !=
       s2->descriptorBindingVariableDescriptorCount) ||
      (s1->runtimeDescriptorArray != s2->runtimeDescriptorArray))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderInputAttachmentArrayDynamicIndexing !=
       s2->shaderInputAttachmentArrayDynamicIndexing) ||
      (s1->shaderUniformTexelBufferArrayDynamicIndexing !=
       s2->shaderUniformTexelBufferArrayDynamicIndexing) ||
      (s1->shaderStorageTexelBufferArrayDynamicIndexing !=
       s2->shaderStorageTexelBufferArrayDynamicIndexing) ||
      (s1->shaderUniformBufferArrayNonUniformIndexing !=
       s2->shaderUniformBufferArrayNonUniformIndexing) ||
      (s1->shaderSampledImageArrayNonUniformIndexing !=
       s2->shaderSampledImageArrayNonUniformIndexing) ||
      (s1->shaderStorageBufferArrayNonUniformIndexing !=
       s2->shaderStorageBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageImageArrayNonUniformIndexing !=
       s2->shaderStorageImageArrayNonUniformIndexing) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexing !=
       s2->shaderInputAttachmentArrayNonUniformIndexing) ||
      (s1->shaderUniformTexelBufferArrayNonUniformIndexing !=
       s2->shaderUniformTexelBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageTexelBufferArrayNonUniformIndexing !=
       s2->shaderStorageTexelBufferArrayNonUniformIndexing) ||
      (s1->descriptorBindingUniformBufferUpdateAfterBind !=
       s2->descriptorBindingUniformBufferUpdateAfterBind) ||
      (s1->descriptorBindingSampledImageUpdateAfterBind !=
       s2->descriptorBindingSampledImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageImageUpdateAfterBind !=
       s2->descriptorBindingStorageImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageBufferUpdateAfterBind !=
       s2->descriptorBindingStorageBufferUpdateAfterBind) ||
      (s1->descriptorBindingUniformTexelBufferUpdateAfterBind !=
       s2->descriptorBindingUniformTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingStorageTexelBufferUpdateAfterBind !=
       s2->descriptorBindingStorageTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingUpdateUnusedWhilePending !=
       s2->descriptorBindingUpdateUnusedWhilePending) ||
      (s1->descriptorBindingPartiallyBound != s2->descriptorBindingPartiallyBound) ||
      (s1->descriptorBindingVariableDescriptorCount !=
       s2->descriptorBindingVariableDescriptorCount) ||
      (s1->runtimeDescriptorArray != s2->runtimeDescriptorArray))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderInputAttachmentArrayDynamicIndexing !=
       s2->shaderInputAttachmentArrayDynamicIndexing) ||
      (s1->shaderUniformTexelBufferArrayDynamicIndexing !=
       s2->shaderUniformTexelBufferArrayDynamicIndexing) ||
      (s1->shaderStorageTexelBufferArrayDynamicIndexing !=
       s2->shaderStorageTexelBufferArrayDynamicIndexing) ||
      (s1->shaderUniformBufferArrayNonUniformIndexing !=
       s2->shaderUniformBufferArrayNonUniformIndexing) ||
      (s1->shaderSampledImageArrayNonUniformIndexing !=
       s2->shaderSampledImageArrayNonUniformIndexing) ||
      (s1->shaderStorageBufferArrayNonUniformIndexing !=
       s2->shaderStorageBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageImageArrayNonUniformIndexing !=
       s2->shaderStorageImageArrayNonUniformIndexing) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexing !=
       s2->shaderInputAttachmentArrayNonUniformIndexing) ||
      (s1->shaderUniformTexelBufferArrayNonUniformIndexing !=
       s2->shaderUniformTexelBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageTexelBufferArrayNonUniformIndexing !=
       s2->shaderStorageTexelBufferArrayNonUniformIndexing) ||
      (s1->descriptorBindingUniformBufferUpdateAfterBind !=
       s2->descriptorBindingUniformBufferUpdateAfterBind) ||
      (s1->descriptorBindingSampledImageUpdateAfterBind !=
       s2->descriptorBindingSampledImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageImageUpdateAfterBind !=
       s2->descriptorBindingStorageImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageBufferUpdateAfterBind !=
       s2->descriptorBindingStorageBufferUpdateAfterBind) ||
      (s1->descriptorBindingUniformTexelBufferUpdateAfterBind !=
       s2->descriptorBindingUniformTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingStorageTexelBufferUpdateAfterBind !=
       s2->descriptorBindingStorageTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingUpdateUnusedWhilePending !=
       s2->descriptorBindingUpdateUnusedWhilePending) ||
      (s1->descriptorBindingPartiallyBound != s2->descriptorBindingPartiallyBound) ||
      (s1->descriptorBindingVariableDescriptorCount !=
       s2->descriptorBindingVariableDescriptorCount) ||
      (s1->runtimeDescriptorArray != s2->runtimeDescriptorArray))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDescriptorIndexingProperties(
    VkPhysicalDeviceDescriptorIndexingProperties const *s1,
    VkPhysicalDeviceDescriptorIndexingProperties const *s2) {
  // local, simple types
  if ((s1->maxUpdateAfterBindDescriptorsInAllPools !=
       s2->maxUpdateAfterBindDescriptorsInAllPools) ||
      (s1->shaderUniformBufferArrayNonUniformIndexingNative !=
       s2->shaderUniformBufferArrayNonUniformIndexingNative) ||
      (s1->shaderSampledImageArrayNonUniformIndexingNative !=
       s2->shaderSampledImageArrayNonUniformIndexingNative) ||
      (s1->shaderStorageBufferArrayNonUniformIndexingNative !=
       s2->shaderStorageBufferArrayNonUniformIndexingNative) ||
      (s1->shaderStorageImageArrayNonUniformIndexingNative !=
       s2->shaderStorageImageArrayNonUniformIndexingNative) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexingNative !=
       s2->shaderInputAttachmentArrayNonUniformIndexingNative) ||
      (s1->robustBufferAccessUpdateAfterBind != s2->robustBufferAccessUpdateAfterBind) ||
      (s1->quadDivergentImplicitLod != s2->quadDivergentImplicitLod) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSamplers !=
       s2->maxPerStageDescriptorUpdateAfterBindSamplers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindUniformBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindUniformBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSampledImages !=
       s2->maxPerStageDescriptorUpdateAfterBindSampledImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageImages !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInputAttachments !=
       s2->maxPerStageDescriptorUpdateAfterBindInputAttachments) ||
      (s1->maxPerStageUpdateAfterBindResources != s2->maxPerStageUpdateAfterBindResources) ||
      (s1->maxDescriptorSetUpdateAfterBindSamplers !=
       s2->maxDescriptorSetUpdateAfterBindSamplers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffers !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffers !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindSampledImages !=
       s2->maxDescriptorSetUpdateAfterBindSampledImages) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageImages !=
       s2->maxDescriptorSetUpdateAfterBindStorageImages) ||
      (s1->maxDescriptorSetUpdateAfterBindInputAttachments !=
       s2->maxDescriptorSetUpdateAfterBindInputAttachments))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxUpdateAfterBindDescriptorsInAllPools !=
       s2->maxUpdateAfterBindDescriptorsInAllPools) ||
      (s1->shaderUniformBufferArrayNonUniformIndexingNative !=
       s2->shaderUniformBufferArrayNonUniformIndexingNative) ||
      (s1->shaderSampledImageArrayNonUniformIndexingNative !=
       s2->shaderSampledImageArrayNonUniformIndexingNative) ||
      (s1->shaderStorageBufferArrayNonUniformIndexingNative !=
       s2->shaderStorageBufferArrayNonUniformIndexingNative) ||
      (s1->shaderStorageImageArrayNonUniformIndexingNative !=
       s2->shaderStorageImageArrayNonUniformIndexingNative) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexingNative !=
       s2->shaderInputAttachmentArrayNonUniformIndexingNative) ||
      (s1->robustBufferAccessUpdateAfterBind != s2->robustBufferAccessUpdateAfterBind) ||
      (s1->quadDivergentImplicitLod != s2->quadDivergentImplicitLod) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSamplers !=
       s2->maxPerStageDescriptorUpdateAfterBindSamplers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindUniformBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindUniformBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSampledImages !=
       s2->maxPerStageDescriptorUpdateAfterBindSampledImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageImages !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInputAttachments !=
       s2->maxPerStageDescriptorUpdateAfterBindInputAttachments) ||
      (s1->maxPerStageUpdateAfterBindResources != s2->maxPerStageUpdateAfterBindResources) ||
      (s1->maxDescriptorSetUpdateAfterBindSamplers !=
       s2->maxDescriptorSetUpdateAfterBindSamplers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffers !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffers !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindSampledImages !=
       s2->maxDescriptorSetUpdateAfterBindSampledImages) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageImages !=
       s2->maxDescriptorSetUpdateAfterBindStorageImages) ||
      (s1->maxDescriptorSetUpdateAfterBindInputAttachments !=
       s2->maxDescriptorSetUpdateAfterBindInputAttachments))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxUpdateAfterBindDescriptorsInAllPools !=
       s2->maxUpdateAfterBindDescriptorsInAllPools) ||
      (s1->shaderUniformBufferArrayNonUniformIndexingNative !=
       s2->shaderUniformBufferArrayNonUniformIndexingNative) ||
      (s1->shaderSampledImageArrayNonUniformIndexingNative !=
       s2->shaderSampledImageArrayNonUniformIndexingNative) ||
      (s1->shaderStorageBufferArrayNonUniformIndexingNative !=
       s2->shaderStorageBufferArrayNonUniformIndexingNative) ||
      (s1->shaderStorageImageArrayNonUniformIndexingNative !=
       s2->shaderStorageImageArrayNonUniformIndexingNative) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexingNative !=
       s2->shaderInputAttachmentArrayNonUniformIndexingNative) ||
      (s1->robustBufferAccessUpdateAfterBind != s2->robustBufferAccessUpdateAfterBind) ||
      (s1->quadDivergentImplicitLod != s2->quadDivergentImplicitLod) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSamplers !=
       s2->maxPerStageDescriptorUpdateAfterBindSamplers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindUniformBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindUniformBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSampledImages !=
       s2->maxPerStageDescriptorUpdateAfterBindSampledImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageImages !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInputAttachments !=
       s2->maxPerStageDescriptorUpdateAfterBindInputAttachments) ||
      (s1->maxPerStageUpdateAfterBindResources != s2->maxPerStageUpdateAfterBindResources) ||
      (s1->maxDescriptorSetUpdateAfterBindSamplers !=
       s2->maxDescriptorSetUpdateAfterBindSamplers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffers !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffers !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindSampledImages !=
       s2->maxDescriptorSetUpdateAfterBindSampledImages) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageImages !=
       s2->maxDescriptorSetUpdateAfterBindStorageImages) ||
      (s1->maxDescriptorSetUpdateAfterBindInputAttachments !=
       s2->maxDescriptorSetUpdateAfterBindInputAttachments))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 263 && VK_NV_descriptor_pool_overallocation
bool compare_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV(
    VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV const *s1,
    VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV const *s2) {
  // local, simple types
  if ((s1->descriptorPoolOverallocation != s2->descriptorPoolOverallocation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(
    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE const *s1,
    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE const *s2) {
  // local, simple types
  if ((s1->descriptorSetHostMapping != s2->descriptorSetHostMapping))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV const *s2) {
  // local, simple types
  if ((s1->deviceGeneratedCompute != s2->deviceGeneratedCompute) ||
      (s1->deviceGeneratedComputePipelines != s2->deviceGeneratedComputePipelines) ||
      (s1->deviceGeneratedComputeCaptureReplay != s2->deviceGeneratedComputeCaptureReplay))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->deviceGeneratedCommands != s2->deviceGeneratedCommands) ||
      (s1->dynamicGeneratedPipelineLayout != s2->dynamicGeneratedPipelineLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *s2) {
  // local, simple types
  if ((s1->deviceGeneratedCommands != s2->deviceGeneratedCommands))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxIndirectPipelineCount != s2->maxIndirectPipelineCount) ||
      (s1->maxIndirectShaderObjectCount != s2->maxIndirectShaderObjectCount) ||
      (s1->maxIndirectSequenceCount != s2->maxIndirectSequenceCount) ||
      (s1->maxIndirectCommandsTokenCount != s2->maxIndirectCommandsTokenCount) ||
      (s1->maxIndirectCommandsTokenOffset != s2->maxIndirectCommandsTokenOffset) ||
      (s1->maxIndirectCommandsIndirectStride != s2->maxIndirectCommandsIndirectStride) ||
      (s1->supportedIndirectCommandsInputModes != s2->supportedIndirectCommandsInputModes) ||
      (s1->supportedIndirectCommandsShaderStages != s2->supportedIndirectCommandsShaderStages) ||
      (s1->supportedIndirectCommandsShaderStagesPipelineBinding !=
       s2->supportedIndirectCommandsShaderStagesPipelineBinding) ||
      (s1->supportedIndirectCommandsShaderStagesShaderBinding !=
       s2->supportedIndirectCommandsShaderStagesShaderBinding) ||
      (s1->deviceGeneratedCommandsTransformFeedback !=
       s2->deviceGeneratedCommandsTransformFeedback) ||
      (s1->deviceGeneratedCommandsMultiDrawIndirectCount !=
       s2->deviceGeneratedCommandsMultiDrawIndirectCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *s2) {
  // local, simple types
  if ((s1->maxGraphicsShaderGroupCount != s2->maxGraphicsShaderGroupCount) ||
      (s1->maxIndirectSequenceCount != s2->maxIndirectSequenceCount) ||
      (s1->maxIndirectCommandsTokenCount != s2->maxIndirectCommandsTokenCount) ||
      (s1->maxIndirectCommandsStreamCount != s2->maxIndirectCommandsStreamCount) ||
      (s1->maxIndirectCommandsTokenOffset != s2->maxIndirectCommandsTokenOffset) ||
      (s1->maxIndirectCommandsStreamStride != s2->maxIndirectCommandsStreamStride) ||
      (s1->minSequencesCountBufferOffsetAlignment != s2->minSequencesCountBufferOffsetAlignment) ||
      (s1->minSequencesIndexBufferOffsetAlignment != s2->minSequencesIndexBufferOffsetAlignment) ||
      (s1->minIndirectCommandsBufferOffsetAlignment !=
       s2->minIndirectCommandsBufferOffsetAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *s1,
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->deviceMemoryReport != s2->deviceMemoryReport))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
bool compare_VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *s1,
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *s2) {
  // local, simple types
  if ((s1->diagnosticsConfig != s2->diagnosticsConfig))
    return false;

  return true;
}
#endif

#if VK_EXT_discard_rectangles
bool compare_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *s1,
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxDiscardRectangles != s2->maxDiscardRectangles))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceDisplacementMicromapFeaturesNV(
    VkPhysicalDeviceDisplacementMicromapFeaturesNV const *s1,
    VkPhysicalDeviceDisplacementMicromapFeaturesNV const *s2) {
  // local, simple types
  if ((s1->displacementMicromap != s2->displacementMicromap))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceDisplacementMicromapPropertiesNV(
    VkPhysicalDeviceDisplacementMicromapPropertiesNV const *s1,
    VkPhysicalDeviceDisplacementMicromapPropertiesNV const *s2) {
  // local, simple types
  if ((s1->maxDisplacementMicromapSubdivisionLevel != s2->maxDisplacementMicromapSubdivisionLevel))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDriverProperties(VkPhysicalDeviceDriverProperties const *s1,
                                              VkPhysicalDeviceDriverProperties const *s2) {
  // local, simple types
  if ((s1->driverID != s2->driverID))
    return false;

  // local, Vulkan struct types
  if (!compare_VkConformanceVersion(&s1->conformanceVersion, &s2->conformanceVersion))
    return false;

  // local array members
  if (strncmp(s1->driverName, s2->driverName, VK_MAX_DRIVER_NAME_SIZE) != 0)
    return false;
  if (strncmp(s1->driverInfo, s2->driverInfo, VK_MAX_DRIVER_INFO_SIZE) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 87 && VK_KHR_driver_properties
bool compare_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *s1,
                                                 VkPhysicalDeviceDriverPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->driverID != s2->driverID))
    return false;

  // local, Vulkan struct types
  if (!compare_VkConformanceVersionKHR(&s1->conformanceVersion, &s2->conformanceVersion))
    return false;

  // local array members
  if (memcmp(s1->driverName, s2->driverName, VK_MAX_DRIVER_NAME_SIZE_KHR * sizeof(char)) != 0)
    return false;
  if (memcmp(s1->driverInfo, s2->driverInfo, VK_MAX_DRIVER_INFO_SIZE_KHR * sizeof(char)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 130 && VK_KHR_driver_properties
bool compare_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *s1,
                                                 VkPhysicalDeviceDriverPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->driverID != s2->driverID))
    return false;

  // local, Vulkan struct types
  if (!compare_VkConformanceVersionKHR(&s1->conformanceVersion, &s2->conformanceVersion))
    return false;

  // local array members
  if (memcmp(s1->driverName, s2->driverName, VK_MAX_DRIVER_NAME_SIZE_KHR * sizeof(char)) != 0)
    return false;
  if (memcmp(s1->driverInfo, s2->driverInfo, VK_MAX_DRIVER_INFO_SIZE_KHR * sizeof(char)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_driver_properties
bool compare_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *s1,
                                                 VkPhysicalDeviceDriverPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->driverID != s2->driverID))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_physical_device_drm
bool compare_VkPhysicalDeviceDrmPropertiesEXT(VkPhysicalDeviceDrmPropertiesEXT const *s1,
                                              VkPhysicalDeviceDrmPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->hasPrimary != s2->hasPrimary) || (s1->hasRender != s2->hasRender) ||
      (s1->primaryMajor != s2->primaryMajor) || (s1->primaryMinor != s2->primaryMinor) ||
      (s1->renderMajor != s2->renderMajor) || (s1->renderMinor != s2->renderMinor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceDynamicRenderingFeatures(
    VkPhysicalDeviceDynamicRenderingFeatures const *s1,
    VkPhysicalDeviceDynamicRenderingFeatures const *s2) {
  // local, simple types
  if ((s1->dynamicRendering != s2->dynamicRendering))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering
bool compare_VkPhysicalDeviceDynamicRenderingFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s1,
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->dynamicRendering != s2->dynamicRendering))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering
bool compare_VkPhysicalDeviceDynamicRenderingFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s1,
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->dynamicRendering != s2->dynamicRendering))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceDynamicRenderingLocalReadFeatures(
    VkPhysicalDeviceDynamicRenderingLocalReadFeatures const *s1,
    VkPhysicalDeviceDynamicRenderingLocalReadFeatures const *s2) {
  // local, simple types
  if ((s1->dynamicRenderingLocalRead != s2->dynamicRenderingLocalRead))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read
bool compare_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *s1,
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->dynamicRenderingLocalRead != s2->dynamicRenderingLocalRead))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read
bool compare_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *s1,
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->dynamicRenderingLocalRead != s2->dynamicRenderingLocalRead))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 251 && VK_EXT_dynamic_rendering_unused_attachments
bool compare_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(
    VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT const *s1,
    VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->dynamicRenderingUnusedAttachments != s2->dynamicRenderingUnusedAttachments))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
bool compare_VkPhysicalDeviceExclusiveScissorFeaturesNV(
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *s1,
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *s2) {
  // local, simple types
  if ((s1->exclusiveScissor != s2->exclusiveScissor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 176 && VK_EXT_extended_dynamic_state2
bool compare_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->extendedDynamicState2 != s2->extendedDynamicState2) ||
      (s1->extendedDynamicState2LogicOp != s2->extendedDynamicState2LogicOp) ||
      (s1->extendedDynamicState2PatchControlPoints != s2->extendedDynamicState2PatchControlPoints))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->extendedDynamicState3TessellationDomainOrigin !=
       s2->extendedDynamicState3TessellationDomainOrigin) ||
      (s1->extendedDynamicState3DepthClampEnable != s2->extendedDynamicState3DepthClampEnable) ||
      (s1->extendedDynamicState3PolygonMode != s2->extendedDynamicState3PolygonMode) ||
      (s1->extendedDynamicState3RasterizationSamples !=
       s2->extendedDynamicState3RasterizationSamples) ||
      (s1->extendedDynamicState3SampleMask != s2->extendedDynamicState3SampleMask) ||
      (s1->extendedDynamicState3AlphaToCoverageEnable !=
       s2->extendedDynamicState3AlphaToCoverageEnable) ||
      (s1->extendedDynamicState3AlphaToOneEnable != s2->extendedDynamicState3AlphaToOneEnable) ||
      (s1->extendedDynamicState3LogicOpEnable != s2->extendedDynamicState3LogicOpEnable) ||
      (s1->extendedDynamicState3ColorBlendEnable != s2->extendedDynamicState3ColorBlendEnable) ||
      (s1->extendedDynamicState3ColorBlendEquation !=
       s2->extendedDynamicState3ColorBlendEquation) ||
      (s1->extendedDynamicState3ColorWriteMask != s2->extendedDynamicState3ColorWriteMask) ||
      (s1->extendedDynamicState3RasterizationStream !=
       s2->extendedDynamicState3RasterizationStream) ||
      (s1->extendedDynamicState3ConservativeRasterizationMode !=
       s2->extendedDynamicState3ConservativeRasterizationMode) ||
      (s1->extendedDynamicState3ExtraPrimitiveOverestimationSize !=
       s2->extendedDynamicState3ExtraPrimitiveOverestimationSize) ||
      (s1->extendedDynamicState3DepthClipEnable != s2->extendedDynamicState3DepthClipEnable) ||
      (s1->extendedDynamicState3SampleLocationsEnable !=
       s2->extendedDynamicState3SampleLocationsEnable) ||
      (s1->extendedDynamicState3ColorBlendAdvanced !=
       s2->extendedDynamicState3ColorBlendAdvanced) ||
      (s1->extendedDynamicState3ProvokingVertexMode !=
       s2->extendedDynamicState3ProvokingVertexMode) ||
      (s1->extendedDynamicState3LineRasterizationMode !=
       s2->extendedDynamicState3LineRasterizationMode) ||
      (s1->extendedDynamicState3LineStippleEnable != s2->extendedDynamicState3LineStippleEnable) ||
      (s1->extendedDynamicState3DepthClipNegativeOneToOne !=
       s2->extendedDynamicState3DepthClipNegativeOneToOne) ||
      (s1->extendedDynamicState3ViewportWScalingEnable !=
       s2->extendedDynamicState3ViewportWScalingEnable) ||
      (s1->extendedDynamicState3ViewportSwizzle != s2->extendedDynamicState3ViewportSwizzle) ||
      (s1->extendedDynamicState3CoverageToColorEnable !=
       s2->extendedDynamicState3CoverageToColorEnable) ||
      (s1->extendedDynamicState3CoverageToColorLocation !=
       s2->extendedDynamicState3CoverageToColorLocation) ||
      (s1->extendedDynamicState3CoverageModulationMode !=
       s2->extendedDynamicState3CoverageModulationMode) ||
      (s1->extendedDynamicState3CoverageModulationTableEnable !=
       s2->extendedDynamicState3CoverageModulationTableEnable) ||
      (s1->extendedDynamicState3CoverageModulationTable !=
       s2->extendedDynamicState3CoverageModulationTable) ||
      (s1->extendedDynamicState3CoverageReductionMode !=
       s2->extendedDynamicState3CoverageReductionMode) ||
      (s1->extendedDynamicState3RepresentativeFragmentTestEnable !=
       s2->extendedDynamicState3RepresentativeFragmentTestEnable) ||
      (s1->extendedDynamicState3ShadingRateImageEnable !=
       s2->extendedDynamicState3ShadingRateImageEnable))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(
    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT const *s2) {
  // local, simple types
  if ((s1->dynamicPrimitiveTopologyUnrestricted != s2->dynamicPrimitiveTopologyUnrestricted))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 145 && VK_EXT_extended_dynamic_state
bool compare_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->extendedDynamicState != s2->extendedDynamicState))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 267 && VK_NV_extended_sparse_address_space
bool compare_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(
    VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV const *s1,
    VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV const *s2) {
  // local, simple types
  if ((s1->extendedSparseAddressSpace != s2->extendedSparseAddressSpace))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 267 && VK_NV_extended_sparse_address_space
bool compare_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV(
    VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV const *s1,
    VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV const *s2) {
  // local, simple types
  if ((s1->extendedSparseAddressSpaceSize != s2->extendedSparseAddressSpaceSize) ||
      (s1->extendedSparseImageUsageFlags != s2->extendedSparseImageUsageFlags) ||
      (s1->extendedSparseBufferUsageFlags != s2->extendedSparseBufferUsageFlags))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalBufferInfo(VkPhysicalDeviceExternalBufferInfo const *s1,
                                                VkPhysicalDeviceExternalBufferInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->usage != s2->usage) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkPhysicalDeviceExternalBufferInfoKHR(
    VkPhysicalDeviceExternalBufferInfoKHR const *s1,
    VkPhysicalDeviceExternalBufferInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->usage != s2->usage) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue
bool compare_VkPhysicalDeviceExternalComputeQueuePropertiesNV(
    VkPhysicalDeviceExternalComputeQueuePropertiesNV const *s1,
    VkPhysicalDeviceExternalComputeQueuePropertiesNV const *s2) {
  // local, simple types
  if ((s1->externalDataSize != s2->externalDataSize) ||
      (s1->maxExternalQueues != s2->maxExternalQueues))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalFenceInfo(VkPhysicalDeviceExternalFenceInfo const *s1,
                                               VkPhysicalDeviceExternalFenceInfo const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_capabilities
bool compare_VkPhysicalDeviceExternalFenceInfoKHR(VkPhysicalDeviceExternalFenceInfoKHR const *s1,
                                                  VkPhysicalDeviceExternalFenceInfoKHR const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve
bool compare_VkPhysicalDeviceExternalFormatResolveFeaturesANDROID(
    VkPhysicalDeviceExternalFormatResolveFeaturesANDROID const *s1,
    VkPhysicalDeviceExternalFormatResolveFeaturesANDROID const *s2) {
  // local, simple types
  if ((s1->externalFormatResolve != s2->externalFormatResolve))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve
bool compare_VkPhysicalDeviceExternalFormatResolvePropertiesANDROID(
    VkPhysicalDeviceExternalFormatResolvePropertiesANDROID const *s1,
    VkPhysicalDeviceExternalFormatResolvePropertiesANDROID const *s2) {
  // local, simple types
  if ((s1->nullColorAttachmentWithExternalFormatResolve !=
       s2->nullColorAttachmentWithExternalFormatResolve) ||
      (s1->externalFormatResolveChromaOffsetX != s2->externalFormatResolveChromaOffsetX) ||
      (s1->externalFormatResolveChromaOffsetY != s2->externalFormatResolveChromaOffsetY))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalImageFormatInfo(
    VkPhysicalDeviceExternalImageFormatInfo const *s1,
    VkPhysicalDeviceExternalImageFormatInfo const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkPhysicalDeviceExternalImageFormatInfoKHR(
    VkPhysicalDeviceExternalImageFormatInfoKHR const *s1,
    VkPhysicalDeviceExternalImageFormatInfoKHR const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_EXT_external_memory_host
bool compare_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *s1,
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->minImportedHostPointerAlignment != s2->minImportedHostPointerAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
bool compare_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *s1,
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *s2) {
  // local, simple types
  if ((s1->externalMemoryRDMA != s2->externalMemoryRDMA))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkPhysicalDeviceExternalMemorySciBufFeaturesNV(
    VkPhysicalDeviceExternalMemorySciBufFeaturesNV const *s1,
    VkPhysicalDeviceExternalMemorySciBufFeaturesNV const *s2) {
  // local, simple types
  if ((s1->sciBufImport != s2->sciBufImport) || (s1->sciBufExport != s2->sciBufExport))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer
bool compare_VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX(
    VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX const *s1,
    VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX const *s2) {
  // local, simple types
  if ((s1->screenBufferImport != s2->screenBufferImport))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf
bool compare_VkPhysicalDeviceExternalSciBufFeaturesNV(
    VkPhysicalDeviceExternalSciBufFeaturesNV const *s1,
    VkPhysicalDeviceExternalSciBufFeaturesNV const *s2) {
  // local, simple types
  if ((s1->sciBufImport != s2->sciBufImport) || (s1->sciBufExport != s2->sciBufExport))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2
bool compare_VkPhysicalDeviceExternalSciSync2FeaturesNV(
    VkPhysicalDeviceExternalSciSync2FeaturesNV const *s1,
    VkPhysicalDeviceExternalSciSync2FeaturesNV const *s2) {
  // local, simple types
  if ((s1->sciSyncFence != s2->sciSyncFence) || (s1->sciSyncSemaphore2 != s2->sciSyncSemaphore2) ||
      (s1->sciSyncImport != s2->sciSyncImport) || (s1->sciSyncExport != s2->sciSyncExport))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync
bool compare_VkPhysicalDeviceExternalSciSyncFeaturesNV(
    VkPhysicalDeviceExternalSciSyncFeaturesNV const *s1,
    VkPhysicalDeviceExternalSciSyncFeaturesNV const *s2) {
  // local, simple types
  if ((s1->sciSyncFence != s2->sciSyncFence) || (s1->sciSyncSemaphore != s2->sciSyncSemaphore) ||
      (s1->sciSyncImport != s2->sciSyncImport) || (s1->sciSyncExport != s2->sciSyncExport))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalSemaphoreInfo(
    VkPhysicalDeviceExternalSemaphoreInfo const *s1,
    VkPhysicalDeviceExternalSemaphoreInfo const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_capabilities
bool compare_VkPhysicalDeviceExternalSemaphoreInfoKHR(
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *s1,
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *s2) {
  // local, simple types
  if ((s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkPhysicalDeviceExternalTensorInfoARM(
    VkPhysicalDeviceExternalTensorInfoARM const *s1,
    VkPhysicalDeviceExternalTensorInfoARM const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkPhysicalDeviceFaultFeaturesEXT(VkPhysicalDeviceFaultFeaturesEXT const *s1,
                                              VkPhysicalDeviceFaultFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->deviceFault != s2->deviceFault) ||
      (s1->deviceFaultVendorBinary != s2->deviceFaultVendorBinary))
    return false;

  return true;
}
#endif

bool compare_VkPhysicalDeviceFeatures(VkPhysicalDeviceFeatures const *s1,
                                      VkPhysicalDeviceFeatures const *s2) {
  // local, simple types
  if ((s1->robustBufferAccess != s2->robustBufferAccess) ||
      (s1->fullDrawIndexUint32 != s2->fullDrawIndexUint32) ||
      (s1->imageCubeArray != s2->imageCubeArray) ||
      (s1->independentBlend != s2->independentBlend) ||
      (s1->geometryShader != s2->geometryShader) ||
      (s1->tessellationShader != s2->tessellationShader) ||
      (s1->sampleRateShading != s2->sampleRateShading) || (s1->dualSrcBlend != s2->dualSrcBlend) ||
      (s1->logicOp != s2->logicOp) || (s1->multiDrawIndirect != s2->multiDrawIndirect) ||
      (s1->drawIndirectFirstInstance != s2->drawIndirectFirstInstance) ||
      (s1->depthClamp != s2->depthClamp) || (s1->depthBiasClamp != s2->depthBiasClamp) ||
      (s1->fillModeNonSolid != s2->fillModeNonSolid) || (s1->depthBounds != s2->depthBounds) ||
      (s1->wideLines != s2->wideLines) || (s1->largePoints != s2->largePoints) ||
      (s1->alphaToOne != s2->alphaToOne) || (s1->multiViewport != s2->multiViewport) ||
      (s1->samplerAnisotropy != s2->samplerAnisotropy) ||
      (s1->textureCompressionETC2 != s2->textureCompressionETC2) ||
      (s1->textureCompressionASTC_LDR != s2->textureCompressionASTC_LDR) ||
      (s1->textureCompressionBC != s2->textureCompressionBC) ||
      (s1->occlusionQueryPrecise != s2->occlusionQueryPrecise) ||
      (s1->pipelineStatisticsQuery != s2->pipelineStatisticsQuery) ||
      (s1->vertexPipelineStoresAndAtomics != s2->vertexPipelineStoresAndAtomics) ||
      (s1->fragmentStoresAndAtomics != s2->fragmentStoresAndAtomics) ||
      (s1->shaderTessellationAndGeometryPointSize != s2->shaderTessellationAndGeometryPointSize) ||
      (s1->shaderImageGatherExtended != s2->shaderImageGatherExtended) ||
      (s1->shaderStorageImageExtendedFormats != s2->shaderStorageImageExtendedFormats) ||
      (s1->shaderStorageImageMultisample != s2->shaderStorageImageMultisample) ||
      (s1->shaderStorageImageReadWithoutFormat != s2->shaderStorageImageReadWithoutFormat) ||
      (s1->shaderStorageImageWriteWithoutFormat != s2->shaderStorageImageWriteWithoutFormat) ||
      (s1->shaderUniformBufferArrayDynamicIndexing !=
       s2->shaderUniformBufferArrayDynamicIndexing) ||
      (s1->shaderSampledImageArrayDynamicIndexing != s2->shaderSampledImageArrayDynamicIndexing) ||
      (s1->shaderStorageBufferArrayDynamicIndexing !=
       s2->shaderStorageBufferArrayDynamicIndexing) ||
      (s1->shaderStorageImageArrayDynamicIndexing != s2->shaderStorageImageArrayDynamicIndexing) ||
      (s1->shaderClipDistance != s2->shaderClipDistance) ||
      (s1->shaderCullDistance != s2->shaderCullDistance) ||
      (s1->shaderFloat64 != s2->shaderFloat64) || (s1->shaderInt64 != s2->shaderInt64) ||
      (s1->shaderInt16 != s2->shaderInt16) ||
      (s1->shaderResourceResidency != s2->shaderResourceResidency) ||
      (s1->shaderResourceMinLod != s2->shaderResourceMinLod) ||
      (s1->sparseBinding != s2->sparseBinding) ||
      (s1->sparseResidencyBuffer != s2->sparseResidencyBuffer) ||
      (s1->sparseResidencyImage2D != s2->sparseResidencyImage2D) ||
      (s1->sparseResidencyImage3D != s2->sparseResidencyImage3D) ||
      (s1->sparseResidency2Samples != s2->sparseResidency2Samples) ||
      (s1->sparseResidency4Samples != s2->sparseResidency4Samples) ||
      (s1->sparseResidency8Samples != s2->sparseResidency8Samples) ||
      (s1->sparseResidency16Samples != s2->sparseResidency16Samples) ||
      (s1->sparseResidencyAliased != s2->sparseResidencyAliased) ||
      (s1->variableMultisampleRate != s2->variableMultisampleRate) ||
      (s1->inheritedQueries != s2->inheritedQueries))
    return false;

  return true;
}

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceFeatures2(VkPhysicalDeviceFeatures2 const *s1,
                                       VkPhysicalDeviceFeatures2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkPhysicalDeviceFeatures(&s1->features, &s2->features))
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceFeatures2KHR(VkPhysicalDeviceFeatures2KHR const *s1,
                                          VkPhysicalDeviceFeatures2KHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 95 && VK_HEADER_VERSION <= 114 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderFloat16 != s2->shaderFloat16) || (s1->shaderInt8 != s2->shaderInt8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 115 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderFloat16 != s2->shaderFloat16) || (s1->shaderInt8 != s2->shaderInt8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderFloat16 != s2->shaderFloat16) || (s1->shaderInt8 != s2->shaderInt8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceFloatControlsProperties(
    VkPhysicalDeviceFloatControlsProperties const *s1,
    VkPhysicalDeviceFloatControlsProperties const *s2) {
  // local, simple types
  if ((s1->denormBehaviorIndependence != s2->denormBehaviorIndependence) ||
      (s1->roundingModeIndependence != s2->roundingModeIndependence) ||
      (s1->shaderSignedZeroInfNanPreserveFloat16 != s2->shaderSignedZeroInfNanPreserveFloat16) ||
      (s1->shaderSignedZeroInfNanPreserveFloat32 != s2->shaderSignedZeroInfNanPreserveFloat32) ||
      (s1->shaderSignedZeroInfNanPreserveFloat64 != s2->shaderSignedZeroInfNanPreserveFloat64) ||
      (s1->shaderDenormPreserveFloat16 != s2->shaderDenormPreserveFloat16) ||
      (s1->shaderDenormPreserveFloat32 != s2->shaderDenormPreserveFloat32) ||
      (s1->shaderDenormPreserveFloat64 != s2->shaderDenormPreserveFloat64) ||
      (s1->shaderDenormFlushToZeroFloat16 != s2->shaderDenormFlushToZeroFloat16) ||
      (s1->shaderDenormFlushToZeroFloat32 != s2->shaderDenormFlushToZeroFloat32) ||
      (s1->shaderDenormFlushToZeroFloat64 != s2->shaderDenormFlushToZeroFloat64) ||
      (s1->shaderRoundingModeRTEFloat16 != s2->shaderRoundingModeRTEFloat16) ||
      (s1->shaderRoundingModeRTEFloat32 != s2->shaderRoundingModeRTEFloat32) ||
      (s1->shaderRoundingModeRTEFloat64 != s2->shaderRoundingModeRTEFloat64) ||
      (s1->shaderRoundingModeRTZFloat16 != s2->shaderRoundingModeRTZFloat16) ||
      (s1->shaderRoundingModeRTZFloat32 != s2->shaderRoundingModeRTZFloat32) ||
      (s1->shaderRoundingModeRTZFloat64 != s2->shaderRoundingModeRTZFloat64))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 95 && VK_HEADER_VERSION <= 115 && VK_KHR_shader_float_controls
bool compare_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s1,
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->separateDenormSettings != s2->separateDenormSettings) ||
      (s1->separateRoundingModeSettings != s2->separateRoundingModeSettings) ||
      (s1->shaderSignedZeroInfNanPreserveFloat16 != s2->shaderSignedZeroInfNanPreserveFloat16) ||
      (s1->shaderSignedZeroInfNanPreserveFloat32 != s2->shaderSignedZeroInfNanPreserveFloat32) ||
      (s1->shaderSignedZeroInfNanPreserveFloat64 != s2->shaderSignedZeroInfNanPreserveFloat64) ||
      (s1->shaderDenormPreserveFloat16 != s2->shaderDenormPreserveFloat16) ||
      (s1->shaderDenormPreserveFloat32 != s2->shaderDenormPreserveFloat32) ||
      (s1->shaderDenormPreserveFloat64 != s2->shaderDenormPreserveFloat64) ||
      (s1->shaderDenormFlushToZeroFloat16 != s2->shaderDenormFlushToZeroFloat16) ||
      (s1->shaderDenormFlushToZeroFloat32 != s2->shaderDenormFlushToZeroFloat32) ||
      (s1->shaderDenormFlushToZeroFloat64 != s2->shaderDenormFlushToZeroFloat64) ||
      (s1->shaderRoundingModeRTEFloat16 != s2->shaderRoundingModeRTEFloat16) ||
      (s1->shaderRoundingModeRTEFloat32 != s2->shaderRoundingModeRTEFloat32) ||
      (s1->shaderRoundingModeRTEFloat64 != s2->shaderRoundingModeRTEFloat64) ||
      (s1->shaderRoundingModeRTZFloat16 != s2->shaderRoundingModeRTZFloat16) ||
      (s1->shaderRoundingModeRTZFloat32 != s2->shaderRoundingModeRTZFloat32) ||
      (s1->shaderRoundingModeRTZFloat64 != s2->shaderRoundingModeRTZFloat64))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float_controls
bool compare_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s1,
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->denormBehaviorIndependence != s2->denormBehaviorIndependence) ||
      (s1->roundingModeIndependence != s2->roundingModeIndependence) ||
      (s1->shaderSignedZeroInfNanPreserveFloat16 != s2->shaderSignedZeroInfNanPreserveFloat16) ||
      (s1->shaderSignedZeroInfNanPreserveFloat32 != s2->shaderSignedZeroInfNanPreserveFloat32) ||
      (s1->shaderSignedZeroInfNanPreserveFloat64 != s2->shaderSignedZeroInfNanPreserveFloat64) ||
      (s1->shaderDenormPreserveFloat16 != s2->shaderDenormPreserveFloat16) ||
      (s1->shaderDenormPreserveFloat32 != s2->shaderDenormPreserveFloat32) ||
      (s1->shaderDenormPreserveFloat64 != s2->shaderDenormPreserveFloat64) ||
      (s1->shaderDenormFlushToZeroFloat16 != s2->shaderDenormFlushToZeroFloat16) ||
      (s1->shaderDenormFlushToZeroFloat32 != s2->shaderDenormFlushToZeroFloat32) ||
      (s1->shaderDenormFlushToZeroFloat64 != s2->shaderDenormFlushToZeroFloat64) ||
      (s1->shaderRoundingModeRTEFloat16 != s2->shaderRoundingModeRTEFloat16) ||
      (s1->shaderRoundingModeRTEFloat32 != s2->shaderRoundingModeRTEFloat32) ||
      (s1->shaderRoundingModeRTEFloat64 != s2->shaderRoundingModeRTEFloat64) ||
      (s1->shaderRoundingModeRTZFloat16 != s2->shaderRoundingModeRTZFloat16) ||
      (s1->shaderRoundingModeRTZFloat32 != s2->shaderRoundingModeRTZFloat32) ||
      (s1->shaderRoundingModeRTZFloat64 != s2->shaderRoundingModeRTZFloat64))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_shader_float_controls
bool compare_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s1,
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->denormBehaviorIndependence != s2->denormBehaviorIndependence) ||
      (s1->roundingModeIndependence != s2->roundingModeIndependence) ||
      (s1->shaderSignedZeroInfNanPreserveFloat16 != s2->shaderSignedZeroInfNanPreserveFloat16) ||
      (s1->shaderSignedZeroInfNanPreserveFloat32 != s2->shaderSignedZeroInfNanPreserveFloat32) ||
      (s1->shaderSignedZeroInfNanPreserveFloat64 != s2->shaderSignedZeroInfNanPreserveFloat64) ||
      (s1->shaderDenormPreserveFloat16 != s2->shaderDenormPreserveFloat16) ||
      (s1->shaderDenormPreserveFloat32 != s2->shaderDenormPreserveFloat32) ||
      (s1->shaderDenormPreserveFloat64 != s2->shaderDenormPreserveFloat64) ||
      (s1->shaderDenormFlushToZeroFloat16 != s2->shaderDenormFlushToZeroFloat16) ||
      (s1->shaderDenormFlushToZeroFloat32 != s2->shaderDenormFlushToZeroFloat32) ||
      (s1->shaderDenormFlushToZeroFloat64 != s2->shaderDenormFlushToZeroFloat64) ||
      (s1->shaderRoundingModeRTEFloat16 != s2->shaderRoundingModeRTEFloat16) ||
      (s1->shaderRoundingModeRTEFloat32 != s2->shaderRoundingModeRTEFloat32) ||
      (s1->shaderRoundingModeRTEFloat64 != s2->shaderRoundingModeRTEFloat64) ||
      (s1->shaderRoundingModeRTZFloat16 != s2->shaderRoundingModeRTZFloat16) ||
      (s1->shaderRoundingModeRTZFloat32 != s2->shaderRoundingModeRTZFloat32) ||
      (s1->shaderRoundingModeRTZFloat64 != s2->shaderRoundingModeRTZFloat64))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 316 && VK_ARM_format_pack
bool compare_VkPhysicalDeviceFormatPackFeaturesARM(
    VkPhysicalDeviceFormatPackFeaturesARM const *s1,
    VkPhysicalDeviceFormatPackFeaturesARM const *s2) {
  // local, simple types
  if ((s1->formatPack != s2->formatPack))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
bool compare_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->fragmentDensityMapDeferred != s2->fragmentDensityMapDeferred))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
bool compare_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *s2) {
  // local, simple types
  if ((s1->subsampledLoads != s2->subsampledLoads) ||
      (s1->subsampledCoarseReconstructionEarlyAccess !=
       s2->subsampledCoarseReconstructionEarlyAccess) ||
      (s1->maxSubsampledArrayLayers != s2->maxSubsampledArrayLayers) ||
      (s1->maxDescriptorSetSubsampledSamplers != s2->maxDescriptorSetSubsampledSamplers))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->fragmentDensityMap != s2->fragmentDensityMap) ||
      (s1->fragmentDensityMapDynamic != s2->fragmentDensityMapDynamic) ||
      (s1->fragmentDensityMapNonSubsampledImages != s2->fragmentDensityMapNonSubsampledImages))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered
bool compare_VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE(
    VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE const *s1,
    VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE const *s2) {
  // local, simple types
  if ((s1->fragmentDensityMapLayered != s2->fragmentDensityMapLayered))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered
bool compare_VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE(
    VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE const *s1,
    VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE const *s2) {
  // local, simple types
  if ((s1->maxFragmentDensityMapLayers != s2->maxFragmentDensityMapLayers))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->fragmentDensityMapOffset != s2->fragmentDensityMapOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->fragmentDensityMapOffset != s2->fragmentDensityMapOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->fragmentDensityMapOffset != s2->fragmentDensityMapOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->fragmentDensityOffsetGranularity,
                          &s2->fragmentDensityOffsetGranularity))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->fragmentDensityOffsetGranularity,
                          &s2->fragmentDensityOffsetGranularity))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->fragmentDensityInvocations != s2->fragmentDensityInvocations))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->minFragmentDensityTexelSize, &s2->minFragmentDensityTexelSize) ||
      !compare_VkExtent2D(&s1->maxFragmentDensityTexelSize, &s2->maxFragmentDensityTexelSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->fragmentShaderBarycentric != s2->fragmentShaderBarycentric))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 214 && VK_NV_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s2) {
  // local, simple types
  if ((s1->fragmentShaderBarycentric != s2->fragmentShaderBarycentric))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 215 && VK_NV_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s2) {
  // local, simple types
  if ((s1->fragmentShaderBarycentric != s2->fragmentShaderBarycentric))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->triStripVertexOrderIndependentOfProvokingVertex !=
       s2->triStripVertexOrderIndependentOfProvokingVertex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 110 && VK_EXT_fragment_shader_interlock
bool compare_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *s1,
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->fragmentShaderSampleInterlock != s2->fragmentShaderSampleInterlock) ||
      (s1->fragmentShaderPixelInterlock != s2->fragmentShaderPixelInterlock) ||
      (s1->fragmentShaderShadingRateInterlock != s2->fragmentShaderShadingRateInterlock))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *s1,
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *s2) {
  // local, simple types
  if ((s1->fragmentShadingRateEnums != s2->fragmentShadingRateEnums) ||
      (s1->supersampleFragmentShadingRates != s2->supersampleFragmentShadingRates) ||
      (s1->noInvocationFragmentShadingRates != s2->noInvocationFragmentShadingRates))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *s1,
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *s2) {
  // local, simple types
  if ((s1->maxFragmentShadingRateInvocationCount != s2->maxFragmentShadingRateInvocationCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRateFeaturesKHR(
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *s1,
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->pipelineFragmentShadingRate != s2->pipelineFragmentShadingRate) ||
      (s1->primitiveFragmentShadingRate != s2->primitiveFragmentShadingRate) ||
      (s1->attachmentFragmentShadingRate != s2->attachmentFragmentShadingRate))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRateKHR(
    VkPhysicalDeviceFragmentShadingRateKHR const *s1,
    VkPhysicalDeviceFragmentShadingRateKHR const *s2) {
  // local, simple types
  if ((s1->sampleCounts != s2->sampleCounts))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->fragmentSize, &s2->fragmentSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRatePropertiesKHR(
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *s1,
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxFragmentShadingRateAttachmentTexelSizeAspectRatio !=
       s2->maxFragmentShadingRateAttachmentTexelSizeAspectRatio) ||
      (s1->primitiveFragmentShadingRateWithMultipleViewports !=
       s2->primitiveFragmentShadingRateWithMultipleViewports) ||
      (s1->layeredShadingRateAttachments != s2->layeredShadingRateAttachments) ||
      (s1->fragmentShadingRateNonTrivialCombinerOps !=
       s2->fragmentShadingRateNonTrivialCombinerOps) ||
      (s1->maxFragmentSizeAspectRatio != s2->maxFragmentSizeAspectRatio) ||
      (s1->maxFragmentShadingRateCoverageSamples != s2->maxFragmentShadingRateCoverageSamples) ||
      (s1->maxFragmentShadingRateRasterizationSamples !=
       s2->maxFragmentShadingRateRasterizationSamples) ||
      (s1->fragmentShadingRateWithShaderDepthStencilWrites !=
       s2->fragmentShadingRateWithShaderDepthStencilWrites) ||
      (s1->fragmentShadingRateWithSampleMask != s2->fragmentShadingRateWithSampleMask) ||
      (s1->fragmentShadingRateWithShaderSampleMask !=
       s2->fragmentShadingRateWithShaderSampleMask) ||
      (s1->fragmentShadingRateWithConservativeRasterization !=
       s2->fragmentShadingRateWithConservativeRasterization) ||
      (s1->fragmentShadingRateWithFragmentShaderInterlock !=
       s2->fragmentShadingRateWithFragmentShaderInterlock) ||
      (s1->fragmentShadingRateWithCustomSampleLocations !=
       s2->fragmentShadingRateWithCustomSampleLocations) ||
      (s1->fragmentShadingRateStrictMultiplyCombiner !=
       s2->fragmentShadingRateStrictMultiplyCombiner))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->minFragmentShadingRateAttachmentTexelSize,
                          &s2->minFragmentShadingRateAttachmentTexelSize) ||
      !compare_VkExtent2D(&s1->maxFragmentShadingRateAttachmentTexelSize,
                          &s2->maxFragmentShadingRateAttachmentTexelSize) ||
      !compare_VkExtent2D(&s1->maxFragmentSize, &s2->maxFragmentSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 264 && VK_EXT_frame_boundary
bool compare_VkPhysicalDeviceFrameBoundaryFeaturesEXT(
    VkPhysicalDeviceFrameBoundaryFeaturesEXT const *s1,
    VkPhysicalDeviceFrameBoundaryFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->frameBoundary != s2->frameBoundary))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeatures(
    VkPhysicalDeviceGlobalPriorityQueryFeatures const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeatures const *s2) {
  // local, simple types
  if ((s1->globalPriorityQuery != s2->globalPriorityQuery))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 180 && VK_HEADER_VERSION <= 203 && VK_EXT_global_priority_query
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->globalPriorityQuery != s2->globalPriorityQuery))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority_query
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->globalPriorityQuery != s2->globalPriorityQuery))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_global_priority_query
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->globalPriorityQuery != s2->globalPriorityQuery))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->globalPriorityQuery != s2->globalPriorityQuery))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_global_priority
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->globalPriorityQuery != s2->globalPriorityQuery))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT const *s1,
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->graphicsPipelineLibrary != s2->graphicsPipelineLibrary))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT const *s1,
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->graphicsPipelineLibraryFastLinking != s2->graphicsPipelineLibraryFastLinking) ||
      (s1->graphicsPipelineLibraryIndependentInterpolationDecoration !=
       s2->graphicsPipelineLibraryIndependentInterpolationDecoration))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceGroupProperties(VkPhysicalDeviceGroupProperties const *s1,
                                             VkPhysicalDeviceGroupProperties const *s2) {
  // local, simple types
  if ((s1->physicalDeviceCount != s2->physicalDeviceCount) ||
      (s1->subsetAllocation != s2->subsetAllocation))
    return false;

  // local array members
  if (memcmp(s1->physicalDevices, s2->physicalDevices, s1->physicalDeviceCount) != 0)
    return false;
  return true;
}
#endif

#if VK_KHR_device_group_creation
bool compare_VkPhysicalDeviceGroupPropertiesKHR(VkPhysicalDeviceGroupPropertiesKHR const *s1,
                                                VkPhysicalDeviceGroupPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->physicalDeviceCount != s2->physicalDeviceCount) ||
      (s1->subsetAllocation != s2->subsetAllocation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 301 && VK_HUAWEI_hdr_vivid
bool compare_VkPhysicalDeviceHdrVividFeaturesHUAWEI(
    VkPhysicalDeviceHdrVividFeaturesHUAWEI const *s1,
    VkPhysicalDeviceHdrVividFeaturesHUAWEI const *s2) {
  // local, simple types
  if ((s1->hdrVivid != s2->hdrVivid))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceHostImageCopyFeatures(
    VkPhysicalDeviceHostImageCopyFeatures const *s1,
    VkPhysicalDeviceHostImageCopyFeatures const *s2) {
  // local, simple types
  if ((s1->hostImageCopy != s2->hostImageCopy))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkPhysicalDeviceHostImageCopyFeaturesEXT(
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *s1,
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->hostImageCopy != s2->hostImageCopy))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkPhysicalDeviceHostImageCopyFeaturesEXT(
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *s1,
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->hostImageCopy != s2->hostImageCopy))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceHostImageCopyProperties(
    VkPhysicalDeviceHostImageCopyProperties const *s1,
    VkPhysicalDeviceHostImageCopyProperties const *s2) {
  // local, simple types
  if ((s1->copySrcLayoutCount != s2->copySrcLayoutCount) ||
      (s1->copyDstLayoutCount != s2->copyDstLayoutCount) ||
      (s1->identicalMemoryTypeRequirements != s2->identicalMemoryTypeRequirements))
    return false;

  // local array members
  if (memcmp(s1->optimalTilingLayoutUUID, s2->optimalTilingLayoutUUID,
             VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  // non-local members

  // pCopySrcLayouts - copySrcLayoutCount
  if (s1->pCopySrcLayouts != s2->pCopySrcLayouts &&
      (s1->pCopySrcLayouts == NULL || s2->pCopySrcLayouts == NULL ||
       memcmp(s1->pCopySrcLayouts, s2->pCopySrcLayouts,
              (s1->copySrcLayoutCount) * sizeof(VkImageLayout)) != 0))
    return false;

  // pCopyDstLayouts - copyDstLayoutCount
  if (s1->pCopyDstLayouts != s2->pCopyDstLayouts &&
      (s1->pCopyDstLayouts == NULL || s2->pCopyDstLayouts == NULL ||
       memcmp(s1->pCopyDstLayouts, s2->pCopyDstLayouts,
              (s1->copyDstLayoutCount) * sizeof(VkImageLayout)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkPhysicalDeviceHostImageCopyPropertiesEXT(
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *s1,
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->copySrcLayoutCount != s2->copySrcLayoutCount) ||
      (s1->copyDstLayoutCount != s2->copyDstLayoutCount) ||
      (s1->identicalMemoryTypeRequirements != s2->identicalMemoryTypeRequirements))
    return false;

  // local array members
  if (memcmp(s1->optimalTilingLayoutUUID, s2->optimalTilingLayoutUUID,
             VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  // non-local members

  // pCopySrcLayouts - copySrcLayoutCount
  if (s1->pCopySrcLayouts != s2->pCopySrcLayouts &&
      (s1->pCopySrcLayouts == NULL || s2->pCopySrcLayouts == NULL ||
       memcmp(s1->pCopySrcLayouts, s2->pCopySrcLayouts,
              (s1->copySrcLayoutCount) * sizeof(VkImageLayout)) != 0))
    return false;

  // pCopyDstLayouts - copyDstLayoutCount
  if (s1->pCopyDstLayouts != s2->pCopyDstLayouts &&
      (s1->pCopyDstLayouts == NULL || s2->pCopyDstLayouts == NULL ||
       memcmp(s1->pCopyDstLayouts, s2->pCopyDstLayouts,
              (s1->copyDstLayoutCount) * sizeof(VkImageLayout)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkPhysicalDeviceHostImageCopyPropertiesEXT(
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *s1,
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->copySrcLayoutCount != s2->copySrcLayoutCount) ||
      (s1->copyDstLayoutCount != s2->copyDstLayoutCount) ||
      (s1->identicalMemoryTypeRequirements != s2->identicalMemoryTypeRequirements))
    return false;

  // non-local members

  // pCopySrcLayouts - copySrcLayoutCount
  if (s1->pCopySrcLayouts != s2->pCopySrcLayouts &&
      (s1->pCopySrcLayouts == NULL || s2->pCopySrcLayouts == NULL ||
       memcmp(s1->pCopySrcLayouts, s2->pCopySrcLayouts,
              (s1->copySrcLayoutCount) * sizeof(VkImageLayout)) != 0))
    return false;

  // pCopyDstLayouts - copyDstLayoutCount
  if (s1->pCopyDstLayouts != s2->pCopyDstLayouts &&
      (s1->pCopyDstLayouts == NULL || s2->pCopyDstLayouts == NULL ||
       memcmp(s1->pCopyDstLayouts, s2->pCopyDstLayouts,
              (s1->copyDstLayoutCount) * sizeof(VkImageLayout)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceHostQueryResetFeatures(
    VkPhysicalDeviceHostQueryResetFeatures const *s1,
    VkPhysicalDeviceHostQueryResetFeatures const *s2) {
  // local, simple types
  if ((s1->hostQueryReset != s2->hostQueryReset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 130 && VK_EXT_host_query_reset
bool compare_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s1,
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->hostQueryReset != s2->hostQueryReset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_host_query_reset
bool compare_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s1,
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->hostQueryReset != s2->hostQueryReset))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceIDProperties(VkPhysicalDeviceIDProperties const *s1,
                                          VkPhysicalDeviceIDProperties const *s2) {
  // local, simple types
  if ((s1->deviceNodeMask != s2->deviceNodeMask) || (s1->deviceLUIDValid != s2->deviceLUIDValid))
    return false;

  // local array members
  if (memcmp(s1->deviceUUID, s2->deviceUUID, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  if (memcmp(s1->driverUUID, s2->driverUUID, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  if (memcmp(s1->deviceLUID, s2->deviceLUID, VK_LUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_KHR_external_memory_capabilities && VK_KHR_external_semaphore_capabilities &&               \
    VK_KHR_external_fence_capabilities
bool compare_VkPhysicalDeviceIDPropertiesKHR(VkPhysicalDeviceIDPropertiesKHR const *s1,
                                             VkPhysicalDeviceIDPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->deviceNodeMask != s2->deviceNodeMask) || (s1->deviceLUIDValid != s2->deviceLUIDValid))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 211 && VK_EXT_image_2d_view_of_3d
bool compare_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(
    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT const *s1,
    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->image2DViewOf3D != s2->image2DViewOf3D) ||
      (s1->sampler2DViewOf3D != s2->sampler2DViewOf3D))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control
bool compare_VkPhysicalDeviceImageAlignmentControlFeaturesMESA(
    VkPhysicalDeviceImageAlignmentControlFeaturesMESA const *s1,
    VkPhysicalDeviceImageAlignmentControlFeaturesMESA const *s2) {
  // local, simple types
  if ((s1->imageAlignmentControl != s2->imageAlignmentControl))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control
bool compare_VkPhysicalDeviceImageAlignmentControlPropertiesMESA(
    VkPhysicalDeviceImageAlignmentControlPropertiesMESA const *s1,
    VkPhysicalDeviceImageAlignmentControlPropertiesMESA const *s2) {
  // local, simple types
  if ((s1->supportedImageAlignmentMask != s2->supportedImageAlignmentMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkPhysicalDeviceImageCompressionControlFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlFeaturesEXT const *s1,
    VkPhysicalDeviceImageCompressionControlFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->imageCompressionControl != s2->imageCompressionControl))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control_swapchain
bool compare_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT const *s1,
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->imageCompressionControlSwapchain != s2->imageCompressionControlSwapchain))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 87 && VK_EXT_image_drm_format_modifier
bool compare_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s1,
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s2) {
  // local, simple types
  if ((s1->drmFormatModifier != s2->drmFormatModifier))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_image_drm_format_modifier
bool compare_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s1,
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s2) {
  // local, simple types
  if ((s1->drmFormatModifier != s2->drmFormatModifier) || (s1->sharingMode != s2->sharingMode) ||
      (s1->queueFamilyIndexCount != s2->queueFamilyIndexCount))
    return false;

  // non-local members

  // pQueueFamilyIndices - queueFamilyIndexCount
  if (s1->pQueueFamilyIndices != s2->pQueueFamilyIndices &&
      (s1->pQueueFamilyIndices == NULL || s2->pQueueFamilyIndices == NULL ||
       memcmp(s1->pQueueFamilyIndices, s2->pQueueFamilyIndices,
              (s1->queueFamilyIndexCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceImageFormatInfo2(VkPhysicalDeviceImageFormatInfo2 const *s1,
                                              VkPhysicalDeviceImageFormatInfo2 const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->type != s2->type) || (s1->tiling != s2->tiling) ||
      (s1->usage != s2->usage) || (s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceImageFormatInfo2KHR(VkPhysicalDeviceImageFormatInfo2KHR const *s1,
                                                 VkPhysicalDeviceImageFormatInfo2KHR const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->type != s2->type) || (s1->tiling != s2->tiling) ||
      (s1->usage != s2->usage) || (s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2
bool compare_VkPhysicalDeviceImageProcessing2FeaturesQCOM(
    VkPhysicalDeviceImageProcessing2FeaturesQCOM const *s1,
    VkPhysicalDeviceImageProcessing2FeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->textureBlockMatch2 != s2->textureBlockMatch2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2
bool compare_VkPhysicalDeviceImageProcessing2PropertiesQCOM(
    VkPhysicalDeviceImageProcessing2PropertiesQCOM const *s1,
    VkPhysicalDeviceImageProcessing2PropertiesQCOM const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxBlockMatchWindow, &s2->maxBlockMatchWindow))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkPhysicalDeviceImageProcessingFeaturesQCOM(
    VkPhysicalDeviceImageProcessingFeaturesQCOM const *s1,
    VkPhysicalDeviceImageProcessingFeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->textureSampleWeighted != s2->textureSampleWeighted) ||
      (s1->textureBoxFilter != s2->textureBoxFilter) ||
      (s1->textureBlockMatch != s2->textureBlockMatch))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkPhysicalDeviceImageProcessingPropertiesQCOM(
    VkPhysicalDeviceImageProcessingPropertiesQCOM const *s1,
    VkPhysicalDeviceImageProcessingPropertiesQCOM const *s2) {
  // local, simple types
  if ((s1->maxWeightFilterPhases != s2->maxWeightFilterPhases))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxWeightFilterDimension, &s2->maxWeightFilterDimension) ||
      !compare_VkExtent2D(&s1->maxBlockMatchRegion, &s2->maxBlockMatchRegion) ||
      !compare_VkExtent2D(&s1->maxBoxFilterBlockSize, &s2->maxBoxFilterBlockSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceImageRobustnessFeatures(
    VkPhysicalDeviceImageRobustnessFeatures const *s1,
    VkPhysicalDeviceImageRobustnessFeatures const *s2) {
  // local, simple types
  if ((s1->robustImageAccess != s2->robustImageAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 148 && VK_HEADER_VERSION <= 203 && VK_EXT_image_robustness
bool compare_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s1,
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->robustImageAccess != s2->robustImageAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_image_robustness
bool compare_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s1,
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->robustImageAccess != s2->robustImageAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_EXT_image_sliced_view_of_3d
bool compare_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(
    VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT const *s1,
    VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->imageSlicedViewOf3D != s2->imageSlicedViewOf3D))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
bool compare_VkPhysicalDeviceImageViewImageFormatInfoEXT(
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *s1,
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *s2) {
  // local, simple types
  if ((s1->imageViewType != s2->imageViewType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod
bool compare_VkPhysicalDeviceImageViewMinLodFeaturesEXT(
    VkPhysicalDeviceImageViewMinLodFeaturesEXT const *s1,
    VkPhysicalDeviceImageViewMinLodFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->minLod != s2->minLod))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceImagelessFramebufferFeatures(
    VkPhysicalDeviceImagelessFramebufferFeatures const *s1,
    VkPhysicalDeviceImagelessFramebufferFeatures const *s2) {
  // local, simple types
  if ((s1->imagelessFramebuffer != s2->imagelessFramebuffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer
bool compare_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s1,
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->imagelessFramebuffer != s2->imagelessFramebuffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer
bool compare_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s1,
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->imagelessFramebuffer != s2->imagelessFramebuffer))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceIndexTypeUint8Features(
    VkPhysicalDeviceIndexTypeUint8Features const *s1,
    VkPhysicalDeviceIndexTypeUint8Features const *s2) {
  // local, simple types
  if ((s1->indexTypeUint8 != s2->indexTypeUint8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->indexTypeUint8 != s2->indexTypeUint8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->indexTypeUint8 != s2->indexTypeUint8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->indexTypeUint8 != s2->indexTypeUint8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesKHR(
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->indexTypeUint8 != s2->indexTypeUint8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesKHR(
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->indexTypeUint8 != s2->indexTypeUint8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
bool compare_VkPhysicalDeviceInheritedViewportScissorFeaturesNV(
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *s1,
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *s2) {
  // local, simple types
  if ((s1->inheritedViewportScissor2D != s2->inheritedViewportScissor2D))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceInlineUniformBlockFeatures(
    VkPhysicalDeviceInlineUniformBlockFeatures const *s1,
    VkPhysicalDeviceInlineUniformBlockFeatures const *s2) {
  // local, simple types
  if ((s1->inlineUniformBlock != s2->inlineUniformBlock) ||
      (s1->descriptorBindingInlineUniformBlockUpdateAfterBind !=
       s2->descriptorBindingInlineUniformBlockUpdateAfterBind))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->inlineUniformBlock != s2->inlineUniformBlock) ||
      (s1->descriptorBindingInlineUniformBlockUpdateAfterBind !=
       s2->descriptorBindingInlineUniformBlockUpdateAfterBind))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->inlineUniformBlock != s2->inlineUniformBlock) ||
      (s1->descriptorBindingInlineUniformBlockUpdateAfterBind !=
       s2->descriptorBindingInlineUniformBlockUpdateAfterBind))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceInlineUniformBlockProperties(
    VkPhysicalDeviceInlineUniformBlockProperties const *s1,
    VkPhysicalDeviceInlineUniformBlockProperties const *s2) {
  // local, simple types
  if ((s1->maxInlineUniformBlockSize != s2->maxInlineUniformBlockSize) ||
      (s1->maxPerStageDescriptorInlineUniformBlocks !=
       s2->maxPerStageDescriptorInlineUniformBlocks) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks !=
       s2->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks) ||
      (s1->maxDescriptorSetInlineUniformBlocks != s2->maxDescriptorSetInlineUniformBlocks) ||
      (s1->maxDescriptorSetUpdateAfterBindInlineUniformBlocks !=
       s2->maxDescriptorSetUpdateAfterBindInlineUniformBlocks))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxInlineUniformBlockSize != s2->maxInlineUniformBlockSize) ||
      (s1->maxPerStageDescriptorInlineUniformBlocks !=
       s2->maxPerStageDescriptorInlineUniformBlocks) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks !=
       s2->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks) ||
      (s1->maxDescriptorSetInlineUniformBlocks != s2->maxDescriptorSetInlineUniformBlocks) ||
      (s1->maxDescriptorSetUpdateAfterBindInlineUniformBlocks !=
       s2->maxDescriptorSetUpdateAfterBindInlineUniformBlocks))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxInlineUniformBlockSize != s2->maxInlineUniformBlockSize) ||
      (s1->maxPerStageDescriptorInlineUniformBlocks !=
       s2->maxPerStageDescriptorInlineUniformBlocks) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks !=
       s2->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks) ||
      (s1->maxDescriptorSetInlineUniformBlocks != s2->maxDescriptorSetInlineUniformBlocks) ||
      (s1->maxDescriptorSetUpdateAfterBindInlineUniformBlocks !=
       s2->maxDescriptorSetUpdateAfterBindInlineUniformBlocks))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_HUAWEI_invocation_mask
bool compare_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *s1,
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *s2) {
  // local, simple types
  if ((s1->invocationMask != s2->invocationMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7
bool compare_VkPhysicalDeviceLayeredApiPropertiesKHR(
    VkPhysicalDeviceLayeredApiPropertiesKHR const *s1,
    VkPhysicalDeviceLayeredApiPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->vendorID != s2->vendorID) || (s1->deviceID != s2->deviceID) ||
      (s1->layeredAPI != s2->layeredAPI))
    return false;

  // local array members
  if (memcmp(s1->deviceName, s2->deviceName, VK_MAX_PHYSICAL_DEVICE_NAME_SIZE * sizeof(char)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7
bool compare_VkPhysicalDeviceLayeredApiPropertiesListKHR(
    VkPhysicalDeviceLayeredApiPropertiesListKHR const *s1,
    VkPhysicalDeviceLayeredApiPropertiesListKHR const *s2) {
  // local, simple types
  if ((s1->layeredApiCount != s2->layeredApiCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7
bool compare_VkPhysicalDeviceLayeredApiVulkanPropertiesKHR(
    VkPhysicalDeviceLayeredApiVulkanPropertiesKHR const *s1,
    VkPhysicalDeviceLayeredApiVulkanPropertiesKHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkPhysicalDeviceProperties2(&s1->properties, &s2->properties))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 264 && VK_MSFT_layered_driver
bool compare_VkPhysicalDeviceLayeredDriverPropertiesMSFT(
    VkPhysicalDeviceLayeredDriverPropertiesMSFT const *s1,
    VkPhysicalDeviceLayeredDriverPropertiesMSFT const *s2) {
  // local, simple types
  if ((s1->underlyingAPI != s2->underlyingAPI))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 227 && VK_EXT_legacy_dithering
bool compare_VkPhysicalDeviceLegacyDitheringFeaturesEXT(
    VkPhysicalDeviceLegacyDitheringFeaturesEXT const *s1,
    VkPhysicalDeviceLegacyDitheringFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->legacyDithering != s2->legacyDithering))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 284 && VK_EXT_legacy_vertex_attributes
bool compare_VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT(
    VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT const *s1,
    VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->legacyVertexAttributes != s2->legacyVertexAttributes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 284 && VK_EXT_legacy_vertex_attributes
bool compare_VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT(
    VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT const *s1,
    VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->nativeUnalignedPerformance != s2->nativeUnalignedPerformance))
    return false;

  return true;
}
#endif

bool compare_VkPhysicalDeviceLimits(VkPhysicalDeviceLimits const *s1,
                                    VkPhysicalDeviceLimits const *s2) {
  // local, simple types
  if ((s1->maxImageDimension1D != s2->maxImageDimension1D) ||
      (s1->maxImageDimension2D != s2->maxImageDimension2D) ||
      (s1->maxImageDimension3D != s2->maxImageDimension3D) ||
      (s1->maxImageDimensionCube != s2->maxImageDimensionCube) ||
      (s1->maxImageArrayLayers != s2->maxImageArrayLayers) ||
      (s1->maxTexelBufferElements != s2->maxTexelBufferElements) ||
      (s1->maxUniformBufferRange != s2->maxUniformBufferRange) ||
      (s1->maxStorageBufferRange != s2->maxStorageBufferRange) ||
      (s1->maxPushConstantsSize != s2->maxPushConstantsSize) ||
      (s1->maxMemoryAllocationCount != s2->maxMemoryAllocationCount) ||
      (s1->maxSamplerAllocationCount != s2->maxSamplerAllocationCount) ||
      (s1->bufferImageGranularity != s2->bufferImageGranularity) ||
      (s1->sparseAddressSpaceSize != s2->sparseAddressSpaceSize) ||
      (s1->maxBoundDescriptorSets != s2->maxBoundDescriptorSets) ||
      (s1->maxPerStageDescriptorSamplers != s2->maxPerStageDescriptorSamplers) ||
      (s1->maxPerStageDescriptorUniformBuffers != s2->maxPerStageDescriptorUniformBuffers) ||
      (s1->maxPerStageDescriptorStorageBuffers != s2->maxPerStageDescriptorStorageBuffers) ||
      (s1->maxPerStageDescriptorSampledImages != s2->maxPerStageDescriptorSampledImages) ||
      (s1->maxPerStageDescriptorStorageImages != s2->maxPerStageDescriptorStorageImages) ||
      (s1->maxPerStageDescriptorInputAttachments != s2->maxPerStageDescriptorInputAttachments) ||
      (s1->maxPerStageResources != s2->maxPerStageResources) ||
      (s1->maxDescriptorSetSamplers != s2->maxDescriptorSetSamplers) ||
      (s1->maxDescriptorSetUniformBuffers != s2->maxDescriptorSetUniformBuffers) ||
      (s1->maxDescriptorSetUniformBuffersDynamic != s2->maxDescriptorSetUniformBuffersDynamic) ||
      (s1->maxDescriptorSetStorageBuffers != s2->maxDescriptorSetStorageBuffers) ||
      (s1->maxDescriptorSetStorageBuffersDynamic != s2->maxDescriptorSetStorageBuffersDynamic) ||
      (s1->maxDescriptorSetSampledImages != s2->maxDescriptorSetSampledImages) ||
      (s1->maxDescriptorSetStorageImages != s2->maxDescriptorSetStorageImages) ||
      (s1->maxDescriptorSetInputAttachments != s2->maxDescriptorSetInputAttachments) ||
      (s1->maxVertexInputAttributes != s2->maxVertexInputAttributes) ||
      (s1->maxVertexInputBindings != s2->maxVertexInputBindings) ||
      (s1->maxVertexInputAttributeOffset != s2->maxVertexInputAttributeOffset) ||
      (s1->maxVertexInputBindingStride != s2->maxVertexInputBindingStride) ||
      (s1->maxVertexOutputComponents != s2->maxVertexOutputComponents) ||
      (s1->maxTessellationGenerationLevel != s2->maxTessellationGenerationLevel) ||
      (s1->maxTessellationPatchSize != s2->maxTessellationPatchSize) ||
      (s1->maxTessellationControlPerVertexInputComponents !=
       s2->maxTessellationControlPerVertexInputComponents) ||
      (s1->maxTessellationControlPerVertexOutputComponents !=
       s2->maxTessellationControlPerVertexOutputComponents) ||
      (s1->maxTessellationControlPerPatchOutputComponents !=
       s2->maxTessellationControlPerPatchOutputComponents) ||
      (s1->maxTessellationControlTotalOutputComponents !=
       s2->maxTessellationControlTotalOutputComponents) ||
      (s1->maxTessellationEvaluationInputComponents !=
       s2->maxTessellationEvaluationInputComponents) ||
      (s1->maxTessellationEvaluationOutputComponents !=
       s2->maxTessellationEvaluationOutputComponents) ||
      (s1->maxGeometryShaderInvocations != s2->maxGeometryShaderInvocations) ||
      (s1->maxGeometryInputComponents != s2->maxGeometryInputComponents) ||
      (s1->maxGeometryOutputComponents != s2->maxGeometryOutputComponents) ||
      (s1->maxGeometryOutputVertices != s2->maxGeometryOutputVertices) ||
      (s1->maxGeometryTotalOutputComponents != s2->maxGeometryTotalOutputComponents) ||
      (s1->maxFragmentInputComponents != s2->maxFragmentInputComponents) ||
      (s1->maxFragmentOutputAttachments != s2->maxFragmentOutputAttachments) ||
      (s1->maxFragmentDualSrcAttachments != s2->maxFragmentDualSrcAttachments) ||
      (s1->maxFragmentCombinedOutputResources != s2->maxFragmentCombinedOutputResources) ||
      (s1->maxComputeSharedMemorySize != s2->maxComputeSharedMemorySize) ||
      (s1->maxComputeWorkGroupInvocations != s2->maxComputeWorkGroupInvocations) ||
      (s1->subPixelPrecisionBits != s2->subPixelPrecisionBits) ||
      (s1->subTexelPrecisionBits != s2->subTexelPrecisionBits) ||
      (s1->mipmapPrecisionBits != s2->mipmapPrecisionBits) ||
      (s1->maxDrawIndexedIndexValue != s2->maxDrawIndexedIndexValue) ||
      (s1->maxDrawIndirectCount != s2->maxDrawIndirectCount) ||
      (s1->maxSamplerLodBias != s2->maxSamplerLodBias) ||
      (s1->maxSamplerAnisotropy != s2->maxSamplerAnisotropy) ||
      (s1->maxViewports != s2->maxViewports) ||
      (s1->viewportSubPixelBits != s2->viewportSubPixelBits) ||
      (s1->minMemoryMapAlignment != s2->minMemoryMapAlignment) ||
      (s1->minTexelBufferOffsetAlignment != s2->minTexelBufferOffsetAlignment) ||
      (s1->minUniformBufferOffsetAlignment != s2->minUniformBufferOffsetAlignment) ||
      (s1->minStorageBufferOffsetAlignment != s2->minStorageBufferOffsetAlignment) ||
      (s1->minTexelOffset != s2->minTexelOffset) || (s1->maxTexelOffset != s2->maxTexelOffset) ||
      (s1->minTexelGatherOffset != s2->minTexelGatherOffset) ||
      (s1->maxTexelGatherOffset != s2->maxTexelGatherOffset) ||
      (s1->minInterpolationOffset != s2->minInterpolationOffset) ||
      (s1->maxInterpolationOffset != s2->maxInterpolationOffset) ||
      (s1->subPixelInterpolationOffsetBits != s2->subPixelInterpolationOffsetBits) ||
      (s1->maxFramebufferWidth != s2->maxFramebufferWidth) ||
      (s1->maxFramebufferHeight != s2->maxFramebufferHeight) ||
      (s1->maxFramebufferLayers != s2->maxFramebufferLayers) ||
      (s1->framebufferColorSampleCounts != s2->framebufferColorSampleCounts) ||
      (s1->framebufferDepthSampleCounts != s2->framebufferDepthSampleCounts) ||
      (s1->framebufferStencilSampleCounts != s2->framebufferStencilSampleCounts) ||
      (s1->framebufferNoAttachmentsSampleCounts != s2->framebufferNoAttachmentsSampleCounts) ||
      (s1->maxColorAttachments != s2->maxColorAttachments) ||
      (s1->sampledImageColorSampleCounts != s2->sampledImageColorSampleCounts) ||
      (s1->sampledImageIntegerSampleCounts != s2->sampledImageIntegerSampleCounts) ||
      (s1->sampledImageDepthSampleCounts != s2->sampledImageDepthSampleCounts) ||
      (s1->sampledImageStencilSampleCounts != s2->sampledImageStencilSampleCounts) ||
      (s1->storageImageSampleCounts != s2->storageImageSampleCounts) ||
      (s1->maxSampleMaskWords != s2->maxSampleMaskWords) ||
      (s1->timestampComputeAndGraphics != s2->timestampComputeAndGraphics) ||
      (s1->timestampPeriod != s2->timestampPeriod) ||
      (s1->maxClipDistances != s2->maxClipDistances) ||
      (s1->maxCullDistances != s2->maxCullDistances) ||
      (s1->maxCombinedClipAndCullDistances != s2->maxCombinedClipAndCullDistances) ||
      (s1->discreteQueuePriorities != s2->discreteQueuePriorities) ||
      (s1->pointSizeGranularity != s2->pointSizeGranularity) ||
      (s1->lineWidthGranularity != s2->lineWidthGranularity) ||
      (s1->strictLines != s2->strictLines) ||
      (s1->standardSampleLocations != s2->standardSampleLocations) ||
      (s1->optimalBufferCopyOffsetAlignment != s2->optimalBufferCopyOffsetAlignment) ||
      (s1->optimalBufferCopyRowPitchAlignment != s2->optimalBufferCopyRowPitchAlignment) ||
      (s1->nonCoherentAtomSize != s2->nonCoherentAtomSize))
    return false;

  // local array members
  if (memcmp(s1->maxComputeWorkGroupCount, s2->maxComputeWorkGroupCount, 3 * sizeof(uint32_t)) != 0)
    return false;
  if (memcmp(s1->maxComputeWorkGroupSize, s2->maxComputeWorkGroupSize, 3 * sizeof(uint32_t)) != 0)
    return false;
  if (memcmp(s1->maxViewportDimensions, s2->maxViewportDimensions, 2 * sizeof(uint32_t)) != 0)
    return false;
  if (memcmp(s1->viewportBoundsRange, s2->viewportBoundsRange, 2 * sizeof(float)) != 0)
    return false;
  if (memcmp(s1->pointSizeRange, s2->pointSizeRange, 2 * sizeof(float)) != 0)
    return false;
  if (memcmp(s1->lineWidthRange, s2->lineWidthRange, 2 * sizeof(float)) != 0)
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceLineRasterizationFeatures(
    VkPhysicalDeviceLineRasterizationFeatures const *s1,
    VkPhysicalDeviceLineRasterizationFeatures const *s2) {
  // local, simple types
  if ((s1->rectangularLines != s2->rectangularLines) ||
      (s1->bresenhamLines != s2->bresenhamLines) || (s1->smoothLines != s2->smoothLines) ||
      (s1->stippledRectangularLines != s2->stippledRectangularLines) ||
      (s1->stippledBresenhamLines != s2->stippledBresenhamLines) ||
      (s1->stippledSmoothLines != s2->stippledSmoothLines))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->rectangularLines != s2->rectangularLines) ||
      (s1->bresenhamLines != s2->bresenhamLines) || (s1->smoothLines != s2->smoothLines) ||
      (s1->stippledRectangularLines != s2->stippledRectangularLines) ||
      (s1->stippledBresenhamLines != s2->stippledBresenhamLines) ||
      (s1->stippledSmoothLines != s2->stippledSmoothLines))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->rectangularLines != s2->rectangularLines) ||
      (s1->bresenhamLines != s2->bresenhamLines) || (s1->smoothLines != s2->smoothLines) ||
      (s1->stippledRectangularLines != s2->stippledRectangularLines) ||
      (s1->stippledBresenhamLines != s2->stippledBresenhamLines) ||
      (s1->stippledSmoothLines != s2->stippledSmoothLines))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->rectangularLines != s2->rectangularLines) ||
      (s1->bresenhamLines != s2->bresenhamLines) || (s1->smoothLines != s2->smoothLines) ||
      (s1->stippledRectangularLines != s2->stippledRectangularLines) ||
      (s1->stippledBresenhamLines != s2->stippledBresenhamLines) ||
      (s1->stippledSmoothLines != s2->stippledSmoothLines))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesKHR(
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->rectangularLines != s2->rectangularLines) ||
      (s1->bresenhamLines != s2->bresenhamLines) || (s1->smoothLines != s2->smoothLines) ||
      (s1->stippledRectangularLines != s2->stippledRectangularLines) ||
      (s1->stippledBresenhamLines != s2->stippledBresenhamLines) ||
      (s1->stippledSmoothLines != s2->stippledSmoothLines))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesKHR(
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->rectangularLines != s2->rectangularLines) ||
      (s1->bresenhamLines != s2->bresenhamLines) || (s1->smoothLines != s2->smoothLines) ||
      (s1->stippledRectangularLines != s2->stippledRectangularLines) ||
      (s1->stippledBresenhamLines != s2->stippledBresenhamLines) ||
      (s1->stippledSmoothLines != s2->stippledSmoothLines))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceLineRasterizationProperties(
    VkPhysicalDeviceLineRasterizationProperties const *s1,
    VkPhysicalDeviceLineRasterizationProperties const *s2) {
  // local, simple types
  if ((s1->lineSubPixelPrecisionBits != s2->lineSubPixelPrecisionBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->lineSubPixelPrecisionBits != s2->lineSubPixelPrecisionBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->lineSubPixelPrecisionBits != s2->lineSubPixelPrecisionBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->lineSubPixelPrecisionBits != s2->lineSubPixelPrecisionBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesKHR(
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->lineSubPixelPrecisionBits != s2->lineSubPixelPrecisionBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesKHR(
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->lineSubPixelPrecisionBits != s2->lineSubPixelPrecisionBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_NV_linear_color_attachment
bool compare_VkPhysicalDeviceLinearColorAttachmentFeaturesNV(
    VkPhysicalDeviceLinearColorAttachmentFeaturesNV const *s1,
    VkPhysicalDeviceLinearColorAttachmentFeaturesNV const *s2) {
  // local, simple types
  if ((s1->linearColorAttachment != s2->linearColorAttachment))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMaintenance3Properties(
    VkPhysicalDeviceMaintenance3Properties const *s1,
    VkPhysicalDeviceMaintenance3Properties const *s2) {
  // local, simple types
  if ((s1->maxPerSetDescriptors != s2->maxPerSetDescriptors) ||
      (s1->maxMemoryAllocationSize != s2->maxMemoryAllocationSize))
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance3
bool compare_VkPhysicalDeviceMaintenance3PropertiesKHR(
    VkPhysicalDeviceMaintenance3PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance3PropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxPerSetDescriptors != s2->maxPerSetDescriptors) ||
      (s1->maxMemoryAllocationSize != s2->maxMemoryAllocationSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceMaintenance4Features(VkPhysicalDeviceMaintenance4Features const *s1,
                                                  VkPhysicalDeviceMaintenance4Features const *s2) {
  // local, simple types
  if ((s1->maintenance4 != s2->maintenance4))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->maintenance4 != s2->maintenance4))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->maintenance4 != s2->maintenance4))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceMaintenance4Properties(
    VkPhysicalDeviceMaintenance4Properties const *s1,
    VkPhysicalDeviceMaintenance4Properties const *s2) {
  // local, simple types
  if ((s1->maxBufferSize != s2->maxBufferSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxBufferSize != s2->maxBufferSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxBufferSize != s2->maxBufferSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceMaintenance5Features(VkPhysicalDeviceMaintenance5Features const *s1,
                                                  VkPhysicalDeviceMaintenance5Features const *s2) {
  // local, simple types
  if ((s1->maintenance5 != s2->maintenance5))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkPhysicalDeviceMaintenance5FeaturesKHR(
    VkPhysicalDeviceMaintenance5FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance5FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->maintenance5 != s2->maintenance5))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkPhysicalDeviceMaintenance5FeaturesKHR(
    VkPhysicalDeviceMaintenance5FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance5FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->maintenance5 != s2->maintenance5))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceMaintenance5Properties(
    VkPhysicalDeviceMaintenance5Properties const *s1,
    VkPhysicalDeviceMaintenance5Properties const *s2) {
  // local, simple types
  if ((s1->earlyFragmentMultisampleCoverageAfterSampleCounting !=
       s2->earlyFragmentMultisampleCoverageAfterSampleCounting) ||
      (s1->earlyFragmentSampleMaskTestBeforeSampleCounting !=
       s2->earlyFragmentSampleMaskTestBeforeSampleCounting) ||
      (s1->depthStencilSwizzleOneSupport != s2->depthStencilSwizzleOneSupport) ||
      (s1->polygonModePointSize != s2->polygonModePointSize) ||
      (s1->nonStrictSinglePixelWideLinesUseParallelogram !=
       s2->nonStrictSinglePixelWideLinesUseParallelogram) ||
      (s1->nonStrictWideLinesUseParallelogram != s2->nonStrictWideLinesUseParallelogram))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkPhysicalDeviceMaintenance5PropertiesKHR(
    VkPhysicalDeviceMaintenance5PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance5PropertiesKHR const *s2) {
  // local, simple types
  if ((s1->earlyFragmentMultisampleCoverageAfterSampleCounting !=
       s2->earlyFragmentMultisampleCoverageAfterSampleCounting) ||
      (s1->earlyFragmentSampleMaskTestBeforeSampleCounting !=
       s2->earlyFragmentSampleMaskTestBeforeSampleCounting) ||
      (s1->depthStencilSwizzleOneSupport != s2->depthStencilSwizzleOneSupport) ||
      (s1->polygonModePointSize != s2->polygonModePointSize) ||
      (s1->nonStrictSinglePixelWideLinesUseParallelogram !=
       s2->nonStrictSinglePixelWideLinesUseParallelogram) ||
      (s1->nonStrictWideLinesUseParallelogram != s2->nonStrictWideLinesUseParallelogram))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkPhysicalDeviceMaintenance5PropertiesKHR(
    VkPhysicalDeviceMaintenance5PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance5PropertiesKHR const *s2) {
  // local, simple types
  if ((s1->earlyFragmentMultisampleCoverageAfterSampleCounting !=
       s2->earlyFragmentMultisampleCoverageAfterSampleCounting) ||
      (s1->earlyFragmentSampleMaskTestBeforeSampleCounting !=
       s2->earlyFragmentSampleMaskTestBeforeSampleCounting) ||
      (s1->depthStencilSwizzleOneSupport != s2->depthStencilSwizzleOneSupport) ||
      (s1->polygonModePointSize != s2->polygonModePointSize) ||
      (s1->nonStrictSinglePixelWideLinesUseParallelogram !=
       s2->nonStrictSinglePixelWideLinesUseParallelogram) ||
      (s1->nonStrictWideLinesUseParallelogram != s2->nonStrictWideLinesUseParallelogram))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceMaintenance6Features(VkPhysicalDeviceMaintenance6Features const *s1,
                                                  VkPhysicalDeviceMaintenance6Features const *s2) {
  // local, simple types
  if ((s1->maintenance6 != s2->maintenance6))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6
bool compare_VkPhysicalDeviceMaintenance6FeaturesKHR(
    VkPhysicalDeviceMaintenance6FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance6FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->maintenance6 != s2->maintenance6))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6
bool compare_VkPhysicalDeviceMaintenance6FeaturesKHR(
    VkPhysicalDeviceMaintenance6FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance6FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->maintenance6 != s2->maintenance6))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceMaintenance6Properties(
    VkPhysicalDeviceMaintenance6Properties const *s1,
    VkPhysicalDeviceMaintenance6Properties const *s2) {
  // local, simple types
  if ((s1->blockTexelViewCompatibleMultipleLayers != s2->blockTexelViewCompatibleMultipleLayers) ||
      (s1->maxCombinedImageSamplerDescriptorCount != s2->maxCombinedImageSamplerDescriptorCount) ||
      (s1->fragmentShadingRateClampCombinerInputs != s2->fragmentShadingRateClampCombinerInputs))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6
bool compare_VkPhysicalDeviceMaintenance6PropertiesKHR(
    VkPhysicalDeviceMaintenance6PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance6PropertiesKHR const *s2) {
  // local, simple types
  if ((s1->blockTexelViewCompatibleMultipleLayers != s2->blockTexelViewCompatibleMultipleLayers) ||
      (s1->maxCombinedImageSamplerDescriptorCount != s2->maxCombinedImageSamplerDescriptorCount) ||
      (s1->fragmentShadingRateClampCombinerInputs != s2->fragmentShadingRateClampCombinerInputs))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6
bool compare_VkPhysicalDeviceMaintenance6PropertiesKHR(
    VkPhysicalDeviceMaintenance6PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance6PropertiesKHR const *s2) {
  // local, simple types
  if ((s1->blockTexelViewCompatibleMultipleLayers != s2->blockTexelViewCompatibleMultipleLayers) ||
      (s1->maxCombinedImageSamplerDescriptorCount != s2->maxCombinedImageSamplerDescriptorCount) ||
      (s1->fragmentShadingRateClampCombinerInputs != s2->fragmentShadingRateClampCombinerInputs))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7
bool compare_VkPhysicalDeviceMaintenance7FeaturesKHR(
    VkPhysicalDeviceMaintenance7FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance7FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->maintenance7 != s2->maintenance7))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7
bool compare_VkPhysicalDeviceMaintenance7PropertiesKHR(
    VkPhysicalDeviceMaintenance7PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance7PropertiesKHR const *s2) {
  // local, simple types
  if ((s1->robustFragmentShadingRateAttachmentAccess !=
       s2->robustFragmentShadingRateAttachmentAccess) ||
      (s1->separateDepthStencilAttachmentAccess != s2->separateDepthStencilAttachmentAccess) ||
      (s1->maxDescriptorSetTotalUniformBuffersDynamic !=
       s2->maxDescriptorSetTotalUniformBuffersDynamic) ||
      (s1->maxDescriptorSetTotalStorageBuffersDynamic !=
       s2->maxDescriptorSetTotalStorageBuffersDynamic) ||
      (s1->maxDescriptorSetTotalBuffersDynamic != s2->maxDescriptorSetTotalBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindTotalBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindTotalBuffersDynamic))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 305 && VK_KHR_maintenance8
bool compare_VkPhysicalDeviceMaintenance8FeaturesKHR(
    VkPhysicalDeviceMaintenance8FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance8FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->maintenance8 != s2->maintenance8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9
bool compare_VkPhysicalDeviceMaintenance9FeaturesKHR(
    VkPhysicalDeviceMaintenance9FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance9FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->maintenance9 != s2->maintenance9))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9
bool compare_VkPhysicalDeviceMaintenance9PropertiesKHR(
    VkPhysicalDeviceMaintenance9PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance9PropertiesKHR const *s2) {
  // local, simple types
  if ((s1->image2DViewOf3DSparse != s2->image2DViewOf3DSparse) ||
      (s1->defaultVertexAttributeValue != s2->defaultVertexAttributeValue))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed
bool compare_VkPhysicalDeviceMapMemoryPlacedFeaturesEXT(
    VkPhysicalDeviceMapMemoryPlacedFeaturesEXT const *s1,
    VkPhysicalDeviceMapMemoryPlacedFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->memoryMapPlaced != s2->memoryMapPlaced) ||
      (s1->memoryMapRangePlaced != s2->memoryMapRangePlaced) ||
      (s1->memoryUnmapReserve != s2->memoryUnmapReserve))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed
bool compare_VkPhysicalDeviceMapMemoryPlacedPropertiesEXT(
    VkPhysicalDeviceMapMemoryPlacedPropertiesEXT const *s1,
    VkPhysicalDeviceMapMemoryPlacedPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->minPlacedMemoryMapAlignment != s2->minPlacedMemoryMapAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_budget
bool compare_VkPhysicalDeviceMemoryBudgetPropertiesEXT(
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *s1,
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *s2) {
  // local array members
  if (memcmp(s1->heapBudget, s2->heapBudget, VK_MAX_MEMORY_HEAPS * sizeof(VkDeviceSize)) != 0)
    return false;
  if (memcmp(s1->heapUsage, s2->heapUsage, VK_MAX_MEMORY_HEAPS * sizeof(VkDeviceSize)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkPhysicalDeviceMemoryDecompressionFeaturesNV(
    VkPhysicalDeviceMemoryDecompressionFeaturesNV const *s1,
    VkPhysicalDeviceMemoryDecompressionFeaturesNV const *s2) {
  // local, simple types
  if ((s1->memoryDecompression != s2->memoryDecompression))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkPhysicalDeviceMemoryDecompressionPropertiesNV(
    VkPhysicalDeviceMemoryDecompressionPropertiesNV const *s1,
    VkPhysicalDeviceMemoryDecompressionPropertiesNV const *s2) {
  // local, simple types
  if ((s1->decompressionMethods != s2->decompressionMethods) ||
      (s1->maxDecompressionIndirectCount != s2->maxDecompressionIndirectCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
bool compare_VkPhysicalDeviceMemoryPriorityFeaturesEXT(
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *s1,
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->memoryPriority != s2->memoryPriority))
    return false;

  return true;
}
#endif

bool compare_VkPhysicalDeviceMemoryProperties(VkPhysicalDeviceMemoryProperties const *s1,
                                              VkPhysicalDeviceMemoryProperties const *s2) {
  // local, simple types
  if ((s1->memoryTypeCount != s2->memoryTypeCount) || (s1->memoryHeapCount != s2->memoryHeapCount))
    return false;

  // local array members
  if (memcmp(s1->memoryTypes, s2->memoryTypes, s1->memoryTypeCount) != 0)
    return false;
  if (memcmp(s1->memoryHeaps, s2->memoryHeaps, s1->memoryHeapCount) != 0)
    return false;
  return true;
}

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMemoryProperties2(VkPhysicalDeviceMemoryProperties2 const *s1,
                                               VkPhysicalDeviceMemoryProperties2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkPhysicalDeviceMemoryProperties(&s1->memoryProperties, &s2->memoryProperties))
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceMemoryProperties2KHR(VkPhysicalDeviceMemoryProperties2KHR const *s1,
                                                  VkPhysicalDeviceMemoryProperties2KHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderFeaturesEXT(
    VkPhysicalDeviceMeshShaderFeaturesEXT const *s1,
    VkPhysicalDeviceMeshShaderFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->taskShader != s2->taskShader) || (s1->meshShader != s2->meshShader) ||
      (s1->multiviewMeshShader != s2->multiviewMeshShader) ||
      (s1->primitiveFragmentShadingRateMeshShader != s2->primitiveFragmentShadingRateMeshShader) ||
      (s1->meshShaderQueries != s2->meshShaderQueries))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderFeaturesNV(VkPhysicalDeviceMeshShaderFeaturesNV const *s1,
                                                  VkPhysicalDeviceMeshShaderFeaturesNV const *s2) {
  // local, simple types
  if ((s1->taskShader != s2->taskShader) || (s1->meshShader != s2->meshShader))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderPropertiesEXT(
    VkPhysicalDeviceMeshShaderPropertiesEXT const *s1,
    VkPhysicalDeviceMeshShaderPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxTaskWorkGroupTotalCount != s2->maxTaskWorkGroupTotalCount) ||
      (s1->maxTaskWorkGroupInvocations != s2->maxTaskWorkGroupInvocations) ||
      (s1->maxTaskPayloadSize != s2->maxTaskPayloadSize) ||
      (s1->maxTaskSharedMemorySize != s2->maxTaskSharedMemorySize) ||
      (s1->maxTaskPayloadAndSharedMemorySize != s2->maxTaskPayloadAndSharedMemorySize) ||
      (s1->maxMeshWorkGroupTotalCount != s2->maxMeshWorkGroupTotalCount) ||
      (s1->maxMeshWorkGroupInvocations != s2->maxMeshWorkGroupInvocations) ||
      (s1->maxMeshSharedMemorySize != s2->maxMeshSharedMemorySize) ||
      (s1->maxMeshPayloadAndSharedMemorySize != s2->maxMeshPayloadAndSharedMemorySize) ||
      (s1->maxMeshOutputMemorySize != s2->maxMeshOutputMemorySize) ||
      (s1->maxMeshPayloadAndOutputMemorySize != s2->maxMeshPayloadAndOutputMemorySize) ||
      (s1->maxMeshOutputComponents != s2->maxMeshOutputComponents) ||
      (s1->maxMeshOutputVertices != s2->maxMeshOutputVertices) ||
      (s1->maxMeshOutputPrimitives != s2->maxMeshOutputPrimitives) ||
      (s1->maxMeshOutputLayers != s2->maxMeshOutputLayers) ||
      (s1->maxMeshMultiviewViewCount != s2->maxMeshMultiviewViewCount) ||
      (s1->meshOutputPerVertexGranularity != s2->meshOutputPerVertexGranularity) ||
      (s1->meshOutputPerPrimitiveGranularity != s2->meshOutputPerPrimitiveGranularity) ||
      (s1->maxPreferredTaskWorkGroupInvocations != s2->maxPreferredTaskWorkGroupInvocations) ||
      (s1->maxPreferredMeshWorkGroupInvocations != s2->maxPreferredMeshWorkGroupInvocations) ||
      (s1->prefersLocalInvocationVertexOutput != s2->prefersLocalInvocationVertexOutput) ||
      (s1->prefersLocalInvocationPrimitiveOutput != s2->prefersLocalInvocationPrimitiveOutput) ||
      (s1->prefersCompactVertexOutput != s2->prefersCompactVertexOutput) ||
      (s1->prefersCompactPrimitiveOutput != s2->prefersCompactPrimitiveOutput))
    return false;

  // local array members
  if (memcmp(s1->maxTaskWorkGroupCount, s2->maxTaskWorkGroupCount, 3 * sizeof(uint32_t)) != 0)
    return false;
  if (memcmp(s1->maxTaskWorkGroupSize, s2->maxTaskWorkGroupSize, 3 * sizeof(uint32_t)) != 0)
    return false;
  if (memcmp(s1->maxMeshWorkGroupCount, s2->maxMeshWorkGroupCount, 3 * sizeof(uint32_t)) != 0)
    return false;
  if (memcmp(s1->maxMeshWorkGroupSize, s2->maxMeshWorkGroupSize, 3 * sizeof(uint32_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderPropertiesNV(
    VkPhysicalDeviceMeshShaderPropertiesNV const *s1,
    VkPhysicalDeviceMeshShaderPropertiesNV const *s2) {
  // local, simple types
  if ((s1->maxDrawMeshTasksCount != s2->maxDrawMeshTasksCount) ||
      (s1->maxTaskWorkGroupInvocations != s2->maxTaskWorkGroupInvocations) ||
      (s1->maxTaskTotalMemorySize != s2->maxTaskTotalMemorySize) ||
      (s1->maxTaskOutputCount != s2->maxTaskOutputCount) ||
      (s1->maxMeshWorkGroupInvocations != s2->maxMeshWorkGroupInvocations) ||
      (s1->maxMeshTotalMemorySize != s2->maxMeshTotalMemorySize) ||
      (s1->maxMeshOutputVertices != s2->maxMeshOutputVertices) ||
      (s1->maxMeshOutputPrimitives != s2->maxMeshOutputPrimitives) ||
      (s1->maxMeshMultiviewViewCount != s2->maxMeshMultiviewViewCount) ||
      (s1->meshOutputPerVertexGranularity != s2->meshOutputPerVertexGranularity) ||
      (s1->meshOutputPerPrimitiveGranularity != s2->meshOutputPerPrimitiveGranularity))
    return false;

  // local array members
  if (memcmp(s1->maxTaskWorkGroupSize, s2->maxTaskWorkGroupSize, 3 * sizeof(uint32_t)) != 0)
    return false;
  if (memcmp(s1->maxMeshWorkGroupSize, s2->maxMeshWorkGroupSize, 3 * sizeof(uint32_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkPhysicalDeviceMultiDrawFeaturesEXT(VkPhysicalDeviceMultiDrawFeaturesEXT const *s1,
                                                  VkPhysicalDeviceMultiDrawFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->multiDraw != s2->multiDraw))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkPhysicalDeviceMultiDrawPropertiesEXT(
    VkPhysicalDeviceMultiDrawPropertiesEXT const *s1,
    VkPhysicalDeviceMultiDrawPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxMultiDrawCount != s2->maxMultiDrawCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(
    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT const *s1,
    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->multisampledRenderToSingleSampled != s2->multisampledRenderToSingleSampled))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMultiviewFeatures(VkPhysicalDeviceMultiviewFeatures const *s1,
                                               VkPhysicalDeviceMultiviewFeatures const *s2) {
  // local, simple types
  if ((s1->multiview != s2->multiview) ||
      (s1->multiviewGeometryShader != s2->multiviewGeometryShader) ||
      (s1->multiviewTessellationShader != s2->multiviewTessellationShader))
    return false;

  return true;
}
#endif

#if VK_KHR_multiview
bool compare_VkPhysicalDeviceMultiviewFeaturesKHR(VkPhysicalDeviceMultiviewFeaturesKHR const *s1,
                                                  VkPhysicalDeviceMultiviewFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->multiview != s2->multiview) ||
      (s1->multiviewGeometryShader != s2->multiviewGeometryShader) ||
      (s1->multiviewTessellationShader != s2->multiviewTessellationShader))
    return false;

  return true;
}
#endif

#if VK_NVX_multiview_per_view_attributes
bool compare_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *s1,
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *s2) {
  // local, simple types
  if ((s1->perViewPositionAllComponents != s2->perViewPositionAllComponents))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_QCOM_multiview_per_view_render_areas
bool compare_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(
    VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM const *s1,
    VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->multiviewPerViewRenderAreas != s2->multiviewPerViewRenderAreas))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 236 && VK_QCOM_multiview_per_view_viewports
bool compare_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(
    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM const *s1,
    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->multiviewPerViewViewports != s2->multiviewPerViewViewports))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMultiviewProperties(VkPhysicalDeviceMultiviewProperties const *s1,
                                                 VkPhysicalDeviceMultiviewProperties const *s2) {
  // local, simple types
  if ((s1->maxMultiviewViewCount != s2->maxMultiviewViewCount) ||
      (s1->maxMultiviewInstanceIndex != s2->maxMultiviewInstanceIndex))
    return false;

  return true;
}
#endif

#if VK_KHR_multiview
bool compare_VkPhysicalDeviceMultiviewPropertiesKHR(
    VkPhysicalDeviceMultiviewPropertiesKHR const *s1,
    VkPhysicalDeviceMultiviewPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxMultiviewViewCount != s2->maxMultiviewViewCount) ||
      (s1->maxMultiviewInstanceIndex != s2->maxMultiviewInstanceIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT const *s1,
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->mutableDescriptorType != s2->mutableDescriptorType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type
bool compare_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s1,
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s2) {
  // local, simple types
  if ((s1->mutableDescriptorType != s2->mutableDescriptorType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type
bool compare_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s1,
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s2) {
  // local, simple types
  if ((s1->mutableDescriptorType != s2->mutableDescriptorType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 267 && VK_EXT_nested_command_buffer
bool compare_VkPhysicalDeviceNestedCommandBufferFeaturesEXT(
    VkPhysicalDeviceNestedCommandBufferFeaturesEXT const *s1,
    VkPhysicalDeviceNestedCommandBufferFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->nestedCommandBuffer != s2->nestedCommandBuffer) ||
      (s1->nestedCommandBufferRendering != s2->nestedCommandBufferRendering) ||
      (s1->nestedCommandBufferSimultaneousUse != s2->nestedCommandBufferSimultaneousUse))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 267 && VK_EXT_nested_command_buffer
bool compare_VkPhysicalDeviceNestedCommandBufferPropertiesEXT(
    VkPhysicalDeviceNestedCommandBufferPropertiesEXT const *s1,
    VkPhysicalDeviceNestedCommandBufferPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxCommandBufferNestingLevel != s2->maxCommandBufferNestingLevel))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_non_seamless_cube_map
bool compare_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(
    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT const *s1,
    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->nonSeamlessCubeMap != s2->nonSeamlessCubeMap))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkPhysicalDeviceOpacityMicromapFeaturesEXT(
    VkPhysicalDeviceOpacityMicromapFeaturesEXT const *s1,
    VkPhysicalDeviceOpacityMicromapFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->micromap != s2->micromap) || (s1->micromapCaptureReplay != s2->micromapCaptureReplay) ||
      (s1->micromapHostCommands != s2->micromapHostCommands))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkPhysicalDeviceOpacityMicromapPropertiesEXT(
    VkPhysicalDeviceOpacityMicromapPropertiesEXT const *s1,
    VkPhysicalDeviceOpacityMicromapPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxOpacity2StateSubdivisionLevel != s2->maxOpacity2StateSubdivisionLevel) ||
      (s1->maxOpacity4StateSubdivisionLevel != s2->maxOpacity4StateSubdivisionLevel))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkPhysicalDeviceOpticalFlowFeaturesNV(
    VkPhysicalDeviceOpticalFlowFeaturesNV const *s1,
    VkPhysicalDeviceOpticalFlowFeaturesNV const *s2) {
  // local, simple types
  if ((s1->opticalFlow != s2->opticalFlow))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkPhysicalDeviceOpticalFlowPropertiesNV(
    VkPhysicalDeviceOpticalFlowPropertiesNV const *s1,
    VkPhysicalDeviceOpticalFlowPropertiesNV const *s2) {
  // local, simple types
  if ((s1->supportedOutputGridSizes != s2->supportedOutputGridSizes) ||
      (s1->supportedHintGridSizes != s2->supportedHintGridSizes) ||
      (s1->hintSupported != s2->hintSupported) || (s1->costSupported != s2->costSupported) ||
      (s1->bidirectionalFlowSupported != s2->bidirectionalFlowSupported) ||
      (s1->globalFlowSupported != s2->globalFlowSupported) || (s1->minWidth != s2->minWidth) ||
      (s1->minHeight != s2->minHeight) || (s1->maxWidth != s2->maxWidth) ||
      (s1->maxHeight != s2->maxHeight) ||
      (s1->maxNumRegionsOfInterest != s2->maxNumRegionsOfInterest))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 95 && VK_EXT_pci_bus_info
bool compare_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s1,
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->pciDomain != s2->pciDomain) || (s1->pciBus != s2->pciBus) ||
      (s1->pciDevice != s2->pciDevice) || (s1->pciFunction != s2->pciFunction))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 96 && VK_EXT_pci_bus_info
bool compare_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s1,
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->pciDomain != s2->pciDomain) || (s1->pciBus != s2->pciBus) ||
      (s1->pciDevice != s2->pciDevice) || (s1->pciFunction != s2->pciFunction))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 191 && VK_EXT_pageable_device_local_memory
bool compare_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *s1,
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->pageableDeviceLocalMemory != s2->pageableDeviceLocalMemory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV(
    VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV const *s1,
    VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV const *s2) {
  // local, simple types
  if ((s1->partitionedAccelerationStructure != s2->partitionedAccelerationStructure))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV(
    VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV const *s1,
    VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV const *s2) {
  // local, simple types
  if ((s1->maxPartitionCount != s2->maxPartitionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_NV_per_stage_descriptor_set
bool compare_VkPhysicalDevicePerStageDescriptorSetFeaturesNV(
    VkPhysicalDevicePerStageDescriptorSetFeaturesNV const *s1,
    VkPhysicalDevicePerStageDescriptorSetFeaturesNV const *s2) {
  // local, simple types
  if ((s1->perStageDescriptorSet != s2->perStageDescriptorSet) ||
      (s1->dynamicPipelineLayout != s2->dynamicPipelineLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPhysicalDevicePerformanceQueryFeaturesKHR(
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *s1,
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->performanceCounterQueryPools != s2->performanceCounterQueryPools) ||
      (s1->performanceCounterMultipleQueryPools != s2->performanceCounterMultipleQueryPools))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPhysicalDevicePerformanceQueryPropertiesKHR(
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *s1,
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->allowCommandBufferQueryCopies != s2->allowCommandBufferQueryCopies))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPhysicalDevicePipelineBinaryFeaturesKHR(
    VkPhysicalDevicePipelineBinaryFeaturesKHR const *s1,
    VkPhysicalDevicePipelineBinaryFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->pipelineBinaries != s2->pipelineBinaries))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPhysicalDevicePipelineBinaryPropertiesKHR(
    VkPhysicalDevicePipelineBinaryPropertiesKHR const *s1,
    VkPhysicalDevicePipelineBinaryPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->pipelineBinaryInternalCache != s2->pipelineBinaryInternalCache) ||
      (s1->pipelineBinaryInternalCacheControl != s2->pipelineBinaryInternalCacheControl) ||
      (s1->pipelineBinaryPrefersInternalCache != s2->pipelineBinaryPrefersInternalCache) ||
      (s1->pipelineBinaryPrecompiledInternalCache != s2->pipelineBinaryPrecompiledInternalCache) ||
      (s1->pipelineBinaryCompressedData != s2->pipelineBinaryCompressedData))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDevicePipelineCreationCacheControlFeatures(
    VkPhysicalDevicePipelineCreationCacheControlFeatures const *s1,
    VkPhysicalDevicePipelineCreationCacheControlFeatures const *s2) {
  // local, simple types
  if ((s1->pipelineCreationCacheControl != s2->pipelineCreationCacheControl))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_cache_control
bool compare_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s1,
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->pipelineCreationCacheControl != s2->pipelineCreationCacheControl))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_cache_control
bool compare_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s1,
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->pipelineCreationCacheControl != s2->pipelineCreationCacheControl))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *s1,
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->pipelineExecutableInfo != s2->pipelineExecutableInfo))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 240 && VK_EXT_pipeline_library_group_handles
bool compare_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(
    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT const *s1,
    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->pipelineLibraryGroupHandles != s2->pipelineLibraryGroupHandles))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 305 && VK_ARM_pipeline_opacity_micromap
bool compare_VkPhysicalDevicePipelineOpacityMicromapFeaturesARM(
    VkPhysicalDevicePipelineOpacityMicromapFeaturesARM const *s1,
    VkPhysicalDevicePipelineOpacityMicromapFeaturesARM const *s2) {
  // local, simple types
  if ((s1->pipelineOpacityMicromap != s2->pipelineOpacityMicromap))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPhysicalDevicePipelinePropertiesFeaturesEXT(
    VkPhysicalDevicePipelinePropertiesFeaturesEXT const *s1,
    VkPhysicalDevicePipelinePropertiesFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->pipelinePropertiesIdentifier != s2->pipelinePropertiesIdentifier))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDevicePipelineProtectedAccessFeatures(
    VkPhysicalDevicePipelineProtectedAccessFeatures const *s1,
    VkPhysicalDevicePipelineProtectedAccessFeatures const *s2) {
  // local, simple types
  if ((s1->pipelineProtectedAccess != s2->pipelineProtectedAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_protected_access
bool compare_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->pipelineProtectedAccess != s2->pipelineProtectedAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_protected_access
bool compare_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->pipelineProtectedAccess != s2->pipelineProtectedAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDevicePipelineRobustnessFeatures(
    VkPhysicalDevicePipelineRobustnessFeatures const *s1,
    VkPhysicalDevicePipelineRobustnessFeatures const *s2) {
  // local, simple types
  if ((s1->pipelineRobustness != s2->pipelineRobustness))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessFeaturesEXT(
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->pipelineRobustness != s2->pipelineRobustness))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessFeaturesEXT(
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->pipelineRobustness != s2->pipelineRobustness))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDevicePipelineRobustnessProperties(
    VkPhysicalDevicePipelineRobustnessProperties const *s1,
    VkPhysicalDevicePipelineRobustnessProperties const *s2) {
  // local, simple types
  if ((s1->defaultRobustnessStorageBuffers != s2->defaultRobustnessStorageBuffers) ||
      (s1->defaultRobustnessUniformBuffers != s2->defaultRobustnessUniformBuffers) ||
      (s1->defaultRobustnessVertexInputs != s2->defaultRobustnessVertexInputs) ||
      (s1->defaultRobustnessImages != s2->defaultRobustnessImages))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessPropertiesEXT(
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->defaultRobustnessStorageBuffers != s2->defaultRobustnessStorageBuffers) ||
      (s1->defaultRobustnessUniformBuffers != s2->defaultRobustnessUniformBuffers) ||
      (s1->defaultRobustnessVertexInputs != s2->defaultRobustnessVertexInputs) ||
      (s1->defaultRobustnessImages != s2->defaultRobustnessImages))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessPropertiesEXT(
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->defaultRobustnessStorageBuffers != s2->defaultRobustnessStorageBuffers) ||
      (s1->defaultRobustnessUniformBuffers != s2->defaultRobustnessUniformBuffers) ||
      (s1->defaultRobustnessVertexInputs != s2->defaultRobustnessVertexInputs) ||
      (s1->defaultRobustnessImages != s2->defaultRobustnessImages))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDevicePointClippingProperties(
    VkPhysicalDevicePointClippingProperties const *s1,
    VkPhysicalDevicePointClippingProperties const *s2) {
  // local, simple types
  if ((s1->pointClippingBehavior != s2->pointClippingBehavior))
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance2
bool compare_VkPhysicalDevicePointClippingPropertiesKHR(
    VkPhysicalDevicePointClippingPropertiesKHR const *s1,
    VkPhysicalDevicePointClippingPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->pointClippingBehavior != s2->pointClippingBehavior))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDevicePortabilitySubsetFeaturesKHR(
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *s1,
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->constantAlphaColorBlendFactors != s2->constantAlphaColorBlendFactors) ||
      (s1->events != s2->events) ||
      (s1->imageViewFormatReinterpretation != s2->imageViewFormatReinterpretation) ||
      (s1->imageViewFormatSwizzle != s2->imageViewFormatSwizzle) ||
      (s1->imageView2DOn3DImage != s2->imageView2DOn3DImage) ||
      (s1->multisampleArrayImage != s2->multisampleArrayImage) ||
      (s1->mutableComparisonSamplers != s2->mutableComparisonSamplers) ||
      (s1->pointPolygons != s2->pointPolygons) ||
      (s1->samplerMipLodBias != s2->samplerMipLodBias) ||
      (s1->separateStencilMaskRef != s2->separateStencilMaskRef) ||
      (s1->shaderSampleRateInterpolationFunctions != s2->shaderSampleRateInterpolationFunctions) ||
      (s1->tessellationIsolines != s2->tessellationIsolines) ||
      (s1->tessellationPointMode != s2->tessellationPointMode) ||
      (s1->triangleFans != s2->triangleFans) ||
      (s1->vertexAttributeAccessBeyondStride != s2->vertexAttributeAccessBeyondStride))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDevicePortabilitySubsetPropertiesKHR(
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *s1,
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->minVertexInputBindingStrideAlignment != s2->minVertexInputBindingStrideAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkPhysicalDevicePresentBarrierFeaturesNV(
    VkPhysicalDevicePresentBarrierFeaturesNV const *s1,
    VkPhysicalDevicePresentBarrierFeaturesNV const *s2) {
  // local, simple types
  if ((s1->presentBarrier != s2->presentBarrier))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_id2
bool compare_VkPhysicalDevicePresentId2FeaturesKHR(
    VkPhysicalDevicePresentId2FeaturesKHR const *s1,
    VkPhysicalDevicePresentId2FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->presentId2 != s2->presentId2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
bool compare_VkPhysicalDevicePresentIdFeaturesKHR(VkPhysicalDevicePresentIdFeaturesKHR const *s1,
                                                  VkPhysicalDevicePresentIdFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->presentId != s2->presentId))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 308 && VK_NV_present_metering && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDevicePresentMeteringFeaturesNV(
    VkPhysicalDevicePresentMeteringFeaturesNV const *s1,
    VkPhysicalDevicePresentMeteringFeaturesNV const *s2) {
  // local, simple types
  if ((s1->presentMetering != s2->presentMetering))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 297 && VK_EXT_present_mode_fifo_latest_ready
bool compare_VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT(
    VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT const *s1,
    VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->presentModeFifoLatestReady != s2->presentModeFifoLatestReady))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2
bool compare_VkPhysicalDevicePresentWait2FeaturesKHR(
    VkPhysicalDevicePresentWait2FeaturesKHR const *s1,
    VkPhysicalDevicePresentWait2FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->presentWait2 != s2->presentWait2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_wait
bool compare_VkPhysicalDevicePresentWaitFeaturesKHR(
    VkPhysicalDevicePresentWaitFeaturesKHR const *s1,
    VkPhysicalDevicePresentWaitFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->presentWait != s2->presentWait))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkPhysicalDevicePresentationPropertiesANDROID(
    VkPhysicalDevicePresentationPropertiesANDROID const *s1,
    VkPhysicalDevicePresentationPropertiesANDROID const *s2) {
  // local, simple types
  if ((s1->sharedImage != s2->sharedImage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 190 && VK_EXT_primitive_topology_list_restart
bool compare_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *s1,
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->primitiveTopologyListRestart != s2->primitiveTopologyListRestart) ||
      (s1->primitiveTopologyPatchListRestart != s2->primitiveTopologyPatchListRestart))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_primitives_generated_query
bool compare_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(
    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT const *s1,
    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->primitivesGeneratedQuery != s2->primitivesGeneratedQuery) ||
      (s1->primitivesGeneratedQueryWithRasterizerDiscard !=
       s2->primitivesGeneratedQueryWithRasterizerDiscard) ||
      (s1->primitivesGeneratedQueryWithNonZeroStreams !=
       s2->primitivesGeneratedQueryWithNonZeroStreams))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDevicePrivateDataFeatures(VkPhysicalDevicePrivateDataFeatures const *s1,
                                                 VkPhysicalDevicePrivateDataFeatures const *s2) {
  // local, simple types
  if ((s1->privateData != s2->privateData))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data
bool compare_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *s1,
    VkPhysicalDevicePrivateDataFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->privateData != s2->privateData))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_private_data
bool compare_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *s1,
    VkPhysicalDevicePrivateDataFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->privateData != s2->privateData))
    return false;

  return true;
}
#endif

bool compare_VkPhysicalDeviceProperties(VkPhysicalDeviceProperties const *s1,
                                        VkPhysicalDeviceProperties const *s2) {
  // local, simple types
  if ((s1->apiVersion != s2->apiVersion) || (s1->driverVersion != s2->driverVersion) ||
      (s1->vendorID != s2->vendorID) || (s1->deviceID != s2->deviceID) ||
      (s1->deviceType != s2->deviceType))
    return false;

  // local, Vulkan struct types
  if (!compare_VkPhysicalDeviceLimits(&s1->limits, &s2->limits) ||
      !compare_VkPhysicalDeviceSparseProperties(&s1->sparseProperties, &s2->sparseProperties))
    return false;

  // local array members
  if (strncmp(s1->deviceName, s2->deviceName, VK_MAX_PHYSICAL_DEVICE_NAME_SIZE) != 0)
    return false;
  if (memcmp(s1->pipelineCacheUUID, s2->pipelineCacheUUID, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProperties2(VkPhysicalDeviceProperties2 const *s1,
                                         VkPhysicalDeviceProperties2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkPhysicalDeviceProperties(&s1->properties, &s2->properties))
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceProperties2KHR(VkPhysicalDeviceProperties2KHR const *s1,
                                            VkPhysicalDeviceProperties2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProtectedMemoryFeatures(
    VkPhysicalDeviceProtectedMemoryFeatures const *s1,
    VkPhysicalDeviceProtectedMemoryFeatures const *s2) {
  // local, simple types
  if ((s1->protectedMemory != s2->protectedMemory))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProtectedMemoryProperties(
    VkPhysicalDeviceProtectedMemoryProperties const *s1,
    VkPhysicalDeviceProtectedMemoryProperties const *s2) {
  // local, simple types
  if ((s1->protectedNoFault != s2->protectedNoFault))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPhysicalDeviceProvokingVertexFeaturesEXT(
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *s1,
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->provokingVertexLast != s2->provokingVertexLast) ||
      (s1->transformFeedbackPreservesProvokingVertex !=
       s2->transformFeedbackPreservesProvokingVertex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPhysicalDeviceProvokingVertexPropertiesEXT(
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *s1,
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->provokingVertexModePerPipeline != s2->provokingVertexModePerPipeline) ||
      (s1->transformFeedbackPreservesTriangleFanProvokingVertex !=
       s2->transformFeedbackPreservesTriangleFanProvokingVertex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDevicePushDescriptorProperties(
    VkPhysicalDevicePushDescriptorProperties const *s1,
    VkPhysicalDevicePushDescriptorProperties const *s2) {
  // local, simple types
  if ((s1->maxPushDescriptors != s2->maxPushDescriptors))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 302 && VK_KHR_push_descriptor
bool compare_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s1,
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxPushDescriptors != s2->maxPushDescriptors))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_push_descriptor
bool compare_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s1,
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxPushDescriptors != s2->maxPushDescriptors))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM(
    VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM const *s1,
    VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM const *s2) {
  // local, simple types
  if ((s1->queueFamilyIndex != s2->queueFamilyIndex) || (s1->engineType != s2->engineType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_rgba10x6_formats
bool compare_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *s1,
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->formatRgba10x6WithoutYCbCrSampler != s2->formatRgba10x6WithoutYCbCrSampler))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 200 && VK_HEADER_VERSION <= 224 &&                                        \
    VK_ARM_rasterization_order_attachment_access
bool compare_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s1,
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s2) {
  // local, simple types
  if ((s1->rasterizationOrderColorAttachmentAccess !=
       s2->rasterizationOrderColorAttachmentAccess) ||
      (s1->rasterizationOrderDepthAttachmentAccess !=
       s2->rasterizationOrderDepthAttachmentAccess) ||
      (s1->rasterizationOrderStencilAttachmentAccess !=
       s2->rasterizationOrderStencilAttachmentAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_ARM_rasterization_order_attachment_access
bool compare_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s1,
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s2) {
  // local, simple types
  if ((s1->rasterizationOrderColorAttachmentAccess !=
       s2->rasterizationOrderColorAttachmentAccess) ||
      (s1->rasterizationOrderDepthAttachmentAccess !=
       s2->rasterizationOrderDepthAttachmentAccess) ||
      (s1->rasterizationOrderStencilAttachmentAccess !=
       s2->rasterizationOrderStencilAttachmentAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_rasterization_order_attachment_access
bool compare_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT const *s1,
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->rasterizationOrderColorAttachmentAccess !=
       s2->rasterizationOrderColorAttachmentAccess) ||
      (s1->rasterizationOrderDepthAttachmentAccess !=
       s2->rasterizationOrderDepthAttachmentAccess) ||
      (s1->rasterizationOrderStencilAttachmentAccess !=
       s2->rasterizationOrderStencilAttachmentAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 279 && VK_NV_raw_access_chains
bool compare_VkPhysicalDeviceRawAccessChainsFeaturesNV(
    VkPhysicalDeviceRawAccessChainsFeaturesNV const *s1,
    VkPhysicalDeviceRawAccessChainsFeaturesNV const *s2) {
  // local, simple types
  if ((s1->shaderRawAccessChains != s2->shaderRawAccessChains))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_query
bool compare_VkPhysicalDeviceRayQueryFeaturesKHR(VkPhysicalDeviceRayQueryFeaturesKHR const *s1,
                                                 VkPhysicalDeviceRayQueryFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->rayQuery != s2->rayQuery))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceRayTracingFeaturesKHR(
    VkPhysicalDeviceRayTracingFeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->rayTracing != s2->rayTracing) ||
      (s1->rayTracingShaderGroupHandleCaptureReplay !=
       s2->rayTracingShaderGroupHandleCaptureReplay) ||
      (s1->rayTracingShaderGroupHandleCaptureReplayMixed !=
       s2->rayTracingShaderGroupHandleCaptureReplayMixed) ||
      (s1->rayTracingAccelerationStructureCaptureReplay !=
       s2->rayTracingAccelerationStructureCaptureReplay) ||
      (s1->rayTracingIndirectTraceRays != s2->rayTracingIndirectTraceRays) ||
      (s1->rayTracingIndirectAccelerationStructureBuild !=
       s2->rayTracingIndirectAccelerationStructureBuild) ||
      (s1->rayTracingHostAccelerationStructureCommands !=
       s2->rayTracingHostAccelerationStructureCommands) ||
      (s1->rayQuery != s2->rayQuery) ||
      (s1->rayTracingPrimitiveCulling != s2->rayTracingPrimitiveCulling))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder
bool compare_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(
    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV const *s2) {
  // local, simple types
  if ((s1->rayTracingInvocationReorder != s2->rayTracingInvocationReorder))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder
bool compare_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(
    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV const *s1,
    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV const *s2) {
  // local, simple types
  if ((s1->rayTracingInvocationReorderReorderingHint !=
       s2->rayTracingInvocationReorderReorderingHint))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres
bool compare_VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV(
    VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV const *s2) {
  // local, simple types
  if ((s1->spheres != s2->spheres) || (s1->linearSweptSpheres != s2->linearSweptSpheres))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_KHR_ray_tracing_maintenance1
bool compare_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(
    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->rayTracingMaintenance1 != s2->rayTracingMaintenance1) ||
      (s1->rayTracingPipelineTraceRaysIndirect2 != s2->rayTracingPipelineTraceRaysIndirect2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *s2) {
  // local, simple types
  if ((s1->rayTracingMotionBlur != s2->rayTracingMotionBlur) ||
      (s1->rayTracingMotionBlurPipelineTraceRaysIndirect !=
       s2->rayTracingMotionBlurPipelineTraceRaysIndirect))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->rayTracingPipeline != s2->rayTracingPipeline) ||
      (s1->rayTracingPipelineShaderGroupHandleCaptureReplay !=
       s2->rayTracingPipelineShaderGroupHandleCaptureReplay) ||
      (s1->rayTracingPipelineShaderGroupHandleCaptureReplayMixed !=
       s2->rayTracingPipelineShaderGroupHandleCaptureReplayMixed) ||
      (s1->rayTracingPipelineTraceRaysIndirect != s2->rayTracingPipelineTraceRaysIndirect) ||
      (s1->rayTraversalPrimitiveCulling != s2->rayTraversalPrimitiveCulling))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *s1,
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->shaderGroupHandleSize != s2->shaderGroupHandleSize) ||
      (s1->maxRayRecursionDepth != s2->maxRayRecursionDepth) ||
      (s1->maxShaderGroupStride != s2->maxShaderGroupStride) ||
      (s1->shaderGroupBaseAlignment != s2->shaderGroupBaseAlignment) ||
      (s1->shaderGroupHandleCaptureReplaySize != s2->shaderGroupHandleCaptureReplaySize) ||
      (s1->maxRayDispatchInvocationCount != s2->maxRayDispatchInvocationCount) ||
      (s1->shaderGroupHandleAlignment != s2->shaderGroupHandleAlignment) ||
      (s1->maxRayHitAttributeSize != s2->maxRayHitAttributeSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 249 && VK_KHR_ray_tracing_position_fetch
bool compare_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(
    VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->rayTracingPositionFetch != s2->rayTracingPositionFetch))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceRayTracingPropertiesKHR(
    VkPhysicalDeviceRayTracingPropertiesKHR const *s1,
    VkPhysicalDeviceRayTracingPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->shaderGroupHandleSize != s2->shaderGroupHandleSize) ||
      (s1->maxRecursionDepth != s2->maxRecursionDepth) ||
      (s1->maxShaderGroupStride != s2->maxShaderGroupStride) ||
      (s1->shaderGroupBaseAlignment != s2->shaderGroupBaseAlignment) ||
      (s1->maxGeometryCount != s2->maxGeometryCount) ||
      (s1->maxInstanceCount != s2->maxInstanceCount) ||
      (s1->maxPrimitiveCount != s2->maxPrimitiveCount) ||
      (s1->maxDescriptorSetAccelerationStructures != s2->maxDescriptorSetAccelerationStructures) ||
      (s1->shaderGroupHandleCaptureReplaySize != s2->shaderGroupHandleCaptureReplaySize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkPhysicalDeviceRayTracingPropertiesNV(
    VkPhysicalDeviceRayTracingPropertiesNV const *s1,
    VkPhysicalDeviceRayTracingPropertiesNV const *s2) {
  // local, simple types
  if ((s1->shaderGroupHandleSize != s2->shaderGroupHandleSize) ||
      (s1->maxRecursionDepth != s2->maxRecursionDepth) ||
      (s1->maxShaderGroupStride != s2->maxShaderGroupStride) ||
      (s1->shaderGroupBaseAlignment != s2->shaderGroupBaseAlignment) ||
      (s1->maxGeometryCount != s2->maxGeometryCount) ||
      (s1->maxInstanceCount != s2->maxInstanceCount) ||
      (s1->maxTriangleCount != s2->maxTriangleCount) ||
      (s1->maxDescriptorSetAccelerationStructures != s2->maxDescriptorSetAccelerationStructures))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 280 && VK_NV_ray_tracing_validation
bool compare_VkPhysicalDeviceRayTracingValidationFeaturesNV(
    VkPhysicalDeviceRayTracingValidationFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingValidationFeaturesNV const *s2) {
  // local, simple types
  if ((s1->rayTracingValidation != s2->rayTracingValidation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkPhysicalDeviceRaytracingPropertiesNVX(
    VkPhysicalDeviceRaytracingPropertiesNVX const *s1,
    VkPhysicalDeviceRaytracingPropertiesNVX const *s2) {
  // local, simple types
  if ((s1->shaderHeaderSize != s2->shaderHeaderSize) ||
      (s1->maxRecursionDepth != s2->maxRecursionDepth) ||
      (s1->maxGeometryCount != s2->maxGeometryCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 270 && VK_IMG_relaxed_line_rasterization
bool compare_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG(
    VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG const *s1,
    VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG const *s2) {
  // local, simple types
  if ((s1->relaxedLineRasterization != s2->relaxedLineRasterization))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped
bool compare_VkPhysicalDeviceRenderPassStripedFeaturesARM(
    VkPhysicalDeviceRenderPassStripedFeaturesARM const *s1,
    VkPhysicalDeviceRenderPassStripedFeaturesARM const *s2) {
  // local, simple types
  if ((s1->renderPassStriped != s2->renderPassStriped))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped
bool compare_VkPhysicalDeviceRenderPassStripedPropertiesARM(
    VkPhysicalDeviceRenderPassStripedPropertiesARM const *s1,
    VkPhysicalDeviceRenderPassStripedPropertiesARM const *s2) {
  // local, simple types
  if ((s1->maxRenderPassStripes != s2->maxRenderPassStripes))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->renderPassStripeGranularity, &s2->renderPassStripeGranularity))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
bool compare_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *s1,
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *s2) {
  // local, simple types
  if ((s1->representativeFragmentTest != s2->representativeFragmentTest))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 313 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *s1,
    VkPhysicalDeviceRobustness2FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->robustBufferAccess2 != s2->robustBufferAccess2) ||
      (s1->robustImageAccess2 != s2->robustImageAccess2) ||
      (s1->nullDescriptor != s2->nullDescriptor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 314 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *s1,
    VkPhysicalDeviceRobustness2FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->robustBufferAccess2 != s2->robustBufferAccess2) ||
      (s1->robustImageAccess2 != s2->robustImageAccess2) ||
      (s1->nullDescriptor != s2->nullDescriptor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 314 && VK_KHR_robustness2
bool compare_VkPhysicalDeviceRobustness2FeaturesKHR(
    VkPhysicalDeviceRobustness2FeaturesKHR const *s1,
    VkPhysicalDeviceRobustness2FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->robustBufferAccess2 != s2->robustBufferAccess2) ||
      (s1->robustImageAccess2 != s2->robustImageAccess2) ||
      (s1->nullDescriptor != s2->nullDescriptor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 313 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *s1,
    VkPhysicalDeviceRobustness2PropertiesEXT const *s2) {
  // local, simple types
  if ((s1->robustStorageBufferAccessSizeAlignment != s2->robustStorageBufferAccessSizeAlignment) ||
      (s1->robustUniformBufferAccessSizeAlignment != s2->robustUniformBufferAccessSizeAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 314 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *s1,
    VkPhysicalDeviceRobustness2PropertiesEXT const *s2) {
  // local, simple types
  if ((s1->robustStorageBufferAccessSizeAlignment != s2->robustStorageBufferAccessSizeAlignment) ||
      (s1->robustUniformBufferAccessSizeAlignment != s2->robustUniformBufferAccessSizeAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 314 && VK_KHR_robustness2
bool compare_VkPhysicalDeviceRobustness2PropertiesKHR(
    VkPhysicalDeviceRobustness2PropertiesKHR const *s1,
    VkPhysicalDeviceRobustness2PropertiesKHR const *s2) {
  // local, simple types
  if ((s1->robustStorageBufferAccessSizeAlignment != s2->robustStorageBufferAccessSizeAlignment) ||
      (s1->robustUniformBufferAccessSizeAlignment != s2->robustUniformBufferAccessSizeAlignment))
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *s1,
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->sampleLocationSampleCounts != s2->sampleLocationSampleCounts) ||
      (s1->sampleLocationSubPixelBits != s2->sampleLocationSubPixelBits) ||
      (s1->variableSampleLocations != s2->variableSampleLocations))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxSampleLocationGridSize, &s2->maxSampleLocationGridSize))
    return false;

  // local array members
  if (memcmp(s1->sampleLocationCoordinateRange, s2->sampleLocationCoordinateRange,
             2 * sizeof(float)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceSamplerFilterMinmaxProperties(
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *s1,
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *s2) {
  // local, simple types
  if ((s1->filterMinmaxSingleComponentFormats != s2->filterMinmaxSingleComponentFormats) ||
      (s1->filterMinmaxImageComponentMapping != s2->filterMinmaxImageComponentMapping))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_sampler_filter_minmax
bool compare_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s1,
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->filterMinmaxSingleComponentFormats != s2->filterMinmaxSingleComponentFormats) ||
      (s1->filterMinmaxImageComponentMapping != s2->filterMinmaxImageComponentMapping))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_sampler_filter_minmax
bool compare_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s1,
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->filterMinmaxSingleComponentFormats != s2->filterMinmaxSingleComponentFormats) ||
      (s1->filterMinmaxImageComponentMapping != s2->filterMinmaxImageComponentMapping))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *s1,
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *s2) {
  // local, simple types
  if ((s1->samplerYcbcrConversion != s2->samplerYcbcrConversion))
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *s1,
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->samplerYcbcrConversion != s2->samplerYcbcrConversion))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceScalarBlockLayoutFeatures(
    VkPhysicalDeviceScalarBlockLayoutFeatures const *s1,
    VkPhysicalDeviceScalarBlockLayoutFeatures const *s2) {
  // local, simple types
  if ((s1->scalarBlockLayout != s2->scalarBlockLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 93 && VK_HEADER_VERSION <= 130 && VK_EXT_scalar_block_layout
bool compare_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s1,
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->scalarBlockLayout != s2->scalarBlockLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_scalar_block_layout
bool compare_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s1,
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->scalarBlockLayout != s2->scalarBlockLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls
bool compare_VkPhysicalDeviceSchedulingControlsFeaturesARM(
    VkPhysicalDeviceSchedulingControlsFeaturesARM const *s1,
    VkPhysicalDeviceSchedulingControlsFeaturesARM const *s2) {
  // local, simple types
  if ((s1->schedulingControls != s2->schedulingControls))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls
bool compare_VkPhysicalDeviceSchedulingControlsPropertiesARM(
    VkPhysicalDeviceSchedulingControlsPropertiesARM const *s1,
    VkPhysicalDeviceSchedulingControlsPropertiesARM const *s2) {
  // local, simple types
  if ((s1->schedulingControlsFlags != s2->schedulingControlsFlags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *s1,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *s2) {
  // local, simple types
  if ((s1->separateDepthStencilLayouts != s2->separateDepthStencilLayouts))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s1,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->separateDepthStencilLayouts != s2->separateDepthStencilLayouts))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s1,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->separateDepthStencilLayouts != s2->separateDepthStencilLayouts))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 278 && VK_NV_shader_atomic_float16_vector
bool compare_VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(
    VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV const *s1,
    VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV const *s2) {
  // local, simple types
  if ((s1->shaderFloat16VectorAtomics != s2->shaderFloat16VectorAtomics))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_EXT_shader_atomic_float2
bool compare_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *s1,
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderBufferFloat16Atomics != s2->shaderBufferFloat16Atomics) ||
      (s1->shaderBufferFloat16AtomicAdd != s2->shaderBufferFloat16AtomicAdd) ||
      (s1->shaderBufferFloat16AtomicMinMax != s2->shaderBufferFloat16AtomicMinMax) ||
      (s1->shaderBufferFloat32AtomicMinMax != s2->shaderBufferFloat32AtomicMinMax) ||
      (s1->shaderBufferFloat64AtomicMinMax != s2->shaderBufferFloat64AtomicMinMax) ||
      (s1->shaderSharedFloat16Atomics != s2->shaderSharedFloat16Atomics) ||
      (s1->shaderSharedFloat16AtomicAdd != s2->shaderSharedFloat16AtomicAdd) ||
      (s1->shaderSharedFloat16AtomicMinMax != s2->shaderSharedFloat16AtomicMinMax) ||
      (s1->shaderSharedFloat32AtomicMinMax != s2->shaderSharedFloat32AtomicMinMax) ||
      (s1->shaderSharedFloat64AtomicMinMax != s2->shaderSharedFloat64AtomicMinMax) ||
      (s1->shaderImageFloat32AtomicMinMax != s2->shaderImageFloat32AtomicMinMax) ||
      (s1->sparseImageFloat32AtomicMinMax != s2->sparseImageFloat32AtomicMinMax))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_shader_atomic_float
bool compare_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *s1,
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderBufferFloat32Atomics != s2->shaderBufferFloat32Atomics) ||
      (s1->shaderBufferFloat32AtomicAdd != s2->shaderBufferFloat32AtomicAdd) ||
      (s1->shaderBufferFloat64Atomics != s2->shaderBufferFloat64Atomics) ||
      (s1->shaderBufferFloat64AtomicAdd != s2->shaderBufferFloat64AtomicAdd) ||
      (s1->shaderSharedFloat32Atomics != s2->shaderSharedFloat32Atomics) ||
      (s1->shaderSharedFloat32AtomicAdd != s2->shaderSharedFloat32AtomicAdd) ||
      (s1->shaderSharedFloat64Atomics != s2->shaderSharedFloat64Atomics) ||
      (s1->shaderSharedFloat64AtomicAdd != s2->shaderSharedFloat64AtomicAdd) ||
      (s1->shaderImageFloat32Atomics != s2->shaderImageFloat32Atomics) ||
      (s1->shaderImageFloat32AtomicAdd != s2->shaderImageFloat32AtomicAdd) ||
      (s1->sparseImageFloat32Atomics != s2->sparseImageFloat32Atomics) ||
      (s1->sparseImageFloat32AtomicAdd != s2->sparseImageFloat32AtomicAdd))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderAtomicInt64Features(
    VkPhysicalDeviceShaderAtomicInt64Features const *s1,
    VkPhysicalDeviceShaderAtomicInt64Features const *s2) {
  // local, simple types
  if ((s1->shaderBufferInt64Atomics != s2->shaderBufferInt64Atomics) ||
      (s1->shaderSharedInt64Atomics != s2->shaderSharedInt64Atomics))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_atomic_int64
bool compare_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s1,
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderBufferInt64Atomics != s2->shaderBufferInt64Atomics) ||
      (s1->shaderSharedInt64Atomics != s2->shaderSharedInt64Atomics))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_shader_atomic_int64
bool compare_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s1,
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderBufferInt64Atomics != s2->shaderBufferInt64Atomics) ||
      (s1->shaderSharedInt64Atomics != s2->shaderSharedInt64Atomics))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 311 && VK_KHR_shader_bfloat16
bool compare_VkPhysicalDeviceShaderBfloat16FeaturesKHR(
    VkPhysicalDeviceShaderBfloat16FeaturesKHR const *s1,
    VkPhysicalDeviceShaderBfloat16FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderBFloat16Type != s2->shaderBFloat16Type) ||
      (s1->shaderBFloat16DotProduct != s2->shaderBFloat16DotProduct) ||
      (s1->shaderBFloat16CooperativeMatrix != s2->shaderBFloat16CooperativeMatrix))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_shader_clock
bool compare_VkPhysicalDeviceShaderClockFeaturesKHR(
    VkPhysicalDeviceShaderClockFeaturesKHR const *s1,
    VkPhysicalDeviceShaderClockFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderSubgroupClock != s2->shaderSubgroupClock) ||
      (s1->shaderDeviceClock != s2->shaderDeviceClock))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 231 && VK_ARM_shader_core_builtins
bool compare_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(
    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM const *s1,
    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM const *s2) {
  // local, simple types
  if ((s1->shaderCoreBuiltins != s2->shaderCoreBuiltins))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 231 && VK_HEADER_VERSION <= 231 && VK_ARM_shader_core_builtins
bool compare_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s1,
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s2) {
  // local, simple types
  if ((s1->shaderCoreCount != s2->shaderCoreCount) ||
      (s1->shaderWarpsPerCore != s2->shaderWarpsPerCore))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 232 && VK_ARM_shader_core_builtins
bool compare_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s1,
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s2) {
  // local, simple types
  if ((s1->shaderCoreMask != s2->shaderCoreMask) || (s1->shaderCoreCount != s2->shaderCoreCount) ||
      (s1->shaderWarpsPerCore != s2->shaderWarpsPerCore))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2
bool compare_VkPhysicalDeviceShaderCoreProperties2AMD(
    VkPhysicalDeviceShaderCoreProperties2AMD const *s1,
    VkPhysicalDeviceShaderCoreProperties2AMD const *s2) {
  // local, simple types
  if ((s1->shaderCoreFeatures != s2->shaderCoreFeatures) ||
      (s1->activeComputeUnitCount != s2->activeComputeUnitCount))
    return false;

  return true;
}
#endif

#if VK_AMD_shader_core_properties
bool compare_VkPhysicalDeviceShaderCorePropertiesAMD(
    VkPhysicalDeviceShaderCorePropertiesAMD const *s1,
    VkPhysicalDeviceShaderCorePropertiesAMD const *s2) {
  // local, simple types
  if ((s1->shaderEngineCount != s2->shaderEngineCount) ||
      (s1->shaderArraysPerEngineCount != s2->shaderArraysPerEngineCount) ||
      (s1->computeUnitsPerShaderArray != s2->computeUnitsPerShaderArray) ||
      (s1->simdPerComputeUnit != s2->simdPerComputeUnit) ||
      (s1->wavefrontsPerSimd != s2->wavefrontsPerSimd) ||
      (s1->wavefrontSize != s2->wavefrontSize) || (s1->sgprsPerSimd != s2->sgprsPerSimd) ||
      (s1->minSgprAllocation != s2->minSgprAllocation) ||
      (s1->maxSgprAllocation != s2->maxSgprAllocation) ||
      (s1->sgprAllocationGranularity != s2->sgprAllocationGranularity) ||
      (s1->vgprsPerSimd != s2->vgprsPerSimd) || (s1->minVgprAllocation != s2->minVgprAllocation) ||
      (s1->maxVgprAllocation != s2->maxVgprAllocation) ||
      (s1->vgprAllocationGranularity != s2->vgprAllocationGranularity))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_ARM_shader_core_properties
bool compare_VkPhysicalDeviceShaderCorePropertiesARM(
    VkPhysicalDeviceShaderCorePropertiesARM const *s1,
    VkPhysicalDeviceShaderCorePropertiesARM const *s2) {
  // local, simple types
  if ((s1->pixelRate != s2->pixelRate) || (s1->texelRate != s2->texelRate) ||
      (s1->fmaRate != s2->fmaRate))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures const *s1,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures const *s2) {
  // local, simple types
  if ((s1->shaderDemoteToHelperInvocation != s2->shaderDemoteToHelperInvocation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 113 && VK_HEADER_VERSION <= 203 &&                                        \
    VK_EXT_shader_demote_to_helper_invocation
bool compare_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s1,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderDemoteToHelperInvocation != s2->shaderDemoteToHelperInvocation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_shader_demote_to_helper_invocation
bool compare_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s1,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderDemoteToHelperInvocation != s2->shaderDemoteToHelperInvocation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 105 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *s1,
    VkPhysicalDeviceShaderDrawParameterFeatures const *s2) {
  // local, simple types
  if ((s1->shaderDrawParameters != s2->shaderDrawParameters))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *s1,
    VkPhysicalDeviceShaderDrawParameterFeatures const *s2) {
  // local, simple types
  if ((s1->shaderDrawParameters != s2->shaderDrawParameters))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceShaderDrawParametersFeatures(
    VkPhysicalDeviceShaderDrawParametersFeatures const *s1,
    VkPhysicalDeviceShaderDrawParametersFeatures const *s2) {
  // local, simple types
  if ((s1->shaderDrawParameters != s2->shaderDrawParameters))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 215 && VK_AMD_shader_early_and_late_fragment_tests
bool compare_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD const *s1,
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD const *s2) {
  // local, simple types
  if ((s1->shaderEarlyAndLateFragmentTests != s2->shaderEarlyAndLateFragmentTests))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 214 && VK_HEADER_VERSION <= 214 &&                                        \
    VK_AMD_shader_early_and_late_fragment_tests
bool compare_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT const *s1,
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderEarlyAndLateFragmentTests != s2->shaderEarlyAndLateFragmentTests))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&              \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceShaderEnqueueFeaturesAMDX(
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *s1,
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *s2) {
  // local, simple types
  if ((s1->shaderEnqueue != s2->shaderEnqueue))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceShaderEnqueueFeaturesAMDX(
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *s1,
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *s2) {
  // local, simple types
  if ((s1->shaderEnqueue != s2->shaderEnqueue) || (s1->shaderMeshEnqueue != s2->shaderMeshEnqueue))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&              \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceShaderEnqueuePropertiesAMDX(
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *s1,
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *s2) {
  // local, simple types
  if ((s1->maxExecutionGraphDepth != s2->maxExecutionGraphDepth) ||
      (s1->maxExecutionGraphShaderOutputNodes != s2->maxExecutionGraphShaderOutputNodes) ||
      (s1->maxExecutionGraphShaderPayloadSize != s2->maxExecutionGraphShaderPayloadSize) ||
      (s1->maxExecutionGraphShaderPayloadCount != s2->maxExecutionGraphShaderPayloadCount) ||
      (s1->executionGraphDispatchAddressAlignment != s2->executionGraphDispatchAddressAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceShaderEnqueuePropertiesAMDX(
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *s1,
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *s2) {
  // local, simple types
  if ((s1->maxExecutionGraphDepth != s2->maxExecutionGraphDepth) ||
      (s1->maxExecutionGraphShaderOutputNodes != s2->maxExecutionGraphShaderOutputNodes) ||
      (s1->maxExecutionGraphShaderPayloadSize != s2->maxExecutionGraphShaderPayloadSize) ||
      (s1->maxExecutionGraphShaderPayloadCount != s2->maxExecutionGraphShaderPayloadCount) ||
      (s1->executionGraphDispatchAddressAlignment != s2->executionGraphDispatchAddressAlignment) ||
      (s1->maxExecutionGraphWorkgroups != s2->maxExecutionGraphWorkgroups))
    return false;

  // local array members
  if (memcmp(s1->maxExecutionGraphWorkgroupCount, s2->maxExecutionGraphWorkgroupCount,
             3 * sizeof(uint32_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceShaderExpectAssumeFeatures(
    VkPhysicalDeviceShaderExpectAssumeFeatures const *s1,
    VkPhysicalDeviceShaderExpectAssumeFeatures const *s2) {
  // local, simple types
  if ((s1->shaderExpectAssume != s2->shaderExpectAssume))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_expect_assume
bool compare_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR(
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *s1,
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderExpectAssume != s2->shaderExpectAssume))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_shader_expect_assume
bool compare_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR(
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *s1,
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderExpectAssume != s2->shaderExpectAssume))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderFloat16Int8Features(
    VkPhysicalDeviceShaderFloat16Int8Features const *s1,
    VkPhysicalDeviceShaderFloat16Int8Features const *s2) {
  // local, simple types
  if ((s1->shaderFloat16 != s2->shaderFloat16) || (s1->shaderInt8 != s2->shaderInt8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 115 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderFloat16 != s2->shaderFloat16) || (s1->shaderInt8 != s2->shaderInt8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderFloat16 != s2->shaderFloat16) || (s1->shaderInt8 != s2->shaderInt8))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_EXT_shader_float8
bool compare_VkPhysicalDeviceShaderFloat8FeaturesEXT(
    VkPhysicalDeviceShaderFloat8FeaturesEXT const *s1,
    VkPhysicalDeviceShaderFloat8FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderFloat8 != s2->shaderFloat8) ||
      (s1->shaderFloat8CooperativeMatrix != s2->shaderFloat8CooperativeMatrix))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceShaderFloatControls2Features(
    VkPhysicalDeviceShaderFloatControls2Features const *s1,
    VkPhysicalDeviceShaderFloatControls2Features const *s2) {
  // local, simple types
  if ((s1->shaderFloatControls2 != s2->shaderFloatControls2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_float_controls2
bool compare_VkPhysicalDeviceShaderFloatControls2FeaturesKHR(
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *s1,
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderFloatControls2 != s2->shaderFloatControls2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_shader_float_controls2
bool compare_VkPhysicalDeviceShaderFloatControls2FeaturesKHR(
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *s1,
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderFloatControls2 != s2->shaderFloatControls2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 155 && VK_EXT_shader_image_atomic_int64
bool compare_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *s1,
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderImageInt64Atomics != s2->shaderImageInt64Atomics) ||
      (s1->sparseImageInt64Atomics != s2->sparseImageInt64Atomics))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shader_image_footprint
bool compare_VkPhysicalDeviceShaderImageFootprintFeaturesNV(
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *s1,
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *s2) {
  // local, simple types
  if ((s1->imageFootprint != s2->imageFootprint))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderIntegerDotProductFeatures(
    VkPhysicalDeviceShaderIntegerDotProductFeatures const *s1,
    VkPhysicalDeviceShaderIntegerDotProductFeatures const *s2) {
  // local, simple types
  if ((s1->shaderIntegerDotProduct != s2->shaderIntegerDotProduct))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 190 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderIntegerDotProduct != s2->shaderIntegerDotProduct))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderIntegerDotProduct != s2->shaderIntegerDotProduct))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderIntegerDotProductProperties(
    VkPhysicalDeviceShaderIntegerDotProductProperties const *s1,
    VkPhysicalDeviceShaderIntegerDotProductProperties const *s2) {
  // local, simple types
  if ((s1->integerDotProduct8BitUnsignedAccelerated !=
       s2->integerDotProduct8BitUnsignedAccelerated) ||
      (s1->integerDotProduct8BitSignedAccelerated != s2->integerDotProduct8BitSignedAccelerated) ||
      (s1->integerDotProduct8BitMixedSignednessAccelerated !=
       s2->integerDotProduct8BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProduct4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedSignedAccelerated !=
       s2->integerDotProduct4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProduct4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProduct16BitUnsignedAccelerated !=
       s2->integerDotProduct16BitUnsignedAccelerated) ||
      (s1->integerDotProduct16BitSignedAccelerated !=
       s2->integerDotProduct16BitSignedAccelerated) ||
      (s1->integerDotProduct16BitMixedSignednessAccelerated !=
       s2->integerDotProduct16BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct32BitUnsignedAccelerated !=
       s2->integerDotProduct32BitUnsignedAccelerated) ||
      (s1->integerDotProduct32BitSignedAccelerated !=
       s2->integerDotProduct32BitSignedAccelerated) ||
      (s1->integerDotProduct32BitMixedSignednessAccelerated !=
       s2->integerDotProduct32BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct64BitUnsignedAccelerated !=
       s2->integerDotProduct64BitUnsignedAccelerated) ||
      (s1->integerDotProduct64BitSignedAccelerated !=
       s2->integerDotProduct64BitSignedAccelerated) ||
      (s1->integerDotProduct64BitMixedSignednessAccelerated !=
       s2->integerDotProduct64BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 190 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->integerDotProduct8BitUnsignedAccelerated !=
       s2->integerDotProduct8BitUnsignedAccelerated) ||
      (s1->integerDotProduct8BitSignedAccelerated != s2->integerDotProduct8BitSignedAccelerated) ||
      (s1->integerDotProduct8BitMixedSignednessAccelerated !=
       s2->integerDotProduct8BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProduct4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedSignedAccelerated !=
       s2->integerDotProduct4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProduct4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProduct16BitUnsignedAccelerated !=
       s2->integerDotProduct16BitUnsignedAccelerated) ||
      (s1->integerDotProduct16BitSignedAccelerated !=
       s2->integerDotProduct16BitSignedAccelerated) ||
      (s1->integerDotProduct16BitMixedSignednessAccelerated !=
       s2->integerDotProduct16BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct32BitUnsignedAccelerated !=
       s2->integerDotProduct32BitUnsignedAccelerated) ||
      (s1->integerDotProduct32BitSignedAccelerated !=
       s2->integerDotProduct32BitSignedAccelerated) ||
      (s1->integerDotProduct32BitMixedSignednessAccelerated !=
       s2->integerDotProduct32BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct64BitUnsignedAccelerated !=
       s2->integerDotProduct64BitUnsignedAccelerated) ||
      (s1->integerDotProduct64BitSignedAccelerated !=
       s2->integerDotProduct64BitSignedAccelerated) ||
      (s1->integerDotProduct64BitMixedSignednessAccelerated !=
       s2->integerDotProduct64BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->integerDotProduct8BitUnsignedAccelerated !=
       s2->integerDotProduct8BitUnsignedAccelerated) ||
      (s1->integerDotProduct8BitSignedAccelerated != s2->integerDotProduct8BitSignedAccelerated) ||
      (s1->integerDotProduct8BitMixedSignednessAccelerated !=
       s2->integerDotProduct8BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProduct4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedSignedAccelerated !=
       s2->integerDotProduct4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProduct4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProduct16BitUnsignedAccelerated !=
       s2->integerDotProduct16BitUnsignedAccelerated) ||
      (s1->integerDotProduct16BitSignedAccelerated !=
       s2->integerDotProduct16BitSignedAccelerated) ||
      (s1->integerDotProduct16BitMixedSignednessAccelerated !=
       s2->integerDotProduct16BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct32BitUnsignedAccelerated !=
       s2->integerDotProduct32BitUnsignedAccelerated) ||
      (s1->integerDotProduct32BitSignedAccelerated !=
       s2->integerDotProduct32BitSignedAccelerated) ||
      (s1->integerDotProduct32BitMixedSignednessAccelerated !=
       s2->integerDotProduct32BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct64BitUnsignedAccelerated !=
       s2->integerDotProduct64BitUnsignedAccelerated) ||
      (s1->integerDotProduct64BitSignedAccelerated !=
       s2->integerDotProduct64BitSignedAccelerated) ||
      (s1->integerDotProduct64BitMixedSignednessAccelerated !=
       s2->integerDotProduct64BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 115 && VK_INTEL_shader_integer_functions2
bool compare_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *s1,
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *s2) {
  // local, simple types
  if ((s1->shaderIntegerFunctions2 != s2->shaderIntegerFunctions2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 114 && VK_INTEL_shader_integer_functions2
bool compare_VkPhysicalDeviceShaderIntegerFunctions2INTEL(
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *s1,
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *s2) {
  // local, simple types
  if ((s1->shaderIntegerFunctions2 != s2->shaderIntegerFunctions2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_KHR_shader_maximal_reconvergence
bool compare_VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(
    VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR const *s1,
    VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderMaximalReconvergence != s2->shaderMaximalReconvergence))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(
    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT const *s1,
    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderModuleIdentifier != s2->shaderModuleIdentifier))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(
    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT const *s1,
    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT const *s2) {
  // local array members
  if (memcmp(s1->shaderModuleIdentifierAlgorithmUUID, s2->shaderModuleIdentifierAlgorithmUUID,
             VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_object
bool compare_VkPhysicalDeviceShaderObjectFeaturesEXT(
    VkPhysicalDeviceShaderObjectFeaturesEXT const *s1,
    VkPhysicalDeviceShaderObjectFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderObject != s2->shaderObject))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_object
bool compare_VkPhysicalDeviceShaderObjectPropertiesEXT(
    VkPhysicalDeviceShaderObjectPropertiesEXT const *s1,
    VkPhysicalDeviceShaderObjectPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->shaderBinaryVersion != s2->shaderBinaryVersion))
    return false;

  // local array members
  if (memcmp(s1->shaderBinaryUUID, s2->shaderBinaryUUID, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_KHR_shader_quad_control
bool compare_VkPhysicalDeviceShaderQuadControlFeaturesKHR(
    VkPhysicalDeviceShaderQuadControlFeaturesKHR const *s1,
    VkPhysicalDeviceShaderQuadControlFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderQuadControl != s2->shaderQuadControl))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 288 && VK_KHR_shader_relaxed_extended_instruction
bool compare_VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(
    VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR const *s1,
    VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderRelaxedExtendedInstruction != s2->shaderRelaxedExtendedInstruction))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 286 && VK_EXT_shader_replicated_composites
bool compare_VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT(
    VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT const *s1,
    VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderReplicatedComposites != s2->shaderReplicatedComposites))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
bool compare_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *s1,
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *s2) {
  // local, simple types
  if ((s1->shaderSMBuiltins != s2->shaderSMBuiltins))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
bool compare_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *s1,
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *s2) {
  // local, simple types
  if ((s1->shaderSMCount != s2->shaderSMCount) || (s1->shaderWarpsPerSM != s2->shaderWarpsPerSM))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *s1,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *s2) {
  // local, simple types
  if ((s1->shaderSubgroupExtendedTypes != s2->shaderSubgroupExtendedTypes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 123 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_subgroup_extended_types
bool compare_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderSubgroupExtendedTypes != s2->shaderSubgroupExtendedTypes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_shader_subgroup_extended_types
bool compare_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderSubgroupExtendedTypes != s2->shaderSubgroupExtendedTypes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceShaderSubgroupRotateFeatures(
    VkPhysicalDeviceShaderSubgroupRotateFeatures const *s1,
    VkPhysicalDeviceShaderSubgroupRotateFeatures const *s2) {
  // local, simple types
  if ((s1->shaderSubgroupRotate != s2->shaderSubgroupRotate) ||
      (s1->shaderSubgroupRotateClustered != s2->shaderSubgroupRotateClustered))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_subgroup_rotate
bool compare_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderSubgroupRotate != s2->shaderSubgroupRotate) ||
      (s1->shaderSubgroupRotateClustered != s2->shaderSubgroupRotateClustered))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_shader_subgroup_rotate
bool compare_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderSubgroupRotate != s2->shaderSubgroupRotate) ||
      (s1->shaderSubgroupRotateClustered != s2->shaderSubgroupRotateClustered))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 180 && VK_KHR_shader_subgroup_uniform_control_flow
bool compare_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderSubgroupUniformControlFlow != s2->shaderSubgroupUniformControlFlow))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderTerminateInvocationFeatures(
    VkPhysicalDeviceShaderTerminateInvocationFeatures const *s1,
    VkPhysicalDeviceShaderTerminateInvocationFeatures const *s2) {
  // local, simple types
  if ((s1->shaderTerminateInvocation != s2->shaderTerminateInvocation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_terminate_invocation
bool compare_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s1,
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderTerminateInvocation != s2->shaderTerminateInvocation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_shader_terminate_invocation
bool compare_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s1,
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderTerminateInvocation != s2->shaderTerminateInvocation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_tile_image
bool compare_VkPhysicalDeviceShaderTileImageFeaturesEXT(
    VkPhysicalDeviceShaderTileImageFeaturesEXT const *s1,
    VkPhysicalDeviceShaderTileImageFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->shaderTileImageColorReadAccess != s2->shaderTileImageColorReadAccess) ||
      (s1->shaderTileImageDepthReadAccess != s2->shaderTileImageDepthReadAccess) ||
      (s1->shaderTileImageStencilReadAccess != s2->shaderTileImageStencilReadAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_tile_image
bool compare_VkPhysicalDeviceShaderTileImagePropertiesEXT(
    VkPhysicalDeviceShaderTileImagePropertiesEXT const *s1,
    VkPhysicalDeviceShaderTileImagePropertiesEXT const *s2) {
  // local, simple types
  if ((s1->shaderTileImageCoherentReadAccelerated != s2->shaderTileImageCoherentReadAccelerated) ||
      (s1->shaderTileImageReadSampleFromPixelRateInvocation !=
       s2->shaderTileImageReadSampleFromPixelRateInvocation) ||
      (s1->shaderTileImageReadFromHelperInvocation != s2->shaderTileImageReadFromHelperInvocation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPhysicalDeviceShadingRateImageFeaturesNV(
    VkPhysicalDeviceShadingRateImageFeaturesNV const *s1,
    VkPhysicalDeviceShadingRateImageFeaturesNV const *s2) {
  // local, simple types
  if ((s1->shadingRateImage != s2->shadingRateImage) ||
      (s1->shadingRateCoarseSampleOrder != s2->shadingRateCoarseSampleOrder))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPhysicalDeviceShadingRateImagePropertiesNV(
    VkPhysicalDeviceShadingRateImagePropertiesNV const *s1,
    VkPhysicalDeviceShadingRateImagePropertiesNV const *s2) {
  // local, simple types
  if ((s1->shadingRatePaletteSize != s2->shadingRatePaletteSize) ||
      (s1->shadingRateMaxCoarseSamples != s2->shadingRateMaxCoarseSamples))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->shadingRateTexelSize, &s2->shadingRateTexelSize))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSparseImageFormatInfo2(
    VkPhysicalDeviceSparseImageFormatInfo2 const *s1,
    VkPhysicalDeviceSparseImageFormatInfo2 const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->type != s2->type) || (s1->samples != s2->samples) ||
      (s1->usage != s2->usage) || (s1->tiling != s2->tiling))
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceSparseImageFormatInfo2KHR(
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *s1,
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->type != s2->type) || (s1->samples != s2->samples) ||
      (s1->usage != s2->usage) || (s1->tiling != s2->tiling))
    return false;

  return true;
}
#endif

bool compare_VkPhysicalDeviceSparseProperties(VkPhysicalDeviceSparseProperties const *s1,
                                              VkPhysicalDeviceSparseProperties const *s2) {
  // local, simple types
  if ((s1->residencyStandard2DBlockShape != s2->residencyStandard2DBlockShape) ||
      (s1->residencyStandard2DMultisampleBlockShape !=
       s2->residencyStandard2DMultisampleBlockShape) ||
      (s1->residencyStandard3DBlockShape != s2->residencyStandard3DBlockShape) ||
      (s1->residencyAlignedMipSize != s2->residencyAlignedMipSize) ||
      (s1->residencyNonResidentStrict != s2->residencyNonResidentStrict))
    return false;

  return true;
}

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSubgroupProperties(VkPhysicalDeviceSubgroupProperties const *s1,
                                                VkPhysicalDeviceSubgroupProperties const *s2) {
  // local, simple types
  if ((s1->subgroupSize != s2->subgroupSize) || (s1->supportedStages != s2->supportedStages) ||
      (s1->supportedOperations != s2->supportedOperations) ||
      (s1->quadOperationsInAllStages != s2->quadOperationsInAllStages))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSubgroupSizeControlFeatures(
    VkPhysicalDeviceSubgroupSizeControlFeatures const *s1,
    VkPhysicalDeviceSubgroupSizeControlFeatures const *s2) {
  // local, simple types
  if ((s1->subgroupSizeControl != s2->subgroupSizeControl) ||
      (s1->computeFullSubgroups != s2->computeFullSubgroups))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 118 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->subgroupSizeControl != s2->subgroupSizeControl) ||
      (s1->computeFullSubgroups != s2->computeFullSubgroups))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->subgroupSizeControl != s2->subgroupSizeControl) ||
      (s1->computeFullSubgroups != s2->computeFullSubgroups))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSubgroupSizeControlProperties(
    VkPhysicalDeviceSubgroupSizeControlProperties const *s1,
    VkPhysicalDeviceSubgroupSizeControlProperties const *s2) {
  // local, simple types
  if ((s1->minSubgroupSize != s2->minSubgroupSize) ||
      (s1->maxSubgroupSize != s2->maxSubgroupSize) ||
      (s1->maxComputeWorkgroupSubgroups != s2->maxComputeWorkgroupSubgroups) ||
      (s1->requiredSubgroupSizeStages != s2->requiredSubgroupSizeStages))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->minSubgroupSize != s2->minSubgroupSize) ||
      (s1->maxSubgroupSize != s2->maxSubgroupSize) ||
      (s1->maxComputeWorkgroupSubgroups != s2->maxComputeWorkgroupSubgroups) ||
      (s1->requiredSubgroupSizeStages != s2->requiredSubgroupSizeStages))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->minSubgroupSize != s2->minSubgroupSize) ||
      (s1->maxSubgroupSize != s2->maxSubgroupSize) ||
      (s1->maxComputeWorkgroupSubgroups != s2->maxComputeWorkgroupSubgroups) ||
      (s1->requiredSubgroupSizeStages != s2->requiredSubgroupSizeStages))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(
    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT const *s1,
    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->subpassMergeFeedback != s2->subpassMergeFeedback))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *s1,
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *s2) {
  // local, simple types
  if ((s1->subpassShading != s2->subpassShading))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *s1,
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *s2) {
  // local, simple types
  if ((s1->maxSubpassShadingWorkgroupSizeAspectRatio !=
       s2->maxSubpassShadingWorkgroupSizeAspectRatio))
    return false;

  return true;
}
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkPhysicalDeviceSurfaceInfo2KHR(VkPhysicalDeviceSurfaceInfo2KHR const *s1,
                                             VkPhysicalDeviceSurfaceInfo2KHR const *s2) {
  // local, simple types
  if ((s1->surface != s2->surface))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT const *s1,
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT const *s2) {
  // local, simple types
  if ((s1->swapchainMaintenance1 != s2->swapchainMaintenance1))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSynchronization2Features(
    VkPhysicalDeviceSynchronization2Features const *s1,
    VkPhysicalDeviceSynchronization2Features const *s2) {
  // local, simple types
  if ((s1->synchronization2 != s2->synchronization2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s1,
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->synchronization2 != s2->synchronization2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s1,
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->synchronization2 != s2->synchronization2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkPhysicalDeviceTensorFeaturesARM(VkPhysicalDeviceTensorFeaturesARM const *s1,
                                               VkPhysicalDeviceTensorFeaturesARM const *s2) {
  // local, simple types
  if ((s1->tensorNonPacked != s2->tensorNonPacked) ||
      (s1->shaderTensorAccess != s2->shaderTensorAccess) ||
      (s1->shaderStorageTensorArrayDynamicIndexing !=
       s2->shaderStorageTensorArrayDynamicIndexing) ||
      (s1->shaderStorageTensorArrayNonUniformIndexing !=
       s2->shaderStorageTensorArrayNonUniformIndexing) ||
      (s1->descriptorBindingStorageTensorUpdateAfterBind !=
       s2->descriptorBindingStorageTensorUpdateAfterBind) ||
      (s1->tensors != s2->tensors))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkPhysicalDeviceTensorPropertiesARM(VkPhysicalDeviceTensorPropertiesARM const *s1,
                                                 VkPhysicalDeviceTensorPropertiesARM const *s2) {
  // local, simple types
  if ((s1->maxTensorDimensionCount != s2->maxTensorDimensionCount) ||
      (s1->maxTensorElements != s2->maxTensorElements) ||
      (s1->maxPerDimensionTensorElements != s2->maxPerDimensionTensorElements) ||
      (s1->maxTensorStride != s2->maxTensorStride) || (s1->maxTensorSize != s2->maxTensorSize) ||
      (s1->maxTensorShaderAccessArrayLength != s2->maxTensorShaderAccessArrayLength) ||
      (s1->maxTensorShaderAccessSize != s2->maxTensorShaderAccessSize) ||
      (s1->maxDescriptorSetStorageTensors != s2->maxDescriptorSetStorageTensors) ||
      (s1->maxPerStageDescriptorSetStorageTensors != s2->maxPerStageDescriptorSetStorageTensors) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageTensors !=
       s2->maxDescriptorSetUpdateAfterBindStorageTensors) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageTensors !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageTensors) ||
      (s1->shaderStorageTensorArrayNonUniformIndexingNative !=
       s2->shaderStorageTensorArrayNonUniformIndexingNative) ||
      (s1->shaderTensorSupportedStages != s2->shaderTensorSupportedStages))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
bool compare_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *s1,
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->texelBufferAlignment != s2->texelBufferAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceTexelBufferAlignmentProperties(
    VkPhysicalDeviceTexelBufferAlignmentProperties const *s1,
    VkPhysicalDeviceTexelBufferAlignmentProperties const *s2) {
  // local, simple types
  if ((s1->storageTexelBufferOffsetAlignmentBytes != s2->storageTexelBufferOffsetAlignmentBytes) ||
      (s1->storageTexelBufferOffsetSingleTexelAlignment !=
       s2->storageTexelBufferOffsetSingleTexelAlignment) ||
      (s1->uniformTexelBufferOffsetAlignmentBytes != s2->uniformTexelBufferOffsetAlignmentBytes) ||
      (s1->uniformTexelBufferOffsetSingleTexelAlignment !=
       s2->uniformTexelBufferOffsetSingleTexelAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 113 && VK_HEADER_VERSION <= 203 && VK_EXT_texel_buffer_alignment
bool compare_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s1,
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->storageTexelBufferOffsetAlignmentBytes != s2->storageTexelBufferOffsetAlignmentBytes) ||
      (s1->storageTexelBufferOffsetSingleTexelAlignment !=
       s2->storageTexelBufferOffsetSingleTexelAlignment) ||
      (s1->uniformTexelBufferOffsetAlignmentBytes != s2->uniformTexelBufferOffsetAlignmentBytes) ||
      (s1->uniformTexelBufferOffsetSingleTexelAlignment !=
       s2->uniformTexelBufferOffsetSingleTexelAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_texel_buffer_alignment
bool compare_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s1,
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->storageTexelBufferOffsetAlignmentBytes != s2->storageTexelBufferOffsetAlignmentBytes) ||
      (s1->storageTexelBufferOffsetSingleTexelAlignment !=
       s2->storageTexelBufferOffsetSingleTexelAlignment) ||
      (s1->uniformTexelBufferOffsetAlignmentBytes != s2->uniformTexelBufferOffsetAlignmentBytes) ||
      (s1->uniformTexelBufferOffsetSingleTexelAlignment !=
       s2->uniformTexelBufferOffsetSingleTexelAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceTextureCompressionASTCHDRFeatures(
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures const *s1,
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures const *s2) {
  // local, simple types
  if ((s1->textureCompressionASTC_HDR != s2->textureCompressionASTC_HDR))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 203 && VK_EXT_texture_compression_astc_hdr
bool compare_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s1,
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->textureCompressionASTC_HDR != s2->textureCompressionASTC_HDR))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_texture_compression_astc_hdr
bool compare_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s1,
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->textureCompressionASTC_HDR != s2->textureCompressionASTC_HDR))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap
bool compare_VkPhysicalDeviceTileMemoryHeapFeaturesQCOM(
    VkPhysicalDeviceTileMemoryHeapFeaturesQCOM const *s1,
    VkPhysicalDeviceTileMemoryHeapFeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->tileMemoryHeap != s2->tileMemoryHeap))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap
bool compare_VkPhysicalDeviceTileMemoryHeapPropertiesQCOM(
    VkPhysicalDeviceTileMemoryHeapPropertiesQCOM const *s1,
    VkPhysicalDeviceTileMemoryHeapPropertiesQCOM const *s2) {
  // local, simple types
  if ((s1->queueSubmitBoundary != s2->queueSubmitBoundary) ||
      (s1->tileBufferTransfers != s2->tileBufferTransfers))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties
bool compare_VkPhysicalDeviceTilePropertiesFeaturesQCOM(
    VkPhysicalDeviceTilePropertiesFeaturesQCOM const *s1,
    VkPhysicalDeviceTilePropertiesFeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->tileProperties != s2->tileProperties))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkPhysicalDeviceTileShadingFeaturesQCOM(
    VkPhysicalDeviceTileShadingFeaturesQCOM const *s1,
    VkPhysicalDeviceTileShadingFeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->tileShading != s2->tileShading) ||
      (s1->tileShadingFragmentStage != s2->tileShadingFragmentStage) ||
      (s1->tileShadingColorAttachments != s2->tileShadingColorAttachments) ||
      (s1->tileShadingDepthAttachments != s2->tileShadingDepthAttachments) ||
      (s1->tileShadingStencilAttachments != s2->tileShadingStencilAttachments) ||
      (s1->tileShadingInputAttachments != s2->tileShadingInputAttachments) ||
      (s1->tileShadingSampledAttachments != s2->tileShadingSampledAttachments) ||
      (s1->tileShadingPerTileDraw != s2->tileShadingPerTileDraw) ||
      (s1->tileShadingPerTileDispatch != s2->tileShadingPerTileDispatch) ||
      (s1->tileShadingDispatchTile != s2->tileShadingDispatchTile) ||
      (s1->tileShadingApron != s2->tileShadingApron) ||
      (s1->tileShadingAnisotropicApron != s2->tileShadingAnisotropicApron) ||
      (s1->tileShadingAtomicOps != s2->tileShadingAtomicOps) ||
      (s1->tileShadingImageProcessing != s2->tileShadingImageProcessing))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkPhysicalDeviceTileShadingPropertiesQCOM(
    VkPhysicalDeviceTileShadingPropertiesQCOM const *s1,
    VkPhysicalDeviceTileShadingPropertiesQCOM const *s2) {
  // local, simple types
  if ((s1->maxApronSize != s2->maxApronSize) || (s1->preferNonCoherent != s2->preferNonCoherent))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->tileGranularity, &s2->tileGranularity) ||
      !compare_VkExtent2D(&s1->maxTileShadingRate, &s2->maxTileShadingRate))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceTimelineSemaphoreFeatures(
    VkPhysicalDeviceTimelineSemaphoreFeatures const *s1,
    VkPhysicalDeviceTimelineSemaphoreFeatures const *s2) {
  // local, simple types
  if ((s1->timelineSemaphore != s2->timelineSemaphore))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->timelineSemaphore != s2->timelineSemaphore))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->timelineSemaphore != s2->timelineSemaphore))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceTimelineSemaphoreProperties(
    VkPhysicalDeviceTimelineSemaphoreProperties const *s1,
    VkPhysicalDeviceTimelineSemaphoreProperties const *s2) {
  // local, simple types
  if ((s1->maxTimelineSemaphoreValueDifference != s2->maxTimelineSemaphoreValueDifference))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxTimelineSemaphoreValueDifference != s2->maxTimelineSemaphoreValueDifference))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxTimelineSemaphoreValueDifference != s2->maxTimelineSemaphoreValueDifference))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceToolProperties(VkPhysicalDeviceToolProperties const *s1,
                                            VkPhysicalDeviceToolProperties const *s2) {
  // local, simple types
  if ((s1->purposes != s2->purposes))
    return false;

  // local array members
  if (strncmp(s1->name, s2->name, VK_MAX_EXTENSION_NAME_SIZE) != 0)
    return false;
  if (strncmp(s1->version, s2->version, VK_MAX_EXTENSION_NAME_SIZE) != 0)
    return false;
  if (strncmp(s1->description, s2->description, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  if (strncmp(s1->layer, s2->layer, VK_MAX_EXTENSION_NAME_SIZE) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 130 && VK_HEADER_VERSION <= 203 && VK_EXT_tooling_info
bool compare_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *s1,
                                               VkPhysicalDeviceToolPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->purposes != s2->purposes))
    return false;

  // local array members
  if (memcmp(s1->name, s2->name, VK_MAX_EXTENSION_NAME_SIZE * sizeof(char)) != 0)
    return false;
  if (memcmp(s1->version, s2->version, VK_MAX_EXTENSION_NAME_SIZE * sizeof(char)) != 0)
    return false;
  if (memcmp(s1->description, s2->description, VK_MAX_DESCRIPTION_SIZE * sizeof(char)) != 0)
    return false;
  if (memcmp(s1->layer, s2->layer, VK_MAX_EXTENSION_NAME_SIZE * sizeof(char)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_tooling_info
bool compare_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *s1,
                                               VkPhysicalDeviceToolPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->purposes != s2->purposes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *s1,
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->transformFeedback != s2->transformFeedback) ||
      (s1->geometryStreams != s2->geometryStreams))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *s1,
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxTransformFeedbackStreams != s2->maxTransformFeedbackStreams) ||
      (s1->maxTransformFeedbackBuffers != s2->maxTransformFeedbackBuffers) ||
      (s1->maxTransformFeedbackBufferSize != s2->maxTransformFeedbackBufferSize) ||
      (s1->maxTransformFeedbackStreamDataSize != s2->maxTransformFeedbackStreamDataSize) ||
      (s1->maxTransformFeedbackBufferDataSize != s2->maxTransformFeedbackBufferDataSize) ||
      (s1->maxTransformFeedbackBufferDataStride != s2->maxTransformFeedbackBufferDataStride) ||
      (s1->transformFeedbackQueries != s2->transformFeedbackQueries) ||
      (s1->transformFeedbackStreamsLinesTriangles != s2->transformFeedbackStreamsLinesTriangles) ||
      (s1->transformFeedbackRasterizationStreamSelect !=
       s2->transformFeedbackRasterizationStreamSelect) ||
      (s1->transformFeedbackDraw != s2->transformFeedbackDraw))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_unified_image_layouts
bool compare_VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR(
    VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR const *s1,
    VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->unifiedImageLayouts != s2->unifiedImageLayouts) ||
      (s1->unifiedImageLayoutsVideo != s2->unifiedImageLayoutsVideo))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *s1,
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *s2) {
  // local, simple types
  if ((s1->uniformBufferStandardLayout != s2->uniformBufferStandardLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_HEADER_VERSION <= 130 && VK_KHR_uniform_buffer_standard_layout
bool compare_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s1,
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->uniformBufferStandardLayout != s2->uniformBufferStandardLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_uniform_buffer_standard_layout
bool compare_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s1,
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->uniformBufferStandardLayout != s2->uniformBufferStandardLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 105 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *s1,
    VkPhysicalDeviceVariablePointerFeatures const *s2) {
  // local, simple types
  if ((s1->variablePointersStorageBuffer != s2->variablePointersStorageBuffer) ||
      (s1->variablePointers != s2->variablePointers))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *s1,
    VkPhysicalDeviceVariablePointerFeatures const *s2) {
  // local, simple types
  if ((s1->variablePointersStorageBuffer != s2->variablePointersStorageBuffer) ||
      (s1->variablePointers != s2->variablePointers))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 105 && VK_KHR_variable_pointers
bool compare_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s1,
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->variablePointersStorageBuffer != s2->variablePointersStorageBuffer) ||
      (s1->variablePointers != s2->variablePointers))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers
bool compare_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s1,
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->variablePointersStorageBuffer != s2->variablePointersStorageBuffer) ||
      (s1->variablePointers != s2->variablePointers))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceVariablePointersFeatures(
    VkPhysicalDeviceVariablePointersFeatures const *s1,
    VkPhysicalDeviceVariablePointersFeatures const *s2) {
  // local, simple types
  if ((s1->variablePointersStorageBuffer != s2->variablePointersStorageBuffer) ||
      (s1->variablePointers != s2->variablePointers))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers
bool compare_VkPhysicalDeviceVariablePointersFeaturesKHR(
    VkPhysicalDeviceVariablePointersFeaturesKHR const *s1,
    VkPhysicalDeviceVariablePointersFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->variablePointersStorageBuffer != s2->variablePointersStorageBuffer) ||
      (s1->variablePointers != s2->variablePointers))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeatures(
    VkPhysicalDeviceVertexAttributeDivisorFeatures const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeatures const *s2) {
  // local, simple types
  if ((s1->vertexAttributeInstanceRateDivisor != s2->vertexAttributeInstanceRateDivisor) ||
      (s1->vertexAttributeInstanceRateZeroDivisor != s2->vertexAttributeInstanceRateZeroDivisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->vertexAttributeInstanceRateDivisor != s2->vertexAttributeInstanceRateDivisor) ||
      (s1->vertexAttributeInstanceRateZeroDivisor != s2->vertexAttributeInstanceRateZeroDivisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->vertexAttributeInstanceRateDivisor != s2->vertexAttributeInstanceRateDivisor) ||
      (s1->vertexAttributeInstanceRateZeroDivisor != s2->vertexAttributeInstanceRateZeroDivisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->vertexAttributeInstanceRateDivisor != s2->vertexAttributeInstanceRateDivisor) ||
      (s1->vertexAttributeInstanceRateZeroDivisor != s2->vertexAttributeInstanceRateZeroDivisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->vertexAttributeInstanceRateDivisor != s2->vertexAttributeInstanceRateDivisor) ||
      (s1->vertexAttributeInstanceRateZeroDivisor != s2->vertexAttributeInstanceRateZeroDivisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->vertexAttributeInstanceRateDivisor != s2->vertexAttributeInstanceRateDivisor) ||
      (s1->vertexAttributeInstanceRateZeroDivisor != s2->vertexAttributeInstanceRateZeroDivisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceVertexAttributeDivisorProperties(
    VkPhysicalDeviceVertexAttributeDivisorProperties const *s1,
    VkPhysicalDeviceVertexAttributeDivisorProperties const *s2) {
  // local, simple types
  if ((s1->maxVertexAttribDivisor != s2->maxVertexAttribDivisor) ||
      (s1->supportsNonZeroFirstInstance != s2->supportsNonZeroFirstInstance))
    return false;

  return true;
}
#endif

#if VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->maxVertexAttribDivisor != s2->maxVertexAttribDivisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *s1,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxVertexAttribDivisor != s2->maxVertexAttribDivisor) ||
      (s1->supportsNonZeroFirstInstance != s2->supportsNonZeroFirstInstance))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *s1,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->maxVertexAttribDivisor != s2->maxVertexAttribDivisor) ||
      (s1->supportsNonZeroFirstInstance != s2->supportsNonZeroFirstInstance))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_EXT_vertex_attribute_robustness
bool compare_VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT(
    VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT const *s1,
    VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->vertexAttributeRobustness != s2->vertexAttributeRobustness))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
bool compare_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *s1,
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->vertexInputDynamicState != s2->vertexInputDynamicState))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9
bool compare_VkPhysicalDeviceVideoDecodeVP9FeaturesKHR(
    VkPhysicalDeviceVideoDecodeVP9FeaturesKHR const *s1,
    VkPhysicalDeviceVideoDecodeVP9FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->videoDecodeVP9 != s2->videoDecodeVP9))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkPhysicalDeviceVideoEncodeAV1FeaturesKHR(
    VkPhysicalDeviceVideoEncodeAV1FeaturesKHR const *s1,
    VkPhysicalDeviceVideoEncodeAV1FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->videoEncodeAV1 != s2->videoEncodeAV1))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR(
    VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR const *s1,
    VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR const *s2) {
  // local, simple types
  if ((s1->qualityLevel != s2->qualityLevel))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map
bool compare_VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR(
    VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR const *s1,
    VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->videoEncodeQuantizationMap != s2->videoEncodeQuantizationMap))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *s1,
                                                VkPhysicalDeviceVideoFormatInfoKHR const *s2) {
  // local, simple types
  if ((s1->imageUsage != s2->imageUsage))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *s1,
                                                VkPhysicalDeviceVideoFormatInfoKHR const *s2) {
  // local, simple types
  if ((s1->imageUsage != s2->imageUsage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_maintenance1
bool compare_VkPhysicalDeviceVideoMaintenance1FeaturesKHR(
    VkPhysicalDeviceVideoMaintenance1FeaturesKHR const *s1,
    VkPhysicalDeviceVideoMaintenance1FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->videoMaintenance1 != s2->videoMaintenance1))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2
bool compare_VkPhysicalDeviceVideoMaintenance2FeaturesKHR(
    VkPhysicalDeviceVideoMaintenance2FeaturesKHR const *s1,
    VkPhysicalDeviceVideoMaintenance2FeaturesKHR const *s2) {
  // local, simple types
  if ((s1->videoMaintenance2 != s2->videoMaintenance2))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan11Features(VkPhysicalDeviceVulkan11Features const *s1,
                                              VkPhysicalDeviceVulkan11Features const *s2) {
  // local, simple types
  if ((s1->storageBuffer16BitAccess != s2->storageBuffer16BitAccess) ||
      (s1->uniformAndStorageBuffer16BitAccess != s2->uniformAndStorageBuffer16BitAccess) ||
      (s1->storagePushConstant16 != s2->storagePushConstant16) ||
      (s1->storageInputOutput16 != s2->storageInputOutput16) || (s1->multiview != s2->multiview) ||
      (s1->multiviewGeometryShader != s2->multiviewGeometryShader) ||
      (s1->multiviewTessellationShader != s2->multiviewTessellationShader) ||
      (s1->variablePointersStorageBuffer != s2->variablePointersStorageBuffer) ||
      (s1->variablePointers != s2->variablePointers) ||
      (s1->protectedMemory != s2->protectedMemory) ||
      (s1->samplerYcbcrConversion != s2->samplerYcbcrConversion) ||
      (s1->shaderDrawParameters != s2->shaderDrawParameters))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan11Properties(VkPhysicalDeviceVulkan11Properties const *s1,
                                                VkPhysicalDeviceVulkan11Properties const *s2) {
  // local, simple types
  if ((s1->deviceNodeMask != s2->deviceNodeMask) || (s1->deviceLUIDValid != s2->deviceLUIDValid) ||
      (s1->subgroupSize != s2->subgroupSize) ||
      (s1->subgroupSupportedStages != s2->subgroupSupportedStages) ||
      (s1->subgroupSupportedOperations != s2->subgroupSupportedOperations) ||
      (s1->subgroupQuadOperationsInAllStages != s2->subgroupQuadOperationsInAllStages) ||
      (s1->pointClippingBehavior != s2->pointClippingBehavior) ||
      (s1->maxMultiviewViewCount != s2->maxMultiviewViewCount) ||
      (s1->maxMultiviewInstanceIndex != s2->maxMultiviewInstanceIndex) ||
      (s1->protectedNoFault != s2->protectedNoFault) ||
      (s1->maxPerSetDescriptors != s2->maxPerSetDescriptors) ||
      (s1->maxMemoryAllocationSize != s2->maxMemoryAllocationSize))
    return false;

  // local array members
  if (memcmp(s1->deviceUUID, s2->deviceUUID, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  if (memcmp(s1->driverUUID, s2->driverUUID, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  if (memcmp(s1->deviceLUID, s2->deviceLUID, VK_LUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan12Features(VkPhysicalDeviceVulkan12Features const *s1,
                                              VkPhysicalDeviceVulkan12Features const *s2) {
  // local, simple types
  if ((s1->samplerMirrorClampToEdge != s2->samplerMirrorClampToEdge) ||
      (s1->drawIndirectCount != s2->drawIndirectCount) ||
      (s1->storageBuffer8BitAccess != s2->storageBuffer8BitAccess) ||
      (s1->uniformAndStorageBuffer8BitAccess != s2->uniformAndStorageBuffer8BitAccess) ||
      (s1->storagePushConstant8 != s2->storagePushConstant8) ||
      (s1->shaderBufferInt64Atomics != s2->shaderBufferInt64Atomics) ||
      (s1->shaderSharedInt64Atomics != s2->shaderSharedInt64Atomics) ||
      (s1->shaderFloat16 != s2->shaderFloat16) || (s1->shaderInt8 != s2->shaderInt8) ||
      (s1->descriptorIndexing != s2->descriptorIndexing) ||
      (s1->shaderInputAttachmentArrayDynamicIndexing !=
       s2->shaderInputAttachmentArrayDynamicIndexing) ||
      (s1->shaderUniformTexelBufferArrayDynamicIndexing !=
       s2->shaderUniformTexelBufferArrayDynamicIndexing) ||
      (s1->shaderStorageTexelBufferArrayDynamicIndexing !=
       s2->shaderStorageTexelBufferArrayDynamicIndexing) ||
      (s1->shaderUniformBufferArrayNonUniformIndexing !=
       s2->shaderUniformBufferArrayNonUniformIndexing) ||
      (s1->shaderSampledImageArrayNonUniformIndexing !=
       s2->shaderSampledImageArrayNonUniformIndexing) ||
      (s1->shaderStorageBufferArrayNonUniformIndexing !=
       s2->shaderStorageBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageImageArrayNonUniformIndexing !=
       s2->shaderStorageImageArrayNonUniformIndexing) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexing !=
       s2->shaderInputAttachmentArrayNonUniformIndexing) ||
      (s1->shaderUniformTexelBufferArrayNonUniformIndexing !=
       s2->shaderUniformTexelBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageTexelBufferArrayNonUniformIndexing !=
       s2->shaderStorageTexelBufferArrayNonUniformIndexing) ||
      (s1->descriptorBindingUniformBufferUpdateAfterBind !=
       s2->descriptorBindingUniformBufferUpdateAfterBind) ||
      (s1->descriptorBindingSampledImageUpdateAfterBind !=
       s2->descriptorBindingSampledImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageImageUpdateAfterBind !=
       s2->descriptorBindingStorageImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageBufferUpdateAfterBind !=
       s2->descriptorBindingStorageBufferUpdateAfterBind) ||
      (s1->descriptorBindingUniformTexelBufferUpdateAfterBind !=
       s2->descriptorBindingUniformTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingStorageTexelBufferUpdateAfterBind !=
       s2->descriptorBindingStorageTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingUpdateUnusedWhilePending !=
       s2->descriptorBindingUpdateUnusedWhilePending) ||
      (s1->descriptorBindingPartiallyBound != s2->descriptorBindingPartiallyBound) ||
      (s1->descriptorBindingVariableDescriptorCount !=
       s2->descriptorBindingVariableDescriptorCount) ||
      (s1->runtimeDescriptorArray != s2->runtimeDescriptorArray) ||
      (s1->samplerFilterMinmax != s2->samplerFilterMinmax) ||
      (s1->scalarBlockLayout != s2->scalarBlockLayout) ||
      (s1->imagelessFramebuffer != s2->imagelessFramebuffer) ||
      (s1->uniformBufferStandardLayout != s2->uniformBufferStandardLayout) ||
      (s1->shaderSubgroupExtendedTypes != s2->shaderSubgroupExtendedTypes) ||
      (s1->separateDepthStencilLayouts != s2->separateDepthStencilLayouts) ||
      (s1->hostQueryReset != s2->hostQueryReset) ||
      (s1->timelineSemaphore != s2->timelineSemaphore) ||
      (s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice) ||
      (s1->vulkanMemoryModel != s2->vulkanMemoryModel) ||
      (s1->vulkanMemoryModelDeviceScope != s2->vulkanMemoryModelDeviceScope) ||
      (s1->vulkanMemoryModelAvailabilityVisibilityChains !=
       s2->vulkanMemoryModelAvailabilityVisibilityChains) ||
      (s1->shaderOutputViewportIndex != s2->shaderOutputViewportIndex) ||
      (s1->shaderOutputLayer != s2->shaderOutputLayer) ||
      (s1->subgroupBroadcastDynamicId != s2->subgroupBroadcastDynamicId))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan12Properties(VkPhysicalDeviceVulkan12Properties const *s1,
                                                VkPhysicalDeviceVulkan12Properties const *s2) {
  // local, simple types
  if ((s1->driverID != s2->driverID) ||
      (s1->denormBehaviorIndependence != s2->denormBehaviorIndependence) ||
      (s1->roundingModeIndependence != s2->roundingModeIndependence) ||
      (s1->shaderSignedZeroInfNanPreserveFloat16 != s2->shaderSignedZeroInfNanPreserveFloat16) ||
      (s1->shaderSignedZeroInfNanPreserveFloat32 != s2->shaderSignedZeroInfNanPreserveFloat32) ||
      (s1->shaderSignedZeroInfNanPreserveFloat64 != s2->shaderSignedZeroInfNanPreserveFloat64) ||
      (s1->shaderDenormPreserveFloat16 != s2->shaderDenormPreserveFloat16) ||
      (s1->shaderDenormPreserveFloat32 != s2->shaderDenormPreserveFloat32) ||
      (s1->shaderDenormPreserveFloat64 != s2->shaderDenormPreserveFloat64) ||
      (s1->shaderDenormFlushToZeroFloat16 != s2->shaderDenormFlushToZeroFloat16) ||
      (s1->shaderDenormFlushToZeroFloat32 != s2->shaderDenormFlushToZeroFloat32) ||
      (s1->shaderDenormFlushToZeroFloat64 != s2->shaderDenormFlushToZeroFloat64) ||
      (s1->shaderRoundingModeRTEFloat16 != s2->shaderRoundingModeRTEFloat16) ||
      (s1->shaderRoundingModeRTEFloat32 != s2->shaderRoundingModeRTEFloat32) ||
      (s1->shaderRoundingModeRTEFloat64 != s2->shaderRoundingModeRTEFloat64) ||
      (s1->shaderRoundingModeRTZFloat16 != s2->shaderRoundingModeRTZFloat16) ||
      (s1->shaderRoundingModeRTZFloat32 != s2->shaderRoundingModeRTZFloat32) ||
      (s1->shaderRoundingModeRTZFloat64 != s2->shaderRoundingModeRTZFloat64) ||
      (s1->maxUpdateAfterBindDescriptorsInAllPools !=
       s2->maxUpdateAfterBindDescriptorsInAllPools) ||
      (s1->shaderUniformBufferArrayNonUniformIndexingNative !=
       s2->shaderUniformBufferArrayNonUniformIndexingNative) ||
      (s1->shaderSampledImageArrayNonUniformIndexingNative !=
       s2->shaderSampledImageArrayNonUniformIndexingNative) ||
      (s1->shaderStorageBufferArrayNonUniformIndexingNative !=
       s2->shaderStorageBufferArrayNonUniformIndexingNative) ||
      (s1->shaderStorageImageArrayNonUniformIndexingNative !=
       s2->shaderStorageImageArrayNonUniformIndexingNative) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexingNative !=
       s2->shaderInputAttachmentArrayNonUniformIndexingNative) ||
      (s1->robustBufferAccessUpdateAfterBind != s2->robustBufferAccessUpdateAfterBind) ||
      (s1->quadDivergentImplicitLod != s2->quadDivergentImplicitLod) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSamplers !=
       s2->maxPerStageDescriptorUpdateAfterBindSamplers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindUniformBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindUniformBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSampledImages !=
       s2->maxPerStageDescriptorUpdateAfterBindSampledImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageImages !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInputAttachments !=
       s2->maxPerStageDescriptorUpdateAfterBindInputAttachments) ||
      (s1->maxPerStageUpdateAfterBindResources != s2->maxPerStageUpdateAfterBindResources) ||
      (s1->maxDescriptorSetUpdateAfterBindSamplers !=
       s2->maxDescriptorSetUpdateAfterBindSamplers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffers !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffers !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindSampledImages !=
       s2->maxDescriptorSetUpdateAfterBindSampledImages) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageImages !=
       s2->maxDescriptorSetUpdateAfterBindStorageImages) ||
      (s1->maxDescriptorSetUpdateAfterBindInputAttachments !=
       s2->maxDescriptorSetUpdateAfterBindInputAttachments) ||
      (s1->supportedDepthResolveModes != s2->supportedDepthResolveModes) ||
      (s1->supportedStencilResolveModes != s2->supportedStencilResolveModes) ||
      (s1->independentResolveNone != s2->independentResolveNone) ||
      (s1->independentResolve != s2->independentResolve) ||
      (s1->filterMinmaxSingleComponentFormats != s2->filterMinmaxSingleComponentFormats) ||
      (s1->filterMinmaxImageComponentMapping != s2->filterMinmaxImageComponentMapping) ||
      (s1->maxTimelineSemaphoreValueDifference != s2->maxTimelineSemaphoreValueDifference) ||
      (s1->framebufferIntegerColorSampleCounts != s2->framebufferIntegerColorSampleCounts))
    return false;

  // local, Vulkan struct types
  if (!compare_VkConformanceVersion(&s1->conformanceVersion, &s2->conformanceVersion))
    return false;

  // local array members
  if (strncmp(s1->driverName, s2->driverName, VK_MAX_DRIVER_NAME_SIZE) != 0)
    return false;
  if (strncmp(s1->driverInfo, s2->driverInfo, VK_MAX_DRIVER_INFO_SIZE) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceVulkan13Features(VkPhysicalDeviceVulkan13Features const *s1,
                                              VkPhysicalDeviceVulkan13Features const *s2) {
  // local, simple types
  if ((s1->robustImageAccess != s2->robustImageAccess) ||
      (s1->inlineUniformBlock != s2->inlineUniformBlock) ||
      (s1->descriptorBindingInlineUniformBlockUpdateAfterBind !=
       s2->descriptorBindingInlineUniformBlockUpdateAfterBind) ||
      (s1->pipelineCreationCacheControl != s2->pipelineCreationCacheControl) ||
      (s1->privateData != s2->privateData) ||
      (s1->shaderDemoteToHelperInvocation != s2->shaderDemoteToHelperInvocation) ||
      (s1->shaderTerminateInvocation != s2->shaderTerminateInvocation) ||
      (s1->subgroupSizeControl != s2->subgroupSizeControl) ||
      (s1->computeFullSubgroups != s2->computeFullSubgroups) ||
      (s1->synchronization2 != s2->synchronization2) ||
      (s1->textureCompressionASTC_HDR != s2->textureCompressionASTC_HDR) ||
      (s1->shaderZeroInitializeWorkgroupMemory != s2->shaderZeroInitializeWorkgroupMemory) ||
      (s1->dynamicRendering != s2->dynamicRendering) ||
      (s1->shaderIntegerDotProduct != s2->shaderIntegerDotProduct) ||
      (s1->maintenance4 != s2->maintenance4))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceVulkan13Properties(VkPhysicalDeviceVulkan13Properties const *s1,
                                                VkPhysicalDeviceVulkan13Properties const *s2) {
  // local, simple types
  if ((s1->minSubgroupSize != s2->minSubgroupSize) ||
      (s1->maxSubgroupSize != s2->maxSubgroupSize) ||
      (s1->maxComputeWorkgroupSubgroups != s2->maxComputeWorkgroupSubgroups) ||
      (s1->requiredSubgroupSizeStages != s2->requiredSubgroupSizeStages) ||
      (s1->maxInlineUniformBlockSize != s2->maxInlineUniformBlockSize) ||
      (s1->maxPerStageDescriptorInlineUniformBlocks !=
       s2->maxPerStageDescriptorInlineUniformBlocks) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks !=
       s2->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks) ||
      (s1->maxDescriptorSetInlineUniformBlocks != s2->maxDescriptorSetInlineUniformBlocks) ||
      (s1->maxDescriptorSetUpdateAfterBindInlineUniformBlocks !=
       s2->maxDescriptorSetUpdateAfterBindInlineUniformBlocks) ||
      (s1->maxInlineUniformTotalSize != s2->maxInlineUniformTotalSize) ||
      (s1->integerDotProduct8BitUnsignedAccelerated !=
       s2->integerDotProduct8BitUnsignedAccelerated) ||
      (s1->integerDotProduct8BitSignedAccelerated != s2->integerDotProduct8BitSignedAccelerated) ||
      (s1->integerDotProduct8BitMixedSignednessAccelerated !=
       s2->integerDotProduct8BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProduct4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedSignedAccelerated !=
       s2->integerDotProduct4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProduct4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProduct16BitUnsignedAccelerated !=
       s2->integerDotProduct16BitUnsignedAccelerated) ||
      (s1->integerDotProduct16BitSignedAccelerated !=
       s2->integerDotProduct16BitSignedAccelerated) ||
      (s1->integerDotProduct16BitMixedSignednessAccelerated !=
       s2->integerDotProduct16BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct32BitUnsignedAccelerated !=
       s2->integerDotProduct32BitUnsignedAccelerated) ||
      (s1->integerDotProduct32BitSignedAccelerated !=
       s2->integerDotProduct32BitSignedAccelerated) ||
      (s1->integerDotProduct32BitMixedSignednessAccelerated !=
       s2->integerDotProduct32BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct64BitUnsignedAccelerated !=
       s2->integerDotProduct64BitUnsignedAccelerated) ||
      (s1->integerDotProduct64BitSignedAccelerated !=
       s2->integerDotProduct64BitSignedAccelerated) ||
      (s1->integerDotProduct64BitMixedSignednessAccelerated !=
       s2->integerDotProduct64BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated) ||
      (s1->storageTexelBufferOffsetAlignmentBytes != s2->storageTexelBufferOffsetAlignmentBytes) ||
      (s1->storageTexelBufferOffsetSingleTexelAlignment !=
       s2->storageTexelBufferOffsetSingleTexelAlignment) ||
      (s1->uniformTexelBufferOffsetAlignmentBytes != s2->uniformTexelBufferOffsetAlignmentBytes) ||
      (s1->uniformTexelBufferOffsetSingleTexelAlignment !=
       s2->uniformTexelBufferOffsetSingleTexelAlignment) ||
      (s1->maxBufferSize != s2->maxBufferSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceVulkan14Features(VkPhysicalDeviceVulkan14Features const *s1,
                                              VkPhysicalDeviceVulkan14Features const *s2) {
  // local, simple types
  if ((s1->globalPriorityQuery != s2->globalPriorityQuery) ||
      (s1->shaderSubgroupRotate != s2->shaderSubgroupRotate) ||
      (s1->shaderSubgroupRotateClustered != s2->shaderSubgroupRotateClustered) ||
      (s1->shaderFloatControls2 != s2->shaderFloatControls2) ||
      (s1->shaderExpectAssume != s2->shaderExpectAssume) ||
      (s1->rectangularLines != s2->rectangularLines) ||
      (s1->bresenhamLines != s2->bresenhamLines) || (s1->smoothLines != s2->smoothLines) ||
      (s1->stippledRectangularLines != s2->stippledRectangularLines) ||
      (s1->stippledBresenhamLines != s2->stippledBresenhamLines) ||
      (s1->stippledSmoothLines != s2->stippledSmoothLines) ||
      (s1->vertexAttributeInstanceRateDivisor != s2->vertexAttributeInstanceRateDivisor) ||
      (s1->vertexAttributeInstanceRateZeroDivisor != s2->vertexAttributeInstanceRateZeroDivisor) ||
      (s1->indexTypeUint8 != s2->indexTypeUint8) ||
      (s1->dynamicRenderingLocalRead != s2->dynamicRenderingLocalRead) ||
      (s1->maintenance5 != s2->maintenance5) || (s1->maintenance6 != s2->maintenance6) ||
      (s1->pipelineProtectedAccess != s2->pipelineProtectedAccess) ||
      (s1->pipelineRobustness != s2->pipelineRobustness) ||
      (s1->hostImageCopy != s2->hostImageCopy) || (s1->pushDescriptor != s2->pushDescriptor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPhysicalDeviceVulkan14Properties(VkPhysicalDeviceVulkan14Properties const *s1,
                                                VkPhysicalDeviceVulkan14Properties const *s2) {
  // local, simple types
  if ((s1->lineSubPixelPrecisionBits != s2->lineSubPixelPrecisionBits) ||
      (s1->maxVertexAttribDivisor != s2->maxVertexAttribDivisor) ||
      (s1->supportsNonZeroFirstInstance != s2->supportsNonZeroFirstInstance) ||
      (s1->maxPushDescriptors != s2->maxPushDescriptors) ||
      (s1->dynamicRenderingLocalReadDepthStencilAttachments !=
       s2->dynamicRenderingLocalReadDepthStencilAttachments) ||
      (s1->dynamicRenderingLocalReadMultisampledAttachments !=
       s2->dynamicRenderingLocalReadMultisampledAttachments) ||
      (s1->earlyFragmentMultisampleCoverageAfterSampleCounting !=
       s2->earlyFragmentMultisampleCoverageAfterSampleCounting) ||
      (s1->earlyFragmentSampleMaskTestBeforeSampleCounting !=
       s2->earlyFragmentSampleMaskTestBeforeSampleCounting) ||
      (s1->depthStencilSwizzleOneSupport != s2->depthStencilSwizzleOneSupport) ||
      (s1->polygonModePointSize != s2->polygonModePointSize) ||
      (s1->nonStrictSinglePixelWideLinesUseParallelogram !=
       s2->nonStrictSinglePixelWideLinesUseParallelogram) ||
      (s1->nonStrictWideLinesUseParallelogram != s2->nonStrictWideLinesUseParallelogram) ||
      (s1->blockTexelViewCompatibleMultipleLayers != s2->blockTexelViewCompatibleMultipleLayers) ||
      (s1->maxCombinedImageSamplerDescriptorCount != s2->maxCombinedImageSamplerDescriptorCount) ||
      (s1->fragmentShadingRateClampCombinerInputs != s2->fragmentShadingRateClampCombinerInputs) ||
      (s1->defaultRobustnessStorageBuffers != s2->defaultRobustnessStorageBuffers) ||
      (s1->defaultRobustnessUniformBuffers != s2->defaultRobustnessUniformBuffers) ||
      (s1->defaultRobustnessVertexInputs != s2->defaultRobustnessVertexInputs) ||
      (s1->defaultRobustnessImages != s2->defaultRobustnessImages) ||
      (s1->copySrcLayoutCount != s2->copySrcLayoutCount) ||
      (s1->copyDstLayoutCount != s2->copyDstLayoutCount) ||
      (s1->identicalMemoryTypeRequirements != s2->identicalMemoryTypeRequirements))
    return false;

  // local array members
  if (memcmp(s1->optimalTilingLayoutUUID, s2->optimalTilingLayoutUUID,
             VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  // non-local members

  // pCopySrcLayouts - copySrcLayoutCount
  if (s1->pCopySrcLayouts != s2->pCopySrcLayouts &&
      (s1->pCopySrcLayouts == NULL || s2->pCopySrcLayouts == NULL ||
       memcmp(s1->pCopySrcLayouts, s2->pCopySrcLayouts,
              (s1->copySrcLayoutCount) * sizeof(VkImageLayout)) != 0))
    return false;

  // pCopyDstLayouts - copyDstLayoutCount
  if (s1->pCopyDstLayouts != s2->pCopyDstLayouts &&
      (s1->pCopyDstLayouts == NULL || s2->pCopyDstLayouts == NULL ||
       memcmp(s1->pCopyDstLayouts, s2->pCopyDstLayouts,
              (s1->copyDstLayoutCount) * sizeof(VkImageLayout)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkanMemoryModelFeatures(
    VkPhysicalDeviceVulkanMemoryModelFeatures const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeatures const *s2) {
  // local, simple types
  if ((s1->vulkanMemoryModel != s2->vulkanMemoryModel) ||
      (s1->vulkanMemoryModelDeviceScope != s2->vulkanMemoryModelDeviceScope) ||
      (s1->vulkanMemoryModelAvailabilityVisibilityChains !=
       s2->vulkanMemoryModelAvailabilityVisibilityChains))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 97 && VK_KHR_vulkan_memory_model &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->vulkanMemoryModel != s2->vulkanMemoryModel) ||
      (s1->vulkanMemoryModelDeviceScope != s2->vulkanMemoryModelDeviceScope))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 118 && VK_HEADER_VERSION <= 130 && VK_KHR_vulkan_memory_model) ||        \
    (VK_HEADER_VERSION >= 98 && VK_HEADER_VERSION <= 117 && VK_KHR_vulkan_memory_model &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->vulkanMemoryModel != s2->vulkanMemoryModel) ||
      (s1->vulkanMemoryModelDeviceScope != s2->vulkanMemoryModelDeviceScope) ||
      (s1->vulkanMemoryModelAvailabilityVisibilityChains !=
       s2->vulkanMemoryModelAvailabilityVisibilityChains))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_vulkan_memory_model
bool compare_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->vulkanMemoryModel != s2->vulkanMemoryModel) ||
      (s1->vulkanMemoryModelDeviceScope != s2->vulkanMemoryModelDeviceScope) ||
      (s1->vulkanMemoryModelAvailabilityVisibilityChains !=
       s2->vulkanMemoryModelAvailabilityVisibilityChains))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPhysicalDeviceVulkanSC10Features(VkPhysicalDeviceVulkanSC10Features const *s1,
                                                VkPhysicalDeviceVulkanSC10Features const *s2) {
  // local, simple types
  if ((s1->shaderAtomicInstructions != s2->shaderAtomicInstructions))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPhysicalDeviceVulkanSC10Properties(VkPhysicalDeviceVulkanSC10Properties const *s1,
                                                  VkPhysicalDeviceVulkanSC10Properties const *s2) {
  // local, simple types
  if ((s1->deviceNoDynamicHostAllocations != s2->deviceNoDynamicHostAllocations) ||
      (s1->deviceDestroyFreesMemory != s2->deviceDestroyFreesMemory) ||
      (s1->commandPoolMultipleCommandBuffersRecording !=
       s2->commandPoolMultipleCommandBuffersRecording) ||
      (s1->commandPoolResetCommandBuffer != s2->commandPoolResetCommandBuffer) ||
      (s1->commandBufferSimultaneousUse != s2->commandBufferSimultaneousUse) ||
      (s1->secondaryCommandBufferNullOrImagelessFramebuffer !=
       s2->secondaryCommandBufferNullOrImagelessFramebuffer) ||
      (s1->recycleDescriptorSetMemory != s2->recycleDescriptorSetMemory) ||
      (s1->recyclePipelineMemory != s2->recyclePipelineMemory) ||
      (s1->maxRenderPassSubpasses != s2->maxRenderPassSubpasses) ||
      (s1->maxRenderPassDependencies != s2->maxRenderPassDependencies) ||
      (s1->maxSubpassInputAttachments != s2->maxSubpassInputAttachments) ||
      (s1->maxSubpassPreserveAttachments != s2->maxSubpassPreserveAttachments) ||
      (s1->maxFramebufferAttachments != s2->maxFramebufferAttachments) ||
      (s1->maxDescriptorSetLayoutBindings != s2->maxDescriptorSetLayoutBindings) ||
      (s1->maxQueryFaultCount != s2->maxQueryFaultCount) ||
      (s1->maxCallbackFaultCount != s2->maxCallbackFaultCount) ||
      (s1->maxCommandPoolCommandBuffers != s2->maxCommandPoolCommandBuffers) ||
      (s1->maxCommandBufferSize != s2->maxCommandBufferSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_workgroup_memory_explicit_layout
bool compare_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *s1,
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->workgroupMemoryExplicitLayout != s2->workgroupMemoryExplicitLayout) ||
      (s1->workgroupMemoryExplicitLayoutScalarBlockLayout !=
       s2->workgroupMemoryExplicitLayoutScalarBlockLayout) ||
      (s1->workgroupMemoryExplicitLayout8BitAccess !=
       s2->workgroupMemoryExplicitLayout8BitAccess) ||
      (s1->workgroupMemoryExplicitLayout16BitAccess !=
       s2->workgroupMemoryExplicitLayout16BitAccess))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_ycbcr_2plane_444_formats
bool compare_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *s1,
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->ycbcr2plane444Formats != s2->ycbcr2plane444Formats))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_ycbcr_degamma
bool compare_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM(
    VkPhysicalDeviceYcbcrDegammaFeaturesQCOM const *s1,
    VkPhysicalDeviceYcbcrDegammaFeaturesQCOM const *s2) {
  // local, simple types
  if ((s1->ycbcrDegamma != s2->ycbcrDegamma))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_ycbcr_image_arrays
bool compare_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *s1,
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->ycbcrImageArrays != s2->ycbcrImageArrays))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 315 && VK_EXT_zero_initialize_device_memory
bool compare_VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT(
    VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT const *s1,
    VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->zeroInitializeDeviceMemory != s2->zeroInitializeDeviceMemory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures const *s1,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures const *s2) {
  // local, simple types
  if ((s1->shaderZeroInitializeWorkgroupMemory != s2->shaderZeroInitializeWorkgroupMemory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 168 && VK_HEADER_VERSION <= 203 && VK_KHR_zero_initialize_workgroup_memory
bool compare_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s1,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderZeroInitializeWorkgroupMemory != s2->shaderZeroInitializeWorkgroupMemory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_zero_initialize_workgroup_memory
bool compare_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s1,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s2) {
  // local, simple types
  if ((s1->shaderZeroInitializeWorkgroupMemory != s2->shaderZeroInitializeWorkgroupMemory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryCreateInfoKHR(VkPipelineBinaryCreateInfoKHR const *s1,
                                           VkPipelineBinaryCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->pipeline != s2->pipeline))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryDataInfoKHR(VkPipelineBinaryDataInfoKHR const *s1,
                                         VkPipelineBinaryDataInfoKHR const *s2) {
  // local, simple types
  if ((s1->pipelineBinary != s2->pipelineBinary))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryDataKHR(VkPipelineBinaryDataKHR const *s1,
                                     VkPipelineBinaryDataKHR const *s2) {
  // local, simple types
  if ((s1->dataSize != s2->dataSize))
    return false;

  // non-local members

  // pData - dataSize
  if (s1->pData != s2->pData &&
      (s1->pData == NULL || s2->pData == NULL || memcmp(s1->pData, s2->pData, s1->dataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryHandlesInfoKHR(VkPipelineBinaryHandlesInfoKHR const *s1,
                                            VkPipelineBinaryHandlesInfoKHR const *s2) {
  // local, simple types
  if ((s1->pipelineBinaryCount != s2->pipelineBinaryCount))
    return false;

  // non-local members

  // pPipelineBinaries - pipelineBinaryCount
  if (s1->pPipelineBinaries != s2->pPipelineBinaries &&
      (s1->pPipelineBinaries == NULL || s2->pPipelineBinaries == NULL ||
       memcmp(s1->pPipelineBinaries, s2->pPipelineBinaries,
              (s1->pipelineBinaryCount) * sizeof(VkPipelineBinaryKHR)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryInfoKHR(VkPipelineBinaryInfoKHR const *s1,
                                     VkPipelineBinaryInfoKHR const *s2) {
  // local, simple types
  if ((s1->binaryCount != s2->binaryCount))
    return false;

  // non-local members

  // pPipelineBinaries - binaryCount
  if (s1->pPipelineBinaries != s2->pPipelineBinaries &&
      (s1->pPipelineBinaries == NULL || s2->pPipelineBinaries == NULL ||
       memcmp(s1->pPipelineBinaries, s2->pPipelineBinaries,
              (s1->binaryCount) * sizeof(VkPipelineBinaryKHR)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryKeyKHR(VkPipelineBinaryKeyKHR const *s1,
                                    VkPipelineBinaryKeyKHR const *s2) {
  // local, simple types
  if ((s1->keySize != s2->keySize))
    return false;

  // local array members
  if (memcmp(s1->key, s2->key, VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineBinaryKeysAndDataKHR(VkPipelineBinaryKeysAndDataKHR const *s1,
                                            VkPipelineBinaryKeysAndDataKHR const *s2) {
  // local, simple types
  if ((s1->binaryCount != s2->binaryCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 240
bool compare_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *s1,
                                       VkPipelineCacheCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->initialDataSize != s2->initialDataSize))
    return false;

  // non-local members

  // pInitialData - initialDataSize
  if (s1->pInitialData != s2->pInitialData &&
      (s1->pInitialData == NULL || s2->pInitialData == NULL ||
       memcmp(s1->pInitialData, s2->pInitialData, s1->initialDataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 241
bool compare_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *s1,
                                       VkPipelineCacheCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->initialDataSize != s2->initialDataSize))
    return false;

  // non-local members

  // pInitialData - initialDataSize
  if (s1->pInitialData != s2->pInitialData &&
      (s1->pInitialData == NULL || s2->pInitialData == NULL ||
       memcmp(s1->pInitialData, s2->pInitialData, s1->initialDataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 184
bool compare_VkPipelineCacheHeaderVersionOne(VkPipelineCacheHeaderVersionOne const *s1,
                                             VkPipelineCacheHeaderVersionOne const *s2) {
  // local, simple types
  if ((s1->headerSize != s2->headerSize) || (s1->headerVersion != s2->headerVersion) ||
      (s1->vendorID != s2->vendorID) || (s1->deviceID != s2->deviceID))
    return false;

  // local array members
  if (memcmp(s1->pipelineCacheUUID, s2->pipelineCacheUUID, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPipelineCacheHeaderVersionSafetyCriticalOne(
    VkPipelineCacheHeaderVersionSafetyCriticalOne const *s1,
    VkPipelineCacheHeaderVersionSafetyCriticalOne const *s2) {
  // local, simple types
  if ((s1->validationVersion != s2->validationVersion) ||
      (s1->implementationData != s2->implementationData) ||
      (s1->pipelineIndexCount != s2->pipelineIndexCount) ||
      (s1->pipelineIndexStride != s2->pipelineIndexStride) ||
      (s1->pipelineIndexOffset != s2->pipelineIndexOffset))
    return false;

  // local, Vulkan struct types
  if (!compare_VkPipelineCacheHeaderVersionOne(&s1->headerVersionOne, &s2->headerVersionOne))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPipelineCacheSafetyCriticalIndexEntry(
    VkPipelineCacheSafetyCriticalIndexEntry const *s1,
    VkPipelineCacheSafetyCriticalIndexEntry const *s2) {
  // local, simple types
  if ((s1->pipelineMemorySize != s2->pipelineMemorySize) || (s1->jsonSize != s2->jsonSize) ||
      (s1->jsonOffset != s2->jsonOffset) || (s1->stageIndexCount != s2->stageIndexCount) ||
      (s1->stageIndexStride != s2->stageIndexStride) ||
      (s1->stageIndexOffset != s2->stageIndexOffset))
    return false;

  // local array members
  if (memcmp(s1->pipelineIdentifier, s2->pipelineIdentifier, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPipelineCacheStageValidationIndexEntry(
    VkPipelineCacheStageValidationIndexEntry const *s1,
    VkPipelineCacheStageValidationIndexEntry const *s2) {
  // local, simple types
  if ((s1->codeSize != s2->codeSize) || (s1->codeOffset != s2->codeOffset))
    return false;

  return true;
}
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *s1,
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->srcPremultiplied != s2->srcPremultiplied) ||
      (s1->dstPremultiplied != s2->dstPremultiplied) || (s1->blendOverlap != s2->blendOverlap))
    return false;

  return true;
}
#endif

bool compare_VkPipelineColorBlendAttachmentState(VkPipelineColorBlendAttachmentState const *s1,
                                                 VkPipelineColorBlendAttachmentState const *s2) {
  // local, simple types
  if ((s1->blendEnable != s2->blendEnable) ||
      (s1->srcColorBlendFactor != s2->srcColorBlendFactor) ||
      (s1->dstColorBlendFactor != s2->dstColorBlendFactor) ||
      (s1->colorBlendOp != s2->colorBlendOp) ||
      (s1->srcAlphaBlendFactor != s2->srcAlphaBlendFactor) ||
      (s1->dstAlphaBlendFactor != s2->dstAlphaBlendFactor) ||
      (s1->alphaBlendOp != s2->alphaBlendOp) || (s1->colorWriteMask != s2->colorWriteMask))
    return false;

  return true;
}

bool compare_VkPipelineColorBlendStateCreateInfo(VkPipelineColorBlendStateCreateInfo const *s1,
                                                 VkPipelineColorBlendStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->logicOpEnable != s2->logicOpEnable) ||
      (s1->logicOp != s2->logicOp) || (s1->attachmentCount != s2->attachmentCount))
    return false;

  // local array members
  if (memcmp(s1->blendConstants, s2->blendConstants, 4 * sizeof(float)) != 0)
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
bool compare_VkPipelineColorWriteCreateInfoEXT(VkPipelineColorWriteCreateInfoEXT const *s1,
                                               VkPipelineColorWriteCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->attachmentCount != s2->attachmentCount))
    return false;

  // non-local members

  // pColorWriteEnables - attachmentCount
  if (s1->pColorWriteEnables != s2->pColorWriteEnables &&
      (s1->pColorWriteEnables == NULL || s2->pColorWriteEnables == NULL ||
       memcmp(s1->pColorWriteEnables, s2->pColorWriteEnables,
              (s1->attachmentCount) * sizeof(VkBool32)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control
bool compare_VkPipelineCompilerControlCreateInfoAMD(
    VkPipelineCompilerControlCreateInfoAMD const *s1,
    VkPipelineCompilerControlCreateInfoAMD const *s2) {
  // local, simple types
  if ((s1->compilerControlFlags != s2->compilerControlFlags))
    return false;

  return true;
}
#endif

#if VK_NV_framebuffer_mixed_samples
bool compare_VkPipelineCoverageModulationStateCreateInfoNV(
    VkPipelineCoverageModulationStateCreateInfoNV const *s1,
    VkPipelineCoverageModulationStateCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->coverageModulationMode != s2->coverageModulationMode) ||
      (s1->coverageModulationTableEnable != s2->coverageModulationTableEnable) ||
      (s1->coverageModulationTableCount != s2->coverageModulationTableCount))
    return false;

  // non-local members

  // pCoverageModulationTable - coverageModulationTableCount
  if (s1->pCoverageModulationTable != s2->pCoverageModulationTable &&
      (s1->pCoverageModulationTable == NULL || s2->pCoverageModulationTable == NULL ||
       memcmp(s1->pCoverageModulationTable, s2->pCoverageModulationTable,
              (s1->coverageModulationTableCount) * sizeof(float)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkPipelineCoverageReductionStateCreateInfoNV(
    VkPipelineCoverageReductionStateCreateInfoNV const *s1,
    VkPipelineCoverageReductionStateCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->coverageReductionMode != s2->coverageReductionMode))
    return false;

  return true;
}
#endif

#if VK_NV_fragment_coverage_to_color
bool compare_VkPipelineCoverageToColorStateCreateInfoNV(
    VkPipelineCoverageToColorStateCreateInfoNV const *s1,
    VkPipelineCoverageToColorStateCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->coverageToColorEnable != s2->coverageToColorEnable) ||
      (s1->coverageToColorLocation != s2->coverageToColorLocation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPipelineCreateFlags2CreateInfo(VkPipelineCreateFlags2CreateInfo const *s1,
                                              VkPipelineCreateFlags2CreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkPipelineCreateFlags2CreateInfoKHR(VkPipelineCreateFlags2CreateInfoKHR const *s1,
                                                 VkPipelineCreateFlags2CreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkPipelineCreateFlags2CreateInfoKHR(VkPipelineCreateFlags2CreateInfoKHR const *s1,
                                                 VkPipelineCreateFlags2CreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkPipelineCreateInfoKHR(VkPipelineCreateInfoKHR const *s1,
                                     VkPipelineCreateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineCreationFeedback(VkPipelineCreationFeedback const *s1,
                                        VkPipelineCreationFeedback const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->duration != s2->duration))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineCreationFeedbackCreateInfo(VkPipelineCreationFeedbackCreateInfo const *s1,
                                                  VkPipelineCreationFeedbackCreateInfo const *s2) {
  // local, simple types
  if ((s1->pipelineStageCreationFeedbackCount != s2->pipelineStageCreationFeedbackCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *s1,
    VkPipelineCreationFeedbackCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->pipelineStageCreationFeedbackCount != s2->pipelineStageCreationFeedbackCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *s1,
    VkPipelineCreationFeedbackCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->pipelineStageCreationFeedbackCount != s2->pipelineStageCreationFeedbackCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackEXT(VkPipelineCreationFeedbackEXT const *s1,
                                           VkPipelineCreationFeedbackEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->duration != s2->duration))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackEXT(VkPipelineCreationFeedbackEXT const *s1,
                                           VkPipelineCreationFeedbackEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->duration != s2->duration))
    return false;

  return true;
}
#endif

bool compare_VkPipelineDepthStencilStateCreateInfo(
    VkPipelineDepthStencilStateCreateInfo const *s1,
    VkPipelineDepthStencilStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->depthTestEnable != s2->depthTestEnable) ||
      (s1->depthWriteEnable != s2->depthWriteEnable) ||
      (s1->depthCompareOp != s2->depthCompareOp) ||
      (s1->depthBoundsTestEnable != s2->depthBoundsTestEnable) ||
      (s1->stencilTestEnable != s2->stencilTestEnable) ||
      (s1->minDepthBounds != s2->minDepthBounds) || (s1->maxDepthBounds != s2->maxDepthBounds))
    return false;

  // local, Vulkan struct types
  if (!compare_VkStencilOpState(&s1->front, &s2->front) ||
      !compare_VkStencilOpState(&s1->back, &s2->back))
    return false;

  return true;
}

#if VK_EXT_discard_rectangles
bool compare_VkPipelineDiscardRectangleStateCreateInfoEXT(
    VkPipelineDiscardRectangleStateCreateInfoEXT const *s1,
    VkPipelineDiscardRectangleStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->discardRectangleMode != s2->discardRectangleMode) ||
      (s1->discardRectangleCount != s2->discardRectangleCount))
    return false;

  return true;
}
#endif

bool compare_VkPipelineDynamicStateCreateInfo(VkPipelineDynamicStateCreateInfo const *s1,
                                              VkPipelineDynamicStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->dynamicStateCount != s2->dynamicStateCount))
    return false;

  // non-local members

  // pDynamicStates - dynamicStateCount
  if (s1->pDynamicStates != s2->pDynamicStates &&
      (s1->pDynamicStates == NULL || s2->pDynamicStates == NULL ||
       memcmp(s1->pDynamicStates, s2->pDynamicStates,
              (s1->dynamicStateCount) * sizeof(VkDynamicState)) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutableInfoKHR(VkPipelineExecutableInfoKHR const *s1,
                                         VkPipelineExecutableInfoKHR const *s2) {
  // local, simple types
  if ((s1->pipeline != s2->pipeline) || (s1->executableIndex != s2->executableIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutableInternalRepresentationKHR(
    VkPipelineExecutableInternalRepresentationKHR const *s1,
    VkPipelineExecutableInternalRepresentationKHR const *s2) {
  // local, simple types
  if ((s1->isText != s2->isText) || (s1->dataSize != s2->dataSize))
    return false;

  // local array members
  if (strncmp(s1->name, s2->name, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  if (strncmp(s1->description, s2->description, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  // non-local members

  // pData - dataSize
  if (s1->pData != s2->pData &&
      (s1->pData == NULL || s2->pData == NULL || memcmp(s1->pData, s2->pData, s1->dataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutablePropertiesKHR(VkPipelineExecutablePropertiesKHR const *s1,
                                               VkPipelineExecutablePropertiesKHR const *s2) {
  // local, simple types
  if ((s1->stages != s2->stages) || (s1->subgroupSize != s2->subgroupSize))
    return false;

  // local array members
  if (strncmp(s1->name, s2->name, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  if (strncmp(s1->description, s2->description, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutableStatisticKHR(VkPipelineExecutableStatisticKHR const *s1,
                                              VkPipelineExecutableStatisticKHR const *s2) {
  // local, simple types
  if ((s1->format != s2->format))
    return false;

  // union types (with selector)
  switch (s1->format) {
  // VkPipelineExecutableStatisticValueKHR
  case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR:
    if (s1->value.b32 != s2->value.b32)
      return false;

  case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR:
    if (s1->value.i64 != s2->value.i64)
      return false;

  case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR:
    if (s1->value.u64 != s2->value.u64)
      return false;

  case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR:
    if (s1->value.f64 != s2->value.f64)
      return false;

  default:;
  }

  // local array members
  if (strncmp(s1->name, s2->name, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  if (strncmp(s1->description, s2->description, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered
bool compare_VkPipelineFragmentDensityMapLayeredCreateInfoVALVE(
    VkPipelineFragmentDensityMapLayeredCreateInfoVALVE const *s1,
    VkPipelineFragmentDensityMapLayeredCreateInfoVALVE const *s2) {
  // local, simple types
  if ((s1->maxFragmentDensityMapLayers != s2->maxFragmentDensityMapLayers))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPipelineFragmentShadingRateEnumStateCreateInfoNV(
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *s1,
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->shadingRateType != s2->shadingRateType) || (s1->shadingRate != s2->shadingRate))
    return false;

  // local array members
  if (memcmp(s1->combinerOps, s2->combinerOps, 2 * sizeof(VkFragmentShadingRateCombinerOpKHR)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPipelineFragmentShadingRateStateCreateInfoKHR(
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *s1,
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->fragmentSize, &s2->fragmentSize))
    return false;

  // local array members
  if (memcmp(s1->combinerOps, s2->combinerOps, 2 * sizeof(VkFragmentShadingRateCombinerOpKHR)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute
bool compare_VkPipelineIndirectDeviceAddressInfoNV(
    VkPipelineIndirectDeviceAddressInfoNV const *s1,
    VkPipelineIndirectDeviceAddressInfoNV const *s2) {
  // local, simple types
  if ((s1->pipelineBindPoint != s2->pipelineBindPoint) || (s1->pipeline != s2->pipeline))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPipelineInfoEXT(VkPipelineInfoEXT const *s1, VkPipelineInfoEXT const *s2) {
  // local, simple types
  if ((s1->pipeline != s2->pipeline))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineInfoKHR(VkPipelineInfoKHR const *s1, VkPipelineInfoKHR const *s2) {
  // local, simple types
  if ((s1->pipeline != s2->pipeline))
    return false;

  return true;
}
#endif

bool compare_VkPipelineInputAssemblyStateCreateInfo(
    VkPipelineInputAssemblyStateCreateInfo const *s1,
    VkPipelineInputAssemblyStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->topology != s2->topology) ||
      (s1->primitiveRestartEnable != s2->primitiveRestartEnable))
    return false;

  return true;
}

bool compare_VkPipelineLayoutCreateInfo(VkPipelineLayoutCreateInfo const *s1,
                                        VkPipelineLayoutCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->setLayoutCount != s2->setLayoutCount) ||
      (s1->pushConstantRangeCount != s2->pushConstantRangeCount))
    return false;

  // non-local members

  // pSetLayouts - setLayoutCount
  if (s1->pSetLayouts != s2->pSetLayouts &&
      (s1->pSetLayouts == NULL || s2->pSetLayouts == NULL ||
       memcmp(s1->pSetLayouts, s2->pSetLayouts,
              (s1->setLayoutCount) * sizeof(VkDescriptorSetLayout)) != 0))
    return false;
  return true;
}

#if (VK_HEADER_VERSION >= 162 && VK_KHR_pipeline_library) ||                                       \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_pipeline_library &&            \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkPipelineLibraryCreateInfoKHR(VkPipelineLibraryCreateInfoKHR const *s1,
                                            VkPipelineLibraryCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->libraryCount != s2->libraryCount))
    return false;

  // non-local members

  // pLibraries - libraryCount
  if (s1->pLibraries != s2->pLibraries &&
      (s1->pLibraries == NULL || s2->pLibraries == NULL ||
       memcmp(s1->pLibraries, s2->pLibraries, (s1->libraryCount) * sizeof(VkPipeline)) != 0))
    return false;
  return true;
}
#endif

bool compare_VkPipelineMultisampleStateCreateInfo(VkPipelineMultisampleStateCreateInfo const *s1,
                                                  VkPipelineMultisampleStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->rasterizationSamples != s2->rasterizationSamples) ||
      (s1->sampleShadingEnable != s2->sampleShadingEnable) ||
      (s1->minSampleShading != s2->minSampleShading) ||
      (s1->alphaToCoverageEnable != s2->alphaToCoverageEnable) ||
      (s1->alphaToOneEnable != s2->alphaToOneEnable))
    return false;

  // non-local members

  // pSampleMask - (rasterizationSamples + 31) / 32
  if (s1->pSampleMask != s2->pSampleMask &&
      (s1->pSampleMask == NULL || s2->pSampleMask == NULL ||
       memcmp(s1->pSampleMask, s2->pSampleMask,
              ((s1->rasterizationSamples + 31) / 32) * sizeof(VkSampleMask)) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPipelineOfflineCreateInfo(VkPipelineOfflineCreateInfo const *s1,
                                         VkPipelineOfflineCreateInfo const *s2) {
  // local, simple types
  if ((s1->matchControl != s2->matchControl) || (s1->poolEntrySize != s2->poolEntrySize))
    return false;

  // local array members
  if (memcmp(s1->pipelineIdentifier, s2->pipelineIdentifier, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0
bool compare_VkPipelinePoolSize(VkPipelinePoolSize const *s1, VkPipelinePoolSize const *s2) {
  // local, simple types
  if ((s1->poolEntrySize != s2->poolEntrySize) || (s1->poolEntryCount != s2->poolEntryCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPipelinePropertiesIdentifierEXT(VkPipelinePropertiesIdentifierEXT const *s1,
                                               VkPipelinePropertiesIdentifierEXT const *s2) {
  // local array members
  if (memcmp(s1->pipelineIdentifier, s2->pipelineIdentifier, VK_UUID_SIZE * sizeof(uint8_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_EXT_conservative_rasterization
bool compare_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *s1,
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) ||
      (s1->conservativeRasterizationMode != s2->conservativeRasterizationMode) ||
      (s1->extraPrimitiveOverestimationSize != s2->extraPrimitiveOverestimationSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
bool compare_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *s1,
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->depthClipEnable != s2->depthClipEnable))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPipelineRasterizationLineStateCreateInfo(
    VkPipelineRasterizationLineStateCreateInfo const *s1,
    VkPipelineRasterizationLineStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->lineRasterizationMode != s2->lineRasterizationMode) ||
      (s1->stippledLineEnable != s2->stippledLineEnable) ||
      (s1->lineStippleFactor != s2->lineStippleFactor) ||
      (s1->lineStipplePattern != s2->lineStipplePattern))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *s1,
    VkPipelineRasterizationLineStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->lineRasterizationMode != s2->lineRasterizationMode) ||
      (s1->stippledLineEnable != s2->stippledLineEnable) ||
      (s1->lineStippleFactor != s2->lineStippleFactor) ||
      (s1->lineStipplePattern != s2->lineStipplePattern))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *s1,
    VkPipelineRasterizationLineStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->lineRasterizationMode != s2->lineRasterizationMode) ||
      (s1->stippledLineEnable != s2->stippledLineEnable) ||
      (s1->lineStippleFactor != s2->lineStippleFactor) ||
      (s1->lineStipplePattern != s2->lineStipplePattern))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *s1,
    VkPipelineRasterizationLineStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->lineRasterizationMode != s2->lineRasterizationMode) ||
      (s1->stippledLineEnable != s2->stippledLineEnable) ||
      (s1->lineStippleFactor != s2->lineStippleFactor) ||
      (s1->lineStipplePattern != s2->lineStipplePattern))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoKHR(
    VkPipelineRasterizationLineStateCreateInfoKHR const *s1,
    VkPipelineRasterizationLineStateCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->lineRasterizationMode != s2->lineRasterizationMode) ||
      (s1->stippledLineEnable != s2->stippledLineEnable) ||
      (s1->lineStippleFactor != s2->lineStippleFactor) ||
      (s1->lineStipplePattern != s2->lineStipplePattern))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoKHR(
    VkPipelineRasterizationLineStateCreateInfoKHR const *s1,
    VkPipelineRasterizationLineStateCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->lineRasterizationMode != s2->lineRasterizationMode) ||
      (s1->stippledLineEnable != s2->stippledLineEnable) ||
      (s1->lineStippleFactor != s2->lineStippleFactor) ||
      (s1->lineStipplePattern != s2->lineStipplePattern))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *s1,
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->provokingVertexMode != s2->provokingVertexMode))
    return false;

  return true;
}
#endif

bool compare_VkPipelineRasterizationStateCreateInfo(
    VkPipelineRasterizationStateCreateInfo const *s1,
    VkPipelineRasterizationStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->depthClampEnable != s2->depthClampEnable) ||
      (s1->rasterizerDiscardEnable != s2->rasterizerDiscardEnable) ||
      (s1->polygonMode != s2->polygonMode) || (s1->cullMode != s2->cullMode) ||
      (s1->frontFace != s2->frontFace) || (s1->depthBiasEnable != s2->depthBiasEnable) ||
      (s1->depthBiasConstantFactor != s2->depthBiasConstantFactor) ||
      (s1->depthBiasClamp != s2->depthBiasClamp) ||
      (s1->depthBiasSlopeFactor != s2->depthBiasSlopeFactor) || (s1->lineWidth != s2->lineWidth))
    return false;

  return true;
}

#if VK_AMD_rasterization_order
bool compare_VkPipelineRasterizationStateRasterizationOrderAMD(
    VkPipelineRasterizationStateRasterizationOrderAMD const *s1,
    VkPipelineRasterizationStateRasterizationOrderAMD const *s2) {
  // local, simple types
  if ((s1->rasterizationOrder != s2->rasterizationOrder))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPipelineRasterizationStateStreamCreateInfoEXT(
    VkPipelineRasterizationStateStreamCreateInfoEXT const *s1,
    VkPipelineRasterizationStateStreamCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->rasterizationStream != s2->rasterizationStream))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineRenderingCreateInfo(VkPipelineRenderingCreateInfo const *s1,
                                           VkPipelineRenderingCreateInfo const *s2) {
  // local, simple types
  if ((s1->viewMask != s2->viewMask) || (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat))
    return false;

  // non-local members

  // pColorAttachmentFormats - colorAttachmentCount
  if (s1->pColorAttachmentFormats != s2->pColorAttachmentFormats &&
      (s1->pColorAttachmentFormats == NULL || s2->pColorAttachmentFormats == NULL ||
       memcmp(s1->pColorAttachmentFormats, s2->pColorAttachmentFormats,
              (s1->colorAttachmentCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering
bool compare_VkPipelineRenderingCreateInfoKHR(VkPipelineRenderingCreateInfoKHR const *s1,
                                              VkPipelineRenderingCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->viewMask != s2->viewMask) || (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat))
    return false;

  // non-local members

  // pColorAttachmentFormats - colorAttachmentCount
  if (s1->pColorAttachmentFormats != s2->pColorAttachmentFormats &&
      (s1->pColorAttachmentFormats == NULL || s2->pColorAttachmentFormats == NULL ||
       memcmp(s1->pColorAttachmentFormats, s2->pColorAttachmentFormats,
              (s1->colorAttachmentCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering
bool compare_VkPipelineRenderingCreateInfoKHR(VkPipelineRenderingCreateInfoKHR const *s1,
                                              VkPipelineRenderingCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->viewMask != s2->viewMask) || (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat))
    return false;

  // non-local members

  // pColorAttachmentFormats - colorAttachmentCount
  if (s1->pColorAttachmentFormats != s2->pColorAttachmentFormats &&
      (s1->pColorAttachmentFormats == NULL || s2->pColorAttachmentFormats == NULL ||
       memcmp(s1->pColorAttachmentFormats, s2->pColorAttachmentFormats,
              (s1->colorAttachmentCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
bool compare_VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *s1,
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->representativeFragmentTestEnable != s2->representativeFragmentTestEnable))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPipelineRobustnessCreateInfo(VkPipelineRobustnessCreateInfo const *s1,
                                            VkPipelineRobustnessCreateInfo const *s2) {
  // local, simple types
  if ((s1->storageBuffers != s2->storageBuffers) || (s1->uniformBuffers != s2->uniformBuffers) ||
      (s1->vertexInputs != s2->vertexInputs) || (s1->images != s2->images))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness
bool compare_VkPipelineRobustnessCreateInfoEXT(VkPipelineRobustnessCreateInfoEXT const *s1,
                                               VkPipelineRobustnessCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->storageBuffers != s2->storageBuffers) || (s1->uniformBuffers != s2->uniformBuffers) ||
      (s1->vertexInputs != s2->vertexInputs) || (s1->images != s2->images))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness
bool compare_VkPipelineRobustnessCreateInfoEXT(VkPipelineRobustnessCreateInfoEXT const *s1,
                                               VkPipelineRobustnessCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->storageBuffers != s2->storageBuffers) || (s1->uniformBuffers != s2->uniformBuffers) ||
      (s1->vertexInputs != s2->vertexInputs) || (s1->images != s2->images))
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkPipelineSampleLocationsStateCreateInfoEXT(
    VkPipelineSampleLocationsStateCreateInfoEXT const *s1,
    VkPipelineSampleLocationsStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->sampleLocationsEnable != s2->sampleLocationsEnable))
    return false;

  // local, Vulkan struct types
  if (!compare_VkSampleLocationsInfoEXT(&s1->sampleLocationsInfo, &s2->sampleLocationsInfo))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 240
bool compare_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *s1,
                                             VkPipelineShaderStageCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->stage != s2->stage) || (s1->module != s2->module))
    return false;

  // non-local members

  // pName - null-terminated
  if (s1->pName != s2->pName &&
      (s1->pName == NULL || s2->pName == NULL || strcmp(s1->pName, s2->pName) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 241
bool compare_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *s1,
                                             VkPipelineShaderStageCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->stage != s2->stage) || (s1->module != s2->module))
    return false;

  // non-local members

  // pName - null-terminated
  if (s1->pName != s2->pName &&
      (s1->pName == NULL || s2->pName == NULL || strcmp(s1->pName, s2->pName) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPipelineShaderStageModuleIdentifierCreateInfoEXT(
    VkPipelineShaderStageModuleIdentifierCreateInfoEXT const *s1,
    VkPipelineShaderStageModuleIdentifierCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->identifierSize != s2->identifierSize))
    return false;

  // non-local members

  // pIdentifier - identifierSize
  if (s1->pIdentifier != s2->pIdentifier &&
      (s1->pIdentifier == NULL || s2->pIdentifier == NULL ||
       memcmp(s1->pIdentifier, s2->pIdentifier, (s1->identifierSize) * sizeof(uint8_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkPipelineShaderStageNodeCreateInfoAMDX(
    VkPipelineShaderStageNodeCreateInfoAMDX const *s1,
    VkPipelineShaderStageNodeCreateInfoAMDX const *s2) {
  // local, simple types
  if ((s1->index != s2->index))
    return false;

  // non-local members

  // pName - null-terminated
  if (s1->pName != s2->pName &&
      (s1->pName == NULL || s2->pName == NULL || strcmp(s1->pName, s2->pName) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo const *s1,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo const *s2) {
  // local, simple types
  if ((s1->requiredSubgroupSize != s2->requiredSubgroupSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control
bool compare_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s1,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->requiredSubgroupSize != s2->requiredSubgroupSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control
bool compare_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s1,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->requiredSubgroupSize != s2->requiredSubgroupSize))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPipelineTessellationDomainOriginStateCreateInfo(
    VkPipelineTessellationDomainOriginStateCreateInfo const *s1,
    VkPipelineTessellationDomainOriginStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->domainOrigin != s2->domainOrigin))
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance2
bool compare_VkPipelineTessellationDomainOriginStateCreateInfoKHR(
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *s1,
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->domainOrigin != s2->domainOrigin))
    return false;

  return true;
}
#endif

bool compare_VkPipelineTessellationStateCreateInfo(
    VkPipelineTessellationStateCreateInfo const *s1,
    VkPipelineTessellationStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->patchControlPoints != s2->patchControlPoints))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPipelineVertexInputDivisorStateCreateInfo(
    VkPipelineVertexInputDivisorStateCreateInfo const *s1,
    VkPipelineVertexInputDivisorStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->vertexBindingDivisorCount != s2->vertexBindingDivisorCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->vertexBindingDivisorCount != s2->vertexBindingDivisorCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->vertexBindingDivisorCount != s2->vertexBindingDivisorCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->vertexBindingDivisorCount != s2->vertexBindingDivisorCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoKHR(
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->vertexBindingDivisorCount != s2->vertexBindingDivisorCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoKHR(
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->vertexBindingDivisorCount != s2->vertexBindingDivisorCount))
    return false;

  return true;
}
#endif

bool compare_VkPipelineVertexInputStateCreateInfo(VkPipelineVertexInputStateCreateInfo const *s1,
                                                  VkPipelineVertexInputStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) ||
      (s1->vertexBindingDescriptionCount != s2->vertexBindingDescriptionCount) ||
      (s1->vertexAttributeDescriptionCount != s2->vertexAttributeDescriptionCount))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *s1,
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->sampleOrderType != s2->sampleOrderType) ||
      (s1->customSampleOrderCount != s2->customSampleOrderCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control
bool compare_VkPipelineViewportDepthClampControlCreateInfoEXT(
    VkPipelineViewportDepthClampControlCreateInfoEXT const *s1,
    VkPipelineViewportDepthClampControlCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->depthClampMode != s2->depthClampMode))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control
bool compare_VkPipelineViewportDepthClipControlCreateInfoEXT(
    VkPipelineViewportDepthClipControlCreateInfoEXT const *s1,
    VkPipelineViewportDepthClipControlCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->negativeOneToOne != s2->negativeOneToOne))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
bool compare_VkPipelineViewportExclusiveScissorStateCreateInfoNV(
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *s1,
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->exclusiveScissorCount != s2->exclusiveScissorCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPipelineViewportShadingRateImageStateCreateInfoNV(
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *s1,
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->shadingRateImageEnable != s2->shadingRateImageEnable) ||
      (s1->viewportCount != s2->viewportCount))
    return false;

  return true;
}
#endif

bool compare_VkPipelineViewportStateCreateInfo(VkPipelineViewportStateCreateInfo const *s1,
                                               VkPipelineViewportStateCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->viewportCount != s2->viewportCount) ||
      (s1->scissorCount != s2->scissorCount))
    return false;

  return true;
}

#if VK_NV_viewport_swizzle
bool compare_VkPipelineViewportSwizzleStateCreateInfoNV(
    VkPipelineViewportSwizzleStateCreateInfoNV const *s1,
    VkPipelineViewportSwizzleStateCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->viewportCount != s2->viewportCount))
    return false;

  return true;
}
#endif

#if VK_NV_clip_space_w_scaling
bool compare_VkPipelineViewportWScalingStateCreateInfoNV(
    VkPipelineViewportWScalingStateCreateInfoNV const *s1,
    VkPipelineViewportWScalingStateCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->viewportWScalingEnable != s2->viewportWScalingEnable) ||
      (s1->viewportCount != s2->viewportCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_frame_token
bool compare_VkPresentFrameTokenGGP(VkPresentFrameTokenGGP const *s1,
                                    VkPresentFrameTokenGGP const *s2) {
  // local, simple types
  if ((s1->frameToken != s2->frameToken))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_id2
bool compare_VkPresentId2KHR(VkPresentId2KHR const *s1, VkPresentId2KHR const *s2) {
  // local, simple types
  if ((s1->swapchainCount != s2->swapchainCount))
    return false;

  // non-local members

  // pPresentIds - swapchainCount
  if (s1->pPresentIds != s2->pPresentIds &&
      (s1->pPresentIds == NULL || s2->pPresentIds == NULL ||
       memcmp(s1->pPresentIds, s2->pPresentIds, (s1->swapchainCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
bool compare_VkPresentIdKHR(VkPresentIdKHR const *s1, VkPresentIdKHR const *s2) {
  // local, simple types
  if ((s1->swapchainCount != s2->swapchainCount))
    return false;

  // non-local members

  // pPresentIds - swapchainCount
  if (s1->pPresentIds != s2->pPresentIds &&
      (s1->pPresentIds == NULL || s2->pPresentIds == NULL ||
       memcmp(s1->pPresentIds, s2->pPresentIds, (s1->swapchainCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_KHR_swapchain
bool compare_VkPresentInfoKHR(VkPresentInfoKHR const *s1, VkPresentInfoKHR const *s2) {
  // local, simple types
  if ((s1->waitSemaphoreCount != s2->waitSemaphoreCount) ||
      (s1->swapchainCount != s2->swapchainCount))
    return false;

  // non-local members

  // pWaitSemaphores - waitSemaphoreCount
  if (s1->pWaitSemaphores != s2->pWaitSemaphores &&
      (s1->pWaitSemaphores == NULL || s2->pWaitSemaphores == NULL ||
       memcmp(s1->pWaitSemaphores, s2->pWaitSemaphores,
              (s1->waitSemaphoreCount) * sizeof(VkSemaphore)) != 0))
    return false;

  // pSwapchains - swapchainCount
  if (s1->pSwapchains != s2->pSwapchains &&
      (s1->pSwapchains == NULL || s2->pSwapchains == NULL ||
       memcmp(s1->pSwapchains, s2->pSwapchains, (s1->swapchainCount) * sizeof(VkSwapchainKHR)) !=
           0))
    return false;

  // pImageIndices - swapchainCount
  if (s1->pImageIndices != s2->pImageIndices &&
      (s1->pImageIndices == NULL || s2->pImageIndices == NULL ||
       memcmp(s1->pImageIndices, s2->pImageIndices, (s1->swapchainCount) * sizeof(uint32_t)) != 0))
    return false;

  // pResults - swapchainCount
  if (s1->pResults != s2->pResults &&
      (s1->pResults == NULL || s2->pResults == NULL ||
       memcmp(s1->pResults, s2->pResults, (s1->swapchainCount) * sizeof(VkResult)) != 0))
    return false;
  return true;
}
#endif

#if VK_KHR_incremental_present
bool compare_VkPresentRegionKHR(VkPresentRegionKHR const *s1, VkPresentRegionKHR const *s2) {
  // local, simple types
  if ((s1->rectangleCount != s2->rectangleCount))
    return false;

  return true;
}
#endif

#if VK_KHR_incremental_present
bool compare_VkPresentRegionsKHR(VkPresentRegionsKHR const *s1, VkPresentRegionsKHR const *s2) {
  // local, simple types
  if ((s1->swapchainCount != s2->swapchainCount))
    return false;

  return true;
}
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPresentTimeGOOGLE(VkPresentTimeGOOGLE const *s1, VkPresentTimeGOOGLE const *s2) {
  // local, simple types
  if ((s1->presentID != s2->presentID) || (s1->desiredPresentTime != s2->desiredPresentTime))
    return false;

  return true;
}
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPresentTimesInfoGOOGLE(VkPresentTimesInfoGOOGLE const *s1,
                                      VkPresentTimesInfoGOOGLE const *s2) {
  // local, simple types
  if ((s1->swapchainCount != s2->swapchainCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2
bool compare_VkPresentWait2InfoKHR(VkPresentWait2InfoKHR const *s1,
                                   VkPresentWait2InfoKHR const *s2) {
  // local, simple types
  if ((s1->presentId != s2->presentId) || (s1->timeout != s2->timeout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPrivateDataSlotCreateInfo(VkPrivateDataSlotCreateInfo const *s1,
                                         VkPrivateDataSlotCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data
bool compare_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *s1,
                                            VkPrivateDataSlotCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_private_data
bool compare_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *s1,
                                            VkPrivateDataSlotCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkProtectedSubmitInfo(VkProtectedSubmitInfo const *s1,
                                   VkProtectedSubmitInfo const *s2) {
  // local, simple types
  if ((s1->protectedSubmit != s2->protectedSubmit))
    return false;

  return true;
}
#endif

bool compare_VkPushConstantRange(VkPushConstantRange const *s1, VkPushConstantRange const *s2) {
  // local, simple types
  if ((s1->stageFlags != s2->stageFlags) || (s1->offset != s2->offset) || (s1->size != s2->size))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPushConstantsInfo(VkPushConstantsInfo const *s1, VkPushConstantsInfo const *s2) {
  // local, simple types
  if ((s1->layout != s2->layout) || (s1->stageFlags != s2->stageFlags) ||
      (s1->offset != s2->offset) || (s1->size != s2->size))
    return false;

  // non-local members

  // pValues - size
  if (s1->pValues != s2->pValues && (s1->pValues == NULL || s2->pValues == NULL ||
                                     memcmp(s1->pValues, s2->pValues, s1->size) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6
bool compare_VkPushConstantsInfoKHR(VkPushConstantsInfoKHR const *s1,
                                    VkPushConstantsInfoKHR const *s2) {
  // local, simple types
  if ((s1->layout != s2->layout) || (s1->stageFlags != s2->stageFlags) ||
      (s1->offset != s2->offset) || (s1->size != s2->size))
    return false;

  // non-local members

  // pValues - size
  if (s1->pValues != s2->pValues && (s1->pValues == NULL || s2->pValues == NULL ||
                                     memcmp(s1->pValues, s2->pValues, s1->size) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6
bool compare_VkPushConstantsInfoKHR(VkPushConstantsInfoKHR const *s1,
                                    VkPushConstantsInfoKHR const *s2) {
  // local, simple types
  if ((s1->layout != s2->layout) || (s1->stageFlags != s2->stageFlags) ||
      (s1->offset != s2->offset) || (s1->size != s2->size))
    return false;

  // non-local members

  // pValues - size
  if (s1->pValues != s2->pValues && (s1->pValues == NULL || s2->pValues == NULL ||
                                     memcmp(s1->pValues, s2->pValues, s1->size) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPushDescriptorSetInfo(VkPushDescriptorSetInfo const *s1,
                                     VkPushDescriptorSetInfo const *s2) {
  // local, simple types
  if ((s1->stageFlags != s2->stageFlags) || (s1->layout != s2->layout) || (s1->set != s2->set) ||
      (s1->descriptorWriteCount != s2->descriptorWriteCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6 &&                 \
    VK_KHR_push_descriptor
bool compare_VkPushDescriptorSetInfoKHR(VkPushDescriptorSetInfoKHR const *s1,
                                        VkPushDescriptorSetInfoKHR const *s2) {
  // local, simple types
  if ((s1->stageFlags != s2->stageFlags) || (s1->layout != s2->layout) || (s1->set != s2->set) ||
      (s1->descriptorWriteCount != s2->descriptorWriteCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6 && VK_KHR_push_descriptor
bool compare_VkPushDescriptorSetInfoKHR(VkPushDescriptorSetInfoKHR const *s1,
                                        VkPushDescriptorSetInfoKHR const *s2) {
  // local, simple types
  if ((s1->stageFlags != s2->stageFlags) || (s1->layout != s2->layout) || (s1->set != s2->set) ||
      (s1->descriptorWriteCount != s2->descriptorWriteCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkPushDescriptorSetWithTemplateInfo(VkPushDescriptorSetWithTemplateInfo const *s1,
                                                 VkPushDescriptorSetWithTemplateInfo const *s2) {
  // local, simple types
  if ((s1->descriptorUpdateTemplate != s2->descriptorUpdateTemplate) ||
      (s1->layout != s2->layout) || (s1->set != s2->set))
    return false;

  // non-local members
  if (s1->pData != s2->pData)
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 275 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor) ||                                                                    \
    (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 274 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor && VK_VERSION_1_1)
bool compare_VkPushDescriptorSetWithTemplateInfoKHR(
    VkPushDescriptorSetWithTemplateInfoKHR const *s1,
    VkPushDescriptorSetWithTemplateInfoKHR const *s2) {
  // local, simple types
  if ((s1->descriptorUpdateTemplate != s2->descriptorUpdateTemplate) ||
      (s1->layout != s2->layout) || (s1->set != s2->set))
    return false;

  // non-local members
  if (s1->pData != s2->pData)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6 && VK_KHR_push_descriptor
bool compare_VkPushDescriptorSetWithTemplateInfoKHR(
    VkPushDescriptorSetWithTemplateInfoKHR const *s1,
    VkPushDescriptorSetWithTemplateInfoKHR const *s2) {
  // local, simple types
  if ((s1->descriptorUpdateTemplate != s2->descriptorUpdateTemplate) ||
      (s1->layout != s2->layout) || (s1->set != s2->set))
    return false;

  // non-local members
  if (s1->pData != s2->pData)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 242 && VK_NV_low_latency
bool compare_VkQueryLowLatencySupportNV(VkQueryLowLatencySupportNV const *s1,
                                        VkQueryLowLatencySupportNV const *s2) {
  // non-local members
  if (s1->pQueriedLowLatencyData != s2->pQueriedLowLatencyData)
    return false;

  return true;
}
#endif

bool compare_VkQueryPoolCreateInfo(VkQueryPoolCreateInfo const *s1,
                                   VkQueryPoolCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->queryType != s2->queryType) ||
      (s1->queryCount != s2->queryCount) || (s1->pipelineStatistics != s2->pipelineStatistics))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 134 && VK_INTEL_performance_query
bool compare_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *s1,
                                        VkQueryPoolCreateInfoINTEL const *s2) {
  // local, simple types
  if ((s1->performanceCountersSampling != s2->performanceCountersSampling))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query
bool compare_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *s1,
                                        VkQueryPoolCreateInfoINTEL const *s2) {
  // local, simple types
  if ((s1->performanceCountersSampling != s2->performanceCountersSampling))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkQueryPoolPerformanceCreateInfoKHR(VkQueryPoolPerformanceCreateInfoKHR const *s1,
                                                 VkQueryPoolPerformanceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->queueFamilyIndex != s2->queueFamilyIndex) ||
      (s1->counterIndexCount != s2->counterIndexCount))
    return false;

  // non-local members

  // pCounterIndices - counterIndexCount
  if (s1->pCounterIndices != s2->pCounterIndices &&
      (s1->pCounterIndices == NULL || s2->pCounterIndices == NULL ||
       memcmp(s1->pCounterIndices, s2->pCounterIndices,
              (s1->counterIndexCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query
bool compare_VkQueryPoolPerformanceQueryCreateInfoINTEL(
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *s1,
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *s2) {
  // local, simple types
  if ((s1->performanceCountersSampling != s2->performanceCountersSampling))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR(
    VkQueryPoolVideoEncodeFeedbackCreateInfoKHR const *s1,
    VkQueryPoolVideoEncodeFeedbackCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->encodeFeedbackFlags != s2->encodeFeedbackFlags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkQueueFamilyCheckpointProperties2NV(VkQueueFamilyCheckpointProperties2NV const *s1,
                                                  VkQueueFamilyCheckpointProperties2NV const *s2) {
  // local, simple types
  if ((s1->checkpointExecutionStageMask != s2->checkpointExecutionStageMask))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_device_diagnostic_checkpoints &&                            \
     (VK_VERSION_1_3 || VK_KHR_synchronization2)) ||                                               \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_synchronization2 &&            \
     VK_NV_device_diagnostic_checkpoints) ||                                                       \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_KHR_synchronization2)
bool compare_VkQueueFamilyCheckpointProperties2NV(VkQueueFamilyCheckpointProperties2NV const *s1,
                                                  VkQueueFamilyCheckpointProperties2NV const *s2) {
  // local, simple types
  if ((s1->checkpointExecutionStageMask != s2->checkpointExecutionStageMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
bool compare_VkQueueFamilyCheckpointPropertiesNV(VkQueueFamilyCheckpointPropertiesNV const *s1,
                                                 VkQueueFamilyCheckpointPropertiesNV const *s2) {
  // local, simple types
  if ((s1->checkpointExecutionStageMask != s2->checkpointExecutionStageMask))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkQueueFamilyDataGraphProcessingEnginePropertiesARM(
    VkQueueFamilyDataGraphProcessingEnginePropertiesARM const *s1,
    VkQueueFamilyDataGraphProcessingEnginePropertiesARM const *s2) {
  // local, simple types
  if ((s1->foreignSemaphoreHandleTypes != s2->foreignSemaphoreHandleTypes) ||
      (s1->foreignMemoryHandleTypes != s2->foreignMemoryHandleTypes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 319 && VK_ARM_data_graph
bool compare_VkQueueFamilyDataGraphPropertiesARM(VkQueueFamilyDataGraphPropertiesARM const *s1,
                                                 VkQueueFamilyDataGraphPropertiesARM const *s2) {
  // local, Vulkan struct types
  if (!compare_VkPhysicalDeviceDataGraphProcessingEngineARM(&s1->engine, &s2->engine) ||
      !compare_VkPhysicalDeviceDataGraphOperationSupportARM(&s1->operation, &s2->operation))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkQueueFamilyGlobalPriorityProperties(
    VkQueueFamilyGlobalPriorityProperties const *s1,
    VkQueueFamilyGlobalPriorityProperties const *s2) {
  // local, simple types
  if ((s1->priorityCount != s2->priorityCount))
    return false;

  // local array members
  if (memcmp(s1->priorities, s2->priorities, s1->priorityCount) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 180 && VK_HEADER_VERSION <= 203 && VK_EXT_global_priority_query
bool compare_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s1,
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->priorityCount != s2->priorityCount))
    return false;

  // local array members
  if (memcmp(s1->priorities, s2->priorities,
             VK_MAX_GLOBAL_PRIORITY_SIZE_EXT * sizeof(VkQueueGlobalPriorityEXT)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority_query
bool compare_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s1,
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->priorityCount != s2->priorityCount))
    return false;

  // local array members
  if (memcmp(s1->priorities, s2->priorities, s1->priorityCount) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_global_priority_query
bool compare_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s1,
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->priorityCount != s2->priorityCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority
bool compare_VkQueueFamilyGlobalPriorityPropertiesKHR(
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s1,
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->priorityCount != s2->priorityCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_global_priority
bool compare_VkQueueFamilyGlobalPriorityPropertiesKHR(
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s1,
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->priorityCount != s2->priorityCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9
bool compare_VkQueueFamilyOwnershipTransferPropertiesKHR(
    VkQueueFamilyOwnershipTransferPropertiesKHR const *s1,
    VkQueueFamilyOwnershipTransferPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->optimalImageTransferToQueueFamilies != s2->optimalImageTransferToQueueFamilies))
    return false;

  return true;
}
#endif

bool compare_VkQueueFamilyProperties(VkQueueFamilyProperties const *s1,
                                     VkQueueFamilyProperties const *s2) {
  // local, simple types
  if ((s1->queueFlags != s2->queueFlags) || (s1->queueCount != s2->queueCount) ||
      (s1->timestampValidBits != s2->timestampValidBits))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent3D(&s1->minImageTransferGranularity, &s2->minImageTransferGranularity))
    return false;

  return true;
}

#if VK_VERSION_1_1
bool compare_VkQueueFamilyProperties2(VkQueueFamilyProperties2 const *s1,
                                      VkQueueFamilyProperties2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkQueueFamilyProperties(&s1->queueFamilyProperties, &s2->queueFamilyProperties))
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkQueueFamilyProperties2KHR(VkQueueFamilyProperties2KHR const *s1,
                                         VkQueueFamilyProperties2KHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkQueueFamilyQueryResultStatusProperties2KHR(
    VkQueueFamilyQueryResultStatusProperties2KHR const *s1,
    VkQueueFamilyQueryResultStatusProperties2KHR const *s2) {
  // local, simple types
  if ((s1->supported != s2->supported))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkQueueFamilyQueryResultStatusProperties2KHR(
    VkQueueFamilyQueryResultStatusProperties2KHR const *s1,
    VkQueueFamilyQueryResultStatusProperties2KHR const *s2) {
  // local, simple types
  if ((s1->queryResultStatusSupport != s2->queryResultStatusSupport))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkQueueFamilyQueryResultStatusPropertiesKHR(
    VkQueueFamilyQueryResultStatusPropertiesKHR const *s1,
    VkQueueFamilyQueryResultStatusPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->queryResultStatusSupport != s2->queryResultStatusSupport))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkQueueFamilyVideoPropertiesKHR(VkQueueFamilyVideoPropertiesKHR const *s1,
                                             VkQueueFamilyVideoPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->videoCodecOperations != s2->videoCodecOperations))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure && VK_KHR_ray_tracing_pipeline
bool compare_VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV(
    VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV const *s1,
    VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->allowClusterAccelerationStructure != s2->allowClusterAccelerationStructure))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *s1,
                                               VkRayTracingPipelineCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->stageCount != s2->stageCount) ||
      (s1->groupCount != s2->groupCount) || (s1->maxRecursionDepth != s2->maxRecursionDepth) ||
      (s1->layout != s2->layout) || (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex))
    return false;

  // local, Vulkan struct types
  if (!compare_VkPipelineLibraryCreateInfoKHR(&s1->libraries, &s2->libraries))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *s1,
                                               VkRayTracingPipelineCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->stageCount != s2->stageCount) ||
      (s1->groupCount != s2->groupCount) ||
      (s1->maxPipelineRayRecursionDepth != s2->maxPipelineRayRecursionDepth) ||
      (s1->layout != s2->layout) || (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkRayTracingPipelineCreateInfoNV(VkRayTracingPipelineCreateInfoNV const *s1,
                                              VkRayTracingPipelineCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->stageCount != s2->stageCount) ||
      (s1->groupCount != s2->groupCount) || (s1->maxRecursionDepth != s2->maxRecursionDepth) ||
      (s1->layout != s2->layout) || (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s1,
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->maxPayloadSize != s2->maxPayloadSize) ||
      (s1->maxAttributeSize != s2->maxAttributeSize) ||
      (s1->maxCallableSize != s2->maxCallableSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s1,
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->maxPipelineRayPayloadSize != s2->maxPipelineRayPayloadSize) ||
      (s1->maxPipelineRayHitAttributeSize != s2->maxPipelineRayHitAttributeSize))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline) ||                                   \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkRayTracingShaderGroupCreateInfoKHR(VkRayTracingShaderGroupCreateInfoKHR const *s1,
                                                  VkRayTracingShaderGroupCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->generalShader != s2->generalShader) ||
      (s1->closestHitShader != s2->closestHitShader) || (s1->anyHitShader != s2->anyHitShader) ||
      (s1->intersectionShader != s2->intersectionShader))
    return false;

  // non-local members
  if (s1->pShaderGroupCaptureReplayHandle != s2->pShaderGroupCaptureReplayHandle)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 134 && VK_NV_ray_tracing
bool compare_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *s1,
                                                 VkRayTracingShaderGroupCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->generalShader != s2->generalShader) ||
      (s1->closestHitShader != s2->closestHitShader) || (s1->anyHitShader != s2->anyHitShader) ||
      (s1->intersectionShader != s2->intersectionShader))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *s1,
                                                 VkRayTracingShaderGroupCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->type != s2->type) || (s1->generalShader != s2->generalShader) ||
      (s1->closestHitShader != s2->closestHitShader) || (s1->anyHitShader != s2->anyHitShader) ||
      (s1->intersectionShader != s2->intersectionShader))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkRaytracingPipelineCreateInfoNVX(VkRaytracingPipelineCreateInfoNVX const *s1,
                                               VkRaytracingPipelineCreateInfoNVX const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->stageCount != s2->stageCount) ||
      (s1->maxRecursionDepth != s2->maxRecursionDepth) || (s1->layout != s2->layout) ||
      (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex))
    return false;

  // non-local members

  // pGroupNumbers - stageCount
  if (s1->pGroupNumbers != s2->pGroupNumbers &&
      (s1->pGroupNumbers == NULL || s2->pGroupNumbers == NULL ||
       memcmp(s1->pGroupNumbers, s2->pGroupNumbers, (s1->stageCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

bool compare_VkRect2D(VkRect2D const *s1, VkRect2D const *s2) {
  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->offset, &s2->offset) ||
      !compare_VkExtent2D(&s1->extent, &s2->extent))
    return false;

  return true;
}

#if VK_KHR_incremental_present
bool compare_VkRectLayerKHR(VkRectLayerKHR const *s1, VkRectLayerKHR const *s2) {
  // local, simple types
  if ((s1->layer != s2->layer))
    return false;

  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->offset, &s2->offset) ||
      !compare_VkExtent2D(&s1->extent, &s2->extent))
    return false;

  return true;
}
#endif

#if VK_GOOGLE_display_timing
bool compare_VkRefreshCycleDurationGOOGLE(VkRefreshCycleDurationGOOGLE const *s1,
                                          VkRefreshCycleDurationGOOGLE const *s2) {
  // local, simple types
  if ((s1->refreshDuration != s2->refreshDuration))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_KHR_object_refresh
bool compare_VkRefreshObjectKHR(VkRefreshObjectKHR const *s1, VkRefreshObjectKHR const *s2) {
  // local, simple types
  if ((s1->objectType != s2->objectType) || (s1->objectHandle != s2->objectHandle) ||
      (s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_KHR_object_refresh
bool compare_VkRefreshObjectListKHR(VkRefreshObjectListKHR const *s1,
                                    VkRefreshObjectListKHR const *s2) {
  // local, simple types
  if ((s1->objectCount != s2->objectCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary
bool compare_VkReleaseCapturedPipelineDataInfoKHR(VkReleaseCapturedPipelineDataInfoKHR const *s1,
                                                  VkReleaseCapturedPipelineDataInfoKHR const *s2) {
  // local, simple types
  if ((s1->pipeline != s2->pipeline))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkReleaseSwapchainImagesInfoEXT(VkReleaseSwapchainImagesInfoEXT const *s1,
                                             VkReleaseSwapchainImagesInfoEXT const *s2) {
  // local, simple types
  if ((s1->swapchain != s2->swapchain) || (s1->imageIndexCount != s2->imageIndexCount))
    return false;

  // non-local members

  // pImageIndices - imageIndexCount
  if (s1->pImageIndices != s2->pImageIndices &&
      (s1->pImageIndices == NULL || s2->pImageIndices == NULL ||
       memcmp(s1->pImageIndices, s2->pImageIndices, (s1->imageIndexCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkRenderPassAttachmentBeginInfo(VkRenderPassAttachmentBeginInfo const *s1,
                                             VkRenderPassAttachmentBeginInfo const *s2) {
  // local, simple types
  if ((s1->attachmentCount != s2->attachmentCount))
    return false;

  // non-local members

  // pAttachments - attachmentCount
  if (s1->pAttachments != s2->pAttachments &&
      (s1->pAttachments == NULL || s2->pAttachments == NULL ||
       memcmp(s1->pAttachments, s2->pAttachments, (s1->attachmentCount) * sizeof(VkImageView)) !=
           0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer
bool compare_VkRenderPassAttachmentBeginInfoKHR(VkRenderPassAttachmentBeginInfoKHR const *s1,
                                                VkRenderPassAttachmentBeginInfoKHR const *s2) {
  // local, simple types
  if ((s1->attachmentCount != s2->attachmentCount))
    return false;

  // non-local members

  // pAttachments - attachmentCount
  if (s1->pAttachments != s2->pAttachments &&
      (s1->pAttachments == NULL || s2->pAttachments == NULL ||
       memcmp(s1->pAttachments, s2->pAttachments, (s1->attachmentCount) * sizeof(VkImageView)) !=
           0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer
bool compare_VkRenderPassAttachmentBeginInfoKHR(VkRenderPassAttachmentBeginInfoKHR const *s1,
                                                VkRenderPassAttachmentBeginInfoKHR const *s2) {
  // local, simple types
  if ((s1->attachmentCount != s2->attachmentCount))
    return false;

  // non-local members

  // pAttachments - attachmentCount
  if (s1->pAttachments != s2->pAttachments &&
      (s1->pAttachments == NULL || s2->pAttachments == NULL ||
       memcmp(s1->pAttachments, s2->pAttachments, (s1->attachmentCount) * sizeof(VkImageView)) !=
           0))
    return false;
  return true;
}
#endif

bool compare_VkRenderPassBeginInfo(VkRenderPassBeginInfo const *s1,
                                   VkRenderPassBeginInfo const *s2) {
  // local, simple types
  if ((s1->renderPass != s2->renderPass) || (s1->framebuffer != s2->framebuffer) ||
      (s1->clearValueCount != s2->clearValueCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkRect2D(&s1->renderArea, &s2->renderArea))
    return false;

  // non-local members

  // pClearValues - clearValueCount
  if (s1->pClearValues != s2->pClearValues &&
      (s1->pClearValues == NULL || s2->pClearValues == NULL ||
       memcmp(s1->pClearValues, s2->pClearValues, (s1->clearValueCount) * sizeof(VkClearValue)) !=
           0))
    return false;
  return true;
}

bool compare_VkRenderPassCreateInfo(VkRenderPassCreateInfo const *s1,
                                    VkRenderPassCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->attachmentCount != s2->attachmentCount) ||
      (s1->subpassCount != s2->subpassCount) || (s1->dependencyCount != s2->dependencyCount))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkRenderPassCreateInfo2(VkRenderPassCreateInfo2 const *s1,
                                     VkRenderPassCreateInfo2 const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->attachmentCount != s2->attachmentCount) ||
      (s1->subpassCount != s2->subpassCount) || (s1->dependencyCount != s2->dependencyCount) ||
      (s1->correlatedViewMaskCount != s2->correlatedViewMaskCount))
    return false;

  // non-local members

  // pCorrelatedViewMasks - correlatedViewMaskCount
  if (s1->pCorrelatedViewMasks != s2->pCorrelatedViewMasks &&
      (s1->pCorrelatedViewMasks == NULL || s2->pCorrelatedViewMasks == NULL ||
       memcmp(s1->pCorrelatedViewMasks, s2->pCorrelatedViewMasks,
              (s1->correlatedViewMaskCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *s1,
                                        VkRenderPassCreateInfo2KHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->attachmentCount != s2->attachmentCount) ||
      (s1->subpassCount != s2->subpassCount) || (s1->dependencyCount != s2->dependencyCount) ||
      (s1->correlatedViewMaskCount != s2->correlatedViewMaskCount))
    return false;

  // non-local members

  // pCorrelatedViewMasks - correlatedViewMaskCount
  if (s1->pCorrelatedViewMasks != s2->pCorrelatedViewMasks &&
      (s1->pCorrelatedViewMasks == NULL || s2->pCorrelatedViewMasks == NULL ||
       memcmp(s1->pCorrelatedViewMasks, s2->pCorrelatedViewMasks,
              (s1->correlatedViewMaskCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *s1,
                                        VkRenderPassCreateInfo2KHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->attachmentCount != s2->attachmentCount) ||
      (s1->subpassCount != s2->subpassCount) || (s1->dependencyCount != s2->dependencyCount) ||
      (s1->correlatedViewMaskCount != s2->correlatedViewMaskCount))
    return false;

  // non-local members

  // pCorrelatedViewMasks - correlatedViewMaskCount
  if (s1->pCorrelatedViewMasks != s2->pCorrelatedViewMasks &&
      (s1->pCorrelatedViewMasks == NULL || s2->pCorrelatedViewMasks == NULL ||
       memcmp(s1->pCorrelatedViewMasks, s2->pCorrelatedViewMasks,
              (s1->correlatedViewMaskCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationControlEXT(VkRenderPassCreationControlEXT const *s1,
                                            VkRenderPassCreationControlEXT const *s2) {
  // local, simple types
  if ((s1->disallowMerging != s2->disallowMerging))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationFeedbackCreateInfoEXT(
    VkRenderPassCreationFeedbackCreateInfoEXT const *s1,
    VkRenderPassCreationFeedbackCreateInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 215 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationFeedbackInfoEXT(VkRenderPassCreationFeedbackInfoEXT const *s1,
                                                 VkRenderPassCreationFeedbackInfoEXT const *s2) {
  // local, simple types
  if ((s1->postMergeSubpassCount != s2->postMergeSubpassCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationFeedbackInfoEXT(VkRenderPassCreationFeedbackInfoEXT const *s1,
                                                 VkRenderPassCreationFeedbackInfoEXT const *s2) {
  // local, simple types
  if ((s1->postMergeSubpassCount != s2->postMergeSubpassCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkRenderPassFragmentDensityMapCreateInfoEXT(
    VkRenderPassFragmentDensityMapCreateInfoEXT const *s1,
    VkRenderPassFragmentDensityMapCreateInfoEXT const *s2) {
  // local, Vulkan struct types
  if (!compare_VkAttachmentReference(&s1->fragmentDensityMapAttachment,
                                     &s2->fragmentDensityMapAttachment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset
bool compare_VkRenderPassFragmentDensityMapOffsetEndInfoEXT(
    VkRenderPassFragmentDensityMapOffsetEndInfoEXT const *s1,
    VkRenderPassFragmentDensityMapOffsetEndInfoEXT const *s2) {
  // local, simple types
  if ((s1->fragmentDensityOffsetCount != s2->fragmentDensityOffsetCount))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkRenderPassInputAttachmentAspectCreateInfo(
    VkRenderPassInputAttachmentAspectCreateInfo const *s1,
    VkRenderPassInputAttachmentAspectCreateInfo const *s2) {
  // local, simple types
  if ((s1->aspectReferenceCount != s2->aspectReferenceCount))
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance2
bool compare_VkRenderPassInputAttachmentAspectCreateInfoKHR(
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *s1,
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->aspectReferenceCount != s2->aspectReferenceCount))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkRenderPassMultiviewCreateInfo(VkRenderPassMultiviewCreateInfo const *s1,
                                             VkRenderPassMultiviewCreateInfo const *s2) {
  // local, simple types
  if ((s1->subpassCount != s2->subpassCount) || (s1->dependencyCount != s2->dependencyCount) ||
      (s1->correlationMaskCount != s2->correlationMaskCount))
    return false;

  // non-local members

  // pViewMasks - subpassCount
  if (s1->pViewMasks != s2->pViewMasks &&
      (s1->pViewMasks == NULL || s2->pViewMasks == NULL ||
       memcmp(s1->pViewMasks, s2->pViewMasks, (s1->subpassCount) * sizeof(uint32_t)) != 0))
    return false;

  // pViewOffsets - dependencyCount
  if (s1->pViewOffsets != s2->pViewOffsets &&
      (s1->pViewOffsets == NULL || s2->pViewOffsets == NULL ||
       memcmp(s1->pViewOffsets, s2->pViewOffsets, (s1->dependencyCount) * sizeof(int32_t)) != 0))
    return false;

  // pCorrelationMasks - correlationMaskCount
  if (s1->pCorrelationMasks != s2->pCorrelationMasks &&
      (s1->pCorrelationMasks == NULL || s2->pCorrelationMasks == NULL ||
       memcmp(s1->pCorrelationMasks, s2->pCorrelationMasks,
              (s1->correlationMaskCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_KHR_multiview
bool compare_VkRenderPassMultiviewCreateInfoKHR(VkRenderPassMultiviewCreateInfoKHR const *s1,
                                                VkRenderPassMultiviewCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->subpassCount != s2->subpassCount) || (s1->dependencyCount != s2->dependencyCount) ||
      (s1->correlationMaskCount != s2->correlationMaskCount))
    return false;

  // non-local members

  // pViewMasks - subpassCount
  if (s1->pViewMasks != s2->pViewMasks &&
      (s1->pViewMasks == NULL || s2->pViewMasks == NULL ||
       memcmp(s1->pViewMasks, s2->pViewMasks, (s1->subpassCount) * sizeof(uint32_t)) != 0))
    return false;

  // pViewOffsets - dependencyCount
  if (s1->pViewOffsets != s2->pViewOffsets &&
      (s1->pViewOffsets == NULL || s2->pViewOffsets == NULL ||
       memcmp(s1->pViewOffsets, s2->pViewOffsets, (s1->dependencyCount) * sizeof(int32_t)) != 0))
    return false;

  // pCorrelationMasks - correlationMaskCount
  if (s1->pCorrelationMasks != s2->pCorrelationMasks &&
      (s1->pCorrelationMasks == NULL || s2->pCorrelationMasks == NULL ||
       memcmp(s1->pCorrelationMasks, s2->pCorrelationMasks,
              (s1->correlationMaskCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkRenderPassSampleLocationsBeginInfoEXT(
    VkRenderPassSampleLocationsBeginInfoEXT const *s1,
    VkRenderPassSampleLocationsBeginInfoEXT const *s2) {
  // local, simple types
  if ((s1->attachmentInitialSampleLocationsCount != s2->attachmentInitialSampleLocationsCount) ||
      (s1->postSubpassSampleLocationsCount != s2->postSubpassSampleLocationsCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped
bool compare_VkRenderPassStripeBeginInfoARM(VkRenderPassStripeBeginInfoARM const *s1,
                                            VkRenderPassStripeBeginInfoARM const *s2) {
  // local, simple types
  if ((s1->stripeInfoCount != s2->stripeInfoCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped
bool compare_VkRenderPassStripeInfoARM(VkRenderPassStripeInfoARM const *s1,
                                       VkRenderPassStripeInfoARM const *s2) {
  // local, Vulkan struct types
  if (!compare_VkRect2D(&s1->stripeArea, &s2->stripeArea))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped
bool compare_VkRenderPassStripeSubmitInfoARM(VkRenderPassStripeSubmitInfoARM const *s1,
                                             VkRenderPassStripeSubmitInfoARM const *s2) {
  // local, simple types
  if ((s1->stripeSemaphoreInfoCount != s2->stripeSemaphoreInfoCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassSubpassFeedbackCreateInfoEXT(
    VkRenderPassSubpassFeedbackCreateInfoEXT const *s1,
    VkRenderPassSubpassFeedbackCreateInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 215 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassSubpassFeedbackInfoEXT(VkRenderPassSubpassFeedbackInfoEXT const *s1,
                                                VkRenderPassSubpassFeedbackInfoEXT const *s2) {
  // local, simple types
  if ((s1->subpassMergeStatus != s2->subpassMergeStatus) ||
      (s1->postMergeIndex != s2->postMergeIndex))
    return false;

  // local array members
  if (memcmp(s1->description, s2->description, VK_MAX_DESCRIPTION_SIZE * sizeof(char)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassSubpassFeedbackInfoEXT(VkRenderPassSubpassFeedbackInfoEXT const *s1,
                                                VkRenderPassSubpassFeedbackInfoEXT const *s2) {
  // local, simple types
  if ((s1->subpassMergeStatus != s2->subpassMergeStatus) ||
      (s1->postMergeIndex != s2->postMergeIndex))
    return false;

  // local array members
  if (strncmp(s1->description, s2->description, VK_MAX_DESCRIPTION_SIZE) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading
bool compare_VkRenderPassTileShadingCreateInfoQCOM(
    VkRenderPassTileShadingCreateInfoQCOM const *s1,
    VkRenderPassTileShadingCreateInfoQCOM const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->tileApronSize, &s2->tileApronSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
bool compare_VkRenderPassTransformBeginInfoQCOM(VkRenderPassTransformBeginInfoQCOM const *s1,
                                                VkRenderPassTransformBeginInfoQCOM const *s2) {
  // local, simple types
  if ((s1->transform != s2->transform))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkRenderingAreaInfo(VkRenderingAreaInfo const *s1, VkRenderingAreaInfo const *s2) {
  // local, simple types
  if ((s1->viewMask != s2->viewMask) || (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat))
    return false;

  // non-local members

  // pColorAttachmentFormats - colorAttachmentCount
  if (s1->pColorAttachmentFormats != s2->pColorAttachmentFormats &&
      (s1->pColorAttachmentFormats == NULL || s2->pColorAttachmentFormats == NULL ||
       memcmp(s1->pColorAttachmentFormats, s2->pColorAttachmentFormats,
              (s1->colorAttachmentCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkRenderingAreaInfoKHR(VkRenderingAreaInfoKHR const *s1,
                                    VkRenderingAreaInfoKHR const *s2) {
  // local, simple types
  if ((s1->viewMask != s2->viewMask) || (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat))
    return false;

  // non-local members

  // pColorAttachmentFormats - colorAttachmentCount
  if (s1->pColorAttachmentFormats != s2->pColorAttachmentFormats &&
      (s1->pColorAttachmentFormats == NULL || s2->pColorAttachmentFormats == NULL ||
       memcmp(s1->pColorAttachmentFormats, s2->pColorAttachmentFormats,
              (s1->colorAttachmentCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkRenderingAreaInfoKHR(VkRenderingAreaInfoKHR const *s1,
                                    VkRenderingAreaInfoKHR const *s2) {
  // local, simple types
  if ((s1->viewMask != s2->viewMask) || (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat))
    return false;

  // non-local members

  // pColorAttachmentFormats - colorAttachmentCount
  if (s1->pColorAttachmentFormats != s2->pColorAttachmentFormats &&
      (s1->pColorAttachmentFormats == NULL || s2->pColorAttachmentFormats == NULL ||
       memcmp(s1->pColorAttachmentFormats, s2->pColorAttachmentFormats,
              (s1->colorAttachmentCount) * sizeof(VkFormat)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkRenderingAttachmentInfo(VkRenderingAttachmentInfo const *s1,
                                       VkRenderingAttachmentInfo const *s2) {
  // local, simple types
  if ((s1->imageView != s2->imageView) || (s1->imageLayout != s2->imageLayout) ||
      (s1->resolveMode != s2->resolveMode) || (s1->resolveImageView != s2->resolveImageView) ||
      (s1->resolveImageLayout != s2->resolveImageLayout) || (s1->loadOp != s2->loadOp) ||
      (s1->storeOp != s2->storeOp))
    return false;

  // union types (no selector)
  if (memcmp(&s1->clearValue, &s2->clearValue, sizeof(VkClearValue)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering
bool compare_VkRenderingAttachmentInfoKHR(VkRenderingAttachmentInfoKHR const *s1,
                                          VkRenderingAttachmentInfoKHR const *s2) {
  // local, simple types
  if ((s1->imageView != s2->imageView) || (s1->imageLayout != s2->imageLayout) ||
      (s1->resolveMode != s2->resolveMode) || (s1->resolveImageView != s2->resolveImageView) ||
      (s1->resolveImageLayout != s2->resolveImageLayout) || (s1->loadOp != s2->loadOp) ||
      (s1->storeOp != s2->storeOp))
    return false;

  // union types (no selector)
  if (memcmp(&s1->clearValue, &s2->clearValue, sizeof(VkClearValue)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering
bool compare_VkRenderingAttachmentInfoKHR(VkRenderingAttachmentInfoKHR const *s1,
                                          VkRenderingAttachmentInfoKHR const *s2) {
  // local, simple types
  if ((s1->imageView != s2->imageView) || (s1->imageLayout != s2->imageLayout) ||
      (s1->resolveMode != s2->resolveMode) || (s1->resolveImageView != s2->resolveImageView) ||
      (s1->resolveImageLayout != s2->resolveImageLayout) || (s1->loadOp != s2->loadOp) ||
      (s1->storeOp != s2->storeOp))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkRenderingAttachmentLocationInfo(VkRenderingAttachmentLocationInfo const *s1,
                                               VkRenderingAttachmentLocationInfo const *s2) {
  // local, simple types
  if ((s1->colorAttachmentCount != s2->colorAttachmentCount))
    return false;

  // non-local members

  // pColorAttachmentLocations - colorAttachmentCount
  if (s1->pColorAttachmentLocations != s2->pColorAttachmentLocations &&
      (s1->pColorAttachmentLocations == NULL || s2->pColorAttachmentLocations == NULL ||
       memcmp(s1->pColorAttachmentLocations, s2->pColorAttachmentLocations,
              (s1->colorAttachmentCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read
bool compare_VkRenderingAttachmentLocationInfoKHR(VkRenderingAttachmentLocationInfoKHR const *s1,
                                                  VkRenderingAttachmentLocationInfoKHR const *s2) {
  // local, simple types
  if ((s1->colorAttachmentCount != s2->colorAttachmentCount))
    return false;

  // non-local members

  // pColorAttachmentLocations - colorAttachmentCount
  if (s1->pColorAttachmentLocations != s2->pColorAttachmentLocations &&
      (s1->pColorAttachmentLocations == NULL || s2->pColorAttachmentLocations == NULL ||
       memcmp(s1->pColorAttachmentLocations, s2->pColorAttachmentLocations,
              (s1->colorAttachmentCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read
bool compare_VkRenderingAttachmentLocationInfoKHR(VkRenderingAttachmentLocationInfoKHR const *s1,
                                                  VkRenderingAttachmentLocationInfoKHR const *s2) {
  // local, simple types
  if ((s1->colorAttachmentCount != s2->colorAttachmentCount))
    return false;

  // non-local members

  // pColorAttachmentLocations - colorAttachmentCount
  if (s1->pColorAttachmentLocations != s2->pColorAttachmentLocations &&
      (s1->pColorAttachmentLocations == NULL || s2->pColorAttachmentLocations == NULL ||
       memcmp(s1->pColorAttachmentLocations, s2->pColorAttachmentLocations,
              (s1->colorAttachmentCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset
bool compare_VkRenderingEndInfoEXT(VkRenderingEndInfoEXT const *s1,
                                   VkRenderingEndInfoEXT const *s2) {
  return true;
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_EXT_fragment_density_map &&                                    \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_EXT_fragment_density_map) ||                                                               \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
bool compare_VkRenderingFragmentDensityMapAttachmentInfoEXT(
    VkRenderingFragmentDensityMapAttachmentInfoEXT const *s1,
    VkRenderingFragmentDensityMapAttachmentInfoEXT const *s2) {
  // local, simple types
  if ((s1->imageView != s2->imageView) || (s1->imageLayout != s2->imageLayout))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_KHR_fragment_shading_rate &&                                   \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_KHR_fragment_shading_rate) ||                                                              \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
bool compare_VkRenderingFragmentShadingRateAttachmentInfoKHR(
    VkRenderingFragmentShadingRateAttachmentInfoKHR const *s1,
    VkRenderingFragmentShadingRateAttachmentInfoKHR const *s2) {
  // local, simple types
  if ((s1->imageView != s2->imageView) || (s1->imageLayout != s2->imageLayout))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->shadingRateAttachmentTexelSize, &s2->shadingRateAttachmentTexelSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkRenderingInfo(VkRenderingInfo const *s1, VkRenderingInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->layerCount != s2->layerCount) ||
      (s1->viewMask != s2->viewMask) || (s1->colorAttachmentCount != s2->colorAttachmentCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkRect2D(&s1->renderArea, &s2->renderArea))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering
bool compare_VkRenderingInfoKHR(VkRenderingInfoKHR const *s1, VkRenderingInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->layerCount != s2->layerCount) ||
      (s1->viewMask != s2->viewMask) || (s1->colorAttachmentCount != s2->colorAttachmentCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkRect2D(&s1->renderArea, &s2->renderArea))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 281 && VK_KHR_dynamic_rendering && VK_QCOM_tile_properties &&            \
     (VK_KHR_dynamic_rendering || VK_VERSION_1_3)) ||                                              \
    (VK_HEADER_VERSION >= 222 && VK_HEADER_VERSION <= 280 && VK_KHR_dynamic_rendering &&           \
     VK_QCOM_tile_properties) ||                                                                   \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 221 && VK_KHR_dynamic_rendering)
bool compare_VkRenderingInfoKHR(VkRenderingInfoKHR const *s1, VkRenderingInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->layerCount != s2->layerCount) ||
      (s1->viewMask != s2->viewMask) || (s1->colorAttachmentCount != s2->colorAttachmentCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkRenderingInputAttachmentIndexInfo(VkRenderingInputAttachmentIndexInfo const *s1,
                                                 VkRenderingInputAttachmentIndexInfo const *s2) {
  // local, simple types
  if ((s1->colorAttachmentCount != s2->colorAttachmentCount))
    return false;

  // non-local members

  // pColorAttachmentInputIndices - colorAttachmentCount
  if (s1->pColorAttachmentInputIndices != s2->pColorAttachmentInputIndices &&
      (s1->pColorAttachmentInputIndices == NULL || s2->pColorAttachmentInputIndices == NULL ||
       memcmp(s1->pColorAttachmentInputIndices, s2->pColorAttachmentInputIndices,
              (s1->colorAttachmentCount) * sizeof(uint32_t)) != 0))
    return false;
  if (s1->pDepthInputAttachmentIndex != s2->pDepthInputAttachmentIndex)
    return false;

  if (s1->pStencilInputAttachmentIndex != s2->pStencilInputAttachmentIndex)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read
bool compare_VkRenderingInputAttachmentIndexInfoKHR(
    VkRenderingInputAttachmentIndexInfoKHR const *s1,
    VkRenderingInputAttachmentIndexInfoKHR const *s2) {
  // local, simple types
  if ((s1->colorAttachmentCount != s2->colorAttachmentCount))
    return false;

  // non-local members

  // pColorAttachmentInputIndices - colorAttachmentCount
  if (s1->pColorAttachmentInputIndices != s2->pColorAttachmentInputIndices &&
      (s1->pColorAttachmentInputIndices == NULL || s2->pColorAttachmentInputIndices == NULL ||
       memcmp(s1->pColorAttachmentInputIndices, s2->pColorAttachmentInputIndices,
              (s1->colorAttachmentCount) * sizeof(uint32_t)) != 0))
    return false;
  if (s1->pDepthInputAttachmentIndex != s2->pDepthInputAttachmentIndex)
    return false;

  if (s1->pStencilInputAttachmentIndex != s2->pStencilInputAttachmentIndex)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read
bool compare_VkRenderingInputAttachmentIndexInfoKHR(
    VkRenderingInputAttachmentIndexInfoKHR const *s1,
    VkRenderingInputAttachmentIndexInfoKHR const *s2) {
  // local, simple types
  if ((s1->colorAttachmentCount != s2->colorAttachmentCount))
    return false;

  // non-local members

  // pColorAttachmentInputIndices - colorAttachmentCount
  if (s1->pColorAttachmentInputIndices != s2->pColorAttachmentInputIndices &&
      (s1->pColorAttachmentInputIndices == NULL || s2->pColorAttachmentInputIndices == NULL ||
       memcmp(s1->pColorAttachmentInputIndices, s2->pColorAttachmentInputIndices,
              (s1->colorAttachmentCount) * sizeof(uint32_t)) != 0))
    return false;
  if (s1->pDepthInputAttachmentIndex != s2->pDepthInputAttachmentIndex)
    return false;

  if (s1->pStencilInputAttachmentIndex != s2->pStencilInputAttachmentIndex)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkResolveImageInfo2(VkResolveImageInfo2 const *s1, VkResolveImageInfo2 const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2
bool compare_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *s1,
                                    VkResolveImageInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2
bool compare_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *s1,
                                    VkResolveImageInfo2KHR const *s2) {
  // local, simple types
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkSRTDataNV(VkSRTDataNV const *s1, VkSRTDataNV const *s2) {
  // local, simple types
  if ((s1->sx != s2->sx) || (s1->a != s2->a) || (s1->b != s2->b) || (s1->pvx != s2->pvx) ||
      (s1->sy != s2->sy) || (s1->c != s2->c) || (s1->pvy != s2->pvy) || (s1->sz != s2->sz) ||
      (s1->pvz != s2->pvz) || (s1->qx != s2->qx) || (s1->qy != s2->qy) || (s1->qz != s2->qz) ||
      (s1->qw != s2->qw) || (s1->tx != s2->tx) || (s1->ty != s2->ty) || (s1->tz != s2->tz))
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkSampleLocationEXT(VkSampleLocationEXT const *s1, VkSampleLocationEXT const *s2) {
  // local, simple types
  if ((s1->x != s2->x) || (s1->y != s2->y))
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkSampleLocationsInfoEXT(VkSampleLocationsInfoEXT const *s1,
                                      VkSampleLocationsInfoEXT const *s2) {
  // local, simple types
  if ((s1->sampleLocationsPerPixel != s2->sampleLocationsPerPixel) ||
      (s1->sampleLocationsCount != s2->sampleLocationsCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->sampleLocationGridSize, &s2->sampleLocationGridSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2
bool compare_VkSamplerBlockMatchWindowCreateInfoQCOM(
    VkSamplerBlockMatchWindowCreateInfoQCOM const *s1,
    VkSamplerBlockMatchWindowCreateInfoQCOM const *s2) {
  // local, simple types
  if ((s1->windowCompareMode != s2->windowCompareMode))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->windowExtent, &s2->windowExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
bool compare_VkSamplerBorderColorComponentMappingCreateInfoEXT(
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *s1,
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->srgb != s2->srgb))
    return false;

  // local, Vulkan struct types
  if (!compare_VkComponentMapping(&s1->components, &s2->components))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkSamplerCaptureDescriptorDataInfoEXT(
    VkSamplerCaptureDescriptorDataInfoEXT const *s1,
    VkSamplerCaptureDescriptorDataInfoEXT const *s2) {
  // local, simple types
  if ((s1->sampler != s2->sampler))
    return false;

  return true;
}
#endif

bool compare_VkSamplerCreateInfo(VkSamplerCreateInfo const *s1, VkSamplerCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->magFilter != s2->magFilter) ||
      (s1->minFilter != s2->minFilter) || (s1->mipmapMode != s2->mipmapMode) ||
      (s1->addressModeU != s2->addressModeU) || (s1->addressModeV != s2->addressModeV) ||
      (s1->addressModeW != s2->addressModeW) || (s1->mipLodBias != s2->mipLodBias) ||
      (s1->anisotropyEnable != s2->anisotropyEnable) || (s1->maxAnisotropy != s2->maxAnisotropy) ||
      (s1->compareEnable != s2->compareEnable) || (s1->compareOp != s2->compareOp) ||
      (s1->minLod != s2->minLod) || (s1->maxLod != s2->maxLod) ||
      (s1->borderColor != s2->borderColor) ||
      (s1->unnormalizedCoordinates != s2->unnormalizedCoordinates))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights
bool compare_VkSamplerCubicWeightsCreateInfoQCOM(VkSamplerCubicWeightsCreateInfoQCOM const *s1,
                                                 VkSamplerCubicWeightsCreateInfoQCOM const *s2) {
  // local, simple types
  if ((s1->cubicWeights != s2->cubicWeights))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
bool compare_VkSamplerCustomBorderColorCreateInfoEXT(
    VkSamplerCustomBorderColorCreateInfoEXT const *s1,
    VkSamplerCustomBorderColorCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->format != s2->format))
    return false;

  // union types (no selector)
  if (memcmp(&s1->customBorderColor, &s2->customBorderColor, sizeof(VkClearColorValue)) != 0)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSamplerReductionModeCreateInfo(VkSamplerReductionModeCreateInfo const *s1,
                                              VkSamplerReductionModeCreateInfo const *s2) {
  // local, simple types
  if ((s1->reductionMode != s2->reductionMode))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 130 && VK_EXT_sampler_filter_minmax
bool compare_VkSamplerReductionModeCreateInfoEXT(VkSamplerReductionModeCreateInfoEXT const *s1,
                                                 VkSamplerReductionModeCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->reductionMode != s2->reductionMode))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_EXT_sampler_filter_minmax
bool compare_VkSamplerReductionModeCreateInfoEXT(VkSamplerReductionModeCreateInfoEXT const *s1,
                                                 VkSamplerReductionModeCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->reductionMode != s2->reductionMode))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionCreateInfo(VkSamplerYcbcrConversionCreateInfo const *s1,
                                                VkSamplerYcbcrConversionCreateInfo const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->ycbcrModel != s2->ycbcrModel) ||
      (s1->ycbcrRange != s2->ycbcrRange) || (s1->xChromaOffset != s2->xChromaOffset) ||
      (s1->yChromaOffset != s2->yChromaOffset) || (s1->chromaFilter != s2->chromaFilter) ||
      (s1->forceExplicitReconstruction != s2->forceExplicitReconstruction))
    return false;

  // local, Vulkan struct types
  if (!compare_VkComponentMapping(&s1->components, &s2->components))
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionCreateInfoKHR(
    VkSamplerYcbcrConversionCreateInfoKHR const *s1,
    VkSamplerYcbcrConversionCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->ycbcrModel != s2->ycbcrModel) ||
      (s1->ycbcrRange != s2->ycbcrRange) || (s1->xChromaOffset != s2->xChromaOffset) ||
      (s1->yChromaOffset != s2->yChromaOffset) || (s1->chromaFilter != s2->chromaFilter) ||
      (s1->forceExplicitReconstruction != s2->forceExplicitReconstruction))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionImageFormatProperties(
    VkSamplerYcbcrConversionImageFormatProperties const *s1,
    VkSamplerYcbcrConversionImageFormatProperties const *s2) {
  // local, simple types
  if ((s1->combinedImageSamplerDescriptorCount != s2->combinedImageSamplerDescriptorCount))
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionImageFormatPropertiesKHR(
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *s1,
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->combinedImageSamplerDescriptorCount != s2->combinedImageSamplerDescriptorCount))
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionInfo(VkSamplerYcbcrConversionInfo const *s1,
                                          VkSamplerYcbcrConversionInfo const *s2) {
  // local, simple types
  if ((s1->conversion != s2->conversion))
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionInfoKHR(VkSamplerYcbcrConversionInfoKHR const *s1,
                                             VkSamplerYcbcrConversionInfoKHR const *s2) {
  // local, simple types
  if ((s1->conversion != s2->conversion))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 262 && VK_QCOM_ycbcr_degamma
bool compare_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(
    VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM const *s1,
    VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM const *s2) {
  // local, simple types
  if ((s1->enableYDegamma != s2->enableYDegamma) ||
      (s1->enableCbCrDegamma != s2->enableCbCrDegamma))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2
bool compare_VkSciSyncAttributesInfoNV(VkSciSyncAttributesInfoNV const *s1,
                                       VkSciSyncAttributesInfoNV const *s2) {
  // local, simple types
  if ((s1->clientType != s2->clientType) || (s1->primitiveType != s2->primitiveType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer
bool compare_VkScreenBufferFormatPropertiesQNX(VkScreenBufferFormatPropertiesQNX const *s1,
                                               VkScreenBufferFormatPropertiesQNX const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->externalFormat != s2->externalFormat) ||
      (s1->screenUsage != s2->screenUsage) || (s1->formatFeatures != s2->formatFeatures) ||
      (s1->suggestedYcbcrModel != s2->suggestedYcbcrModel) ||
      (s1->suggestedYcbcrRange != s2->suggestedYcbcrRange) ||
      (s1->suggestedXChromaOffset != s2->suggestedXChromaOffset) ||
      (s1->suggestedYChromaOffset != s2->suggestedYChromaOffset))
    return false;

  // local, Vulkan struct types
  if (!compare_VkComponentMapping(&s1->samplerYcbcrConversionComponents,
                                  &s2->samplerYcbcrConversionComponents))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer
bool compare_VkScreenBufferPropertiesQNX(VkScreenBufferPropertiesQNX const *s1,
                                         VkScreenBufferPropertiesQNX const *s2) {
  // local, simple types
  if ((s1->allocationSize != s2->allocationSize) || (s1->memoryTypeBits != s2->memoryTypeBits))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface
bool compare_VkScreenSurfaceCreateInfoQNX(VkScreenSurfaceCreateInfoQNX const *s1,
                                          VkScreenSurfaceCreateInfoQNX const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // non-local members
  if (s1->context != s2->context)
    return false;

  if (s1->window != s2->window)
    return false;

  return true;
}
#endif

bool compare_VkSemaphoreCreateInfo(VkSemaphoreCreateInfo const *s1,
                                   VkSemaphoreCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}

#if VK_KHR_external_semaphore_fd
bool compare_VkSemaphoreGetFdInfoKHR(VkSemaphoreGetFdInfoKHR const *s1,
                                     VkSemaphoreGetFdInfoKHR const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync
bool compare_VkSemaphoreGetSciSyncInfoNV(VkSemaphoreGetSciSyncInfoNV const *s1,
                                         VkSemaphoreGetSciSyncInfoNV const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkSemaphoreGetWin32HandleInfoKHR(VkSemaphoreGetWin32HandleInfoKHR const *s1,
                                              VkSemaphoreGetWin32HandleInfoKHR const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
bool compare_VkSemaphoreGetZirconHandleInfoFUCHSIA(
    VkSemaphoreGetZirconHandleInfoFUCHSIA const *s1,
    VkSemaphoreGetZirconHandleInfoFUCHSIA const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->handleType != s2->handleType))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2
bool compare_VkSemaphoreSciSyncCreateInfoNV(VkSemaphoreSciSyncCreateInfoNV const *s1,
                                            VkSemaphoreSciSyncCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->semaphorePool != s2->semaphorePool))
    return false;

  // non-local members
  if (s1->pFence != s2->pFence)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2
bool compare_VkSemaphoreSciSyncPoolCreateInfoNV(VkSemaphoreSciSyncPoolCreateInfoNV const *s1,
                                                VkSemaphoreSciSyncPoolCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->handle != s2->handle))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreSignalInfo(VkSemaphoreSignalInfo const *s1,
                                   VkSemaphoreSignalInfo const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->value != s2->value))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *s1,
                                      VkSemaphoreSignalInfoKHR const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->value != s2->value))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *s1,
                                      VkSemaphoreSignalInfoKHR const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->value != s2->value))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkSemaphoreSubmitInfo(VkSemaphoreSubmitInfo const *s1,
                                   VkSemaphoreSubmitInfo const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->value != s2->value) ||
      (s1->stageMask != s2->stageMask) || (s1->deviceIndex != s2->deviceIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *s1,
                                      VkSemaphoreSubmitInfoKHR const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->value != s2->value) ||
      (s1->stageMask != s2->stageMask) || (s1->deviceIndex != s2->deviceIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *s1,
                                      VkSemaphoreSubmitInfoKHR const *s2) {
  // local, simple types
  if ((s1->semaphore != s2->semaphore) || (s1->value != s2->value) ||
      (s1->stageMask != s2->stageMask) || (s1->deviceIndex != s2->deviceIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreTypeCreateInfo(VkSemaphoreTypeCreateInfo const *s1,
                                       VkSemaphoreTypeCreateInfo const *s2) {
  // local, simple types
  if ((s1->semaphoreType != s2->semaphoreType) || (s1->initialValue != s2->initialValue))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *s1,
                                          VkSemaphoreTypeCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->semaphoreType != s2->semaphoreType) || (s1->initialValue != s2->initialValue))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *s1,
                                          VkSemaphoreTypeCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->semaphoreType != s2->semaphoreType) || (s1->initialValue != s2->initialValue))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreWaitInfo(VkSemaphoreWaitInfo const *s1, VkSemaphoreWaitInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->semaphoreCount != s2->semaphoreCount))
    return false;

  // non-local members

  // pSemaphores - semaphoreCount
  if (s1->pSemaphores != s2->pSemaphores &&
      (s1->pSemaphores == NULL || s2->pSemaphores == NULL ||
       memcmp(s1->pSemaphores, s2->pSemaphores, (s1->semaphoreCount) * sizeof(VkSemaphore)) != 0))
    return false;

  // pValues - semaphoreCount
  if (s1->pValues != s2->pValues &&
      (s1->pValues == NULL || s2->pValues == NULL ||
       memcmp(s1->pValues, s2->pValues, (s1->semaphoreCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *s1,
                                    VkSemaphoreWaitInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->semaphoreCount != s2->semaphoreCount))
    return false;

  // non-local members

  // pSemaphores - semaphoreCount
  if (s1->pSemaphores != s2->pSemaphores &&
      (s1->pSemaphores == NULL || s2->pSemaphores == NULL ||
       memcmp(s1->pSemaphores, s2->pSemaphores, (s1->semaphoreCount) * sizeof(VkSemaphore)) != 0))
    return false;

  // pValues - semaphoreCount
  if (s1->pValues != s2->pValues &&
      (s1->pValues == NULL || s2->pValues == NULL ||
       memcmp(s1->pValues, s2->pValues, (s1->semaphoreCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *s1,
                                    VkSemaphoreWaitInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->semaphoreCount != s2->semaphoreCount))
    return false;

  // non-local members

  // pSemaphores - semaphoreCount
  if (s1->pSemaphores != s2->pSemaphores &&
      (s1->pSemaphores == NULL || s2->pSemaphores == NULL ||
       memcmp(s1->pSemaphores, s2->pSemaphores, (s1->semaphoreCount) * sizeof(VkSemaphore)) != 0))
    return false;

  // pValues - semaphoreCount
  if (s1->pValues != s2->pValues &&
      (s1->pValues == NULL || s2->pValues == NULL ||
       memcmp(s1->pValues, s2->pValues, (s1->semaphoreCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_maintenance6 && VK_EXT_descriptor_buffer
bool compare_VkSetDescriptorBufferOffsetsInfoEXT(VkSetDescriptorBufferOffsetsInfoEXT const *s1,
                                                 VkSetDescriptorBufferOffsetsInfoEXT const *s2) {
  // local, simple types
  if ((s1->stageFlags != s2->stageFlags) || (s1->layout != s2->layout) ||
      (s1->firstSet != s2->firstSet) || (s1->setCount != s2->setCount))
    return false;

  // non-local members

  // pBufferIndices - setCount
  if (s1->pBufferIndices != s2->pBufferIndices &&
      (s1->pBufferIndices == NULL || s2->pBufferIndices == NULL ||
       memcmp(s1->pBufferIndices, s2->pBufferIndices, (s1->setCount) * sizeof(uint32_t)) != 0))
    return false;

  // pOffsets - setCount
  if (s1->pOffsets != s2->pOffsets &&
      (s1->pOffsets == NULL || s2->pOffsets == NULL ||
       memcmp(s1->pOffsets, s2->pOffsets, (s1->setCount) * sizeof(VkDeviceSize)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkSetLatencyMarkerInfoNV(VkSetLatencyMarkerInfoNV const *s1,
                                      VkSetLatencyMarkerInfoNV const *s2) {
  // local, simple types
  if ((s1->presentID != s2->presentID) || (s1->marker != s2->marker))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 308 && VK_NV_present_metering && VK_ENABLE_BETA_EXTENSIONS
bool compare_VkSetPresentConfigNV(VkSetPresentConfigNV const *s1, VkSetPresentConfigNV const *s2) {
  // local, simple types
  if ((s1->numFramesPerBatch != s2->numFramesPerBatch) ||
      (s1->presentConfigFeedback != s2->presentConfigFeedback))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkSetStateFlagsIndirectCommandNV(VkSetStateFlagsIndirectCommandNV const *s1,
                                              VkSetStateFlagsIndirectCommandNV const *s2) {
  // local, simple types
  if ((s1->data != s2->data))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_object
bool compare_VkShaderCreateInfoEXT(VkShaderCreateInfoEXT const *s1,
                                   VkShaderCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->stage != s2->stage) || (s1->nextStage != s2->nextStage) ||
      (s1->codeType != s2->codeType) || (s1->codeSize != s2->codeSize) ||
      (s1->setLayoutCount != s2->setLayoutCount) ||
      (s1->pushConstantRangeCount != s2->pushConstantRangeCount))
    return false;

  // non-local members

  // pCode - codeSize
  if (s1->pCode != s2->pCode &&
      (s1->pCode == NULL || s2->pCode == NULL || memcmp(s1->pCode, s2->pCode, s1->codeSize) != 0))
    return false;

  // pName - null-terminated
  if (s1->pName != s2->pName &&
      (s1->pName == NULL || s2->pName == NULL || strcmp(s1->pName, s2->pName) != 0))
    return false;

  // pSetLayouts - setLayoutCount
  if (s1->pSetLayouts != s2->pSetLayouts &&
      (s1->pSetLayouts == NULL || s2->pSetLayouts == NULL ||
       memcmp(s1->pSetLayouts, s2->pSetLayouts,
              (s1->setLayoutCount) * sizeof(VkDescriptorSetLayout)) != 0))
    return false;
  return true;
}
#endif

bool compare_VkShaderModuleCreateInfo(VkShaderModuleCreateInfo const *s1,
                                      VkShaderModuleCreateInfo const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->codeSize != s2->codeSize))
    return false;

  // non-local members

  // pCode - codeSize / 4
  if (s1->pCode != s2->pCode &&
      (s1->pCode == NULL || s2->pCode == NULL ||
       memcmp(s1->pCode, s2->pCode, (s1->codeSize / 4) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkShaderModuleIdentifierEXT(VkShaderModuleIdentifierEXT const *s1,
                                         VkShaderModuleIdentifierEXT const *s2) {
  // local, simple types
  if ((s1->identifierSize != s2->identifierSize))
    return false;

  // local array members
  if (memcmp(s1->identifier, s2->identifier, s1->identifierSize) != 0)
    return false;
  return true;
}
#endif

#if VK_EXT_validation_cache
bool compare_VkShaderModuleValidationCacheCreateInfoEXT(
    VkShaderModuleValidationCacheCreateInfoEXT const *s1,
    VkShaderModuleValidationCacheCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->validationCache != s2->validationCache))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 246 && VK_EXT_shader_object
bool compare_VkShaderRequiredSubgroupSizeCreateInfoEXT(
    VkShaderRequiredSubgroupSizeCreateInfoEXT const *s1,
    VkShaderRequiredSubgroupSizeCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->requiredSubgroupSize != s2->requiredSubgroupSize))
    return false;

  return true;
}
#endif

#if VK_AMD_shader_info
bool compare_VkShaderResourceUsageAMD(VkShaderResourceUsageAMD const *s1,
                                      VkShaderResourceUsageAMD const *s2) {
  // local, simple types
  if ((s1->numUsedVgprs != s2->numUsedVgprs) || (s1->numUsedSgprs != s2->numUsedSgprs) ||
      (s1->ldsSizePerLocalWorkGroup != s2->ldsSizePerLocalWorkGroup) ||
      (s1->ldsUsageSizeInBytes != s2->ldsUsageSizeInBytes) ||
      (s1->scratchMemUsageInBytes != s2->scratchMemUsageInBytes))
    return false;

  return true;
}
#endif

#if VK_AMD_shader_info
bool compare_VkShaderStatisticsInfoAMD(VkShaderStatisticsInfoAMD const *s1,
                                       VkShaderStatisticsInfoAMD const *s2) {
  // local, simple types
  if ((s1->shaderStageMask != s2->shaderStageMask) ||
      (s1->numPhysicalVgprs != s2->numPhysicalVgprs) ||
      (s1->numPhysicalSgprs != s2->numPhysicalSgprs) ||
      (s1->numAvailableVgprs != s2->numAvailableVgprs) ||
      (s1->numAvailableSgprs != s2->numAvailableSgprs))
    return false;

  // local, Vulkan struct types
  if (!compare_VkShaderResourceUsageAMD(&s1->resourceUsage, &s2->resourceUsage))
    return false;

  // local array members
  if (memcmp(s1->computeWorkGroupSize, s2->computeWorkGroupSize, 3 * sizeof(uint32_t)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkShadingRatePaletteNV(VkShadingRatePaletteNV const *s1,
                                    VkShadingRatePaletteNV const *s2) {
  // local, simple types
  if ((s1->shadingRatePaletteEntryCount != s2->shadingRatePaletteEntryCount))
    return false;

  // non-local members

  // pShadingRatePaletteEntries - shadingRatePaletteEntryCount
  if (s1->pShadingRatePaletteEntries != s2->pShadingRatePaletteEntries &&
      (s1->pShadingRatePaletteEntries == NULL || s2->pShadingRatePaletteEntries == NULL ||
       memcmp(s1->pShadingRatePaletteEntries, s2->pShadingRatePaletteEntries,
              (s1->shadingRatePaletteEntryCount) * sizeof(VkShadingRatePaletteEntryNV)) != 0))
    return false;
  return true;
}
#endif

#if VK_KHR_shared_presentable_image
bool compare_VkSharedPresentSurfaceCapabilitiesKHR(
    VkSharedPresentSurfaceCapabilitiesKHR const *s1,
    VkSharedPresentSurfaceCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->sharedPresentSupportedUsageFlags != s2->sharedPresentSupportedUsageFlags))
    return false;

  return true;
}
#endif

bool compare_VkSparseBufferMemoryBindInfo(VkSparseBufferMemoryBindInfo const *s1,
                                          VkSparseBufferMemoryBindInfo const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer) || (s1->bindCount != s2->bindCount))
    return false;

  return true;
}

bool compare_VkSparseImageFormatProperties(VkSparseImageFormatProperties const *s1,
                                           VkSparseImageFormatProperties const *s2) {
  // local, simple types
  if ((s1->aspectMask != s2->aspectMask) || (s1->flags != s2->flags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent3D(&s1->imageGranularity, &s2->imageGranularity))
    return false;

  return true;
}

#if VK_VERSION_1_1
bool compare_VkSparseImageFormatProperties2(VkSparseImageFormatProperties2 const *s1,
                                            VkSparseImageFormatProperties2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkSparseImageFormatProperties(&s1->properties, &s2->properties))
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkSparseImageFormatProperties2KHR(VkSparseImageFormatProperties2KHR const *s1,
                                               VkSparseImageFormatProperties2KHR const *s2) {
  return true;
}
#endif

bool compare_VkSparseImageMemoryBind(VkSparseImageMemoryBind const *s1,
                                     VkSparseImageMemoryBind const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory) || (s1->memoryOffset != s2->memoryOffset) ||
      (s1->flags != s2->flags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkImageSubresource(&s1->subresource, &s2->subresource) ||
      !compare_VkOffset3D(&s1->offset, &s2->offset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent))
    return false;

  return true;
}

bool compare_VkSparseImageMemoryBindInfo(VkSparseImageMemoryBindInfo const *s1,
                                         VkSparseImageMemoryBindInfo const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->bindCount != s2->bindCount))
    return false;

  return true;
}

bool compare_VkSparseImageMemoryRequirements(VkSparseImageMemoryRequirements const *s1,
                                             VkSparseImageMemoryRequirements const *s2) {
  // local, simple types
  if ((s1->imageMipTailFirstLod != s2->imageMipTailFirstLod) ||
      (s1->imageMipTailSize != s2->imageMipTailSize) ||
      (s1->imageMipTailOffset != s2->imageMipTailOffset) ||
      (s1->imageMipTailStride != s2->imageMipTailStride))
    return false;

  // local, Vulkan struct types
  if (!compare_VkSparseImageFormatProperties(&s1->formatProperties, &s2->formatProperties))
    return false;

  return true;
}

#if VK_VERSION_1_1
bool compare_VkSparseImageMemoryRequirements2(VkSparseImageMemoryRequirements2 const *s1,
                                              VkSparseImageMemoryRequirements2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkSparseImageMemoryRequirements(&s1->memoryRequirements, &s2->memoryRequirements))
    return false;

  return true;
}
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkSparseImageMemoryRequirements2KHR(VkSparseImageMemoryRequirements2KHR const *s1,
                                                 VkSparseImageMemoryRequirements2KHR const *s2) {
  return true;
}
#endif

bool compare_VkSparseImageOpaqueMemoryBindInfo(VkSparseImageOpaqueMemoryBindInfo const *s1,
                                               VkSparseImageOpaqueMemoryBindInfo const *s2) {
  // local, simple types
  if ((s1->image != s2->image) || (s1->bindCount != s2->bindCount))
    return false;

  return true;
}

bool compare_VkSparseMemoryBind(VkSparseMemoryBind const *s1, VkSparseMemoryBind const *s2) {
  // local, simple types
  if ((s1->resourceOffset != s2->resourceOffset) || (s1->size != s2->size) ||
      (s1->memory != s2->memory) || (s1->memoryOffset != s2->memoryOffset) ||
      (s1->flags != s2->flags))
    return false;

  return true;
}

bool compare_VkSpecializationInfo(VkSpecializationInfo const *s1, VkSpecializationInfo const *s2) {
  // local, simple types
  if ((s1->mapEntryCount != s2->mapEntryCount) || (s1->dataSize != s2->dataSize))
    return false;

  // non-local members

  // pData - dataSize
  if (s1->pData != s2->pData &&
      (s1->pData == NULL || s2->pData == NULL || memcmp(s1->pData, s2->pData, s1->dataSize) != 0))
    return false;
  return true;
}

bool compare_VkSpecializationMapEntry(VkSpecializationMapEntry const *s1,
                                      VkSpecializationMapEntry const *s2) {
  // local, simple types
  if ((s1->constantID != s2->constantID) || (s1->offset != s2->offset) || (s1->size != s2->size))
    return false;

  return true;
}

bool compare_VkStencilOpState(VkStencilOpState const *s1, VkStencilOpState const *s2) {
  // local, simple types
  if ((s1->failOp != s2->failOp) || (s1->passOp != s2->passOp) ||
      (s1->depthFailOp != s2->depthFailOp) || (s1->compareOp != s2->compareOp) ||
      (s1->compareMask != s2->compareMask) || (s1->writeMask != s2->writeMask) ||
      (s1->reference != s2->reference))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface
bool compare_VkStreamDescriptorSurfaceCreateInfoGGP(
    VkStreamDescriptorSurfaceCreateInfoGGP const *s1,
    VkStreamDescriptorSurfaceCreateInfoGGP const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->streamDescriptor != s2->streamDescriptor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkStridedBufferRegionKHR(VkStridedBufferRegionKHR const *s1,
                                      VkStridedBufferRegionKHR const *s2) {
  // local, simple types
  if ((s1->buffer != s2->buffer) || (s1->offset != s2->offset) || (s1->stride != s2->stride) ||
      (s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure
bool compare_VkStridedDeviceAddressNV(VkStridedDeviceAddressNV const *s1,
                                      VkStridedDeviceAddressNV const *s2) {
  // local, simple types
  if ((s1->startAddress != s2->startAddress) || (s1->strideInBytes != s2->strideInBytes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkStridedDeviceAddressRegionKHR(VkStridedDeviceAddressRegionKHR const *s1,
                                             VkStridedDeviceAddressRegionKHR const *s2) {
  // local, simple types
  if ((s1->deviceAddress != s2->deviceAddress) || (s1->stride != s2->stride) ||
      (s1->size != s2->size))
    return false;

  return true;
}
#endif

bool compare_VkSubmitInfo(VkSubmitInfo const *s1, VkSubmitInfo const *s2) {
  // local, simple types
  if ((s1->waitSemaphoreCount != s2->waitSemaphoreCount) ||
      (s1->commandBufferCount != s2->commandBufferCount) ||
      (s1->signalSemaphoreCount != s2->signalSemaphoreCount))
    return false;

  // non-local members

  // pWaitSemaphores - waitSemaphoreCount
  if (s1->pWaitSemaphores != s2->pWaitSemaphores &&
      (s1->pWaitSemaphores == NULL || s2->pWaitSemaphores == NULL ||
       memcmp(s1->pWaitSemaphores, s2->pWaitSemaphores,
              (s1->waitSemaphoreCount) * sizeof(VkSemaphore)) != 0))
    return false;

  // pWaitDstStageMask - waitSemaphoreCount
  if (s1->pWaitDstStageMask != s2->pWaitDstStageMask &&
      (s1->pWaitDstStageMask == NULL || s2->pWaitDstStageMask == NULL ||
       memcmp(s1->pWaitDstStageMask, s2->pWaitDstStageMask,
              (s1->waitSemaphoreCount) * sizeof(VkPipelineStageFlags)) != 0))
    return false;

  // pCommandBuffers - commandBufferCount
  if (s1->pCommandBuffers != s2->pCommandBuffers &&
      (s1->pCommandBuffers == NULL || s2->pCommandBuffers == NULL ||
       memcmp(s1->pCommandBuffers, s2->pCommandBuffers,
              (s1->commandBufferCount) * sizeof(VkCommandBuffer)) != 0))
    return false;

  // pSignalSemaphores - signalSemaphoreCount
  if (s1->pSignalSemaphores != s2->pSignalSemaphores &&
      (s1->pSignalSemaphores == NULL || s2->pSignalSemaphores == NULL ||
       memcmp(s1->pSignalSemaphores, s2->pSignalSemaphores,
              (s1->signalSemaphoreCount) * sizeof(VkSemaphore)) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkSubmitInfo2(VkSubmitInfo2 const *s1, VkSubmitInfo2 const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->waitSemaphoreInfoCount != s2->waitSemaphoreInfoCount) ||
      (s1->commandBufferInfoCount != s2->commandBufferInfoCount) ||
      (s1->signalSemaphoreInfoCount != s2->signalSemaphoreInfoCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2
bool compare_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *s1, VkSubmitInfo2KHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->waitSemaphoreInfoCount != s2->waitSemaphoreInfoCount) ||
      (s1->commandBufferInfoCount != s2->commandBufferInfoCount) ||
      (s1->signalSemaphoreInfoCount != s2->signalSemaphoreInfoCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2
bool compare_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *s1, VkSubmitInfo2KHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->waitSemaphoreInfoCount != s2->waitSemaphoreInfoCount) ||
      (s1->commandBufferInfoCount != s2->commandBufferInfoCount) ||
      (s1->signalSemaphoreInfoCount != s2->signalSemaphoreInfoCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassBeginInfo(VkSubpassBeginInfo const *s1, VkSubpassBeginInfo const *s2) {
  // local, simple types
  if ((s1->contents != s2->contents))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *s1,
                                   VkSubpassBeginInfoKHR const *s2) {
  // local, simple types
  if ((s1->contents != s2->contents))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *s1,
                                   VkSubpassBeginInfoKHR const *s2) {
  // local, simple types
  if ((s1->contents != s2->contents))
    return false;

  return true;
}
#endif

bool compare_VkSubpassDependency(VkSubpassDependency const *s1, VkSubpassDependency const *s2) {
  // local, simple types
  if ((s1->srcSubpass != s2->srcSubpass) || (s1->dstSubpass != s2->dstSubpass) ||
      (s1->srcStageMask != s2->srcStageMask) || (s1->dstStageMask != s2->dstStageMask) ||
      (s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->dependencyFlags != s2->dependencyFlags))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDependency2(VkSubpassDependency2 const *s1, VkSubpassDependency2 const *s2) {
  // local, simple types
  if ((s1->srcSubpass != s2->srcSubpass) || (s1->dstSubpass != s2->dstSubpass) ||
      (s1->srcStageMask != s2->srcStageMask) || (s1->dstStageMask != s2->dstStageMask) ||
      (s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->dependencyFlags != s2->dependencyFlags) || (s1->viewOffset != s2->viewOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *s1,
                                     VkSubpassDependency2KHR const *s2) {
  // local, simple types
  if ((s1->srcSubpass != s2->srcSubpass) || (s1->dstSubpass != s2->dstSubpass) ||
      (s1->srcStageMask != s2->srcStageMask) || (s1->dstStageMask != s2->dstStageMask) ||
      (s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->dependencyFlags != s2->dependencyFlags) || (s1->viewOffset != s2->viewOffset))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *s1,
                                     VkSubpassDependency2KHR const *s2) {
  // local, simple types
  if ((s1->srcSubpass != s2->srcSubpass) || (s1->dstSubpass != s2->dstSubpass) ||
      (s1->srcStageMask != s2->srcStageMask) || (s1->dstStageMask != s2->dstStageMask) ||
      (s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->dependencyFlags != s2->dependencyFlags) || (s1->viewOffset != s2->viewOffset))
    return false;

  return true;
}
#endif

bool compare_VkSubpassDescription(VkSubpassDescription const *s1, VkSubpassDescription const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->inputAttachmentCount != s2->inputAttachmentCount) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->preserveAttachmentCount != s2->preserveAttachmentCount))
    return false;

  // non-local members

  // pPreserveAttachments - preserveAttachmentCount
  if (s1->pPreserveAttachments != s2->pPreserveAttachments &&
      (s1->pPreserveAttachments == NULL || s2->pPreserveAttachments == NULL ||
       memcmp(s1->pPreserveAttachments, s2->pPreserveAttachments,
              (s1->preserveAttachmentCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDescription2(VkSubpassDescription2 const *s1,
                                   VkSubpassDescription2 const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->viewMask != s2->viewMask) || (s1->inputAttachmentCount != s2->inputAttachmentCount) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->preserveAttachmentCount != s2->preserveAttachmentCount))
    return false;

  // non-local members

  // pPreserveAttachments - preserveAttachmentCount
  if (s1->pPreserveAttachments != s2->pPreserveAttachments &&
      (s1->pPreserveAttachments == NULL || s2->pPreserveAttachments == NULL ||
       memcmp(s1->pPreserveAttachments, s2->pPreserveAttachments,
              (s1->preserveAttachmentCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *s1,
                                      VkSubpassDescription2KHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->viewMask != s2->viewMask) || (s1->inputAttachmentCount != s2->inputAttachmentCount) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->preserveAttachmentCount != s2->preserveAttachmentCount))
    return false;

  // non-local members

  // pPreserveAttachments - preserveAttachmentCount
  if (s1->pPreserveAttachments != s2->pPreserveAttachments &&
      (s1->pPreserveAttachments == NULL || s2->pPreserveAttachments == NULL ||
       memcmp(s1->pPreserveAttachments, s2->pPreserveAttachments,
              (s1->preserveAttachmentCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *s1,
                                      VkSubpassDescription2KHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->viewMask != s2->viewMask) || (s1->inputAttachmentCount != s2->inputAttachmentCount) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->preserveAttachmentCount != s2->preserveAttachmentCount))
    return false;

  // non-local members

  // pPreserveAttachments - preserveAttachmentCount
  if (s1->pPreserveAttachments != s2->pPreserveAttachments &&
      (s1->pPreserveAttachments == NULL || s2->pPreserveAttachments == NULL ||
       memcmp(s1->pPreserveAttachments, s2->pPreserveAttachments,
              (s1->preserveAttachmentCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDescriptionDepthStencilResolve(
    VkSubpassDescriptionDepthStencilResolve const *s1,
    VkSubpassDescriptionDepthStencilResolve const *s2) {
  // local, simple types
  if ((s1->depthResolveMode != s2->depthResolveMode) ||
      (s1->stencilResolveMode != s2->stencilResolveMode))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 130 && VK_KHR_depth_stencil_resolve
bool compare_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *s1,
    VkSubpassDescriptionDepthStencilResolveKHR const *s2) {
  // local, simple types
  if ((s1->depthResolveMode != s2->depthResolveMode) ||
      (s1->stencilResolveMode != s2->stencilResolveMode))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_depth_stencil_resolve
bool compare_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *s1,
    VkSubpassDescriptionDepthStencilResolveKHR const *s2) {
  // local, simple types
  if ((s1->depthResolveMode != s2->depthResolveMode) ||
      (s1->stencilResolveMode != s2->stencilResolveMode))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassEndInfo(VkSubpassEndInfo const *s1, VkSubpassEndInfo const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
bool compare_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *s1, VkSubpassEndInfoKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2
bool compare_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *s1, VkSubpassEndInfoKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset
bool compare_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s1,
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s2) {
  // local, simple types
  if ((s1->fragmentDensityOffsetCount != s2->fragmentDensityOffsetCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset
bool compare_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s1,
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s2) {
  // local, simple types
  if ((s1->fragmentDensityOffsetCount != s2->fragmentDensityOffsetCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkSubpassResolvePerformanceQueryEXT(VkSubpassResolvePerformanceQueryEXT const *s1,
                                                 VkSubpassResolvePerformanceQueryEXT const *s2) {
  // local, simple types
  if ((s1->optimal != s2->optimal))
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkSubpassSampleLocationsEXT(VkSubpassSampleLocationsEXT const *s1,
                                         VkSubpassSampleLocationsEXT const *s2) {
  // local, simple types
  if ((s1->subpassIndex != s2->subpassIndex))
    return false;

  // local, Vulkan struct types
  if (!compare_VkSampleLocationsInfoEXT(&s1->sampleLocationsInfo, &s2->sampleLocationsInfo))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkSubpassShadingPipelineCreateInfoHUAWEI(
    VkSubpassShadingPipelineCreateInfoHUAWEI const *s1,
    VkSubpassShadingPipelineCreateInfoHUAWEI const *s2) {
  // local, simple types
  if ((s1->renderPass != s2->renderPass) || (s1->subpass != s2->subpass))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkSubresourceHostMemcpySize(VkSubresourceHostMemcpySize const *s1,
                                         VkSubresourceHostMemcpySize const *s2) {
  // local, simple types
  if ((s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy
bool compare_VkSubresourceHostMemcpySizeEXT(VkSubresourceHostMemcpySizeEXT const *s1,
                                            VkSubresourceHostMemcpySizeEXT const *s2) {
  // local, simple types
  if ((s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy
bool compare_VkSubresourceHostMemcpySizeEXT(VkSubresourceHostMemcpySizeEXT const *s1,
                                            VkSubresourceHostMemcpySizeEXT const *s2) {
  // local, simple types
  if ((s1->size != s2->size))
    return false;

  return true;
}
#endif

bool compare_VkSubresourceLayout(VkSubresourceLayout const *s1, VkSubresourceLayout const *s2) {
  // local, simple types
  if ((s1->offset != s2->offset) || (s1->size != s2->size) || (s1->rowPitch != s2->rowPitch) ||
      (s1->arrayPitch != s2->arrayPitch) || (s1->depthPitch != s2->depthPitch))
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkSubresourceLayout2(VkSubresourceLayout2 const *s1, VkSubresourceLayout2 const *s2) {
  // local, Vulkan struct types
  if (!compare_VkSubresourceLayout(&s1->subresourceLayout, &s2->subresourceLayout))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 259 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control) ||                                                          \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 257 && VK_EXT_image_compression_control)
bool compare_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *s1,
                                     VkSubresourceLayout2EXT const *s2) {
  // local, Vulkan struct types
  if (!compare_VkSubresourceLayout(&s1->subresourceLayout, &s2->subresourceLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy &&              \
    VK_EXT_image_compression_control
bool compare_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *s1,
                                     VkSubresourceLayout2EXT const *s2) {
  // local, Vulkan struct types
  if (!compare_VkSubresourceLayout(&s1->subresourceLayout, &s2->subresourceLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy && VK_EXT_image_compression_control
bool compare_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *s1,
                                     VkSubresourceLayout2EXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5
bool compare_VkSubresourceLayout2KHR(VkSubresourceLayout2KHR const *s1,
                                     VkSubresourceLayout2KHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5
bool compare_VkSubresourceLayout2KHR(VkSubresourceLayout2KHR const *s1,
                                     VkSubresourceLayout2KHR const *s2) {
  return true;
}
#endif

#if VK_EXT_display_surface_counter
bool compare_VkSurfaceCapabilities2EXT(VkSurfaceCapabilities2EXT const *s1,
                                       VkSurfaceCapabilities2EXT const *s2) {
  // local, simple types
  if ((s1->minImageCount != s2->minImageCount) || (s1->maxImageCount != s2->maxImageCount) ||
      (s1->maxImageArrayLayers != s2->maxImageArrayLayers) ||
      (s1->supportedTransforms != s2->supportedTransforms) ||
      (s1->currentTransform != s2->currentTransform) ||
      (s1->supportedCompositeAlpha != s2->supportedCompositeAlpha) ||
      (s1->supportedUsageFlags != s2->supportedUsageFlags) ||
      (s1->supportedSurfaceCounters != s2->supportedSurfaceCounters))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->currentExtent, &s2->currentExtent) ||
      !compare_VkExtent2D(&s1->minImageExtent, &s2->minImageExtent) ||
      !compare_VkExtent2D(&s1->maxImageExtent, &s2->maxImageExtent))
    return false;

  return true;
}
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkSurfaceCapabilities2KHR(VkSurfaceCapabilities2KHR const *s1,
                                       VkSurfaceCapabilities2KHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkSurfaceCapabilitiesKHR(&s1->surfaceCapabilities, &s2->surfaceCapabilities))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
bool compare_VkSurfaceCapabilitiesFullScreenExclusiveEXT(
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *s1,
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *s2) {
  // local, simple types
  if ((s1->fullScreenExclusiveSupported != s2->fullScreenExclusiveSupported))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_KHR_surface
bool compare_VkSurfaceCapabilitiesKHR(VkSurfaceCapabilitiesKHR const *s1,
                                      VkSurfaceCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->minImageCount != s2->minImageCount) || (s1->maxImageCount != s2->maxImageCount) ||
      (s1->maxImageArrayLayers != s2->maxImageArrayLayers) ||
      (s1->supportedTransforms != s2->supportedTransforms) ||
      (s1->currentTransform != s2->currentTransform) ||
      (s1->supportedCompositeAlpha != s2->supportedCompositeAlpha) ||
      (s1->supportedUsageFlags != s2->supportedUsageFlags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->currentExtent, &s2->currentExtent) ||
      !compare_VkExtent2D(&s1->minImageExtent, &s2->minImageExtent) ||
      !compare_VkExtent2D(&s1->maxImageExtent, &s2->maxImageExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkSurfaceCapabilitiesPresentBarrierNV(
    VkSurfaceCapabilitiesPresentBarrierNV const *s1,
    VkSurfaceCapabilitiesPresentBarrierNV const *s2) {
  // local, simple types
  if ((s1->presentBarrierSupported != s2->presentBarrierSupported))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_id2
bool compare_VkSurfaceCapabilitiesPresentId2KHR(VkSurfaceCapabilitiesPresentId2KHR const *s1,
                                                VkSurfaceCapabilitiesPresentId2KHR const *s2) {
  // local, simple types
  if ((s1->presentId2Supported != s2->presentId2Supported))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2
bool compare_VkSurfaceCapabilitiesPresentWait2KHR(VkSurfaceCapabilitiesPresentWait2KHR const *s1,
                                                  VkSurfaceCapabilitiesPresentWait2KHR const *s2) {
  // local, simple types
  if ((s1->presentWait2Supported != s2->presentWait2Supported))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 318 && VK_OHOS_surface
bool compare_VkSurfaceCreateInfoOHOS(VkSurfaceCreateInfoOHOS const *s1,
                                     VkSurfaceCreateInfoOHOS const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // non-local members
  if (s1->window != s2->window)
    return false;

  return true;
}
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkSurfaceFormat2KHR(VkSurfaceFormat2KHR const *s1, VkSurfaceFormat2KHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkSurfaceFormatKHR(&s1->surfaceFormat, &s2->surfaceFormat))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_KHR_surface
bool compare_VkSurfaceFormatKHR(VkSurfaceFormatKHR const *s1, VkSurfaceFormatKHR const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->colorSpace != s2->colorSpace))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
bool compare_VkSurfaceFullScreenExclusiveInfoEXT(VkSurfaceFullScreenExclusiveInfoEXT const *s1,
                                                 VkSurfaceFullScreenExclusiveInfoEXT const *s2) {
  // local, simple types
  if ((s1->fullScreenExclusive != s2->fullScreenExclusive))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_full_screen_exclusive && VK_KHR_win32_surface) ||          \
    (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 240 && VK_EXT_full_screen_exclusive)
bool compare_VkSurfaceFullScreenExclusiveWin32InfoEXT(
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *s1,
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *s2) {
  // local, simple types
  if ((s1->hmonitor != s2->hmonitor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentModeCompatibilityEXT(VkSurfacePresentModeCompatibilityEXT const *s1,
                                                  VkSurfacePresentModeCompatibilityEXT const *s2) {
  // local, simple types
  if ((s1->presentModeCount != s2->presentModeCount))
    return false;

  // non-local members

  // pPresentModes - presentModeCount
  if (s1->pPresentModes != s2->pPresentModes &&
      (s1->pPresentModes == NULL || s2->pPresentModes == NULL ||
       memcmp(s1->pPresentModes, s2->pPresentModes,
              (s1->presentModeCount) * sizeof(VkPresentModeKHR)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentModeEXT(VkSurfacePresentModeEXT const *s1,
                                     VkSurfacePresentModeEXT const *s2) {
  // local, simple types
  if ((s1->presentMode != s2->presentMode))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentScalingCapabilitiesEXT(
    VkSurfacePresentScalingCapabilitiesEXT const *s1,
    VkSurfacePresentScalingCapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->supportedPresentScaling != s2->supportedPresentScaling) ||
      (s1->supportedPresentGravityX != s2->supportedPresentGravityX) ||
      (s1->supportedPresentGravityY != s2->supportedPresentGravityY))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->minScaledImageExtent, &s2->minScaledImageExtent) ||
      !compare_VkExtent2D(&s1->maxScaledImageExtent, &s2->maxScaledImageExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_KHR_surface_protected_capabilities
bool compare_VkSurfaceProtectedCapabilitiesKHR(VkSurfaceProtectedCapabilitiesKHR const *s1,
                                               VkSurfaceProtectedCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->supportsProtected != s2->supportsProtected))
    return false;

  return true;
}
#endif

#if VK_EXT_display_control
bool compare_VkSwapchainCounterCreateInfoEXT(VkSwapchainCounterCreateInfoEXT const *s1,
                                             VkSwapchainCounterCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->surfaceCounters != s2->surfaceCounters))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 240 && VK_KHR_swapchain
bool compare_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *s1,
                                      VkSwapchainCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->surface != s2->surface) ||
      (s1->minImageCount != s2->minImageCount) || (s1->imageFormat != s2->imageFormat) ||
      (s1->imageColorSpace != s2->imageColorSpace) ||
      (s1->imageArrayLayers != s2->imageArrayLayers) || (s1->imageUsage != s2->imageUsage) ||
      (s1->imageSharingMode != s2->imageSharingMode) ||
      (s1->queueFamilyIndexCount != s2->queueFamilyIndexCount) ||
      (s1->preTransform != s2->preTransform) || (s1->compositeAlpha != s2->compositeAlpha) ||
      (s1->presentMode != s2->presentMode) || (s1->clipped != s2->clipped) ||
      (s1->oldSwapchain != s2->oldSwapchain))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->imageExtent, &s2->imageExtent))
    return false;

  // non-local members

  // pQueueFamilyIndices - queueFamilyIndexCount
  if (s1->pQueueFamilyIndices != s2->pQueueFamilyIndices &&
      (s1->pQueueFamilyIndices == NULL || s2->pQueueFamilyIndices == NULL ||
       memcmp(s1->pQueueFamilyIndices, s2->pQueueFamilyIndices,
              (s1->queueFamilyIndexCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 241 && VK_KHR_swapchain
bool compare_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *s1,
                                      VkSwapchainCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->surface != s2->surface) ||
      (s1->minImageCount != s2->minImageCount) || (s1->imageFormat != s2->imageFormat) ||
      (s1->imageColorSpace != s2->imageColorSpace) ||
      (s1->imageArrayLayers != s2->imageArrayLayers) || (s1->imageUsage != s2->imageUsage) ||
      (s1->imageSharingMode != s2->imageSharingMode) ||
      (s1->queueFamilyIndexCount != s2->queueFamilyIndexCount) ||
      (s1->preTransform != s2->preTransform) || (s1->compositeAlpha != s2->compositeAlpha) ||
      (s1->presentMode != s2->presentMode) || (s1->clipped != s2->clipped) ||
      (s1->oldSwapchain != s2->oldSwapchain))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->imageExtent, &s2->imageExtent))
    return false;

  // non-local members

  // pQueueFamilyIndices - queueFamilyIndexCount
  if (s1->pQueueFamilyIndices != s2->pQueueFamilyIndices &&
      (s1->pQueueFamilyIndices == NULL || s2->pQueueFamilyIndices == NULL ||
       memcmp(s1->pQueueFamilyIndices, s2->pQueueFamilyIndices,
              (s1->queueFamilyIndexCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
bool compare_VkSwapchainDisplayNativeHdrCreateInfoAMD(
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *s1,
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *s2) {
  // local, simple types
  if ((s1->localDimmingEnable != s2->localDimmingEnable))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkSwapchainImageCreateInfoANDROID(VkSwapchainImageCreateInfoANDROID const *s1,
                                               VkSwapchainImageCreateInfoANDROID const *s2) {
  // local, simple types
  if ((s1->usage != s2->usage))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 266 && VK_NV_low_latency2
bool compare_VkSwapchainLatencyCreateInfoNV(VkSwapchainLatencyCreateInfoNV const *s1,
                                            VkSwapchainLatencyCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->latencyModeEnable != s2->latencyModeEnable))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkSwapchainPresentBarrierCreateInfoNV(
    VkSwapchainPresentBarrierCreateInfoNV const *s1,
    VkSwapchainPresentBarrierCreateInfoNV const *s2) {
  // local, simple types
  if ((s1->presentBarrierEnable != s2->presentBarrierEnable))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentFenceInfoEXT(VkSwapchainPresentFenceInfoEXT const *s1,
                                            VkSwapchainPresentFenceInfoEXT const *s2) {
  // local, simple types
  if ((s1->swapchainCount != s2->swapchainCount))
    return false;

  // non-local members

  // pFences - swapchainCount
  if (s1->pFences != s2->pFences &&
      (s1->pFences == NULL || s2->pFences == NULL ||
       memcmp(s1->pFences, s2->pFences, (s1->swapchainCount) * sizeof(VkFence)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentModeInfoEXT(VkSwapchainPresentModeInfoEXT const *s1,
                                           VkSwapchainPresentModeInfoEXT const *s2) {
  // local, simple types
  if ((s1->swapchainCount != s2->swapchainCount))
    return false;

  // non-local members

  // pPresentModes - swapchainCount
  if (s1->pPresentModes != s2->pPresentModes &&
      (s1->pPresentModes == NULL || s2->pPresentModes == NULL ||
       memcmp(s1->pPresentModes, s2->pPresentModes,
              (s1->swapchainCount) * sizeof(VkPresentModeKHR)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentModesCreateInfoEXT(VkSwapchainPresentModesCreateInfoEXT const *s1,
                                                  VkSwapchainPresentModesCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->presentModeCount != s2->presentModeCount))
    return false;

  // non-local members

  // pPresentModes - presentModeCount
  if (s1->pPresentModes != s2->pPresentModes &&
      (s1->pPresentModes == NULL || s2->pPresentModes == NULL ||
       memcmp(s1->pPresentModes, s2->pPresentModes,
              (s1->presentModeCount) * sizeof(VkPresentModeKHR)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentScalingCreateInfoEXT(
    VkSwapchainPresentScalingCreateInfoEXT const *s1,
    VkSwapchainPresentScalingCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->scalingBehavior != s2->scalingBehavior) ||
      (s1->presentGravityX != s2->presentGravityX) || (s1->presentGravityY != s2->presentGravityY))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkSysmemColorSpaceFUCHSIA(VkSysmemColorSpaceFUCHSIA const *s1,
                                       VkSysmemColorSpaceFUCHSIA const *s2) {
  // local, simple types
  if ((s1->colorSpace != s2->colorSpace))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer
bool compare_VkTensorCaptureDescriptorDataInfoARM(VkTensorCaptureDescriptorDataInfoARM const *s1,
                                                  VkTensorCaptureDescriptorDataInfoARM const *s2) {
  // local, simple types
  if ((s1->tensor != s2->tensor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorCopyARM(VkTensorCopyARM const *s1, VkTensorCopyARM const *s2) {
  // local, simple types
  if ((s1->dimensionCount != s2->dimensionCount))
    return false;

  // non-local members

  // pSrcOffset - dimensionCount
  if (s1->pSrcOffset != s2->pSrcOffset &&
      (s1->pSrcOffset == NULL || s2->pSrcOffset == NULL ||
       memcmp(s1->pSrcOffset, s2->pSrcOffset, (s1->dimensionCount) * sizeof(uint64_t)) != 0))
    return false;

  // pDstOffset - dimensionCount
  if (s1->pDstOffset != s2->pDstOffset &&
      (s1->pDstOffset == NULL || s2->pDstOffset == NULL ||
       memcmp(s1->pDstOffset, s2->pDstOffset, (s1->dimensionCount) * sizeof(uint64_t)) != 0))
    return false;

  // pExtent - dimensionCount
  if (s1->pExtent != s2->pExtent &&
      (s1->pExtent == NULL || s2->pExtent == NULL ||
       memcmp(s1->pExtent, s2->pExtent, (s1->dimensionCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorCreateInfoARM(VkTensorCreateInfoARM const *s1,
                                   VkTensorCreateInfoARM const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->sharingMode != s2->sharingMode) ||
      (s1->queueFamilyIndexCount != s2->queueFamilyIndexCount))
    return false;

  // non-local members

  // pQueueFamilyIndices - queueFamilyIndexCount
  if (s1->pQueueFamilyIndices != s2->pQueueFamilyIndices &&
      (s1->pQueueFamilyIndices == NULL || s2->pQueueFamilyIndices == NULL ||
       memcmp(s1->pQueueFamilyIndices, s2->pQueueFamilyIndices,
              (s1->queueFamilyIndexCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorDependencyInfoARM(VkTensorDependencyInfoARM const *s1,
                                       VkTensorDependencyInfoARM const *s2) {
  // local, simple types
  if ((s1->tensorMemoryBarrierCount != s2->tensorMemoryBarrierCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorDescriptionARM(VkTensorDescriptionARM const *s1,
                                    VkTensorDescriptionARM const *s2) {
  // local, simple types
  if ((s1->tiling != s2->tiling) || (s1->format != s2->format) ||
      (s1->dimensionCount != s2->dimensionCount) || (s1->usage != s2->usage))
    return false;

  // non-local members

  // pDimensions - dimensionCount
  if (s1->pDimensions != s2->pDimensions &&
      (s1->pDimensions == NULL || s2->pDimensions == NULL ||
       memcmp(s1->pDimensions, s2->pDimensions, (s1->dimensionCount) * sizeof(int64_t)) != 0))
    return false;

  // pStrides - dimensionCount
  if (s1->pStrides != s2->pStrides &&
      (s1->pStrides == NULL || s2->pStrides == NULL ||
       memcmp(s1->pStrides, s2->pStrides, (s1->dimensionCount) * sizeof(int64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorFormatPropertiesARM(VkTensorFormatPropertiesARM const *s1,
                                         VkTensorFormatPropertiesARM const *s2) {
  // local, simple types
  if ((s1->optimalTilingTensorFeatures != s2->optimalTilingTensorFeatures) ||
      (s1->linearTilingTensorFeatures != s2->linearTilingTensorFeatures))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorMemoryBarrierARM(VkTensorMemoryBarrierARM const *s1,
                                      VkTensorMemoryBarrierARM const *s2) {
  // local, simple types
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->tensor != s2->tensor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorMemoryRequirementsInfoARM(VkTensorMemoryRequirementsInfoARM const *s1,
                                               VkTensorMemoryRequirementsInfoARM const *s2) {
  // local, simple types
  if ((s1->tensor != s2->tensor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer
bool compare_VkTensorViewCaptureDescriptorDataInfoARM(
    VkTensorViewCaptureDescriptorDataInfoARM const *s1,
    VkTensorViewCaptureDescriptorDataInfoARM const *s2) {
  // local, simple types
  if ((s1->tensorView != s2->tensorView))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkTensorViewCreateInfoARM(VkTensorViewCreateInfoARM const *s1,
                                       VkTensorViewCreateInfoARM const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->tensor != s2->tensor) || (s1->format != s2->format))
    return false;

  return true;
}
#endif

#if VK_AMD_texture_gather_bias_lod
bool compare_VkTextureLODGatherFormatPropertiesAMD(
    VkTextureLODGatherFormatPropertiesAMD const *s1,
    VkTextureLODGatherFormatPropertiesAMD const *s2) {
  // local, simple types
  if ((s1->supportsTextureGatherLODBiasAMD != s2->supportsTextureGatherLODBiasAMD))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap
bool compare_VkTileMemoryBindInfoQCOM(VkTileMemoryBindInfoQCOM const *s1,
                                      VkTileMemoryBindInfoQCOM const *s2) {
  // local, simple types
  if ((s1->memory != s2->memory))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap
bool compare_VkTileMemoryRequirementsQCOM(VkTileMemoryRequirementsQCOM const *s1,
                                          VkTileMemoryRequirementsQCOM const *s2) {
  // local, simple types
  if ((s1->size != s2->size) || (s1->alignment != s2->alignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap && VK_QCOM_tile_properties
bool compare_VkTileMemorySizeInfoQCOM(VkTileMemorySizeInfoQCOM const *s1,
                                      VkTileMemorySizeInfoQCOM const *s2) {
  // local, simple types
  if ((s1->size != s2->size))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties
bool compare_VkTilePropertiesQCOM(VkTilePropertiesQCOM const *s1, VkTilePropertiesQCOM const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExtent3D(&s1->tileSize, &s2->tileSize) ||
      !compare_VkExtent2D(&s1->apronSize, &s2->apronSize) ||
      !compare_VkOffset2D(&s1->origin, &s2->origin))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkTimelineSemaphoreSubmitInfo(VkTimelineSemaphoreSubmitInfo const *s1,
                                           VkTimelineSemaphoreSubmitInfo const *s2) {
  // local, simple types
  if ((s1->waitSemaphoreValueCount != s2->waitSemaphoreValueCount) ||
      (s1->signalSemaphoreValueCount != s2->signalSemaphoreValueCount))
    return false;

  // non-local members

  // pWaitSemaphoreValues - waitSemaphoreValueCount
  if (s1->pWaitSemaphoreValues != s2->pWaitSemaphoreValues &&
      (s1->pWaitSemaphoreValues == NULL || s2->pWaitSemaphoreValues == NULL ||
       memcmp(s1->pWaitSemaphoreValues, s2->pWaitSemaphoreValues,
              (s1->waitSemaphoreValueCount) * sizeof(uint64_t)) != 0))
    return false;

  // pSignalSemaphoreValues - signalSemaphoreValueCount
  if (s1->pSignalSemaphoreValues != s2->pSignalSemaphoreValues &&
      (s1->pSignalSemaphoreValues == NULL || s2->pSignalSemaphoreValues == NULL ||
       memcmp(s1->pSignalSemaphoreValues, s2->pSignalSemaphoreValues,
              (s1->signalSemaphoreValueCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore
bool compare_VkTimelineSemaphoreSubmitInfoKHR(VkTimelineSemaphoreSubmitInfoKHR const *s1,
                                              VkTimelineSemaphoreSubmitInfoKHR const *s2) {
  // local, simple types
  if ((s1->waitSemaphoreValueCount != s2->waitSemaphoreValueCount) ||
      (s1->signalSemaphoreValueCount != s2->signalSemaphoreValueCount))
    return false;

  // non-local members

  // pWaitSemaphoreValues - waitSemaphoreValueCount
  if (s1->pWaitSemaphoreValues != s2->pWaitSemaphoreValues &&
      (s1->pWaitSemaphoreValues == NULL || s2->pWaitSemaphoreValues == NULL ||
       memcmp(s1->pWaitSemaphoreValues, s2->pWaitSemaphoreValues,
              (s1->waitSemaphoreValueCount) * sizeof(uint64_t)) != 0))
    return false;

  // pSignalSemaphoreValues - signalSemaphoreValueCount
  if (s1->pSignalSemaphoreValues != s2->pSignalSemaphoreValues &&
      (s1->pSignalSemaphoreValues == NULL || s2->pSignalSemaphoreValues == NULL ||
       memcmp(s1->pSignalSemaphoreValues, s2->pSignalSemaphoreValues,
              (s1->signalSemaphoreValueCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore
bool compare_VkTimelineSemaphoreSubmitInfoKHR(VkTimelineSemaphoreSubmitInfoKHR const *s1,
                                              VkTimelineSemaphoreSubmitInfoKHR const *s2) {
  // local, simple types
  if ((s1->waitSemaphoreValueCount != s2->waitSemaphoreValueCount) ||
      (s1->signalSemaphoreValueCount != s2->signalSemaphoreValueCount))
    return false;

  // non-local members

  // pWaitSemaphoreValues - waitSemaphoreValueCount
  if (s1->pWaitSemaphoreValues != s2->pWaitSemaphoreValues &&
      (s1->pWaitSemaphoreValues == NULL || s2->pWaitSemaphoreValues == NULL ||
       memcmp(s1->pWaitSemaphoreValues, s2->pWaitSemaphoreValues,
              (s1->waitSemaphoreValueCount) * sizeof(uint64_t)) != 0))
    return false;

  // pSignalSemaphoreValues - signalSemaphoreValueCount
  if (s1->pSignalSemaphoreValues != s2->pSignalSemaphoreValues &&
      (s1->pSignalSemaphoreValues == NULL || s2->pSignalSemaphoreValues == NULL ||
       memcmp(s1->pSignalSemaphoreValues, s2->pSignalSemaphoreValues,
              (s1->signalSemaphoreValueCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_ray_tracing_maintenance1 &&                                \
     VK_KHR_ray_tracing_pipeline) ||                                                               \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 240 && VK_KHR_ray_tracing_maintenance1)
bool compare_VkTraceRaysIndirectCommand2KHR(VkTraceRaysIndirectCommand2KHR const *s1,
                                            VkTraceRaysIndirectCommand2KHR const *s2) {
  // local, simple types
  if ((s1->raygenShaderRecordAddress != s2->raygenShaderRecordAddress) ||
      (s1->raygenShaderRecordSize != s2->raygenShaderRecordSize) ||
      (s1->missShaderBindingTableAddress != s2->missShaderBindingTableAddress) ||
      (s1->missShaderBindingTableSize != s2->missShaderBindingTableSize) ||
      (s1->missShaderBindingTableStride != s2->missShaderBindingTableStride) ||
      (s1->hitShaderBindingTableAddress != s2->hitShaderBindingTableAddress) ||
      (s1->hitShaderBindingTableSize != s2->hitShaderBindingTableSize) ||
      (s1->hitShaderBindingTableStride != s2->hitShaderBindingTableStride) ||
      (s1->callableShaderBindingTableAddress != s2->callableShaderBindingTableAddress) ||
      (s1->callableShaderBindingTableSize != s2->callableShaderBindingTableSize) ||
      (s1->callableShaderBindingTableStride != s2->callableShaderBindingTableStride) ||
      (s1->width != s2->width) || (s1->height != s2->height) || (s1->depth != s2->depth))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline) ||                                   \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkTraceRaysIndirectCommandKHR(VkTraceRaysIndirectCommandKHR const *s1,
                                           VkTraceRaysIndirectCommandKHR const *s2) {
  // local, simple types
  if ((s1->width != s2->width) || (s1->height != s2->height) || (s1->depth != s2->depth))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkTransformMatrixKHR(VkTransformMatrixKHR const *s1, VkTransformMatrixKHR const *s2) {
  // local array members
  if (memcmp(s1->matrix, s2->matrix, 34 * sizeof(float)) != 0)
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkTransformMatrixNV(VkTransformMatrixNV const *s1, VkTransformMatrixNV const *s2) {
  return true;
}
#endif

#if VK_EXT_validation_cache
bool compare_VkValidationCacheCreateInfoEXT(VkValidationCacheCreateInfoEXT const *s1,
                                            VkValidationCacheCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->initialDataSize != s2->initialDataSize))
    return false;

  // non-local members

  // pInitialData - initialDataSize
  if (s1->pInitialData != s2->pInitialData &&
      (s1->pInitialData == NULL || s2->pInitialData == NULL ||
       memcmp(s1->pInitialData, s2->pInitialData, s1->initialDataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_validation_features
bool compare_VkValidationFeaturesEXT(VkValidationFeaturesEXT const *s1,
                                     VkValidationFeaturesEXT const *s2) {
  // local, simple types
  if ((s1->enabledValidationFeatureCount != s2->enabledValidationFeatureCount) ||
      (s1->disabledValidationFeatureCount != s2->disabledValidationFeatureCount))
    return false;

  // non-local members

  // pEnabledValidationFeatures - enabledValidationFeatureCount
  if (s1->pEnabledValidationFeatures != s2->pEnabledValidationFeatures &&
      (s1->pEnabledValidationFeatures == NULL || s2->pEnabledValidationFeatures == NULL ||
       memcmp(s1->pEnabledValidationFeatures, s2->pEnabledValidationFeatures,
              (s1->enabledValidationFeatureCount) * sizeof(VkValidationFeatureEnableEXT)) != 0))
    return false;

  // pDisabledValidationFeatures - disabledValidationFeatureCount
  if (s1->pDisabledValidationFeatures != s2->pDisabledValidationFeatures &&
      (s1->pDisabledValidationFeatures == NULL || s2->pDisabledValidationFeatures == NULL ||
       memcmp(s1->pDisabledValidationFeatures, s2->pDisabledValidationFeatures,
              (s1->disabledValidationFeatureCount) * sizeof(VkValidationFeatureDisableEXT)) != 0))
    return false;
  return true;
}
#endif

#if VK_EXT_validation_flags
bool compare_VkValidationFlagsEXT(VkValidationFlagsEXT const *s1, VkValidationFlagsEXT const *s2) {
  // local, simple types
  if ((s1->disabledValidationCheckCount != s2->disabledValidationCheckCount))
    return false;

  // non-local members

  // pDisabledValidationChecks - disabledValidationCheckCount
  if (s1->pDisabledValidationChecks != s2->pDisabledValidationChecks &&
      (s1->pDisabledValidationChecks == NULL || s2->pDisabledValidationChecks == NULL ||
       memcmp(s1->pDisabledValidationChecks, s2->pDisabledValidationChecks,
              (s1->disabledValidationCheckCount) * sizeof(VkValidationCheckEXT)) != 0))
    return false;
  return true;
}
#endif

bool compare_VkVertexInputAttributeDescription(VkVertexInputAttributeDescription const *s1,
                                               VkVertexInputAttributeDescription const *s2) {
  // local, simple types
  if ((s1->location != s2->location) || (s1->binding != s2->binding) ||
      (s1->format != s2->format) || (s1->offset != s2->offset))
    return false;

  return true;
}

#if (VK_HEADER_VERSION >= 246 && VK_EXT_vertex_input_dynamic_state && VK_EXT_shader_object) ||     \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 245 && VK_EXT_vertex_input_dynamic_state)
bool compare_VkVertexInputAttributeDescription2EXT(
    VkVertexInputAttributeDescription2EXT const *s1,
    VkVertexInputAttributeDescription2EXT const *s2) {
  // local, simple types
  if ((s1->location != s2->location) || (s1->binding != s2->binding) ||
      (s1->format != s2->format) || (s1->offset != s2->offset))
    return false;

  return true;
}
#endif

bool compare_VkVertexInputBindingDescription(VkVertexInputBindingDescription const *s1,
                                             VkVertexInputBindingDescription const *s2) {
  // local, simple types
  if ((s1->binding != s2->binding) || (s1->stride != s2->stride) ||
      (s1->inputRate != s2->inputRate))
    return false;

  return true;
}

#if (VK_HEADER_VERSION >= 246 && VK_EXT_vertex_input_dynamic_state && VK_EXT_shader_object) ||     \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 245 && VK_EXT_vertex_input_dynamic_state)
bool compare_VkVertexInputBindingDescription2EXT(VkVertexInputBindingDescription2EXT const *s1,
                                                 VkVertexInputBindingDescription2EXT const *s2) {
  // local, simple types
  if ((s1->binding != s2->binding) || (s1->stride != s2->stride) ||
      (s1->inputRate != s2->inputRate) || (s1->divisor != s2->divisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_VERSION_1_4
bool compare_VkVertexInputBindingDivisorDescription(
    VkVertexInputBindingDivisorDescription const *s1,
    VkVertexInputBindingDivisorDescription const *s2) {
  // local, simple types
  if ((s1->binding != s2->binding) || (s1->divisor != s2->divisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *s1,
    VkVertexInputBindingDivisorDescriptionEXT const *s2) {
  // local, simple types
  if ((s1->binding != s2->binding) || (s1->divisor != s2->divisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *s1,
    VkVertexInputBindingDivisorDescriptionEXT const *s2) {
  // local, simple types
  if ((s1->binding != s2->binding) || (s1->divisor != s2->divisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *s1,
    VkVertexInputBindingDivisorDescriptionEXT const *s2) {
  // local, simple types
  if ((s1->binding != s2->binding) || (s1->divisor != s2->divisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionKHR(
    VkVertexInputBindingDivisorDescriptionKHR const *s1,
    VkVertexInputBindingDivisorDescriptionKHR const *s2) {
  // local, simple types
  if ((s1->binding != s2->binding) || (s1->divisor != s2->divisor))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionKHR(
    VkVertexInputBindingDivisorDescriptionKHR const *s1,
    VkVertexInputBindingDivisorDescriptionKHR const *s2) {
  // local, simple types
  if ((s1->binding != s2->binding) || (s1->divisor != s2->divisor))
    return false;

  return true;
}
#endif

#if VK_NN_vi_surface
bool compare_VkViSurfaceCreateInfoNN(VkViSurfaceCreateInfoNN const *s1,
                                     VkViSurfaceCreateInfoNN const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // non-local members
  if (s1->window != s2->window)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *s1,
                                       VkVideoBeginCodingInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->codecQualityPreset != s2->codecQualityPreset) ||
      (s1->videoSession != s2->videoSession) ||
      (s1->videoSessionParameters != s2->videoSessionParameters) ||
      (s1->referenceSlotCount != s2->referenceSlotCount))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *s1,
                                       VkVideoBeginCodingInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->videoSession != s2->videoSession) ||
      (s1->videoSessionParameters != s2->videoSessionParameters) ||
      (s1->referenceSlotCount != s2->referenceSlotCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoBindMemoryKHR(VkVideoBindMemoryKHR const *s1, VkVideoBindMemoryKHR const *s2) {
  // local, simple types
  if ((s1->memoryBindIndex != s2->memoryBindIndex) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->memorySize != s2->memorySize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *s1,
                                    VkVideoCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->capabilityFlags != s2->capabilityFlags) ||
      (s1->minBitstreamBufferOffsetAlignment != s2->minBitstreamBufferOffsetAlignment) ||
      (s1->minBitstreamBufferSizeAlignment != s2->minBitstreamBufferSizeAlignment) ||
      (s1->maxReferencePicturesSlotsCount != s2->maxReferencePicturesSlotsCount) ||
      (s1->maxReferencePicturesActiveCount != s2->maxReferencePicturesActiveCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->videoPictureExtentGranularity, &s2->videoPictureExtentGranularity) ||
      !compare_VkExtent2D(&s1->minExtent, &s2->minExtent) ||
      !compare_VkExtent2D(&s1->maxExtent, &s2->maxExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 208 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *s1,
                                    VkVideoCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->capabilityFlags != s2->capabilityFlags) ||
      (s1->minBitstreamBufferOffsetAlignment != s2->minBitstreamBufferOffsetAlignment) ||
      (s1->minBitstreamBufferSizeAlignment != s2->minBitstreamBufferSizeAlignment) ||
      (s1->maxReferencePicturesSlotsCount != s2->maxReferencePicturesSlotsCount) ||
      (s1->maxReferencePicturesActiveCount != s2->maxReferencePicturesActiveCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->videoPictureExtentGranularity, &s2->videoPictureExtentGranularity) ||
      !compare_VkExtent2D(&s1->minExtent, &s2->minExtent) ||
      !compare_VkExtent2D(&s1->maxExtent, &s2->maxExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *s1,
                                    VkVideoCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->capabilityFlags != s2->capabilityFlags) ||
      (s1->minBitstreamBufferOffsetAlignment != s2->minBitstreamBufferOffsetAlignment) ||
      (s1->minBitstreamBufferSizeAlignment != s2->minBitstreamBufferSizeAlignment) ||
      (s1->maxReferencePicturesSlotsCount != s2->maxReferencePicturesSlotsCount) ||
      (s1->maxReferencePicturesActiveCount != s2->maxReferencePicturesActiveCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->videoPictureExtentGranularity, &s2->videoPictureExtentGranularity) ||
      !compare_VkExtent2D(&s1->minExtent, &s2->minExtent) ||
      !compare_VkExtent2D(&s1->maxExtent, &s2->maxExtent) ||
      !compare_VkExtensionProperties(&s1->stdHeaderVersion, &s2->stdHeaderVersion))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *s1,
                                    VkVideoCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) ||
      (s1->minBitstreamBufferOffsetAlignment != s2->minBitstreamBufferOffsetAlignment) ||
      (s1->minBitstreamBufferSizeAlignment != s2->minBitstreamBufferSizeAlignment) ||
      (s1->maxDpbSlots != s2->maxDpbSlots) ||
      (s1->maxActiveReferencePictures != s2->maxActiveReferencePictures))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->pictureAccessGranularity, &s2->pictureAccessGranularity) ||
      !compare_VkExtent2D(&s1->minCodedExtent, &s2->minCodedExtent) ||
      !compare_VkExtent2D(&s1->maxCodedExtent, &s2->maxCodedExtent) ||
      !compare_VkExtensionProperties(&s1->stdHeaderVersion, &s2->stdHeaderVersion))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoCodingControlInfoKHR(VkVideoCodingControlInfoKHR const *s1,
                                         VkVideoCodingControlInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1CapabilitiesKHR(VkVideoDecodeAV1CapabilitiesKHR const *s1,
                                             VkVideoDecodeAV1CapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->maxLevel != s2->maxLevel))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1DpbSlotInfoKHR(VkVideoDecodeAV1DpbSlotInfoKHR const *s1,
                                            VkVideoDecodeAV1DpbSlotInfoKHR const *s2) {
  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1InlineSessionParametersInfoKHR(
    VkVideoDecodeAV1InlineSessionParametersInfoKHR const *s1,
    VkVideoDecodeAV1InlineSessionParametersInfoKHR const *s2) {
  // non-local members
  if (s1->pStdSequenceHeader != s2->pStdSequenceHeader)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1PictureInfoKHR(VkVideoDecodeAV1PictureInfoKHR const *s1,
                                            VkVideoDecodeAV1PictureInfoKHR const *s2) {
  // local, simple types
  if ((s1->frameHeaderOffset != s2->frameHeaderOffset) || (s1->tileCount != s2->tileCount))
    return false;

  // local array members
  if (memcmp(s1->referenceNameSlotIndices, s2->referenceNameSlotIndices,
             VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR * sizeof(int32_t)) != 0)
    return false;
  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  // pTileOffsets - tileCount
  if (s1->pTileOffsets != s2->pTileOffsets &&
      (s1->pTileOffsets == NULL || s2->pTileOffsets == NULL ||
       memcmp(s1->pTileOffsets, s2->pTileOffsets, (s1->tileCount) * sizeof(uint32_t)) != 0))
    return false;

  // pTileSizes - tileCount
  if (s1->pTileSizes != s2->pTileSizes &&
      (s1->pTileSizes == NULL || s2->pTileSizes == NULL ||
       memcmp(s1->pTileSizes, s2->pTileSizes, (s1->tileCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1ProfileInfoKHR(VkVideoDecodeAV1ProfileInfoKHR const *s1,
                                            VkVideoDecodeAV1ProfileInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdProfile != s2->stdProfile) || (s1->filmGrainSupport != s2->filmGrainSupport))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1
bool compare_VkVideoDecodeAV1SessionParametersCreateInfoKHR(
    VkVideoDecodeAV1SessionParametersCreateInfoKHR const *s1,
    VkVideoDecodeAV1SessionParametersCreateInfoKHR const *s2) {
  // non-local members
  if (s1->pStdSequenceHeader != s2->pStdSequenceHeader)
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 207 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoDecodeCapabilitiesKHR(VkVideoDecodeCapabilitiesKHR const *s1,
                                          VkVideoDecodeCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *s1,
                                              VkVideoDecodeH264CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->maxLevel != s2->maxLevel))
    return false;

  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->fieldOffsetGranularity, &s2->fieldOffsetGranularity) ||
      !compare_VkExtensionProperties(&s1->stdExtensionVersion, &s2->stdExtensionVersion))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 210 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *s1,
                                              VkVideoDecodeH264CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->maxLevel != s2->maxLevel))
    return false;

  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->fieldOffsetGranularity, &s2->fieldOffsetGranularity))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *s1,
                                              VkVideoDecodeH264CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->maxLevel != s2->maxLevel))
    return false;

  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->fieldOffsetGranularity, &s2->fieldOffsetGranularity))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *s1,
                                              VkVideoDecodeH264CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->maxLevelIdc != s2->maxLevelIdc))
    return false;

  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->fieldOffsetGranularity, &s2->fieldOffsetGranularity))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264CapabilitiesKHR(VkVideoDecodeH264CapabilitiesKHR const *s1,
                                              VkVideoDecodeH264CapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->maxLevelIdc != s2->maxLevelIdc))
    return false;

  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->fieldOffsetGranularity, &s2->fieldOffsetGranularity))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264DpbSlotInfoEXT(VkVideoDecodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoDecodeH264DpbSlotInfoEXT const *s2) {
  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264DpbSlotInfoKHR(VkVideoDecodeH264DpbSlotInfoKHR const *s1,
                                             VkVideoDecodeH264DpbSlotInfoKHR const *s2) {
  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264InlineSessionParametersInfoKHR(
    VkVideoDecodeH264InlineSessionParametersInfoKHR const *s1,
    VkVideoDecodeH264InlineSessionParametersInfoKHR const *s2) {
  // non-local members
  if (s1->pStdSPS != s2->pStdSPS)
    return false;

  if (s1->pStdPPS != s2->pStdPPS)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264MvcEXT(VkVideoDecodeH264MvcEXT const *s1,
                                     VkVideoDecodeH264MvcEXT const *s2) {
  // non-local members
  if (s1->pStdMvc != s2->pStdMvc)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264MvcInfoEXT(VkVideoDecodeH264MvcInfoEXT const *s1,
                                         VkVideoDecodeH264MvcInfoEXT const *s2) {
  // non-local members
  if (s1->pStdMvc != s2->pStdMvc)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *s1,
                                             VkVideoDecodeH264PictureInfoEXT const *s2) {
  // local, simple types
  if ((s1->slicesCount != s2->slicesCount))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  // pSlicesDataOffsets - slicesCount
  if (s1->pSlicesDataOffsets != s2->pSlicesDataOffsets &&
      (s1->pSlicesDataOffsets == NULL || s2->pSlicesDataOffsets == NULL ||
       memcmp(s1->pSlicesDataOffsets, s2->pSlicesDataOffsets,
              (s1->slicesCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *s1,
                                             VkVideoDecodeH264PictureInfoEXT const *s2) {
  // local, simple types
  if ((s1->sliceCount != s2->sliceCount))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  // pSliceOffsets - sliceCount
  if (s1->pSliceOffsets != s2->pSliceOffsets &&
      (s1->pSliceOffsets == NULL || s2->pSliceOffsets == NULL ||
       memcmp(s1->pSliceOffsets, s2->pSliceOffsets, (s1->sliceCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264PictureInfoKHR(VkVideoDecodeH264PictureInfoKHR const *s1,
                                             VkVideoDecodeH264PictureInfoKHR const *s2) {
  // local, simple types
  if ((s1->sliceCount != s2->sliceCount))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  // pSliceOffsets - sliceCount
  if (s1->pSliceOffsets != s2->pSliceOffsets &&
      (s1->pSliceOffsets == NULL || s2->pSliceOffsets == NULL ||
       memcmp(s1->pSliceOffsets, s2->pSliceOffsets, (s1->sliceCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *s1,
                                         VkVideoDecodeH264ProfileEXT const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || (s1->fieldLayout != s2->fieldLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *s1,
                                         VkVideoDecodeH264ProfileEXT const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || (s1->pictureLayout != s2->pictureLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264ProfileInfoEXT(VkVideoDecodeH264ProfileInfoEXT const *s1,
                                             VkVideoDecodeH264ProfileInfoEXT const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || (s1->pictureLayout != s2->pictureLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264ProfileInfoEXT(VkVideoDecodeH264ProfileInfoEXT const *s1,
                                             VkVideoDecodeH264ProfileInfoEXT const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || (s1->pictureLayout != s2->pictureLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264ProfileInfoKHR(VkVideoDecodeH264ProfileInfoKHR const *s1,
                                             VkVideoDecodeH264ProfileInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || (s1->pictureLayout != s2->pictureLayout))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264SessionCreateInfoEXT(
    VkVideoDecodeH264SessionCreateInfoEXT const *s1,
    VkVideoDecodeH264SessionCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s2) {
  // local, simple types
  if ((s1->spsStdCount != s2->spsStdCount) || (s1->ppsStdCount != s2->ppsStdCount))
    return false;

  // non-local members

  // pSpsStd - spsStdCount
  if (s1->pSpsStd != s2->pSpsStd &&
      (s1->pSpsStd == NULL || s2->pSpsStd == NULL ||
       memcmp(s1->pSpsStd, s2->pSpsStd,
              (s1->spsStdCount) * sizeof(StdVideoH264SequenceParameterSet)) != 0))
    return false;

  // pPpsStd - ppsStdCount
  if (s1->pPpsStd != s2->pPpsStd &&
      (s1->pPpsStd == NULL || s2->pPpsStd == NULL ||
       memcmp(s1->pPpsStd, s2->pPpsStd,
              (s1->ppsStdCount) * sizeof(StdVideoH264PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s2) {
  // local, simple types
  if ((s1->stdSPSCount != s2->stdSPSCount) || (s1->stdPPSCount != s2->stdPPSCount))
    return false;

  // non-local members

  // pStdSPSs - stdSPSCount
  if (s1->pStdSPSs != s2->pStdSPSs &&
      (s1->pStdSPSs == NULL || s2->pStdSPSs == NULL ||
       memcmp(s1->pStdSPSs, s2->pStdSPSs,
              (s1->stdSPSCount) * sizeof(StdVideoH264SequenceParameterSet)) != 0))
    return false;

  // pStdPPSs - stdPPSCount
  if (s1->pStdPPSs != s2->pStdPPSs &&
      (s1->pStdPPSs == NULL || s2->pStdPPSs == NULL ||
       memcmp(s1->pStdPPSs, s2->pStdPPSs,
              (s1->stdPPSCount) * sizeof(StdVideoH264PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersAddInfoKHR(
    VkVideoDecodeH264SessionParametersAddInfoKHR const *s1,
    VkVideoDecodeH264SessionParametersAddInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdSPSCount != s2->stdSPSCount) || (s1->stdPPSCount != s2->stdPPSCount))
    return false;

  // non-local members

  // pStdSPSs - stdSPSCount
  if (s1->pStdSPSs != s2->pStdSPSs &&
      (s1->pStdSPSs == NULL || s2->pStdSPSs == NULL ||
       memcmp(s1->pStdSPSs, s2->pStdSPSs,
              (s1->stdSPSCount) * sizeof(StdVideoH264SequenceParameterSet)) != 0))
    return false;

  // pStdPPSs - stdPPSCount
  if (s1->pStdPPSs != s2->pStdPPSs &&
      (s1->pStdPPSs == NULL || s2->pStdPPSs == NULL ||
       memcmp(s1->pStdPPSs, s2->pStdPPSs,
              (s1->stdPPSCount) * sizeof(StdVideoH264PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->maxSpsStdCount != s2->maxSpsStdCount) || (s1->maxPpsStdCount != s2->maxPpsStdCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->maxStdSPSCount != s2->maxStdSPSCount) || (s1->maxStdPPSCount != s2->maxStdPPSCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersCreateInfoKHR(
    VkVideoDecodeH264SessionParametersCreateInfoKHR const *s1,
    VkVideoDecodeH264SessionParametersCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->maxStdSPSCount != s2->maxStdSPSCount) || (s1->maxStdPPSCount != s2->maxStdPPSCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *s1,
                                              VkVideoDecodeH265CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->maxLevel != s2->maxLevel))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtensionProperties(&s1->stdExtensionVersion, &s2->stdExtensionVersion))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 210 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *s1,
                                              VkVideoDecodeH265CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->maxLevel != s2->maxLevel))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *s1,
                                              VkVideoDecodeH265CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->maxLevel != s2->maxLevel))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *s1,
                                              VkVideoDecodeH265CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->maxLevelIdc != s2->maxLevelIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265CapabilitiesKHR(VkVideoDecodeH265CapabilitiesKHR const *s1,
                                              VkVideoDecodeH265CapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->maxLevelIdc != s2->maxLevelIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265DpbSlotInfoEXT(VkVideoDecodeH265DpbSlotInfoEXT const *s1,
                                             VkVideoDecodeH265DpbSlotInfoEXT const *s2) {
  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265DpbSlotInfoKHR(VkVideoDecodeH265DpbSlotInfoKHR const *s1,
                                             VkVideoDecodeH265DpbSlotInfoKHR const *s2) {
  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265InlineSessionParametersInfoKHR(
    VkVideoDecodeH265InlineSessionParametersInfoKHR const *s1,
    VkVideoDecodeH265InlineSessionParametersInfoKHR const *s2) {
  // non-local members
  if (s1->pStdVPS != s2->pStdVPS)
    return false;

  if (s1->pStdSPS != s2->pStdSPS)
    return false;

  if (s1->pStdPPS != s2->pStdPPS)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *s1,
                                             VkVideoDecodeH265PictureInfoEXT const *s2) {
  // local, simple types
  if ((s1->slicesCount != s2->slicesCount))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  // pSlicesDataOffsets - slicesCount
  if (s1->pSlicesDataOffsets != s2->pSlicesDataOffsets &&
      (s1->pSlicesDataOffsets == NULL || s2->pSlicesDataOffsets == NULL ||
       memcmp(s1->pSlicesDataOffsets, s2->pSlicesDataOffsets,
              (s1->slicesCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 235 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *s1,
                                             VkVideoDecodeH265PictureInfoEXT const *s2) {
  // local, simple types
  if ((s1->sliceCount != s2->sliceCount))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  // pSliceOffsets - sliceCount
  if (s1->pSliceOffsets != s2->pSliceOffsets &&
      (s1->pSliceOffsets == NULL || s2->pSliceOffsets == NULL ||
       memcmp(s1->pSliceOffsets, s2->pSliceOffsets, (s1->sliceCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 236 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *s1,
                                             VkVideoDecodeH265PictureInfoEXT const *s2) {
  // local, simple types
  if ((s1->sliceSegmentCount != s2->sliceSegmentCount))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  // pSliceSegmentOffsets - sliceSegmentCount
  if (s1->pSliceSegmentOffsets != s2->pSliceSegmentOffsets &&
      (s1->pSliceSegmentOffsets == NULL || s2->pSliceSegmentOffsets == NULL ||
       memcmp(s1->pSliceSegmentOffsets, s2->pSliceSegmentOffsets,
              (s1->sliceSegmentCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265PictureInfoKHR(VkVideoDecodeH265PictureInfoKHR const *s1,
                                             VkVideoDecodeH265PictureInfoKHR const *s2) {
  // local, simple types
  if ((s1->sliceSegmentCount != s2->sliceSegmentCount))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  // pSliceSegmentOffsets - sliceSegmentCount
  if (s1->pSliceSegmentOffsets != s2->pSliceSegmentOffsets &&
      (s1->pSliceSegmentOffsets == NULL || s2->pSliceSegmentOffsets == NULL ||
       memcmp(s1->pSliceSegmentOffsets, s2->pSliceSegmentOffsets,
              (s1->sliceSegmentCount) * sizeof(uint32_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265ProfileEXT(VkVideoDecodeH265ProfileEXT const *s1,
                                         VkVideoDecodeH265ProfileEXT const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265ProfileInfoEXT(VkVideoDecodeH265ProfileInfoEXT const *s1,
                                             VkVideoDecodeH265ProfileInfoEXT const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265ProfileInfoKHR(VkVideoDecodeH265ProfileInfoKHR const *s1,
                                             VkVideoDecodeH265ProfileInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionCreateInfoEXT(
    VkVideoDecodeH265SessionCreateInfoEXT const *s1,
    VkVideoDecodeH265SessionCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s2) {
  // local, simple types
  if ((s1->spsStdCount != s2->spsStdCount) || (s1->ppsStdCount != s2->ppsStdCount))
    return false;

  // non-local members

  // pSpsStd - spsStdCount
  if (s1->pSpsStd != s2->pSpsStd &&
      (s1->pSpsStd == NULL || s2->pSpsStd == NULL ||
       memcmp(s1->pSpsStd, s2->pSpsStd,
              (s1->spsStdCount) * sizeof(StdVideoH265SequenceParameterSet)) != 0))
    return false;

  // pPpsStd - ppsStdCount
  if (s1->pPpsStd != s2->pPpsStd &&
      (s1->pPpsStd == NULL || s2->pPpsStd == NULL ||
       memcmp(s1->pPpsStd, s2->pPpsStd,
              (s1->ppsStdCount) * sizeof(StdVideoH265PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s2) {
  // local, simple types
  if ((s1->vpsStdCount != s2->vpsStdCount) || (s1->spsStdCount != s2->spsStdCount) ||
      (s1->ppsStdCount != s2->ppsStdCount))
    return false;

  // non-local members

  // pVpsStd - vpsStdCount
  if (s1->pVpsStd != s2->pVpsStd &&
      (s1->pVpsStd == NULL || s2->pVpsStd == NULL ||
       memcmp(s1->pVpsStd, s2->pVpsStd,
              (s1->vpsStdCount) * sizeof(StdVideoH265VideoParameterSet)) != 0))
    return false;

  // pSpsStd - spsStdCount
  if (s1->pSpsStd != s2->pSpsStd &&
      (s1->pSpsStd == NULL || s2->pSpsStd == NULL ||
       memcmp(s1->pSpsStd, s2->pSpsStd,
              (s1->spsStdCount) * sizeof(StdVideoH265SequenceParameterSet)) != 0))
    return false;

  // pPpsStd - ppsStdCount
  if (s1->pPpsStd != s2->pPpsStd &&
      (s1->pPpsStd == NULL || s2->pPpsStd == NULL ||
       memcmp(s1->pPpsStd, s2->pPpsStd,
              (s1->ppsStdCount) * sizeof(StdVideoH265PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s2) {
  // local, simple types
  if ((s1->stdVPSCount != s2->stdVPSCount) || (s1->stdSPSCount != s2->stdSPSCount) ||
      (s1->stdPPSCount != s2->stdPPSCount))
    return false;

  // non-local members

  // pStdVPSs - stdVPSCount
  if (s1->pStdVPSs != s2->pStdVPSs &&
      (s1->pStdVPSs == NULL || s2->pStdVPSs == NULL ||
       memcmp(s1->pStdVPSs, s2->pStdVPSs,
              (s1->stdVPSCount) * sizeof(StdVideoH265VideoParameterSet)) != 0))
    return false;

  // pStdSPSs - stdSPSCount
  if (s1->pStdSPSs != s2->pStdSPSs &&
      (s1->pStdSPSs == NULL || s2->pStdSPSs == NULL ||
       memcmp(s1->pStdSPSs, s2->pStdSPSs,
              (s1->stdSPSCount) * sizeof(StdVideoH265SequenceParameterSet)) != 0))
    return false;

  // pStdPPSs - stdPPSCount
  if (s1->pStdPPSs != s2->pStdPPSs &&
      (s1->pStdPPSs == NULL || s2->pStdPPSs == NULL ||
       memcmp(s1->pStdPPSs, s2->pStdPPSs,
              (s1->stdPPSCount) * sizeof(StdVideoH265PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersAddInfoKHR(
    VkVideoDecodeH265SessionParametersAddInfoKHR const *s1,
    VkVideoDecodeH265SessionParametersAddInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdVPSCount != s2->stdVPSCount) || (s1->stdSPSCount != s2->stdSPSCount) ||
      (s1->stdPPSCount != s2->stdPPSCount))
    return false;

  // non-local members

  // pStdVPSs - stdVPSCount
  if (s1->pStdVPSs != s2->pStdVPSs &&
      (s1->pStdVPSs == NULL || s2->pStdVPSs == NULL ||
       memcmp(s1->pStdVPSs, s2->pStdVPSs,
              (s1->stdVPSCount) * sizeof(StdVideoH265VideoParameterSet)) != 0))
    return false;

  // pStdSPSs - stdSPSCount
  if (s1->pStdSPSs != s2->pStdSPSs &&
      (s1->pStdSPSs == NULL || s2->pStdSPSs == NULL ||
       memcmp(s1->pStdSPSs, s2->pStdSPSs,
              (s1->stdSPSCount) * sizeof(StdVideoH265SequenceParameterSet)) != 0))
    return false;

  // pStdPPSs - stdPPSCount
  if (s1->pStdPPSs != s2->pStdPPSs &&
      (s1->pStdPPSs == NULL || s2->pStdPPSs == NULL ||
       memcmp(s1->pStdPPSs, s2->pStdPPSs,
              (s1->stdPPSCount) * sizeof(StdVideoH265PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->maxSpsStdCount != s2->maxSpsStdCount) || (s1->maxPpsStdCount != s2->maxPpsStdCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->maxVpsStdCount != s2->maxVpsStdCount) || (s1->maxSpsStdCount != s2->maxSpsStdCount) ||
      (s1->maxPpsStdCount != s2->maxPpsStdCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->maxStdVPSCount != s2->maxStdVPSCount) || (s1->maxStdSPSCount != s2->maxStdSPSCount) ||
      (s1->maxStdPPSCount != s2->maxStdPPSCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersCreateInfoKHR(
    VkVideoDecodeH265SessionParametersCreateInfoKHR const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->maxStdVPSCount != s2->maxStdVPSCount) || (s1->maxStdSPSCount != s2->maxStdSPSCount) ||
      (s1->maxStdPPSCount != s2->maxStdPPSCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 210 && VK_KHR_video_decode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *s1, VkVideoDecodeInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->srcBuffer != s2->srcBuffer) ||
      (s1->srcBufferOffset != s2->srcBufferOffset) || (s1->srcBufferRange != s2->srcBufferRange) ||
      (s1->referenceSlotCount != s2->referenceSlotCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->codedOffset, &s2->codedOffset) ||
      !compare_VkExtent2D(&s1->codedExtent, &s2->codedExtent) ||
      !compare_VkVideoPictureResourceKHR(&s1->dstPictureResource, &s2->dstPictureResource))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 224 && VK_KHR_video_decode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *s1, VkVideoDecodeInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->srcBuffer != s2->srcBuffer) ||
      (s1->srcBufferOffset != s2->srcBufferOffset) || (s1->srcBufferRange != s2->srcBufferRange) ||
      (s1->referenceSlotCount != s2->referenceSlotCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoPictureResourceKHR(&s1->dstPictureResource, &s2->dstPictureResource))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *s1, VkVideoDecodeInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->srcBuffer != s2->srcBuffer) ||
      (s1->srcBufferOffset != s2->srcBufferOffset) || (s1->srcBufferRange != s2->srcBufferRange) ||
      (s1->referenceSlotCount != s2->referenceSlotCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoPictureResourceInfoKHR(&s1->dstPictureResource, &s2->dstPictureResource))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoDecodeUsageInfoKHR(VkVideoDecodeUsageInfoKHR const *s1,
                                       VkVideoDecodeUsageInfoKHR const *s2) {
  // local, simple types
  if ((s1->videoUsageHints != s2->videoUsageHints))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9
bool compare_VkVideoDecodeVP9CapabilitiesKHR(VkVideoDecodeVP9CapabilitiesKHR const *s1,
                                             VkVideoDecodeVP9CapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->maxLevel != s2->maxLevel))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9
bool compare_VkVideoDecodeVP9PictureInfoKHR(VkVideoDecodeVP9PictureInfoKHR const *s1,
                                            VkVideoDecodeVP9PictureInfoKHR const *s2) {
  // local, simple types
  if ((s1->uncompressedHeaderOffset != s2->uncompressedHeaderOffset) ||
      (s1->compressedHeaderOffset != s2->compressedHeaderOffset) ||
      (s1->tilesOffset != s2->tilesOffset))
    return false;

  // local array members
  if (memcmp(s1->referenceNameSlotIndices, s2->referenceNameSlotIndices,
             VK_MAX_VIDEO_VP9_REFERENCES_PER_FRAME_KHR * sizeof(int32_t)) != 0)
    return false;
  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9
bool compare_VkVideoDecodeVP9ProfileInfoKHR(VkVideoDecodeVP9ProfileInfoKHR const *s1,
                                            VkVideoDecodeVP9ProfileInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdProfile != s2->stdProfile))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1CapabilitiesKHR(VkVideoEncodeAV1CapabilitiesKHR const *s1,
                                             VkVideoEncodeAV1CapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->maxLevel != s2->maxLevel) ||
      (s1->superblockSizes != s2->superblockSizes) ||
      (s1->maxSingleReferenceCount != s2->maxSingleReferenceCount) ||
      (s1->singleReferenceNameMask != s2->singleReferenceNameMask) ||
      (s1->maxUnidirectionalCompoundReferenceCount !=
       s2->maxUnidirectionalCompoundReferenceCount) ||
      (s1->maxUnidirectionalCompoundGroup1ReferenceCount !=
       s2->maxUnidirectionalCompoundGroup1ReferenceCount) ||
      (s1->unidirectionalCompoundReferenceNameMask !=
       s2->unidirectionalCompoundReferenceNameMask) ||
      (s1->maxBidirectionalCompoundReferenceCount != s2->maxBidirectionalCompoundReferenceCount) ||
      (s1->maxBidirectionalCompoundGroup1ReferenceCount !=
       s2->maxBidirectionalCompoundGroup1ReferenceCount) ||
      (s1->maxBidirectionalCompoundGroup2ReferenceCount !=
       s2->maxBidirectionalCompoundGroup2ReferenceCount) ||
      (s1->bidirectionalCompoundReferenceNameMask != s2->bidirectionalCompoundReferenceNameMask) ||
      (s1->maxTemporalLayerCount != s2->maxTemporalLayerCount) ||
      (s1->maxSpatialLayerCount != s2->maxSpatialLayerCount) ||
      (s1->maxOperatingPoints != s2->maxOperatingPoints) || (s1->minQIndex != s2->minQIndex) ||
      (s1->maxQIndex != s2->maxQIndex) ||
      (s1->prefersGopRemainingFrames != s2->prefersGopRemainingFrames) ||
      (s1->requiresGopRemainingFrames != s2->requiresGopRemainingFrames) ||
      (s1->stdSyntaxFlags != s2->stdSyntaxFlags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->codedPictureAlignment, &s2->codedPictureAlignment) ||
      !compare_VkExtent2D(&s1->maxTiles, &s2->maxTiles) ||
      !compare_VkExtent2D(&s1->minTileSize, &s2->minTileSize) ||
      !compare_VkExtent2D(&s1->maxTileSize, &s2->maxTileSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1DpbSlotInfoKHR(VkVideoEncodeAV1DpbSlotInfoKHR const *s1,
                                            VkVideoEncodeAV1DpbSlotInfoKHR const *s2) {
  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1FrameSizeKHR(VkVideoEncodeAV1FrameSizeKHR const *s1,
                                          VkVideoEncodeAV1FrameSizeKHR const *s2) {
  // local, simple types
  if ((s1->intraFrameSize != s2->intraFrameSize) ||
      (s1->predictiveFrameSize != s2->predictiveFrameSize) ||
      (s1->bipredictiveFrameSize != s2->bipredictiveFrameSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1GopRemainingFrameInfoKHR(
    VkVideoEncodeAV1GopRemainingFrameInfoKHR const *s1,
    VkVideoEncodeAV1GopRemainingFrameInfoKHR const *s2) {
  // local, simple types
  if ((s1->useGopRemainingFrames != s2->useGopRemainingFrames) ||
      (s1->gopRemainingIntra != s2->gopRemainingIntra) ||
      (s1->gopRemainingPredictive != s2->gopRemainingPredictive) ||
      (s1->gopRemainingBipredictive != s2->gopRemainingBipredictive))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1PictureInfoKHR(VkVideoEncodeAV1PictureInfoKHR const *s1,
                                            VkVideoEncodeAV1PictureInfoKHR const *s2) {
  // local, simple types
  if ((s1->predictionMode != s2->predictionMode) ||
      (s1->rateControlGroup != s2->rateControlGroup) ||
      (s1->constantQIndex != s2->constantQIndex) ||
      (s1->primaryReferenceCdfOnly != s2->primaryReferenceCdfOnly) ||
      (s1->generateObuExtensionHeader != s2->generateObuExtensionHeader))
    return false;

  // local array members
  if (memcmp(s1->referenceNameSlotIndices, s2->referenceNameSlotIndices,
             VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR * sizeof(int32_t)) != 0)
    return false;
  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1ProfileInfoKHR(VkVideoEncodeAV1ProfileInfoKHR const *s1,
                                            VkVideoEncodeAV1ProfileInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdProfile != s2->stdProfile))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1QIndexKHR(VkVideoEncodeAV1QIndexKHR const *s1,
                                       VkVideoEncodeAV1QIndexKHR const *s2) {
  // local, simple types
  if ((s1->intraQIndex != s2->intraQIndex) || (s1->predictiveQIndex != s2->predictiveQIndex) ||
      (s1->bipredictiveQIndex != s2->bipredictiveQIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1QualityLevelPropertiesKHR(
    VkVideoEncodeAV1QualityLevelPropertiesKHR const *s1,
    VkVideoEncodeAV1QualityLevelPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->preferredRateControlFlags != s2->preferredRateControlFlags) ||
      (s1->preferredGopFrameCount != s2->preferredGopFrameCount) ||
      (s1->preferredKeyFramePeriod != s2->preferredKeyFramePeriod) ||
      (s1->preferredConsecutiveBipredictiveFrameCount !=
       s2->preferredConsecutiveBipredictiveFrameCount) ||
      (s1->preferredTemporalLayerCount != s2->preferredTemporalLayerCount) ||
      (s1->preferredMaxSingleReferenceCount != s2->preferredMaxSingleReferenceCount) ||
      (s1->preferredSingleReferenceNameMask != s2->preferredSingleReferenceNameMask) ||
      (s1->preferredMaxUnidirectionalCompoundReferenceCount !=
       s2->preferredMaxUnidirectionalCompoundReferenceCount) ||
      (s1->preferredMaxUnidirectionalCompoundGroup1ReferenceCount !=
       s2->preferredMaxUnidirectionalCompoundGroup1ReferenceCount) ||
      (s1->preferredUnidirectionalCompoundReferenceNameMask !=
       s2->preferredUnidirectionalCompoundReferenceNameMask) ||
      (s1->preferredMaxBidirectionalCompoundReferenceCount !=
       s2->preferredMaxBidirectionalCompoundReferenceCount) ||
      (s1->preferredMaxBidirectionalCompoundGroup1ReferenceCount !=
       s2->preferredMaxBidirectionalCompoundGroup1ReferenceCount) ||
      (s1->preferredMaxBidirectionalCompoundGroup2ReferenceCount !=
       s2->preferredMaxBidirectionalCompoundGroup2ReferenceCount) ||
      (s1->preferredBidirectionalCompoundReferenceNameMask !=
       s2->preferredBidirectionalCompoundReferenceNameMask))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeAV1QIndexKHR(&s1->preferredConstantQIndex,
                                         &s2->preferredConstantQIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1QuantizationMapCapabilitiesKHR(
    VkVideoEncodeAV1QuantizationMapCapabilitiesKHR const *s1,
    VkVideoEncodeAV1QuantizationMapCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->minQIndexDelta != s2->minQIndexDelta) || (s1->maxQIndexDelta != s2->maxQIndexDelta))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1RateControlInfoKHR(VkVideoEncodeAV1RateControlInfoKHR const *s1,
                                                VkVideoEncodeAV1RateControlInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->gopFrameCount != s2->gopFrameCount) ||
      (s1->keyFramePeriod != s2->keyFramePeriod) ||
      (s1->consecutiveBipredictiveFrameCount != s2->consecutiveBipredictiveFrameCount) ||
      (s1->temporalLayerCount != s2->temporalLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1RateControlLayerInfoKHR(
    VkVideoEncodeAV1RateControlLayerInfoKHR const *s1,
    VkVideoEncodeAV1RateControlLayerInfoKHR const *s2) {
  // local, simple types
  if ((s1->useMinQIndex != s2->useMinQIndex) || (s1->useMaxQIndex != s2->useMaxQIndex) ||
      (s1->useMaxFrameSize != s2->useMaxFrameSize))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeAV1QIndexKHR(&s1->minQIndex, &s2->minQIndex) ||
      !compare_VkVideoEncodeAV1QIndexKHR(&s1->maxQIndex, &s2->maxQIndex) ||
      !compare_VkVideoEncodeAV1FrameSizeKHR(&s1->maxFrameSize, &s2->maxFrameSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1SessionCreateInfoKHR(VkVideoEncodeAV1SessionCreateInfoKHR const *s1,
                                                  VkVideoEncodeAV1SessionCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->useMaxLevel != s2->useMaxLevel) || (s1->maxLevel != s2->maxLevel))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1
bool compare_VkVideoEncodeAV1SessionParametersCreateInfoKHR(
    VkVideoEncodeAV1SessionParametersCreateInfoKHR const *s1,
    VkVideoEncodeAV1SessionParametersCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdOperatingPointCount != s2->stdOperatingPointCount))
    return false;

  // non-local members
  if (s1->pStdSequenceHeader != s2->pStdSequenceHeader)
    return false;

  if (s1->pStdDecoderModelInfo != s2->pStdDecoderModelInfo)
    return false;

  // pStdOperatingPoints - stdOperatingPointCount
  if (s1->pStdOperatingPoints != s2->pStdOperatingPoints &&
      (s1->pStdOperatingPoints == NULL || s2->pStdOperatingPoints == NULL ||
       memcmp(s1->pStdOperatingPoints, s2->pStdOperatingPoints,
              (s1->stdOperatingPointCount) * sizeof(StdVideoEncodeAV1OperatingPointInfo)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *s1,
                                          VkVideoEncodeCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->rateControlModes != s2->rateControlModes) ||
      (s1->rateControlLayerCount != s2->rateControlLayerCount) ||
      (s1->qualityLevelCount != s2->qualityLevelCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->inputImageDataFillAlignment, &s2->inputImageDataFillAlignment))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *s1,
                                          VkVideoEncodeCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->rateControlModes != s2->rateControlModes) ||
      (s1->maxRateControlLayers != s2->maxRateControlLayers) ||
      (s1->maxQualityLevels != s2->maxQualityLevels) ||
      (s1->supportedEncodeFeedbackFlags != s2->supportedEncodeFeedbackFlags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->inputImageDataFillAlignment, &s2->inputImageDataFillAlignment))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *s1,
                                          VkVideoEncodeCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->rateControlModes != s2->rateControlModes) ||
      (s1->maxRateControlLayers != s2->maxRateControlLayers) ||
      (s1->maxBitrate != s2->maxBitrate) || (s1->maxQualityLevels != s2->maxQualityLevels) ||
      (s1->supportedEncodeFeedbackFlags != s2->supportedEncodeFeedbackFlags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->encodeInputPictureGranularity, &s2->encodeInputPictureGranularity))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->inputModeFlags != s2->inputModeFlags) ||
      (s1->outputModeFlags != s2->outputModeFlags) ||
      (s1->maxNumL0ReferenceForP != s2->maxNumL0ReferenceForP) ||
      (s1->maxNumL0ReferenceForB != s2->maxNumL0ReferenceForB) ||
      (s1->maxNumL1Reference != s2->maxNumL1Reference) ||
      (s1->qualityLevelCount != s2->qualityLevelCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->minPictureSizeInMbs, &s2->minPictureSizeInMbs) ||
      !compare_VkExtent2D(&s1->maxPictureSizeInMbs, &s2->maxPictureSizeInMbs) ||
      !compare_VkExtent2D(&s1->inputImageDataAlignment, &s2->inputImageDataAlignment) ||
      !compare_VkExtensionProperties(&s1->stdExtensionVersion, &s2->stdExtensionVersion))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->inputModeFlags != s2->inputModeFlags) ||
      (s1->outputModeFlags != s2->outputModeFlags) ||
      (s1->maxNumL0ReferenceForP != s2->maxNumL0ReferenceForP) ||
      (s1->maxNumL0ReferenceForB != s2->maxNumL0ReferenceForB) ||
      (s1->maxNumL1Reference != s2->maxNumL1Reference) ||
      (s1->qualityLevelCount != s2->qualityLevelCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->minPictureSizeInMbs, &s2->minPictureSizeInMbs) ||
      !compare_VkExtent2D(&s1->maxPictureSizeInMbs, &s2->maxPictureSizeInMbs) ||
      !compare_VkExtent2D(&s1->inputImageDataAlignment, &s2->inputImageDataAlignment) ||
      !compare_VkExtensionProperties(&s1->stdExtensionVersion, &s2->stdExtensionVersion))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->inputModeFlags != s2->inputModeFlags) ||
      (s1->outputModeFlags != s2->outputModeFlags) ||
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
      (s1->motionVectorsOverPicBoundariesFlag != s2->motionVectorsOverPicBoundariesFlag) ||
      (s1->maxBytesPerPicDenom != s2->maxBytesPerPicDenom) ||
      (s1->maxBitsPerMbDenom != s2->maxBitsPerMbDenom) ||
      (s1->log2MaxMvLengthHorizontal != s2->log2MaxMvLengthHorizontal) ||
      (s1->log2MaxMvLengthVertical != s2->log2MaxMvLengthVertical))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtensionProperties(&s1->stdExtensionVersion, &s2->stdExtensionVersion))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->inputModeFlags != s2->inputModeFlags) ||
      (s1->outputModeFlags != s2->outputModeFlags) ||
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
      (s1->motionVectorsOverPicBoundariesFlag != s2->motionVectorsOverPicBoundariesFlag) ||
      (s1->maxBytesPerPicDenom != s2->maxBytesPerPicDenom) ||
      (s1->maxBitsPerMbDenom != s2->maxBitsPerMbDenom) ||
      (s1->log2MaxMvLengthHorizontal != s2->log2MaxMvLengthHorizontal) ||
      (s1->log2MaxMvLengthVertical != s2->log2MaxMvLengthVertical))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) ||
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
      (s1->motionVectorsOverPicBoundariesFlag != s2->motionVectorsOverPicBoundariesFlag) ||
      (s1->maxBytesPerPicDenom != s2->maxBytesPerPicDenom) ||
      (s1->maxBitsPerMbDenom != s2->maxBitsPerMbDenom) ||
      (s1->log2MaxMvLengthHorizontal != s2->log2MaxMvLengthHorizontal) ||
      (s1->log2MaxMvLengthVertical != s2->log2MaxMvLengthVertical))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->maxLevelIdc != s2->maxLevelIdc) ||
      (s1->maxSliceCount != s2->maxSliceCount) ||
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
      (s1->maxTemporalLayerCount != s2->maxTemporalLayerCount) ||
      (s1->expectDyadicTemporalLayerPattern != s2->expectDyadicTemporalLayerPattern) ||
      (s1->minQp != s2->minQp) || (s1->maxQp != s2->maxQp) ||
      (s1->prefersGopRemainingFrames != s2->prefersGopRemainingFrames) ||
      (s1->requiresGopRemainingFrames != s2->requiresGopRemainingFrames) ||
      (s1->stdSyntaxFlags != s2->stdSyntaxFlags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264CapabilitiesKHR(VkVideoEncodeH264CapabilitiesKHR const *s1,
                                              VkVideoEncodeH264CapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->maxLevelIdc != s2->maxLevelIdc) ||
      (s1->maxSliceCount != s2->maxSliceCount) ||
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
      (s1->maxTemporalLayerCount != s2->maxTemporalLayerCount) ||
      (s1->expectDyadicTemporalLayerPattern != s2->expectDyadicTemporalLayerPattern) ||
      (s1->minQp != s2->minQp) || (s1->maxQp != s2->maxQp) ||
      (s1->prefersGopRemainingFrames != s2->prefersGopRemainingFrames) ||
      (s1->requiresGopRemainingFrames != s2->requiresGopRemainingFrames) ||
      (s1->stdSyntaxFlags != s2->stdSyntaxFlags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH264DpbSlotInfoEXT const *s2) {
  // local, simple types
  if ((s1->slotIndex != s2->slotIndex))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH264DpbSlotInfoEXT const *s2) {
  // local, simple types
  if ((s1->slotIndex != s2->slotIndex))
    return false;

  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH264DpbSlotInfoEXT const *s2) {
  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264DpbSlotInfoKHR(VkVideoEncodeH264DpbSlotInfoKHR const *s1,
                                             VkVideoEncodeH264DpbSlotInfoKHR const *s2) {
  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264EmitPictureParametersEXT(
    VkVideoEncodeH264EmitPictureParametersEXT const *s1,
    VkVideoEncodeH264EmitPictureParametersEXT const *s2) {
  // local, simple types
  if ((s1->spsId != s2->spsId) || (s1->emitSpsEnable != s2->emitSpsEnable) ||
      (s1->ppsIdEntryCount != s2->ppsIdEntryCount))
    return false;

  // non-local members

  // ppsIdEntries - ppsIdEntryCount
  if (s1->ppsIdEntries != s2->ppsIdEntries &&
      (s1->ppsIdEntries == NULL || s2->ppsIdEntries == NULL ||
       memcmp(s1->ppsIdEntries, s2->ppsIdEntries, (s1->ppsIdEntryCount) * sizeof(uint8_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264EmitPictureParametersInfoEXT(
    VkVideoEncodeH264EmitPictureParametersInfoEXT const *s1,
    VkVideoEncodeH264EmitPictureParametersInfoEXT const *s2) {
  // local, simple types
  if ((s1->spsId != s2->spsId) || (s1->emitSpsEnable != s2->emitSpsEnable) ||
      (s1->ppsIdEntryCount != s2->ppsIdEntryCount))
    return false;

  // non-local members

  // ppsIdEntries - ppsIdEntryCount
  if (s1->ppsIdEntries != s2->ppsIdEntries &&
      (s1->ppsIdEntries == NULL || s2->ppsIdEntries == NULL ||
       memcmp(s1->ppsIdEntries, s2->ppsIdEntries, (s1->ppsIdEntryCount) * sizeof(uint8_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264FrameSizeEXT(VkVideoEncodeH264FrameSizeEXT const *s1,
                                           VkVideoEncodeH264FrameSizeEXT const *s2) {
  // local, simple types
  if ((s1->frameISize != s2->frameISize) || (s1->framePSize != s2->framePSize) ||
      (s1->frameBSize != s2->frameBSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264FrameSizeKHR(VkVideoEncodeH264FrameSizeKHR const *s1,
                                           VkVideoEncodeH264FrameSizeKHR const *s2) {
  // local, simple types
  if ((s1->frameISize != s2->frameISize) || (s1->framePSize != s2->framePSize) ||
      (s1->frameBSize != s2->frameBSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264GopRemainingFrameInfoEXT(
    VkVideoEncodeH264GopRemainingFrameInfoEXT const *s1,
    VkVideoEncodeH264GopRemainingFrameInfoEXT const *s2) {
  // local, simple types
  if ((s1->useGopRemainingFrames != s2->useGopRemainingFrames) ||
      (s1->gopRemainingI != s2->gopRemainingI) || (s1->gopRemainingP != s2->gopRemainingP) ||
      (s1->gopRemainingB != s2->gopRemainingB))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264GopRemainingFrameInfoKHR(
    VkVideoEncodeH264GopRemainingFrameInfoKHR const *s1,
    VkVideoEncodeH264GopRemainingFrameInfoKHR const *s2) {
  // local, simple types
  if ((s1->useGopRemainingFrames != s2->useGopRemainingFrames) ||
      (s1->gopRemainingI != s2->gopRemainingI) || (s1->gopRemainingP != s2->gopRemainingP) ||
      (s1->gopRemainingB != s2->gopRemainingB))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *s1,
                                           VkVideoEncodeH264NaluSliceEXT const *s2) {
  // local, simple types
  if ((s1->mbCount != s2->mbCount) ||
      (s1->refFinalList0EntryCount != s2->refFinalList0EntryCount) ||
      (s1->refFinalList1EntryCount != s2->refFinalList1EntryCount) ||
      (s1->precedingNaluBytes != s2->precedingNaluBytes) || (s1->minQp != s2->minQp) ||
      (s1->maxQp != s2->maxQp))
    return false;

  // non-local members
  if (s1->pSliceHeaderStd != s2->pSliceHeaderStd)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *s1,
                                           VkVideoEncodeH264NaluSliceEXT const *s2) {
  // local, simple types
  if ((s1->mbCount != s2->mbCount) ||
      (s1->refFinalList0EntryCount != s2->refFinalList0EntryCount) ||
      (s1->refFinalList1EntryCount != s2->refFinalList1EntryCount))
    return false;

  // non-local members
  if (s1->pSliceHeaderStd != s2->pSliceHeaderStd)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *s1,
                                           VkVideoEncodeH264NaluSliceEXT const *s2) {
  // local, simple types
  if ((s1->mbCount != s2->mbCount))
    return false;

  // non-local members
  if (s1->pSliceHeaderStd != s2->pSliceHeaderStd)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *s1,
                                               VkVideoEncodeH264NaluSliceInfoEXT const *s2) {
  // local, simple types
  if ((s1->mbCount != s2->mbCount))
    return false;

  // non-local members
  if (s1->pSliceHeaderStd != s2->pSliceHeaderStd)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *s1,
                                               VkVideoEncodeH264NaluSliceInfoEXT const *s2) {
  // local, simple types
  if ((s1->mbCount != s2->mbCount))
    return false;

  // non-local members
  if (s1->pStdReferenceFinalLists != s2->pStdReferenceFinalLists)
    return false;

  if (s1->pStdSliceHeader != s2->pStdSliceHeader)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *s1,
                                               VkVideoEncodeH264NaluSliceInfoEXT const *s2) {
  // local, simple types
  if ((s1->constantQp != s2->constantQp))
    return false;

  // non-local members
  if (s1->pStdSliceHeader != s2->pStdSliceHeader)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264NaluSliceInfoKHR(VkVideoEncodeH264NaluSliceInfoKHR const *s1,
                                               VkVideoEncodeH264NaluSliceInfoKHR const *s2) {
  // local, simple types
  if ((s1->constantQp != s2->constantQp))
    return false;

  // non-local members
  if (s1->pStdSliceHeader != s2->pStdSliceHeader)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264PictureInfoEXT(VkVideoEncodeH264PictureInfoEXT const *s1,
                                             VkVideoEncodeH264PictureInfoEXT const *s2) {
  // local, simple types
  if ((s1->naluSliceEntryCount != s2->naluSliceEntryCount) ||
      (s1->generatePrefixNalu != s2->generatePrefixNalu))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264PictureInfoKHR(VkVideoEncodeH264PictureInfoKHR const *s1,
                                             VkVideoEncodeH264PictureInfoKHR const *s2) {
  // local, simple types
  if ((s1->naluSliceEntryCount != s2->naluSliceEntryCount) ||
      (s1->generatePrefixNalu != s2->generatePrefixNalu))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264ProfileEXT(VkVideoEncodeH264ProfileEXT const *s1,
                                         VkVideoEncodeH264ProfileEXT const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264ProfileInfoEXT(VkVideoEncodeH264ProfileInfoEXT const *s1,
                                             VkVideoEncodeH264ProfileInfoEXT const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264ProfileInfoKHR(VkVideoEncodeH264ProfileInfoKHR const *s1,
                                             VkVideoEncodeH264ProfileInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264QpEXT(VkVideoEncodeH264QpEXT const *s1,
                                    VkVideoEncodeH264QpEXT const *s2) {
  // local, simple types
  if ((s1->qpI != s2->qpI) || (s1->qpP != s2->qpP) || (s1->qpB != s2->qpB))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264QpKHR(VkVideoEncodeH264QpKHR const *s1,
                                    VkVideoEncodeH264QpKHR const *s2) {
  // local, simple types
  if ((s1->qpI != s2->qpI) || (s1->qpP != s2->qpP) || (s1->qpB != s2->qpB))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264QualityLevelPropertiesEXT(
    VkVideoEncodeH264QualityLevelPropertiesEXT const *s1,
    VkVideoEncodeH264QualityLevelPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->preferredRateControlFlags != s2->preferredRateControlFlags) ||
      (s1->preferredGopFrameCount != s2->preferredGopFrameCount) ||
      (s1->preferredIdrPeriod != s2->preferredIdrPeriod) ||
      (s1->preferredConsecutiveBFrameCount != s2->preferredConsecutiveBFrameCount) ||
      (s1->preferredTemporalLayerCount != s2->preferredTemporalLayerCount) ||
      (s1->preferredMaxL0ReferenceCount != s2->preferredMaxL0ReferenceCount) ||
      (s1->preferredMaxL1ReferenceCount != s2->preferredMaxL1ReferenceCount) ||
      (s1->preferredStdEntropyCodingModeFlag != s2->preferredStdEntropyCodingModeFlag))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH264QpEXT(&s1->preferredConstantQp, &s2->preferredConstantQp))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264QualityLevelPropertiesKHR(
    VkVideoEncodeH264QualityLevelPropertiesKHR const *s1,
    VkVideoEncodeH264QualityLevelPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->preferredRateControlFlags != s2->preferredRateControlFlags) ||
      (s1->preferredGopFrameCount != s2->preferredGopFrameCount) ||
      (s1->preferredIdrPeriod != s2->preferredIdrPeriod) ||
      (s1->preferredConsecutiveBFrameCount != s2->preferredConsecutiveBFrameCount) ||
      (s1->preferredTemporalLayerCount != s2->preferredTemporalLayerCount) ||
      (s1->preferredMaxL0ReferenceCount != s2->preferredMaxL0ReferenceCount) ||
      (s1->preferredMaxL1ReferenceCount != s2->preferredMaxL1ReferenceCount) ||
      (s1->preferredStdEntropyCodingModeFlag != s2->preferredStdEntropyCodingModeFlag))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH264QpKHR(&s1->preferredConstantQp, &s2->preferredConstantQp))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264QuantizationMapCapabilitiesKHR(
    VkVideoEncodeH264QuantizationMapCapabilitiesKHR const *s1,
    VkVideoEncodeH264QuantizationMapCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->minQpDelta != s2->minQpDelta) || (s1->maxQpDelta != s2->maxQpDelta))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 202 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2) {
  // local, simple types
  if ((s1->gopFrameCount != s2->gopFrameCount) || (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->rateControlStructure != s2->rateControlStructure))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2) {
  // local, simple types
  if ((s1->gopFrameCount != s2->gopFrameCount) || (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->rateControlStructure != s2->rateControlStructure) ||
      (s1->temporalLayerCount != s2->temporalLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2) {
  // local, simple types
  if ((s1->gopFrameCount != s2->gopFrameCount) || (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->rateControlStructure != s2->rateControlStructure) ||
      (s1->temporalLayerCount != s2->temporalLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2) {
  // local, simple types
  if ((s1->gopFrameCount != s2->gopFrameCount) || (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->rateControlStructure != s2->rateControlStructure) ||
      (s1->temporalLayerCount != s2->temporalLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->gopFrameCount != s2->gopFrameCount) ||
      (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->temporalLayerCount != s2->temporalLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264RateControlInfoKHR(VkVideoEncodeH264RateControlInfoKHR const *s1,
                                                 VkVideoEncodeH264RateControlInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->gopFrameCount != s2->gopFrameCount) ||
      (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->temporalLayerCount != s2->temporalLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH264RateControlLayerInfoEXT const *s2) {
  // local, simple types
  if ((s1->temporalLayerId != s2->temporalLayerId) || (s1->useInitialRcQp != s2->useInitialRcQp) ||
      (s1->useMinQp != s2->useMinQp) || (s1->useMaxQp != s2->useMaxQp) ||
      (s1->useMaxFrameSize != s2->useMaxFrameSize))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH264QpEXT(&s1->initialRcQp, &s2->initialRcQp) ||
      !compare_VkVideoEncodeH264QpEXT(&s1->minQp, &s2->minQp) ||
      !compare_VkVideoEncodeH264QpEXT(&s1->maxQp, &s2->maxQp) ||
      !compare_VkVideoEncodeH264FrameSizeEXT(&s1->maxFrameSize, &s2->maxFrameSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH264RateControlLayerInfoEXT const *s2) {
  // local, simple types
  if ((s1->temporalLayerId != s2->temporalLayerId) || (s1->useInitialRcQp != s2->useInitialRcQp) ||
      (s1->useMinQp != s2->useMinQp) || (s1->useMaxQp != s2->useMaxQp) ||
      (s1->useMaxFrameSize != s2->useMaxFrameSize))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH264QpEXT(&s1->initialRcQp, &s2->initialRcQp) ||
      !compare_VkVideoEncodeH264QpEXT(&s1->minQp, &s2->minQp) ||
      !compare_VkVideoEncodeH264QpEXT(&s1->maxQp, &s2->maxQp) ||
      !compare_VkVideoEncodeH264FrameSizeEXT(&s1->maxFrameSize, &s2->maxFrameSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH264RateControlLayerInfoEXT const *s2) {
  // local, simple types
  if ((s1->useMinQp != s2->useMinQp) || (s1->useMaxQp != s2->useMaxQp) ||
      (s1->useMaxFrameSize != s2->useMaxFrameSize))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH264QpEXT(&s1->minQp, &s2->minQp) ||
      !compare_VkVideoEncodeH264QpEXT(&s1->maxQp, &s2->maxQp) ||
      !compare_VkVideoEncodeH264FrameSizeEXT(&s1->maxFrameSize, &s2->maxFrameSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264RateControlLayerInfoKHR(
    VkVideoEncodeH264RateControlLayerInfoKHR const *s1,
    VkVideoEncodeH264RateControlLayerInfoKHR const *s2) {
  // local, simple types
  if ((s1->useMinQp != s2->useMinQp) || (s1->useMaxQp != s2->useMaxQp) ||
      (s1->useMaxFrameSize != s2->useMaxFrameSize))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH264QpKHR(&s1->minQp, &s2->minQp) ||
      !compare_VkVideoEncodeH264QpKHR(&s1->maxQp, &s2->maxQp) ||
      !compare_VkVideoEncodeH264FrameSizeKHR(&s1->maxFrameSize, &s2->maxFrameSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264ReferenceListsEXT(VkVideoEncodeH264ReferenceListsEXT const *s1,
                                                VkVideoEncodeH264ReferenceListsEXT const *s2) {
  // local, simple types
  if ((s1->referenceList0EntryCount != s2->referenceList0EntryCount) ||
      (s1->referenceList1EntryCount != s2->referenceList1EntryCount))
    return false;

  // non-local members
  if (s1->pMemMgmtCtrlOperations != s2->pMemMgmtCtrlOperations)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264ReferenceListsInfoEXT(
    VkVideoEncodeH264ReferenceListsInfoEXT const *s1,
    VkVideoEncodeH264ReferenceListsInfoEXT const *s2) {
  // local, simple types
  if ((s1->referenceList0EntryCount != s2->referenceList0EntryCount) ||
      (s1->referenceList1EntryCount != s2->referenceList1EntryCount))
    return false;

  // non-local members
  if (s1->pMemMgmtCtrlOperations != s2->pMemMgmtCtrlOperations)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionCreateInfoEXT(
    VkVideoEncodeH264SessionCreateInfoEXT const *s1,
    VkVideoEncodeH264SessionCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxPictureSizeInMbs, &s2->maxPictureSizeInMbs))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionCreateInfoEXT(
    VkVideoEncodeH264SessionCreateInfoEXT const *s1,
    VkVideoEncodeH264SessionCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->useMaxLevelIdc != s2->useMaxLevelIdc) || (s1->maxLevelIdc != s2->maxLevelIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264SessionCreateInfoKHR(
    VkVideoEncodeH264SessionCreateInfoKHR const *s1,
    VkVideoEncodeH264SessionCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->useMaxLevelIdc != s2->useMaxLevelIdc) || (s1->maxLevelIdc != s2->maxLevelIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s2) {
  // local, simple types
  if ((s1->spsStdCount != s2->spsStdCount) || (s1->ppsStdCount != s2->ppsStdCount))
    return false;

  // non-local members

  // pSpsStd - spsStdCount
  if (s1->pSpsStd != s2->pSpsStd &&
      (s1->pSpsStd == NULL || s2->pSpsStd == NULL ||
       memcmp(s1->pSpsStd, s2->pSpsStd,
              (s1->spsStdCount) * sizeof(StdVideoH264SequenceParameterSet)) != 0))
    return false;

  // pPpsStd - ppsStdCount
  if (s1->pPpsStd != s2->pPpsStd &&
      (s1->pPpsStd == NULL || s2->pPpsStd == NULL ||
       memcmp(s1->pPpsStd, s2->pPpsStd,
              (s1->ppsStdCount) * sizeof(StdVideoH264PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s2) {
  // local, simple types
  if ((s1->stdSPSCount != s2->stdSPSCount) || (s1->stdPPSCount != s2->stdPPSCount))
    return false;

  // non-local members

  // pStdSPSs - stdSPSCount
  if (s1->pStdSPSs != s2->pStdSPSs &&
      (s1->pStdSPSs == NULL || s2->pStdSPSs == NULL ||
       memcmp(s1->pStdSPSs, s2->pStdSPSs,
              (s1->stdSPSCount) * sizeof(StdVideoH264SequenceParameterSet)) != 0))
    return false;

  // pStdPPSs - stdPPSCount
  if (s1->pStdPPSs != s2->pStdPPSs &&
      (s1->pStdPPSs == NULL || s2->pStdPPSs == NULL ||
       memcmp(s1->pStdPPSs, s2->pStdPPSs,
              (s1->stdPPSCount) * sizeof(StdVideoH264PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersAddInfoKHR(
    VkVideoEncodeH264SessionParametersAddInfoKHR const *s1,
    VkVideoEncodeH264SessionParametersAddInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdSPSCount != s2->stdSPSCount) || (s1->stdPPSCount != s2->stdPPSCount))
    return false;

  // non-local members

  // pStdSPSs - stdSPSCount
  if (s1->pStdSPSs != s2->pStdSPSs &&
      (s1->pStdSPSs == NULL || s2->pStdSPSs == NULL ||
       memcmp(s1->pStdSPSs, s2->pStdSPSs,
              (s1->stdSPSCount) * sizeof(StdVideoH264SequenceParameterSet)) != 0))
    return false;

  // pStdPPSs - stdPPSCount
  if (s1->pStdPPSs != s2->pStdPPSs &&
      (s1->pStdPPSs == NULL || s2->pStdPPSs == NULL ||
       memcmp(s1->pStdPPSs, s2->pStdPPSs,
              (s1->stdPPSCount) * sizeof(StdVideoH264PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->maxSpsStdCount != s2->maxSpsStdCount) || (s1->maxPpsStdCount != s2->maxPpsStdCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->maxStdSPSCount != s2->maxStdSPSCount) || (s1->maxStdPPSCount != s2->maxStdPPSCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersCreateInfoKHR(
    VkVideoEncodeH264SessionParametersCreateInfoKHR const *s1,
    VkVideoEncodeH264SessionParametersCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->maxStdSPSCount != s2->maxStdSPSCount) || (s1->maxStdPPSCount != s2->maxStdPPSCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersFeedbackInfoEXT(
    VkVideoEncodeH264SessionParametersFeedbackInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersFeedbackInfoEXT const *s2) {
  // local, simple types
  if ((s1->hasStdSPSOverrides != s2->hasStdSPSOverrides) ||
      (s1->hasStdPPSOverrides != s2->hasStdPPSOverrides))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersFeedbackInfoKHR(
    VkVideoEncodeH264SessionParametersFeedbackInfoKHR const *s1,
    VkVideoEncodeH264SessionParametersFeedbackInfoKHR const *s2) {
  // local, simple types
  if ((s1->hasStdSPSOverrides != s2->hasStdSPSOverrides) ||
      (s1->hasStdPPSOverrides != s2->hasStdPPSOverrides))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264SessionParametersGetInfoEXT(
    VkVideoEncodeH264SessionParametersGetInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersGetInfoEXT const *s2) {
  // local, simple types
  if ((s1->writeStdSPS != s2->writeStdSPS) || (s1->writeStdPPS != s2->writeStdPPS) ||
      (s1->stdSPSId != s2->stdSPSId) || (s1->stdPPSId != s2->stdPPSId))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersGetInfoKHR(
    VkVideoEncodeH264SessionParametersGetInfoKHR const *s1,
    VkVideoEncodeH264SessionParametersGetInfoKHR const *s2) {
  // local, simple types
  if ((s1->writeStdSPS != s2->writeStdSPS) || (s1->writeStdPPS != s2->writeStdPPS) ||
      (s1->stdSPSId != s2->stdSPSId) || (s1->stdPPSId != s2->stdPPSId))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH264VclFrameInfoEXT const *s2) {
  // local, simple types
  if ((s1->refDefaultFinalList0EntryCount != s2->refDefaultFinalList0EntryCount) ||
      (s1->refDefaultFinalList1EntryCount != s2->refDefaultFinalList1EntryCount) ||
      (s1->naluSliceEntryCount != s2->naluSliceEntryCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH264VclFrameInfoEXT const *s2) {
  // local, simple types
  if ((s1->naluSliceEntryCount != s2->naluSliceEntryCount))
    return false;

  // non-local members
  if (s1->pCurrentPictureInfo != s2->pCurrentPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH264VclFrameInfoEXT const *s2) {
  // local, simple types
  if ((s1->naluSliceEntryCount != s2->naluSliceEntryCount))
    return false;

  // non-local members
  if (s1->pCurrentPictureInfo != s2->pCurrentPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH264VclFrameInfoEXT const *s2) {
  // local, simple types
  if ((s1->naluSliceEntryCount != s2->naluSliceEntryCount))
    return false;

  // non-local members
  if (s1->pStdReferenceFinalLists != s2->pStdReferenceFinalLists)
    return false;

  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->inputModeFlags != s2->inputModeFlags) ||
      (s1->outputModeFlags != s2->outputModeFlags) || (s1->ctbSizes != s2->ctbSizes) ||
      (s1->maxNumL0ReferenceForP != s2->maxNumL0ReferenceForP) ||
      (s1->maxNumL0ReferenceForB != s2->maxNumL0ReferenceForB) ||
      (s1->maxNumL1Reference != s2->maxNumL1Reference) ||
      (s1->maxNumSubLayers != s2->maxNumSubLayers) ||
      (s1->qualityLevelCount != s2->qualityLevelCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->inputImageDataAlignment, &s2->inputImageDataAlignment) ||
      !compare_VkExtensionProperties(&s1->stdExtensionVersion, &s2->stdExtensionVersion))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->inputModeFlags != s2->inputModeFlags) ||
      (s1->outputModeFlags != s2->outputModeFlags) || (s1->ctbSizes != s2->ctbSizes) ||
      (s1->transformBlockSizes != s2->transformBlockSizes) ||
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
      (s1->maxSubLayersCount != s2->maxSubLayersCount) ||
      (s1->minLog2MinLumaCodingBlockSizeMinus3 != s2->minLog2MinLumaCodingBlockSizeMinus3) ||
      (s1->maxLog2MinLumaCodingBlockSizeMinus3 != s2->maxLog2MinLumaCodingBlockSizeMinus3) ||
      (s1->minLog2MinLumaTransformBlockSizeMinus2 != s2->minLog2MinLumaTransformBlockSizeMinus2) ||
      (s1->maxLog2MinLumaTransformBlockSizeMinus2 != s2->maxLog2MinLumaTransformBlockSizeMinus2) ||
      (s1->minMaxTransformHierarchyDepthInter != s2->minMaxTransformHierarchyDepthInter) ||
      (s1->maxMaxTransformHierarchyDepthInter != s2->maxMaxTransformHierarchyDepthInter) ||
      (s1->minMaxTransformHierarchyDepthIntra != s2->minMaxTransformHierarchyDepthIntra) ||
      (s1->maxMaxTransformHierarchyDepthIntra != s2->maxMaxTransformHierarchyDepthIntra) ||
      (s1->maxDiffCuQpDeltaDepth != s2->maxDiffCuQpDeltaDepth) ||
      (s1->minMaxNumMergeCand != s2->minMaxNumMergeCand) ||
      (s1->maxMaxNumMergeCand != s2->maxMaxNumMergeCand))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtensionProperties(&s1->stdExtensionVersion, &s2->stdExtensionVersion))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->inputModeFlags != s2->inputModeFlags) ||
      (s1->outputModeFlags != s2->outputModeFlags) || (s1->ctbSizes != s2->ctbSizes) ||
      (s1->transformBlockSizes != s2->transformBlockSizes) ||
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
      (s1->maxSubLayersCount != s2->maxSubLayersCount) ||
      (s1->minLog2MinLumaCodingBlockSizeMinus3 != s2->minLog2MinLumaCodingBlockSizeMinus3) ||
      (s1->maxLog2MinLumaCodingBlockSizeMinus3 != s2->maxLog2MinLumaCodingBlockSizeMinus3) ||
      (s1->minLog2MinLumaTransformBlockSizeMinus2 != s2->minLog2MinLumaTransformBlockSizeMinus2) ||
      (s1->maxLog2MinLumaTransformBlockSizeMinus2 != s2->maxLog2MinLumaTransformBlockSizeMinus2) ||
      (s1->minMaxTransformHierarchyDepthInter != s2->minMaxTransformHierarchyDepthInter) ||
      (s1->maxMaxTransformHierarchyDepthInter != s2->maxMaxTransformHierarchyDepthInter) ||
      (s1->minMaxTransformHierarchyDepthIntra != s2->minMaxTransformHierarchyDepthIntra) ||
      (s1->maxMaxTransformHierarchyDepthIntra != s2->maxMaxTransformHierarchyDepthIntra) ||
      (s1->maxDiffCuQpDeltaDepth != s2->maxDiffCuQpDeltaDepth) ||
      (s1->minMaxNumMergeCand != s2->minMaxNumMergeCand) ||
      (s1->maxMaxNumMergeCand != s2->maxMaxNumMergeCand))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->ctbSizes != s2->ctbSizes) ||
      (s1->transformBlockSizes != s2->transformBlockSizes) ||
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
      (s1->maxSubLayersCount != s2->maxSubLayersCount) ||
      (s1->minLog2MinLumaCodingBlockSizeMinus3 != s2->minLog2MinLumaCodingBlockSizeMinus3) ||
      (s1->maxLog2MinLumaCodingBlockSizeMinus3 != s2->maxLog2MinLumaCodingBlockSizeMinus3) ||
      (s1->minLog2MinLumaTransformBlockSizeMinus2 != s2->minLog2MinLumaTransformBlockSizeMinus2) ||
      (s1->maxLog2MinLumaTransformBlockSizeMinus2 != s2->maxLog2MinLumaTransformBlockSizeMinus2) ||
      (s1->minMaxTransformHierarchyDepthInter != s2->minMaxTransformHierarchyDepthInter) ||
      (s1->maxMaxTransformHierarchyDepthInter != s2->maxMaxTransformHierarchyDepthInter) ||
      (s1->minMaxTransformHierarchyDepthIntra != s2->minMaxTransformHierarchyDepthIntra) ||
      (s1->maxMaxTransformHierarchyDepthIntra != s2->maxMaxTransformHierarchyDepthIntra) ||
      (s1->maxDiffCuQpDeltaDepth != s2->maxDiffCuQpDeltaDepth) ||
      (s1->minMaxNumMergeCand != s2->minMaxNumMergeCand) ||
      (s1->maxMaxNumMergeCand != s2->maxMaxNumMergeCand))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->maxLevelIdc != s2->maxLevelIdc) ||
      (s1->maxSliceSegmentCount != s2->maxSliceSegmentCount) || (s1->ctbSizes != s2->ctbSizes) ||
      (s1->transformBlockSizes != s2->transformBlockSizes) ||
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
      (s1->maxSubLayerCount != s2->maxSubLayerCount) ||
      (s1->expectDyadicTemporalSubLayerPattern != s2->expectDyadicTemporalSubLayerPattern) ||
      (s1->minQp != s2->minQp) || (s1->maxQp != s2->maxQp) ||
      (s1->prefersGopRemainingFrames != s2->prefersGopRemainingFrames) ||
      (s1->requiresGopRemainingFrames != s2->requiresGopRemainingFrames) ||
      (s1->stdSyntaxFlags != s2->stdSyntaxFlags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxTiles, &s2->maxTiles))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265CapabilitiesKHR(VkVideoEncodeH265CapabilitiesKHR const *s1,
                                              VkVideoEncodeH265CapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->maxLevelIdc != s2->maxLevelIdc) ||
      (s1->maxSliceSegmentCount != s2->maxSliceSegmentCount) || (s1->ctbSizes != s2->ctbSizes) ||
      (s1->transformBlockSizes != s2->transformBlockSizes) ||
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
      (s1->maxSubLayerCount != s2->maxSubLayerCount) ||
      (s1->expectDyadicTemporalSubLayerPattern != s2->expectDyadicTemporalSubLayerPattern) ||
      (s1->minQp != s2->minQp) || (s1->maxQp != s2->maxQp) ||
      (s1->prefersGopRemainingFrames != s2->prefersGopRemainingFrames) ||
      (s1->requiresGopRemainingFrames != s2->requiresGopRemainingFrames) ||
      (s1->stdSyntaxFlags != s2->stdSyntaxFlags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxTiles, &s2->maxTiles))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH265DpbSlotInfoEXT const *s2) {
  // local, simple types
  if ((s1->slotIndex != s2->slotIndex))
    return false;

  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH265DpbSlotInfoEXT const *s2) {
  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265DpbSlotInfoKHR(VkVideoEncodeH265DpbSlotInfoKHR const *s1,
                                             VkVideoEncodeH265DpbSlotInfoKHR const *s2) {
  // non-local members
  if (s1->pStdReferenceInfo != s2->pStdReferenceInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265EmitPictureParametersEXT(
    VkVideoEncodeH265EmitPictureParametersEXT const *s1,
    VkVideoEncodeH265EmitPictureParametersEXT const *s2) {
  // local, simple types
  if ((s1->vpsId != s2->vpsId) || (s1->spsId != s2->spsId) ||
      (s1->emitVpsEnable != s2->emitVpsEnable) || (s1->emitSpsEnable != s2->emitSpsEnable) ||
      (s1->ppsIdEntryCount != s2->ppsIdEntryCount))
    return false;

  // non-local members

  // ppsIdEntries - ppsIdEntryCount
  if (s1->ppsIdEntries != s2->ppsIdEntries &&
      (s1->ppsIdEntries == NULL || s2->ppsIdEntries == NULL ||
       memcmp(s1->ppsIdEntries, s2->ppsIdEntries, (s1->ppsIdEntryCount) * sizeof(uint8_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265EmitPictureParametersInfoEXT(
    VkVideoEncodeH265EmitPictureParametersInfoEXT const *s1,
    VkVideoEncodeH265EmitPictureParametersInfoEXT const *s2) {
  // local, simple types
  if ((s1->vpsId != s2->vpsId) || (s1->spsId != s2->spsId) ||
      (s1->emitVpsEnable != s2->emitVpsEnable) || (s1->emitSpsEnable != s2->emitSpsEnable) ||
      (s1->ppsIdEntryCount != s2->ppsIdEntryCount))
    return false;

  // non-local members

  // ppsIdEntries - ppsIdEntryCount
  if (s1->ppsIdEntries != s2->ppsIdEntries &&
      (s1->ppsIdEntries == NULL || s2->ppsIdEntries == NULL ||
       memcmp(s1->ppsIdEntries, s2->ppsIdEntries, (s1->ppsIdEntryCount) * sizeof(uint8_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265FrameSizeEXT(VkVideoEncodeH265FrameSizeEXT const *s1,
                                           VkVideoEncodeH265FrameSizeEXT const *s2) {
  // local, simple types
  if ((s1->frameISize != s2->frameISize) || (s1->framePSize != s2->framePSize) ||
      (s1->frameBSize != s2->frameBSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265FrameSizeKHR(VkVideoEncodeH265FrameSizeKHR const *s1,
                                           VkVideoEncodeH265FrameSizeKHR const *s2) {
  // local, simple types
  if ((s1->frameISize != s2->frameISize) || (s1->framePSize != s2->framePSize) ||
      (s1->frameBSize != s2->frameBSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265GopRemainingFrameInfoEXT(
    VkVideoEncodeH265GopRemainingFrameInfoEXT const *s1,
    VkVideoEncodeH265GopRemainingFrameInfoEXT const *s2) {
  // local, simple types
  if ((s1->useGopRemainingFrames != s2->useGopRemainingFrames) ||
      (s1->gopRemainingI != s2->gopRemainingI) || (s1->gopRemainingP != s2->gopRemainingP) ||
      (s1->gopRemainingB != s2->gopRemainingB))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265GopRemainingFrameInfoKHR(
    VkVideoEncodeH265GopRemainingFrameInfoKHR const *s1,
    VkVideoEncodeH265GopRemainingFrameInfoKHR const *s2) {
  // local, simple types
  if ((s1->useGopRemainingFrames != s2->useGopRemainingFrames) ||
      (s1->gopRemainingI != s2->gopRemainingI) || (s1->gopRemainingP != s2->gopRemainingP) ||
      (s1->gopRemainingB != s2->gopRemainingB))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265NaluSliceEXT(VkVideoEncodeH265NaluSliceEXT const *s1,
                                           VkVideoEncodeH265NaluSliceEXT const *s2) {
  // local, simple types
  if ((s1->ctbCount != s2->ctbCount))
    return false;

  // non-local members
  if (s1->pSliceHeaderStd != s2->pSliceHeaderStd)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265NaluSliceSegmentEXT(VkVideoEncodeH265NaluSliceSegmentEXT const *s1,
                                                  VkVideoEncodeH265NaluSliceSegmentEXT const *s2) {
  // local, simple types
  if ((s1->ctbCount != s2->ctbCount))
    return false;

  // non-local members
  if (s1->pSliceSegmentHeaderStd != s2->pSliceSegmentHeaderStd)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s1,
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s2) {
  // local, simple types
  if ((s1->ctbCount != s2->ctbCount))
    return false;

  // non-local members
  if (s1->pSliceSegmentHeaderStd != s2->pSliceSegmentHeaderStd)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s1,
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s2) {
  // local, simple types
  if ((s1->ctbCount != s2->ctbCount))
    return false;

  // non-local members
  if (s1->pStdReferenceFinalLists != s2->pStdReferenceFinalLists)
    return false;

  if (s1->pStdSliceSegmentHeader != s2->pStdSliceSegmentHeader)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s1,
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s2) {
  // local, simple types
  if ((s1->constantQp != s2->constantQp))
    return false;

  // non-local members
  if (s1->pStdSliceSegmentHeader != s2->pStdSliceSegmentHeader)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265NaluSliceSegmentInfoKHR(
    VkVideoEncodeH265NaluSliceSegmentInfoKHR const *s1,
    VkVideoEncodeH265NaluSliceSegmentInfoKHR const *s2) {
  // local, simple types
  if ((s1->constantQp != s2->constantQp))
    return false;

  // non-local members
  if (s1->pStdSliceSegmentHeader != s2->pStdSliceSegmentHeader)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265PictureInfoEXT(VkVideoEncodeH265PictureInfoEXT const *s1,
                                             VkVideoEncodeH265PictureInfoEXT const *s2) {
  // local, simple types
  if ((s1->naluSliceSegmentEntryCount != s2->naluSliceSegmentEntryCount))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265PictureInfoKHR(VkVideoEncodeH265PictureInfoKHR const *s1,
                                             VkVideoEncodeH265PictureInfoKHR const *s2) {
  // local, simple types
  if ((s1->naluSliceSegmentEntryCount != s2->naluSliceSegmentEntryCount))
    return false;

  // non-local members
  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265ProfileEXT(VkVideoEncodeH265ProfileEXT const *s1,
                                         VkVideoEncodeH265ProfileEXT const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265ProfileInfoEXT(VkVideoEncodeH265ProfileInfoEXT const *s1,
                                             VkVideoEncodeH265ProfileInfoEXT const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265ProfileInfoKHR(VkVideoEncodeH265ProfileInfoKHR const *s1,
                                             VkVideoEncodeH265ProfileInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdProfileIdc != s2->stdProfileIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265QpEXT(VkVideoEncodeH265QpEXT const *s1,
                                    VkVideoEncodeH265QpEXT const *s2) {
  // local, simple types
  if ((s1->qpI != s2->qpI) || (s1->qpP != s2->qpP) || (s1->qpB != s2->qpB))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265QpKHR(VkVideoEncodeH265QpKHR const *s1,
                                    VkVideoEncodeH265QpKHR const *s2) {
  // local, simple types
  if ((s1->qpI != s2->qpI) || (s1->qpP != s2->qpP) || (s1->qpB != s2->qpB))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265QualityLevelPropertiesEXT(
    VkVideoEncodeH265QualityLevelPropertiesEXT const *s1,
    VkVideoEncodeH265QualityLevelPropertiesEXT const *s2) {
  // local, simple types
  if ((s1->preferredRateControlFlags != s2->preferredRateControlFlags) ||
      (s1->preferredGopFrameCount != s2->preferredGopFrameCount) ||
      (s1->preferredIdrPeriod != s2->preferredIdrPeriod) ||
      (s1->preferredConsecutiveBFrameCount != s2->preferredConsecutiveBFrameCount) ||
      (s1->preferredSubLayerCount != s2->preferredSubLayerCount) ||
      (s1->preferredMaxL0ReferenceCount != s2->preferredMaxL0ReferenceCount) ||
      (s1->preferredMaxL1ReferenceCount != s2->preferredMaxL1ReferenceCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH265QpEXT(&s1->preferredConstantQp, &s2->preferredConstantQp))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265QualityLevelPropertiesKHR(
    VkVideoEncodeH265QualityLevelPropertiesKHR const *s1,
    VkVideoEncodeH265QualityLevelPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->preferredRateControlFlags != s2->preferredRateControlFlags) ||
      (s1->preferredGopFrameCount != s2->preferredGopFrameCount) ||
      (s1->preferredIdrPeriod != s2->preferredIdrPeriod) ||
      (s1->preferredConsecutiveBFrameCount != s2->preferredConsecutiveBFrameCount) ||
      (s1->preferredSubLayerCount != s2->preferredSubLayerCount) ||
      (s1->preferredMaxL0ReferenceCount != s2->preferredMaxL0ReferenceCount) ||
      (s1->preferredMaxL1ReferenceCount != s2->preferredMaxL1ReferenceCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH265QpKHR(&s1->preferredConstantQp, &s2->preferredConstantQp))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265QuantizationMapCapabilitiesKHR(
    VkVideoEncodeH265QuantizationMapCapabilitiesKHR const *s1,
    VkVideoEncodeH265QuantizationMapCapabilitiesKHR const *s2) {
  // local, simple types
  if ((s1->minQpDelta != s2->minQpDelta) || (s1->maxQpDelta != s2->maxQpDelta))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 202 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2) {
  // local, simple types
  if ((s1->gopFrameCount != s2->gopFrameCount) || (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->rateControlStructure != s2->rateControlStructure))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2) {
  // local, simple types
  if ((s1->gopFrameCount != s2->gopFrameCount) || (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->rateControlStructure != s2->rateControlStructure) ||
      (s1->subLayerCount != s2->subLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2) {
  // local, simple types
  if ((s1->gopFrameCount != s2->gopFrameCount) || (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->rateControlStructure != s2->rateControlStructure) ||
      (s1->subLayerCount != s2->subLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2) {
  // local, simple types
  if ((s1->gopFrameCount != s2->gopFrameCount) || (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->rateControlStructure != s2->rateControlStructure) ||
      (s1->subLayerCount != s2->subLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->gopFrameCount != s2->gopFrameCount) ||
      (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->subLayerCount != s2->subLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265RateControlInfoKHR(VkVideoEncodeH265RateControlInfoKHR const *s1,
                                                 VkVideoEncodeH265RateControlInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->gopFrameCount != s2->gopFrameCount) ||
      (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->subLayerCount != s2->subLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH265RateControlLayerInfoEXT const *s2) {
  // local, simple types
  if ((s1->temporalId != s2->temporalId) || (s1->useInitialRcQp != s2->useInitialRcQp) ||
      (s1->useMinQp != s2->useMinQp) || (s1->useMaxQp != s2->useMaxQp) ||
      (s1->useMaxFrameSize != s2->useMaxFrameSize))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH265QpEXT(&s1->initialRcQp, &s2->initialRcQp) ||
      !compare_VkVideoEncodeH265QpEXT(&s1->minQp, &s2->minQp) ||
      !compare_VkVideoEncodeH265QpEXT(&s1->maxQp, &s2->maxQp) ||
      !compare_VkVideoEncodeH265FrameSizeEXT(&s1->maxFrameSize, &s2->maxFrameSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH265RateControlLayerInfoEXT const *s2) {
  // local, simple types
  if ((s1->temporalId != s2->temporalId) || (s1->useInitialRcQp != s2->useInitialRcQp) ||
      (s1->useMinQp != s2->useMinQp) || (s1->useMaxQp != s2->useMaxQp) ||
      (s1->useMaxFrameSize != s2->useMaxFrameSize))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH265QpEXT(&s1->initialRcQp, &s2->initialRcQp) ||
      !compare_VkVideoEncodeH265QpEXT(&s1->minQp, &s2->minQp) ||
      !compare_VkVideoEncodeH265QpEXT(&s1->maxQp, &s2->maxQp) ||
      !compare_VkVideoEncodeH265FrameSizeEXT(&s1->maxFrameSize, &s2->maxFrameSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH265RateControlLayerInfoEXT const *s2) {
  // local, simple types
  if ((s1->useMinQp != s2->useMinQp) || (s1->useMaxQp != s2->useMaxQp) ||
      (s1->useMaxFrameSize != s2->useMaxFrameSize))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH265QpEXT(&s1->minQp, &s2->minQp) ||
      !compare_VkVideoEncodeH265QpEXT(&s1->maxQp, &s2->maxQp) ||
      !compare_VkVideoEncodeH265FrameSizeEXT(&s1->maxFrameSize, &s2->maxFrameSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265RateControlLayerInfoKHR(
    VkVideoEncodeH265RateControlLayerInfoKHR const *s1,
    VkVideoEncodeH265RateControlLayerInfoKHR const *s2) {
  // local, simple types
  if ((s1->useMinQp != s2->useMinQp) || (s1->useMaxQp != s2->useMaxQp) ||
      (s1->useMaxFrameSize != s2->useMaxFrameSize))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoEncodeH265QpKHR(&s1->minQp, &s2->minQp) ||
      !compare_VkVideoEncodeH265QpKHR(&s1->maxQp, &s2->maxQp) ||
      !compare_VkVideoEncodeH265FrameSizeKHR(&s1->maxFrameSize, &s2->maxFrameSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265ReferenceListsEXT(VkVideoEncodeH265ReferenceListsEXT const *s1,
                                                VkVideoEncodeH265ReferenceListsEXT const *s2) {
  // local, simple types
  if ((s1->referenceList0EntryCount != s2->referenceList0EntryCount) ||
      (s1->referenceList1EntryCount != s2->referenceList1EntryCount))
    return false;

  // non-local members
  if (s1->pReferenceModifications != s2->pReferenceModifications)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265ReferenceListsInfoEXT(
    VkVideoEncodeH265ReferenceListsInfoEXT const *s1,
    VkVideoEncodeH265ReferenceListsInfoEXT const *s2) {
  // local, simple types
  if ((s1->referenceList0EntryCount != s2->referenceList0EntryCount) ||
      (s1->referenceList1EntryCount != s2->referenceList1EntryCount))
    return false;

  // non-local members
  if (s1->pReferenceModifications != s2->pReferenceModifications)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionCreateInfoEXT(
    VkVideoEncodeH265SessionCreateInfoEXT const *s1,
    VkVideoEncodeH265SessionCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionCreateInfoEXT(
    VkVideoEncodeH265SessionCreateInfoEXT const *s1,
    VkVideoEncodeH265SessionCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->useMaxLevelIdc != s2->useMaxLevelIdc) || (s1->maxLevelIdc != s2->maxLevelIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265SessionCreateInfoKHR(
    VkVideoEncodeH265SessionCreateInfoKHR const *s1,
    VkVideoEncodeH265SessionCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->useMaxLevelIdc != s2->useMaxLevelIdc) || (s1->maxLevelIdc != s2->maxLevelIdc))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s2) {
  // local, simple types
  if ((s1->vpsStdCount != s2->vpsStdCount) || (s1->spsStdCount != s2->spsStdCount) ||
      (s1->ppsStdCount != s2->ppsStdCount))
    return false;

  // non-local members

  // pVpsStd - vpsStdCount
  if (s1->pVpsStd != s2->pVpsStd &&
      (s1->pVpsStd == NULL || s2->pVpsStd == NULL ||
       memcmp(s1->pVpsStd, s2->pVpsStd,
              (s1->vpsStdCount) * sizeof(StdVideoH265VideoParameterSet)) != 0))
    return false;

  // pSpsStd - spsStdCount
  if (s1->pSpsStd != s2->pSpsStd &&
      (s1->pSpsStd == NULL || s2->pSpsStd == NULL ||
       memcmp(s1->pSpsStd, s2->pSpsStd,
              (s1->spsStdCount) * sizeof(StdVideoH265SequenceParameterSet)) != 0))
    return false;

  // pPpsStd - ppsStdCount
  if (s1->pPpsStd != s2->pPpsStd &&
      (s1->pPpsStd == NULL || s2->pPpsStd == NULL ||
       memcmp(s1->pPpsStd, s2->pPpsStd,
              (s1->ppsStdCount) * sizeof(StdVideoH265PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s2) {
  // local, simple types
  if ((s1->stdVPSCount != s2->stdVPSCount) || (s1->stdSPSCount != s2->stdSPSCount) ||
      (s1->stdPPSCount != s2->stdPPSCount))
    return false;

  // non-local members

  // pStdVPSs - stdVPSCount
  if (s1->pStdVPSs != s2->pStdVPSs &&
      (s1->pStdVPSs == NULL || s2->pStdVPSs == NULL ||
       memcmp(s1->pStdVPSs, s2->pStdVPSs,
              (s1->stdVPSCount) * sizeof(StdVideoH265VideoParameterSet)) != 0))
    return false;

  // pStdSPSs - stdSPSCount
  if (s1->pStdSPSs != s2->pStdSPSs &&
      (s1->pStdSPSs == NULL || s2->pStdSPSs == NULL ||
       memcmp(s1->pStdSPSs, s2->pStdSPSs,
              (s1->stdSPSCount) * sizeof(StdVideoH265SequenceParameterSet)) != 0))
    return false;

  // pStdPPSs - stdPPSCount
  if (s1->pStdPPSs != s2->pStdPPSs &&
      (s1->pStdPPSs == NULL || s2->pStdPPSs == NULL ||
       memcmp(s1->pStdPPSs, s2->pStdPPSs,
              (s1->stdPPSCount) * sizeof(StdVideoH265PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersAddInfoKHR(
    VkVideoEncodeH265SessionParametersAddInfoKHR const *s1,
    VkVideoEncodeH265SessionParametersAddInfoKHR const *s2) {
  // local, simple types
  if ((s1->stdVPSCount != s2->stdVPSCount) || (s1->stdSPSCount != s2->stdSPSCount) ||
      (s1->stdPPSCount != s2->stdPPSCount))
    return false;

  // non-local members

  // pStdVPSs - stdVPSCount
  if (s1->pStdVPSs != s2->pStdVPSs &&
      (s1->pStdVPSs == NULL || s2->pStdVPSs == NULL ||
       memcmp(s1->pStdVPSs, s2->pStdVPSs,
              (s1->stdVPSCount) * sizeof(StdVideoH265VideoParameterSet)) != 0))
    return false;

  // pStdSPSs - stdSPSCount
  if (s1->pStdSPSs != s2->pStdSPSs &&
      (s1->pStdSPSs == NULL || s2->pStdSPSs == NULL ||
       memcmp(s1->pStdSPSs, s2->pStdSPSs,
              (s1->stdSPSCount) * sizeof(StdVideoH265SequenceParameterSet)) != 0))
    return false;

  // pStdPPSs - stdPPSCount
  if (s1->pStdPPSs != s2->pStdPPSs &&
      (s1->pStdPPSs == NULL || s2->pStdPPSs == NULL ||
       memcmp(s1->pStdPPSs, s2->pStdPPSs,
              (s1->stdPPSCount) * sizeof(StdVideoH265PictureParameterSet)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->maxVpsStdCount != s2->maxVpsStdCount) || (s1->maxSpsStdCount != s2->maxSpsStdCount) ||
      (s1->maxPpsStdCount != s2->maxPpsStdCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s2) {
  // local, simple types
  if ((s1->maxStdVPSCount != s2->maxStdVPSCount) || (s1->maxStdSPSCount != s2->maxStdSPSCount) ||
      (s1->maxStdPPSCount != s2->maxStdPPSCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersCreateInfoKHR(
    VkVideoEncodeH265SessionParametersCreateInfoKHR const *s1,
    VkVideoEncodeH265SessionParametersCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->maxStdVPSCount != s2->maxStdVPSCount) || (s1->maxStdSPSCount != s2->maxStdSPSCount) ||
      (s1->maxStdPPSCount != s2->maxStdPPSCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersFeedbackInfoEXT(
    VkVideoEncodeH265SessionParametersFeedbackInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersFeedbackInfoEXT const *s2) {
  // local, simple types
  if ((s1->hasStdVPSOverrides != s2->hasStdVPSOverrides) ||
      (s1->hasStdSPSOverrides != s2->hasStdSPSOverrides) ||
      (s1->hasStdPPSOverrides != s2->hasStdPPSOverrides))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersFeedbackInfoKHR(
    VkVideoEncodeH265SessionParametersFeedbackInfoKHR const *s1,
    VkVideoEncodeH265SessionParametersFeedbackInfoKHR const *s2) {
  // local, simple types
  if ((s1->hasStdVPSOverrides != s2->hasStdVPSOverrides) ||
      (s1->hasStdSPSOverrides != s2->hasStdSPSOverrides) ||
      (s1->hasStdPPSOverrides != s2->hasStdPPSOverrides))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265SessionParametersGetInfoEXT(
    VkVideoEncodeH265SessionParametersGetInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersGetInfoEXT const *s2) {
  // local, simple types
  if ((s1->writeStdVPS != s2->writeStdVPS) || (s1->writeStdSPS != s2->writeStdSPS) ||
      (s1->writeStdPPS != s2->writeStdPPS) || (s1->stdVPSId != s2->stdVPSId) ||
      (s1->stdSPSId != s2->stdSPSId) || (s1->stdPPSId != s2->stdPPSId))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersGetInfoKHR(
    VkVideoEncodeH265SessionParametersGetInfoKHR const *s1,
    VkVideoEncodeH265SessionParametersGetInfoKHR const *s2) {
  // local, simple types
  if ((s1->writeStdVPS != s2->writeStdVPS) || (s1->writeStdSPS != s2->writeStdSPS) ||
      (s1->writeStdPPS != s2->writeStdPPS) || (s1->stdVPSId != s2->stdVPSId) ||
      (s1->stdSPSId != s2->stdSPSId) || (s1->stdPPSId != s2->stdPPSId))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH265VclFrameInfoEXT const *s2) {
  // local, simple types
  if ((s1->naluSliceEntryCount != s2->naluSliceEntryCount))
    return false;

  // non-local members
  if (s1->pCurrentPictureInfo != s2->pCurrentPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH265VclFrameInfoEXT const *s2) {
  // local, simple types
  if ((s1->naluSliceSegmentEntryCount != s2->naluSliceSegmentEntryCount))
    return false;

  // non-local members
  if (s1->pCurrentPictureInfo != s2->pCurrentPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH265VclFrameInfoEXT const *s2) {
  // local, simple types
  if ((s1->naluSliceSegmentEntryCount != s2->naluSliceSegmentEntryCount))
    return false;

  // non-local members
  if (s1->pCurrentPictureInfo != s2->pCurrentPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&            \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH265VclFrameInfoEXT const *s2) {
  // local, simple types
  if ((s1->naluSliceSegmentEntryCount != s2->naluSliceSegmentEntryCount))
    return false;

  // non-local members
  if (s1->pStdReferenceFinalLists != s2->pStdReferenceFinalLists)
    return false;

  if (s1->pStdPictureInfo != s2->pStdPictureInfo)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->qualityLevel != s2->qualityLevel) ||
      (s1->dstBitstreamBuffer != s2->dstBitstreamBuffer) ||
      (s1->dstBitstreamBufferOffset != s2->dstBitstreamBufferOffset) ||
      (s1->dstBitstreamBufferMaxRange != s2->dstBitstreamBufferMaxRange) ||
      (s1->referenceSlotCount != s2->referenceSlotCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->codedExtent, &s2->codedExtent) ||
      !compare_VkVideoPictureResourceKHR(&s1->srcPictureResource, &s2->srcPictureResource))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 210 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->qualityLevel != s2->qualityLevel) ||
      (s1->dstBitstreamBuffer != s2->dstBitstreamBuffer) ||
      (s1->dstBitstreamBufferOffset != s2->dstBitstreamBufferOffset) ||
      (s1->dstBitstreamBufferMaxRange != s2->dstBitstreamBufferMaxRange) ||
      (s1->referenceSlotCount != s2->referenceSlotCount) ||
      (s1->precedingExternallyEncodedBytes != s2->precedingExternallyEncodedBytes))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->codedExtent, &s2->codedExtent) ||
      !compare_VkVideoPictureResourceKHR(&s1->srcPictureResource, &s2->srcPictureResource))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 224 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->qualityLevel != s2->qualityLevel) ||
      (s1->dstBitstreamBuffer != s2->dstBitstreamBuffer) ||
      (s1->dstBitstreamBufferOffset != s2->dstBitstreamBufferOffset) ||
      (s1->dstBitstreamBufferMaxRange != s2->dstBitstreamBufferMaxRange) ||
      (s1->referenceSlotCount != s2->referenceSlotCount) ||
      (s1->precedingExternallyEncodedBytes != s2->precedingExternallyEncodedBytes))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoPictureResourceKHR(&s1->srcPictureResource, &s2->srcPictureResource))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->qualityLevel != s2->qualityLevel) ||
      (s1->dstBitstreamBuffer != s2->dstBitstreamBuffer) ||
      (s1->dstBitstreamBufferOffset != s2->dstBitstreamBufferOffset) ||
      (s1->dstBitstreamBufferMaxRange != s2->dstBitstreamBufferMaxRange) ||
      (s1->referenceSlotCount != s2->referenceSlotCount) ||
      (s1->precedingExternallyEncodedBytes != s2->precedingExternallyEncodedBytes))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoPictureResourceInfoKHR(&s1->srcPictureResource, &s2->srcPictureResource))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->qualityLevel != s2->qualityLevel) ||
      (s1->dstBuffer != s2->dstBuffer) || (s1->dstBufferOffset != s2->dstBufferOffset) ||
      (s1->dstBufferRange != s2->dstBufferRange) ||
      (s1->referenceSlotCount != s2->referenceSlotCount) ||
      (s1->precedingExternallyEncodedBytes != s2->precedingExternallyEncodedBytes))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoPictureResourceInfoKHR(&s1->srcPictureResource, &s2->srcPictureResource))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->dstBuffer != s2->dstBuffer) ||
      (s1->dstBufferOffset != s2->dstBufferOffset) || (s1->dstBufferRange != s2->dstBufferRange) ||
      (s1->referenceSlotCount != s2->referenceSlotCount) ||
      (s1->precedingExternallyEncodedBytes != s2->precedingExternallyEncodedBytes))
    return false;

  // local, Vulkan struct types
  if (!compare_VkVideoPictureResourceInfoKHR(&s1->srcPictureResource, &s2->srcPictureResource))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeQualityLevelInfoKHR(VkVideoEncodeQualityLevelInfoKHR const *s1,
                                              VkVideoEncodeQualityLevelInfoKHR const *s2) {
  // local, simple types
  if ((s1->qualityLevel != s2->qualityLevel))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeQualityLevelPropertiesKHR(
    VkVideoEncodeQualityLevelPropertiesKHR const *s1,
    VkVideoEncodeQualityLevelPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->preferredRateControlMode != s2->preferredRateControlMode) ||
      (s1->preferredRateControlLayerCount != s2->preferredRateControlLayerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map
bool compare_VkVideoEncodeQuantizationMapCapabilitiesKHR(
    VkVideoEncodeQuantizationMapCapabilitiesKHR const *s1,
    VkVideoEncodeQuantizationMapCapabilitiesKHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxQuantizationMapExtent, &s2->maxQuantizationMapExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map
bool compare_VkVideoEncodeQuantizationMapInfoKHR(VkVideoEncodeQuantizationMapInfoKHR const *s1,
                                                 VkVideoEncodeQuantizationMapInfoKHR const *s2) {
  // local, simple types
  if ((s1->quantizationMap != s2->quantizationMap))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->quantizationMapExtent, &s2->quantizationMapExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map
bool compare_VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR(
    VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR const *s1,
    VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->quantizationMapTexelSize, &s2->quantizationMapTexelSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *s1,
                                             VkVideoEncodeRateControlInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->rateControlMode != s2->rateControlMode) ||
      (s1->averageBitrate != s2->averageBitrate) ||
      (s1->peakToAverageBitrateRatio != s2->peakToAverageBitrateRatio) ||
      (s1->frameRateNumerator != s2->frameRateNumerator) ||
      (s1->frameRateDenominator != s2->frameRateDenominator) ||
      (s1->virtualBufferSizeInMs != s2->virtualBufferSizeInMs))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *s1,
                                             VkVideoEncodeRateControlInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->rateControlMode != s2->rateControlMode) ||
      (s1->layerCount != s2->layerCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *s1,
                                             VkVideoEncodeRateControlInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->rateControlMode != s2->rateControlMode) ||
      (s1->layerCount != s2->layerCount))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *s1,
                                             VkVideoEncodeRateControlInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->rateControlMode != s2->rateControlMode) ||
      (s1->layerCount != s2->layerCount) ||
      (s1->virtualBufferSizeInMs != s2->virtualBufferSizeInMs) ||
      (s1->initialVirtualBufferSizeInMs != s2->initialVirtualBufferSizeInMs))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeRateControlLayerInfoKHR(VkVideoEncodeRateControlLayerInfoKHR const *s1,
                                                  VkVideoEncodeRateControlLayerInfoKHR const *s2) {
  // local, simple types
  if ((s1->averageBitrate != s2->averageBitrate) || (s1->maxBitrate != s2->maxBitrate) ||
      (s1->frameRateNumerator != s2->frameRateNumerator) ||
      (s1->frameRateDenominator != s2->frameRateDenominator) ||
      (s1->virtualBufferSizeInMs != s2->virtualBufferSizeInMs) ||
      (s1->initialVirtualBufferSizeInMs != s2->initialVirtualBufferSizeInMs))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&           \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoEncodeRateControlLayerInfoKHR(VkVideoEncodeRateControlLayerInfoKHR const *s1,
                                                  VkVideoEncodeRateControlLayerInfoKHR const *s2) {
  // local, simple types
  if ((s1->averageBitrate != s2->averageBitrate) || (s1->maxBitrate != s2->maxBitrate) ||
      (s1->frameRateNumerator != s2->frameRateNumerator) ||
      (s1->frameRateDenominator != s2->frameRateDenominator) ||
      (s1->virtualBufferSizeInMs != s2->virtualBufferSizeInMs) ||
      (s1->initialVirtualBufferSizeInMs != s2->initialVirtualBufferSizeInMs))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeRateControlLayerInfoKHR(VkVideoEncodeRateControlLayerInfoKHR const *s1,
                                                  VkVideoEncodeRateControlLayerInfoKHR const *s2) {
  // local, simple types
  if ((s1->averageBitrate != s2->averageBitrate) || (s1->maxBitrate != s2->maxBitrate) ||
      (s1->frameRateNumerator != s2->frameRateNumerator) ||
      (s1->frameRateDenominator != s2->frameRateDenominator))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeSessionParametersFeedbackInfoKHR(
    VkVideoEncodeSessionParametersFeedbackInfoKHR const *s1,
    VkVideoEncodeSessionParametersFeedbackInfoKHR const *s2) {
  // local, simple types
  if ((s1->hasOverrides != s2->hasOverrides))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeSessionParametersGetInfoKHR(
    VkVideoEncodeSessionParametersGetInfoKHR const *s1,
    VkVideoEncodeSessionParametersGetInfoKHR const *s2) {
  // local, simple types
  if ((s1->videoSessionParameters != s2->videoSessionParameters))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEncodeUsageInfoKHR(VkVideoEncodeUsageInfoKHR const *s1,
                                       VkVideoEncodeUsageInfoKHR const *s2) {
  // local, simple types
  if ((s1->videoUsageHints != s2->videoUsageHints) ||
      (s1->videoContentHints != s2->videoContentHints) || (s1->tuningMode != s2->tuningMode))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoEndCodingInfoKHR(VkVideoEndCodingInfoKHR const *s1,
                                     VkVideoEndCodingInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_av1
bool compare_VkVideoFormatAV1QuantizationMapPropertiesKHR(
    VkVideoFormatAV1QuantizationMapPropertiesKHR const *s1,
    VkVideoFormatAV1QuantizationMapPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->compatibleSuperblockSizes != s2->compatibleSuperblockSizes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h265
bool compare_VkVideoFormatH265QuantizationMapPropertiesKHR(
    VkVideoFormatH265QuantizationMapPropertiesKHR const *s1,
    VkVideoFormatH265QuantizationMapPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->compatibleCtbSizes != s2->compatibleCtbSizes))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *s1,
                                        VkVideoFormatPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->format != s2->format))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *s1,
                                        VkVideoFormatPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->format != s2->format) || (s1->imageCreateFlags != s2->imageCreateFlags) ||
      (s1->imageType != s2->imageType) || (s1->imageTiling != s2->imageTiling) ||
      (s1->imageUsageFlags != s2->imageUsageFlags))
    return false;

  // local, Vulkan struct types
  if (!compare_VkComponentMapping(&s1->componentMapping, &s2->componentMapping))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map
bool compare_VkVideoFormatQuantizationMapPropertiesKHR(
    VkVideoFormatQuantizationMapPropertiesKHR const *s1,
    VkVideoFormatQuantizationMapPropertiesKHR const *s2) {
  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->quantizationMapTexelSize, &s2->quantizationMapTexelSize))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoGetMemoryPropertiesKHR(VkVideoGetMemoryPropertiesKHR const *s1,
                                           VkVideoGetMemoryPropertiesKHR const *s2) {
  // local, simple types
  if ((s1->memoryBindIndex != s2->memoryBindIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 274 && VK_KHR_video_maintenance1
bool compare_VkVideoInlineQueryInfoKHR(VkVideoInlineQueryInfoKHR const *s1,
                                       VkVideoInlineQueryInfoKHR const *s2) {
  // local, simple types
  if ((s1->queryPool != s2->queryPool) || (s1->firstQuery != s2->firstQuery) ||
      (s1->queryCount != s2->queryCount))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoPictureResourceInfoKHR(VkVideoPictureResourceInfoKHR const *s1,
                                           VkVideoPictureResourceInfoKHR const *s2) {
  // local, simple types
  if ((s1->baseArrayLayer != s2->baseArrayLayer) || (s1->imageViewBinding != s2->imageViewBinding))
    return false;

  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->codedOffset, &s2->codedOffset) ||
      !compare_VkExtent2D(&s1->codedExtent, &s2->codedExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoPictureResourceKHR(VkVideoPictureResourceKHR const *s1,
                                       VkVideoPictureResourceKHR const *s2) {
  // local, simple types
  if ((s1->baseArrayLayer != s2->baseArrayLayer) || (s1->imageViewBinding != s2->imageViewBinding))
    return false;

  // local, Vulkan struct types
  if (!compare_VkOffset2D(&s1->codedOffset, &s2->codedOffset) ||
      !compare_VkExtent2D(&s1->codedExtent, &s2->codedExtent))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoProfileInfoKHR(VkVideoProfileInfoKHR const *s1,
                                   VkVideoProfileInfoKHR const *s2) {
  // local, simple types
  if ((s1->videoCodecOperation != s2->videoCodecOperation) ||
      (s1->chromaSubsampling != s2->chromaSubsampling) || (s1->lumaBitDepth != s2->lumaBitDepth) ||
      (s1->chromaBitDepth != s2->chromaBitDepth))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoProfileKHR(VkVideoProfileKHR const *s1, VkVideoProfileKHR const *s2) {
  // local, simple types
  if ((s1->videoCodecOperation != s2->videoCodecOperation) ||
      (s1->chromaSubsampling != s2->chromaSubsampling) || (s1->lumaBitDepth != s2->lumaBitDepth) ||
      (s1->chromaBitDepth != s2->chromaBitDepth))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoProfileListInfoKHR(VkVideoProfileListInfoKHR const *s1,
                                       VkVideoProfileListInfoKHR const *s2) {
  // local, simple types
  if ((s1->profileCount != s2->profileCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoProfilesKHR(VkVideoProfilesKHR const *s1, VkVideoProfilesKHR const *s2) {
  // local, simple types
  if ((s1->profileCount != s2->profileCount))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoQueueFamilyProperties2KHR(VkVideoQueueFamilyProperties2KHR const *s1,
                                              VkVideoQueueFamilyProperties2KHR const *s2) {
  // local, simple types
  if ((s1->videoCodecOperations != s2->videoCodecOperations))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 229 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoReferenceSlotInfoKHR(VkVideoReferenceSlotInfoKHR const *s1,
                                         VkVideoReferenceSlotInfoKHR const *s2) {
  // local, simple types
  if ((s1->slotIndex != s2->slotIndex))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoReferenceSlotInfoKHR(VkVideoReferenceSlotInfoKHR const *s1,
                                         VkVideoReferenceSlotInfoKHR const *s2) {
  // local, simple types
  if ((s1->slotIndex != s2->slotIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoReferenceSlotKHR(VkVideoReferenceSlotKHR const *s1,
                                     VkVideoReferenceSlotKHR const *s2) {
  // local, simple types
  if ((s1->slotIndex != s2->slotIndex))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *s1,
                                         VkVideoSessionCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->queueFamilyIndex != s2->queueFamilyIndex) || (s1->flags != s2->flags) ||
      (s1->pictureFormat != s2->pictureFormat) ||
      (s1->referencePicturesFormat != s2->referencePicturesFormat) ||
      (s1->maxReferencePicturesSlotsCount != s2->maxReferencePicturesSlotsCount) ||
      (s1->maxReferencePicturesActiveCount != s2->maxReferencePicturesActiveCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxCodedExtent, &s2->maxCodedExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *s1,
                                         VkVideoSessionCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->queueFamilyIndex != s2->queueFamilyIndex) || (s1->flags != s2->flags) ||
      (s1->pictureFormat != s2->pictureFormat) ||
      (s1->referencePicturesFormat != s2->referencePicturesFormat) ||
      (s1->maxReferencePicturesSlotsCount != s2->maxReferencePicturesSlotsCount) ||
      (s1->maxReferencePicturesActiveCount != s2->maxReferencePicturesActiveCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxCodedExtent, &s2->maxCodedExtent))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *s1,
                                         VkVideoSessionCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->queueFamilyIndex != s2->queueFamilyIndex) || (s1->flags != s2->flags) ||
      (s1->pictureFormat != s2->pictureFormat) ||
      (s1->referencePicturesFormat != s2->referencePicturesFormat) ||
      (s1->maxReferencePicturesSlotsCount != s2->maxReferencePicturesSlotsCount) ||
      (s1->maxReferencePicturesActiveCount != s2->maxReferencePicturesActiveCount))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxCodedExtent, &s2->maxCodedExtent))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *s1,
                                         VkVideoSessionCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->queueFamilyIndex != s2->queueFamilyIndex) || (s1->flags != s2->flags) ||
      (s1->pictureFormat != s2->pictureFormat) ||
      (s1->referencePictureFormat != s2->referencePictureFormat) ||
      (s1->maxDpbSlots != s2->maxDpbSlots) ||
      (s1->maxActiveReferencePictures != s2->maxActiveReferencePictures))
    return false;

  // local, Vulkan struct types
  if (!compare_VkExtent2D(&s1->maxCodedExtent, &s2->maxCodedExtent))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoSessionMemoryRequirementsKHR(VkVideoSessionMemoryRequirementsKHR const *s1,
                                                 VkVideoSessionMemoryRequirementsKHR const *s2) {
  // local, simple types
  if ((s1->memoryBindIndex != s2->memoryBindIndex))
    return false;

  // local, Vulkan struct types
  if (!compare_VkMemoryRequirements(&s1->memoryRequirements, &s2->memoryRequirements))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                  \
    VK_ENABLE_BETA_EXTENSIONS
bool compare_VkVideoSessionParametersCreateInfoKHR(
    VkVideoSessionParametersCreateInfoKHR const *s1,
    VkVideoSessionParametersCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->videoSessionParametersTemplate != s2->videoSessionParametersTemplate) ||
      (s1->videoSession != s2->videoSession))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoSessionParametersCreateInfoKHR(
    VkVideoSessionParametersCreateInfoKHR const *s1,
    VkVideoSessionParametersCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) ||
      (s1->videoSessionParametersTemplate != s2->videoSessionParametersTemplate) ||
      (s1->videoSession != s2->videoSession))
    return false;

  return true;
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkVideoSessionParametersUpdateInfoKHR(
    VkVideoSessionParametersUpdateInfoKHR const *s1,
    VkVideoSessionParametersUpdateInfoKHR const *s2) {
  // local, simple types
  if ((s1->updateSequenceCount != s2->updateSequenceCount))
    return false;

  return true;
}
#endif

bool compare_VkViewport(VkViewport const *s1, VkViewport const *s2) {
  // local, simple types
  if ((s1->x != s2->x) || (s1->y != s2->y) || (s1->width != s2->width) ||
      (s1->height != s2->height) || (s1->minDepth != s2->minDepth) ||
      (s1->maxDepth != s2->maxDepth))
    return false;

  return true;
}

#if VK_NV_viewport_swizzle
bool compare_VkViewportSwizzleNV(VkViewportSwizzleNV const *s1, VkViewportSwizzleNV const *s2) {
  // local, simple types
  if ((s1->x != s2->x) || (s1->y != s2->y) || (s1->z != s2->z) || (s1->w != s2->w))
    return false;

  return true;
}
#endif

#if VK_NV_clip_space_w_scaling
bool compare_VkViewportWScalingNV(VkViewportWScalingNV const *s1, VkViewportWScalingNV const *s2) {
  // local, simple types
  if ((s1->xcoeff != s2->xcoeff) || (s1->ycoeff != s2->ycoeff))
    return false;

  return true;
}
#endif

#if VK_KHR_wayland_surface
bool compare_VkWaylandSurfaceCreateInfoKHR(VkWaylandSurfaceCreateInfoKHR const *s1,
                                           VkWaylandSurfaceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags))
    return false;

  // non-local members
  if (s1->display != s2->display)
    return false;

  if (s1->surface != s2->surface)
    return false;

  return true;
}
#endif

#if VK_KHR_win32_keyed_mutex
bool compare_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *s1,
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *s2) {
  // local, simple types
  if ((s1->acquireCount != s2->acquireCount) || (s1->releaseCount != s2->releaseCount))
    return false;

  // non-local members

  // pAcquireSyncs - acquireCount
  if (s1->pAcquireSyncs != s2->pAcquireSyncs &&
      (s1->pAcquireSyncs == NULL || s2->pAcquireSyncs == NULL ||
       memcmp(s1->pAcquireSyncs, s2->pAcquireSyncs, (s1->acquireCount) * sizeof(VkDeviceMemory)) !=
           0))
    return false;

  // pAcquireKeys - acquireCount
  if (s1->pAcquireKeys != s2->pAcquireKeys &&
      (s1->pAcquireKeys == NULL || s2->pAcquireKeys == NULL ||
       memcmp(s1->pAcquireKeys, s2->pAcquireKeys, (s1->acquireCount) * sizeof(uint64_t)) != 0))
    return false;

  // pAcquireTimeouts - acquireCount
  if (s1->pAcquireTimeouts != s2->pAcquireTimeouts &&
      (s1->pAcquireTimeouts == NULL || s2->pAcquireTimeouts == NULL ||
       memcmp(s1->pAcquireTimeouts, s2->pAcquireTimeouts, (s1->acquireCount) * sizeof(uint32_t)) !=
           0))
    return false;

  // pReleaseSyncs - releaseCount
  if (s1->pReleaseSyncs != s2->pReleaseSyncs &&
      (s1->pReleaseSyncs == NULL || s2->pReleaseSyncs == NULL ||
       memcmp(s1->pReleaseSyncs, s2->pReleaseSyncs, (s1->releaseCount) * sizeof(VkDeviceMemory)) !=
           0))
    return false;

  // pReleaseKeys - releaseCount
  if (s1->pReleaseKeys != s2->pReleaseKeys &&
      (s1->pReleaseKeys == NULL || s2->pReleaseKeys == NULL ||
       memcmp(s1->pReleaseKeys, s2->pReleaseKeys, (s1->releaseCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_NV_win32_keyed_mutex
bool compare_VkWin32KeyedMutexAcquireReleaseInfoNV(
    VkWin32KeyedMutexAcquireReleaseInfoNV const *s1,
    VkWin32KeyedMutexAcquireReleaseInfoNV const *s2) {
  // local, simple types
  if ((s1->acquireCount != s2->acquireCount) || (s1->releaseCount != s2->releaseCount))
    return false;

  // non-local members

  // pAcquireSyncs - acquireCount
  if (s1->pAcquireSyncs != s2->pAcquireSyncs &&
      (s1->pAcquireSyncs == NULL || s2->pAcquireSyncs == NULL ||
       memcmp(s1->pAcquireSyncs, s2->pAcquireSyncs, (s1->acquireCount) * sizeof(VkDeviceMemory)) !=
           0))
    return false;

  // pAcquireKeys - acquireCount
  if (s1->pAcquireKeys != s2->pAcquireKeys &&
      (s1->pAcquireKeys == NULL || s2->pAcquireKeys == NULL ||
       memcmp(s1->pAcquireKeys, s2->pAcquireKeys, (s1->acquireCount) * sizeof(uint64_t)) != 0))
    return false;

  // pAcquireTimeoutMilliseconds - acquireCount
  if (s1->pAcquireTimeoutMilliseconds != s2->pAcquireTimeoutMilliseconds &&
      (s1->pAcquireTimeoutMilliseconds == NULL || s2->pAcquireTimeoutMilliseconds == NULL ||
       memcmp(s1->pAcquireTimeoutMilliseconds, s2->pAcquireTimeoutMilliseconds,
              (s1->acquireCount) * sizeof(uint32_t)) != 0))
    return false;

  // pReleaseSyncs - releaseCount
  if (s1->pReleaseSyncs != s2->pReleaseSyncs &&
      (s1->pReleaseSyncs == NULL || s2->pReleaseSyncs == NULL ||
       memcmp(s1->pReleaseSyncs, s2->pReleaseSyncs, (s1->releaseCount) * sizeof(VkDeviceMemory)) !=
           0))
    return false;

  // pReleaseKeys - releaseCount
  if (s1->pReleaseKeys != s2->pReleaseKeys &&
      (s1->pReleaseKeys == NULL || s2->pReleaseKeys == NULL ||
       memcmp(s1->pReleaseKeys, s2->pReleaseKeys, (s1->releaseCount) * sizeof(uint64_t)) != 0))
    return false;
  return true;
}
#endif

#if VK_KHR_win32_surface
bool compare_VkWin32SurfaceCreateInfoKHR(VkWin32SurfaceCreateInfoKHR const *s1,
                                         VkWin32SurfaceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->hinstance != s2->hinstance) || (s1->hwnd != s2->hwnd))
    return false;

  return true;
}
#endif

bool compare_VkWriteDescriptorSet(VkWriteDescriptorSet const *s1, VkWriteDescriptorSet const *s2) {
  // local, simple types
  if ((s1->dstSet != s2->dstSet) || (s1->dstBinding != s2->dstBinding) ||
      (s1->dstArrayElement != s2->dstArrayElement) ||
      (s1->descriptorCount != s2->descriptorCount) || (s1->descriptorType != s2->descriptorType))
    return false;

  // non-local members

  // pTexelBufferView - descriptorCount
  if (s1->pTexelBufferView != s2->pTexelBufferView &&
      (s1->pTexelBufferView == NULL || s2->pTexelBufferView == NULL ||
       memcmp(s1->pTexelBufferView, s2->pTexelBufferView,
              (s1->descriptorCount) * sizeof(VkBufferView)) != 0))
    return false;
  return true;
}

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
bool compare_VkWriteDescriptorSetAccelerationStructureKHR(
    VkWriteDescriptorSetAccelerationStructureKHR const *s1,
    VkWriteDescriptorSetAccelerationStructureKHR const *s2) {
  // local, simple types
  if ((s1->accelerationStructureCount != s2->accelerationStructureCount))
    return false;

  // non-local members

  // pAccelerationStructures - accelerationStructureCount
  if (s1->pAccelerationStructures != s2->pAccelerationStructures &&
      (s1->pAccelerationStructures == NULL || s2->pAccelerationStructures == NULL ||
       memcmp(s1->pAccelerationStructures, s2->pAccelerationStructures,
              (s1->accelerationStructureCount) * sizeof(VkAccelerationStructureKHR)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *s1,
    VkWriteDescriptorSetAccelerationStructureNV const *s2) {
  // local, simple types
  if ((s1->accelerationStructureCount != s2->accelerationStructureCount))
    return false;

  // non-local members

  // pAccelerationStructures - accelerationStructureCount
  if (s1->pAccelerationStructures != s2->pAccelerationStructures &&
      (s1->pAccelerationStructures == NULL || s2->pAccelerationStructures == NULL ||
       memcmp(s1->pAccelerationStructures, s2->pAccelerationStructures,
              (s1->accelerationStructureCount) * sizeof(VkAccelerationStructureNV)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_NV_ray_tracing
bool compare_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *s1,
    VkWriteDescriptorSetAccelerationStructureNV const *s2) {
  // local, simple types
  if ((s1->accelerationStructureCount != s2->accelerationStructureCount))
    return false;

  // non-local members

  // pAccelerationStructures - accelerationStructureCount
  if (s1->pAccelerationStructures != s2->pAccelerationStructures &&
      (s1->pAccelerationStructures == NULL || s2->pAccelerationStructures == NULL ||
       memcmp(s1->pAccelerationStructures, s2->pAccelerationStructures,
              (s1->accelerationStructureCount) * sizeof(VkAccelerationStructureKHR)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkWriteDescriptorSetInlineUniformBlock(
    VkWriteDescriptorSetInlineUniformBlock const *s1,
    VkWriteDescriptorSetInlineUniformBlock const *s2) {
  // local, simple types
  if ((s1->dataSize != s2->dataSize))
    return false;

  // non-local members

  // pData - dataSize
  if (s1->pData != s2->pData &&
      (s1->pData == NULL || s2->pData == NULL || memcmp(s1->pData, s2->pData, s1->dataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block
bool compare_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *s1,
    VkWriteDescriptorSetInlineUniformBlockEXT const *s2) {
  // local, simple types
  if ((s1->dataSize != s2->dataSize))
    return false;

  // non-local members

  // pData - dataSize
  if (s1->pData != s2->pData &&
      (s1->pData == NULL || s2->pData == NULL || memcmp(s1->pData, s2->pData, s1->dataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block
bool compare_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *s1,
    VkWriteDescriptorSetInlineUniformBlockEXT const *s2) {
  // local, simple types
  if ((s1->dataSize != s2->dataSize))
    return false;

  // non-local members

  // pData - dataSize
  if (s1->pData != s2->pData &&
      (s1->pData == NULL || s2->pData == NULL || memcmp(s1->pData, s2->pData, s1->dataSize) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure
bool compare_VkWriteDescriptorSetPartitionedAccelerationStructureNV(
    VkWriteDescriptorSetPartitionedAccelerationStructureNV const *s1,
    VkWriteDescriptorSetPartitionedAccelerationStructureNV const *s2) {
  // local, simple types
  if ((s1->accelerationStructureCount != s2->accelerationStructureCount))
    return false;

  // non-local members

  // pAccelerationStructures - accelerationStructureCount
  if (s1->pAccelerationStructures != s2->pAccelerationStructures &&
      (s1->pAccelerationStructures == NULL || s2->pAccelerationStructures == NULL ||
       memcmp(s1->pAccelerationStructures, s2->pAccelerationStructures,
              (s1->accelerationStructureCount) * sizeof(VkDeviceAddress)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 317 && VK_ARM_tensors
bool compare_VkWriteDescriptorSetTensorARM(VkWriteDescriptorSetTensorARM const *s1,
                                           VkWriteDescriptorSetTensorARM const *s2) {
  // local, simple types
  if ((s1->tensorViewCount != s2->tensorViewCount))
    return false;

  // non-local members

  // pTensorViews - tensorViewCount
  if (s1->pTensorViews != s2->pTensorViews &&
      (s1->pTensorViews == NULL || s2->pTensorViews == NULL ||
       memcmp(s1->pTensorViews, s2->pTensorViews,
              (s1->tensorViewCount) * sizeof(VkTensorViewARM)) != 0))
    return false;
  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands
bool compare_VkWriteIndirectExecutionSetPipelineEXT(
    VkWriteIndirectExecutionSetPipelineEXT const *s1,
    VkWriteIndirectExecutionSetPipelineEXT const *s2) {
  // local, simple types
  if ((s1->index != s2->index) || (s1->pipeline != s2->pipeline))
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands && VK_EXT_shader_object
bool compare_VkWriteIndirectExecutionSetShaderEXT(VkWriteIndirectExecutionSetShaderEXT const *s1,
                                                  VkWriteIndirectExecutionSetShaderEXT const *s2) {
  // local, simple types
  if ((s1->index != s2->index) || (s1->shader != s2->shader))
    return false;

  return true;
}
#endif

#if VK_EXT_hdr_metadata
bool compare_VkXYColorEXT(VkXYColorEXT const *s1, VkXYColorEXT const *s2) {
  // local, simple types
  if ((s1->x != s2->x) || (s1->y != s2->y))
    return false;

  return true;
}
#endif

#if VK_KHR_xcb_surface
bool compare_VkXcbSurfaceCreateInfoKHR(VkXcbSurfaceCreateInfoKHR const *s1,
                                       VkXcbSurfaceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->window != s2->window))
    return false;

  // non-local members
  if (s1->connection != s2->connection)
    return false;

  return true;
}
#endif

#if VK_KHR_xlib_surface
bool compare_VkXlibSurfaceCreateInfoKHR(VkXlibSurfaceCreateInfoKHR const *s1,
                                        VkXlibSurfaceCreateInfoKHR const *s2) {
  // local, simple types
  if ((s1->flags != s2->flags) || (s1->window != s2->window))
    return false;

  // non-local members
  if (s1->dpy != s2->dpy)
    return false;

  return true;
}
#endif

#endif // VK_STRUCT_COMPARE_CONFIG_MAIN
#ifdef __cplusplus
}
#endif

#endif // VK_STRUCT_COMPARE_H
