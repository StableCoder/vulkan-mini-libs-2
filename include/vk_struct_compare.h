/*
    Copyright (C) 2021-2022 George Cave - gcave@stablecoder.ca

    SPDX-License-Identifier: Apache-2.0

    This file was auto-generated by the Vulkan Mini Libs 2 utility:
    https://github.com/stablecoder/vulkan-mini-libs-2.git
    or
    https://git.stabletec.com/utilities/vulkan-mini-libs-2.git

    Check for an updated version anytime, or state concerns/bugs.
*/

#ifndef VK_STRUCT_COMPARE_H
#define VK_STRUCT_COMPARE_H

/*  USAGE:
    To use, include this header where the declarations for the boolean checks are required.

    On *ONE* compilation unit, include the definition of:
    #define VK_STRUCT_COMPARE_CONFIG_MAIN

    so that the definitions are compiled somewhere following the one definition rule.
*/

/*
    These compare_*(lhs, rhs) functions only check the given struct's directly held data.
    Data held externally via pointers is not compared and must be done by the caller.
*/

#ifdef __cplusplus
extern "C" {
#endif

#include <vulkan/vulkan.h>

#include <stdbool.h>

#ifdef __cplusplus
static_assert(VK_HEADER_VERSION >= 72,
              "VK_HEADER_VERSION is from before the minimum supported version of v72.");
static_assert(VK_HEADER_VERSION <= 240,
              "VK_HEADER_VERSION is from after the maximum supported version of v240.");
#else
_Static_assert(VK_HEADER_VERSION >= 72,
               "VK_HEADER_VERSION is from before the minimum supported version of v72.");
_Static_assert(VK_HEADER_VERSION <= 240,
               "VK_HEADER_VERSION is from after the maximum supported version of v240.");
#endif

bool compare_VkOffset2D(VkOffset2D const *s1, VkOffset2D const *s2);

bool compare_VkOffset3D(VkOffset3D const *s1, VkOffset3D const *s2);

bool compare_VkExtent2D(VkExtent2D const *s1, VkExtent2D const *s2);

bool compare_VkExtent3D(VkExtent3D const *s1, VkExtent3D const *s2);

bool compare_VkViewport(VkViewport const *s1, VkViewport const *s2);

bool compare_VkRect2D(VkRect2D const *s1, VkRect2D const *s2);

bool compare_VkClearRect(VkClearRect const *s1, VkClearRect const *s2);

bool compare_VkComponentMapping(VkComponentMapping const *s1, VkComponentMapping const *s2);

bool compare_VkPhysicalDeviceProperties(VkPhysicalDeviceProperties const *s1,
                                        VkPhysicalDeviceProperties const *s2);

bool compare_VkExtensionProperties(VkExtensionProperties const *s1,
                                   VkExtensionProperties const *s2);

bool compare_VkLayerProperties(VkLayerProperties const *s1, VkLayerProperties const *s2);

bool compare_VkApplicationInfo(VkApplicationInfo const *s1, VkApplicationInfo const *s2);

bool compare_VkAllocationCallbacks(VkAllocationCallbacks const *s1,
                                   VkAllocationCallbacks const *s2);

bool compare_VkDeviceQueueCreateInfo(VkDeviceQueueCreateInfo const *s1,
                                     VkDeviceQueueCreateInfo const *s2);

bool compare_VkDeviceCreateInfo(VkDeviceCreateInfo const *s1, VkDeviceCreateInfo const *s2);

bool compare_VkInstanceCreateInfo(VkInstanceCreateInfo const *s1, VkInstanceCreateInfo const *s2);

bool compare_VkQueueFamilyProperties(VkQueueFamilyProperties const *s1,
                                     VkQueueFamilyProperties const *s2);

bool compare_VkPhysicalDeviceMemoryProperties(VkPhysicalDeviceMemoryProperties const *s1,
                                              VkPhysicalDeviceMemoryProperties const *s2);

bool compare_VkMemoryAllocateInfo(VkMemoryAllocateInfo const *s1, VkMemoryAllocateInfo const *s2);

bool compare_VkMemoryRequirements(VkMemoryRequirements const *s1, VkMemoryRequirements const *s2);

bool compare_VkSparseImageFormatProperties(VkSparseImageFormatProperties const *s1,
                                           VkSparseImageFormatProperties const *s2);

bool compare_VkSparseImageMemoryRequirements(VkSparseImageMemoryRequirements const *s1,
                                             VkSparseImageMemoryRequirements const *s2);

bool compare_VkMemoryType(VkMemoryType const *s1, VkMemoryType const *s2);

bool compare_VkMemoryHeap(VkMemoryHeap const *s1, VkMemoryHeap const *s2);

bool compare_VkMappedMemoryRange(VkMappedMemoryRange const *s1, VkMappedMemoryRange const *s2);

bool compare_VkFormatProperties(VkFormatProperties const *s1, VkFormatProperties const *s2);

bool compare_VkImageFormatProperties(VkImageFormatProperties const *s1,
                                     VkImageFormatProperties const *s2);

bool compare_VkDescriptorBufferInfo(VkDescriptorBufferInfo const *s1,
                                    VkDescriptorBufferInfo const *s2);

bool compare_VkDescriptorImageInfo(VkDescriptorImageInfo const *s1,
                                   VkDescriptorImageInfo const *s2);

bool compare_VkWriteDescriptorSet(VkWriteDescriptorSet const *s1, VkWriteDescriptorSet const *s2);

bool compare_VkCopyDescriptorSet(VkCopyDescriptorSet const *s1, VkCopyDescriptorSet const *s2);

bool compare_VkBufferCreateInfo(VkBufferCreateInfo const *s1, VkBufferCreateInfo const *s2);

bool compare_VkBufferViewCreateInfo(VkBufferViewCreateInfo const *s1,
                                    VkBufferViewCreateInfo const *s2);

bool compare_VkImageSubresource(VkImageSubresource const *s1, VkImageSubresource const *s2);

bool compare_VkImageSubresourceLayers(VkImageSubresourceLayers const *s1,
                                      VkImageSubresourceLayers const *s2);

bool compare_VkImageSubresourceRange(VkImageSubresourceRange const *s1,
                                     VkImageSubresourceRange const *s2);

bool compare_VkMemoryBarrier(VkMemoryBarrier const *s1, VkMemoryBarrier const *s2);

bool compare_VkBufferMemoryBarrier(VkBufferMemoryBarrier const *s1,
                                   VkBufferMemoryBarrier const *s2);

bool compare_VkImageMemoryBarrier(VkImageMemoryBarrier const *s1, VkImageMemoryBarrier const *s2);

bool compare_VkImageCreateInfo(VkImageCreateInfo const *s1, VkImageCreateInfo const *s2);

bool compare_VkSubresourceLayout(VkSubresourceLayout const *s1, VkSubresourceLayout const *s2);

bool compare_VkImageViewCreateInfo(VkImageViewCreateInfo const *s1,
                                   VkImageViewCreateInfo const *s2);

bool compare_VkBufferCopy(VkBufferCopy const *s1, VkBufferCopy const *s2);

bool compare_VkSparseMemoryBind(VkSparseMemoryBind const *s1, VkSparseMemoryBind const *s2);

bool compare_VkSparseImageMemoryBind(VkSparseImageMemoryBind const *s1,
                                     VkSparseImageMemoryBind const *s2);

bool compare_VkSparseBufferMemoryBindInfo(VkSparseBufferMemoryBindInfo const *s1,
                                          VkSparseBufferMemoryBindInfo const *s2);

bool compare_VkSparseImageOpaqueMemoryBindInfo(VkSparseImageOpaqueMemoryBindInfo const *s1,
                                               VkSparseImageOpaqueMemoryBindInfo const *s2);

bool compare_VkSparseImageMemoryBindInfo(VkSparseImageMemoryBindInfo const *s1,
                                         VkSparseImageMemoryBindInfo const *s2);

bool compare_VkBindSparseInfo(VkBindSparseInfo const *s1, VkBindSparseInfo const *s2);

bool compare_VkImageCopy(VkImageCopy const *s1, VkImageCopy const *s2);

bool compare_VkImageBlit(VkImageBlit const *s1, VkImageBlit const *s2);

bool compare_VkBufferImageCopy(VkBufferImageCopy const *s1, VkBufferImageCopy const *s2);

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkCopyMemoryIndirectCommandNV(VkCopyMemoryIndirectCommandNV const *s1,
                                           VkCopyMemoryIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkCopyMemoryToImageIndirectCommandNV(VkCopyMemoryToImageIndirectCommandNV const *s1,
                                                  VkCopyMemoryToImageIndirectCommandNV const *s2);
#endif

bool compare_VkImageResolve(VkImageResolve const *s1, VkImageResolve const *s2);

bool compare_VkShaderModuleCreateInfo(VkShaderModuleCreateInfo const *s1,
                                      VkShaderModuleCreateInfo const *s2);

bool compare_VkDescriptorSetLayoutBinding(VkDescriptorSetLayoutBinding const *s1,
                                          VkDescriptorSetLayoutBinding const *s2);

bool compare_VkDescriptorSetLayoutCreateInfo(VkDescriptorSetLayoutCreateInfo const *s1,
                                             VkDescriptorSetLayoutCreateInfo const *s2);

bool compare_VkDescriptorPoolSize(VkDescriptorPoolSize const *s1, VkDescriptorPoolSize const *s2);

bool compare_VkDescriptorPoolCreateInfo(VkDescriptorPoolCreateInfo const *s1,
                                        VkDescriptorPoolCreateInfo const *s2);

bool compare_VkDescriptorSetAllocateInfo(VkDescriptorSetAllocateInfo const *s1,
                                         VkDescriptorSetAllocateInfo const *s2);

bool compare_VkSpecializationMapEntry(VkSpecializationMapEntry const *s1,
                                      VkSpecializationMapEntry const *s2);

bool compare_VkSpecializationInfo(VkSpecializationInfo const *s1, VkSpecializationInfo const *s2);

bool compare_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *s1,
                                             VkPipelineShaderStageCreateInfo const *s2);

bool compare_VkComputePipelineCreateInfo(VkComputePipelineCreateInfo const *s1,
                                         VkComputePipelineCreateInfo const *s2);

bool compare_VkVertexInputBindingDescription(VkVertexInputBindingDescription const *s1,
                                             VkVertexInputBindingDescription const *s2);

bool compare_VkVertexInputAttributeDescription(VkVertexInputAttributeDescription const *s1,
                                               VkVertexInputAttributeDescription const *s2);

bool compare_VkPipelineVertexInputStateCreateInfo(VkPipelineVertexInputStateCreateInfo const *s1,
                                                  VkPipelineVertexInputStateCreateInfo const *s2);

bool compare_VkPipelineInputAssemblyStateCreateInfo(
    VkPipelineInputAssemblyStateCreateInfo const *s1,
    VkPipelineInputAssemblyStateCreateInfo const *s2);

bool compare_VkPipelineTessellationStateCreateInfo(VkPipelineTessellationStateCreateInfo const *s1,
                                                   VkPipelineTessellationStateCreateInfo const *s2);

bool compare_VkPipelineViewportStateCreateInfo(VkPipelineViewportStateCreateInfo const *s1,
                                               VkPipelineViewportStateCreateInfo const *s2);

bool compare_VkPipelineRasterizationStateCreateInfo(
    VkPipelineRasterizationStateCreateInfo const *s1,
    VkPipelineRasterizationStateCreateInfo const *s2);

bool compare_VkPipelineMultisampleStateCreateInfo(VkPipelineMultisampleStateCreateInfo const *s1,
                                                  VkPipelineMultisampleStateCreateInfo const *s2);

bool compare_VkPipelineColorBlendAttachmentState(VkPipelineColorBlendAttachmentState const *s1,
                                                 VkPipelineColorBlendAttachmentState const *s2);

bool compare_VkPipelineColorBlendStateCreateInfo(VkPipelineColorBlendStateCreateInfo const *s1,
                                                 VkPipelineColorBlendStateCreateInfo const *s2);

bool compare_VkPipelineDynamicStateCreateInfo(VkPipelineDynamicStateCreateInfo const *s1,
                                              VkPipelineDynamicStateCreateInfo const *s2);

bool compare_VkStencilOpState(VkStencilOpState const *s1, VkStencilOpState const *s2);

bool compare_VkPipelineDepthStencilStateCreateInfo(VkPipelineDepthStencilStateCreateInfo const *s1,
                                                   VkPipelineDepthStencilStateCreateInfo const *s2);

bool compare_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *s1,
                                          VkGraphicsPipelineCreateInfo const *s2);

bool compare_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *s1,
                                       VkPipelineCacheCreateInfo const *s2);

#if VK_HEADER_VERSION >= 184
bool compare_VkPipelineCacheHeaderVersionOne(VkPipelineCacheHeaderVersionOne const *s1,
                                             VkPipelineCacheHeaderVersionOne const *s2);
#endif

bool compare_VkPushConstantRange(VkPushConstantRange const *s1, VkPushConstantRange const *s2);

bool compare_VkPipelineLayoutCreateInfo(VkPipelineLayoutCreateInfo const *s1,
                                        VkPipelineLayoutCreateInfo const *s2);

bool compare_VkSamplerCreateInfo(VkSamplerCreateInfo const *s1, VkSamplerCreateInfo const *s2);

bool compare_VkCommandPoolCreateInfo(VkCommandPoolCreateInfo const *s1,
                                     VkCommandPoolCreateInfo const *s2);

bool compare_VkCommandBufferAllocateInfo(VkCommandBufferAllocateInfo const *s1,
                                         VkCommandBufferAllocateInfo const *s2);

bool compare_VkCommandBufferInheritanceInfo(VkCommandBufferInheritanceInfo const *s1,
                                            VkCommandBufferInheritanceInfo const *s2);

bool compare_VkCommandBufferBeginInfo(VkCommandBufferBeginInfo const *s1,
                                      VkCommandBufferBeginInfo const *s2);

bool compare_VkRenderPassBeginInfo(VkRenderPassBeginInfo const *s1,
                                   VkRenderPassBeginInfo const *s2);

bool compare_VkClearDepthStencilValue(VkClearDepthStencilValue const *s1,
                                      VkClearDepthStencilValue const *s2);

bool compare_VkAttachmentDescription(VkAttachmentDescription const *s1,
                                     VkAttachmentDescription const *s2);

bool compare_VkAttachmentReference(VkAttachmentReference const *s1,
                                   VkAttachmentReference const *s2);

bool compare_VkSubpassDescription(VkSubpassDescription const *s1, VkSubpassDescription const *s2);

bool compare_VkSubpassDependency(VkSubpassDependency const *s1, VkSubpassDependency const *s2);

bool compare_VkRenderPassCreateInfo(VkRenderPassCreateInfo const *s1,
                                    VkRenderPassCreateInfo const *s2);

bool compare_VkEventCreateInfo(VkEventCreateInfo const *s1, VkEventCreateInfo const *s2);

bool compare_VkFenceCreateInfo(VkFenceCreateInfo const *s1, VkFenceCreateInfo const *s2);

bool compare_VkPhysicalDeviceFeatures(VkPhysicalDeviceFeatures const *s1,
                                      VkPhysicalDeviceFeatures const *s2);

bool compare_VkPhysicalDeviceSparseProperties(VkPhysicalDeviceSparseProperties const *s1,
                                              VkPhysicalDeviceSparseProperties const *s2);

bool compare_VkPhysicalDeviceLimits(VkPhysicalDeviceLimits const *s1,
                                    VkPhysicalDeviceLimits const *s2);

bool compare_VkSemaphoreCreateInfo(VkSemaphoreCreateInfo const *s1,
                                   VkSemaphoreCreateInfo const *s2);

bool compare_VkQueryPoolCreateInfo(VkQueryPoolCreateInfo const *s1,
                                   VkQueryPoolCreateInfo const *s2);

bool compare_VkFramebufferCreateInfo(VkFramebufferCreateInfo const *s1,
                                     VkFramebufferCreateInfo const *s2);

bool compare_VkDrawIndirectCommand(VkDrawIndirectCommand const *s1,
                                   VkDrawIndirectCommand const *s2);

bool compare_VkDrawIndexedIndirectCommand(VkDrawIndexedIndirectCommand const *s1,
                                          VkDrawIndexedIndirectCommand const *s2);

bool compare_VkDispatchIndirectCommand(VkDispatchIndirectCommand const *s1,
                                       VkDispatchIndirectCommand const *s2);

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkMultiDrawInfoEXT(VkMultiDrawInfoEXT const *s1, VkMultiDrawInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkMultiDrawIndexedInfoEXT(VkMultiDrawIndexedInfoEXT const *s1,
                                       VkMultiDrawIndexedInfoEXT const *s2);
#endif

bool compare_VkSubmitInfo(VkSubmitInfo const *s1, VkSubmitInfo const *s2);

#if VK_KHR_display
bool compare_VkDisplayPropertiesKHR(VkDisplayPropertiesKHR const *s1,
                                    VkDisplayPropertiesKHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplayPlanePropertiesKHR(VkDisplayPlanePropertiesKHR const *s1,
                                         VkDisplayPlanePropertiesKHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplayModeParametersKHR(VkDisplayModeParametersKHR const *s1,
                                        VkDisplayModeParametersKHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplayModePropertiesKHR(VkDisplayModePropertiesKHR const *s1,
                                        VkDisplayModePropertiesKHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplayModeCreateInfoKHR(VkDisplayModeCreateInfoKHR const *s1,
                                        VkDisplayModeCreateInfoKHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplayPlaneCapabilitiesKHR(VkDisplayPlaneCapabilitiesKHR const *s1,
                                           VkDisplayPlaneCapabilitiesKHR const *s2);
#endif

#if VK_KHR_display
bool compare_VkDisplaySurfaceCreateInfoKHR(VkDisplaySurfaceCreateInfoKHR const *s1,
                                           VkDisplaySurfaceCreateInfoKHR const *s2);
#endif

#if VK_KHR_display_swapchain
bool compare_VkDisplayPresentInfoKHR(VkDisplayPresentInfoKHR const *s1,
                                     VkDisplayPresentInfoKHR const *s2);
#endif

#if VK_KHR_surface
bool compare_VkSurfaceCapabilitiesKHR(VkSurfaceCapabilitiesKHR const *s1,
                                      VkSurfaceCapabilitiesKHR const *s2);
#endif

#if VK_KHR_android_surface
bool compare_VkAndroidSurfaceCreateInfoKHR(VkAndroidSurfaceCreateInfoKHR const *s1,
                                           VkAndroidSurfaceCreateInfoKHR const *s2);
#endif

#if VK_NN_vi_surface
bool compare_VkViSurfaceCreateInfoNN(VkViSurfaceCreateInfoNN const *s1,
                                     VkViSurfaceCreateInfoNN const *s2);
#endif

#if VK_KHR_wayland_surface
bool compare_VkWaylandSurfaceCreateInfoKHR(VkWaylandSurfaceCreateInfoKHR const *s1,
                                           VkWaylandSurfaceCreateInfoKHR const *s2);
#endif

#if VK_KHR_win32_surface
bool compare_VkWin32SurfaceCreateInfoKHR(VkWin32SurfaceCreateInfoKHR const *s1,
                                         VkWin32SurfaceCreateInfoKHR const *s2);
#endif

#if VK_KHR_xlib_surface
bool compare_VkXlibSurfaceCreateInfoKHR(VkXlibSurfaceCreateInfoKHR const *s1,
                                        VkXlibSurfaceCreateInfoKHR const *s2);
#endif

#if VK_KHR_xcb_surface
bool compare_VkXcbSurfaceCreateInfoKHR(VkXcbSurfaceCreateInfoKHR const *s1,
                                       VkXcbSurfaceCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface
bool compare_VkDirectFBSurfaceCreateInfoEXT(VkDirectFBSurfaceCreateInfoEXT const *s1,
                                            VkDirectFBSurfaceCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface
bool compare_VkImagePipeSurfaceCreateInfoFUCHSIA(VkImagePipeSurfaceCreateInfoFUCHSIA const *s1,
                                                 VkImagePipeSurfaceCreateInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface
bool compare_VkStreamDescriptorSurfaceCreateInfoGGP(
    VkStreamDescriptorSurfaceCreateInfoGGP const *s1,
    VkStreamDescriptorSurfaceCreateInfoGGP const *s2);
#endif

#if VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface
bool compare_VkScreenSurfaceCreateInfoQNX(VkScreenSurfaceCreateInfoQNX const *s1,
                                          VkScreenSurfaceCreateInfoQNX const *s2);
#endif

#if VK_KHR_surface
bool compare_VkSurfaceFormatKHR(VkSurfaceFormatKHR const *s1, VkSurfaceFormatKHR const *s2);
#endif

#if VK_KHR_swapchain
bool compare_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *s1,
                                      VkSwapchainCreateInfoKHR const *s2);
#endif

#if VK_KHR_swapchain
bool compare_VkPresentInfoKHR(VkPresentInfoKHR const *s1, VkPresentInfoKHR const *s2);
#endif

#if VK_EXT_debug_report
bool compare_VkDebugReportCallbackCreateInfoEXT(VkDebugReportCallbackCreateInfoEXT const *s1,
                                                VkDebugReportCallbackCreateInfoEXT const *s2);
#endif

#if VK_EXT_validation_flags
bool compare_VkValidationFlagsEXT(VkValidationFlagsEXT const *s1, VkValidationFlagsEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_validation_features
bool compare_VkValidationFeaturesEXT(VkValidationFeaturesEXT const *s1,
                                     VkValidationFeaturesEXT const *s2);
#endif

#if VK_AMD_rasterization_order
bool compare_VkPipelineRasterizationStateRasterizationOrderAMD(
    VkPipelineRasterizationStateRasterizationOrderAMD const *s1,
    VkPipelineRasterizationStateRasterizationOrderAMD const *s2);
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerObjectNameInfoEXT(VkDebugMarkerObjectNameInfoEXT const *s1,
                                            VkDebugMarkerObjectNameInfoEXT const *s2);
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerObjectTagInfoEXT(VkDebugMarkerObjectTagInfoEXT const *s1,
                                           VkDebugMarkerObjectTagInfoEXT const *s2);
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerMarkerInfoEXT(VkDebugMarkerMarkerInfoEXT const *s1,
                                        VkDebugMarkerMarkerInfoEXT const *s2);
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationImageCreateInfoNV(
    VkDedicatedAllocationImageCreateInfoNV const *s1,
    VkDedicatedAllocationImageCreateInfoNV const *s2);
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationBufferCreateInfoNV(
    VkDedicatedAllocationBufferCreateInfoNV const *s1,
    VkDedicatedAllocationBufferCreateInfoNV const *s2);
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationMemoryAllocateInfoNV(
    VkDedicatedAllocationMemoryAllocateInfoNV const *s1,
    VkDedicatedAllocationMemoryAllocateInfoNV const *s2);
#endif

#if VK_NV_external_memory_capabilities
bool compare_VkExternalImageFormatPropertiesNV(VkExternalImageFormatPropertiesNV const *s1,
                                               VkExternalImageFormatPropertiesNV const *s2);
#endif

#if VK_NV_external_memory
bool compare_VkExternalMemoryImageCreateInfoNV(VkExternalMemoryImageCreateInfoNV const *s1,
                                               VkExternalMemoryImageCreateInfoNV const *s2);
#endif

#if VK_NV_external_memory
bool compare_VkExportMemoryAllocateInfoNV(VkExportMemoryAllocateInfoNV const *s1,
                                          VkExportMemoryAllocateInfoNV const *s2);
#endif

#if VK_NV_external_memory_win32
bool compare_VkImportMemoryWin32HandleInfoNV(VkImportMemoryWin32HandleInfoNV const *s1,
                                             VkImportMemoryWin32HandleInfoNV const *s2);
#endif

#if VK_NV_external_memory_win32
bool compare_VkExportMemoryWin32HandleInfoNV(VkExportMemoryWin32HandleInfoNV const *s1,
                                             VkExportMemoryWin32HandleInfoNV const *s2);
#endif

#if VK_NV_win32_keyed_mutex
bool compare_VkWin32KeyedMutexAcquireReleaseInfoNV(VkWin32KeyedMutexAcquireReleaseInfoNV const *s1,
                                                   VkWin32KeyedMutexAcquireReleaseInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDevicePrivateDataCreateInfo(VkDevicePrivateDataCreateInfo const *s1,
                                           VkDevicePrivateDataCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
bool compare_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *s1,
                                              VkDevicePrivateDataCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPrivateDataSlotCreateInfo(VkPrivateDataSlotCreateInfo const *s1,
                                         VkPrivateDataSlotCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
bool compare_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *s1,
                                            VkPrivateDataSlotCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDevicePrivateDataFeatures(VkPhysicalDevicePrivateDataFeatures const *s1,
                                                 VkPhysicalDevicePrivateDataFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
bool compare_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *s1,
    VkPhysicalDevicePrivateDataFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkPhysicalDeviceMultiDrawPropertiesEXT(
    VkPhysicalDeviceMultiDrawPropertiesEXT const *s1,
    VkPhysicalDeviceMultiDrawPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGraphicsShaderGroupCreateInfoNV(VkGraphicsShaderGroupCreateInfoNV const *s1,
                                               VkGraphicsShaderGroupCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGraphicsPipelineShaderGroupsCreateInfoNV(
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *s1,
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindShaderGroupIndirectCommandNV(VkBindShaderGroupIndirectCommandNV const *s1,
                                                VkBindShaderGroupIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindIndexBufferIndirectCommandNV(VkBindIndexBufferIndirectCommandNV const *s1,
                                                VkBindIndexBufferIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindVertexBufferIndirectCommandNV(VkBindVertexBufferIndirectCommandNV const *s1,
                                                 VkBindVertexBufferIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkSetStateFlagsIndirectCommandNV(VkSetStateFlagsIndirectCommandNV const *s1,
                                              VkSetStateFlagsIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsStreamNV(VkIndirectCommandsStreamNV const *s1,
                                        VkIndirectCommandsStreamNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsLayoutTokenNV(VkIndirectCommandsLayoutTokenNV const *s1,
                                             VkIndirectCommandsLayoutTokenNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsLayoutCreateInfoNV(VkIndirectCommandsLayoutCreateInfoNV const *s1,
                                                  VkIndirectCommandsLayoutCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGeneratedCommandsInfoNV(VkGeneratedCommandsInfoNV const *s1,
                                       VkGeneratedCommandsInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGeneratedCommandsMemoryRequirementsInfoNV(
    VkGeneratedCommandsMemoryRequirementsInfoNV const *s1,
    VkGeneratedCommandsMemoryRequirementsInfoNV const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceFeatures2(VkPhysicalDeviceFeatures2 const *s1,
                                       VkPhysicalDeviceFeatures2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceFeatures2KHR(VkPhysicalDeviceFeatures2KHR const *s1,
                                          VkPhysicalDeviceFeatures2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProperties2(VkPhysicalDeviceProperties2 const *s1,
                                         VkPhysicalDeviceProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceProperties2KHR(VkPhysicalDeviceProperties2KHR const *s1,
                                            VkPhysicalDeviceProperties2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkFormatProperties2(VkFormatProperties2 const *s1, VkFormatProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkFormatProperties2KHR(VkFormatProperties2KHR const *s1,
                                    VkFormatProperties2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkImageFormatProperties2(VkImageFormatProperties2 const *s1,
                                      VkImageFormatProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkImageFormatProperties2KHR(VkImageFormatProperties2KHR const *s1,
                                         VkImageFormatProperties2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceImageFormatInfo2(VkPhysicalDeviceImageFormatInfo2 const *s1,
                                              VkPhysicalDeviceImageFormatInfo2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceImageFormatInfo2KHR(VkPhysicalDeviceImageFormatInfo2KHR const *s1,
                                                 VkPhysicalDeviceImageFormatInfo2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkQueueFamilyProperties2(VkQueueFamilyProperties2 const *s1,
                                      VkQueueFamilyProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkQueueFamilyProperties2KHR(VkQueueFamilyProperties2KHR const *s1,
                                         VkQueueFamilyProperties2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMemoryProperties2(VkPhysicalDeviceMemoryProperties2 const *s1,
                                               VkPhysicalDeviceMemoryProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceMemoryProperties2KHR(VkPhysicalDeviceMemoryProperties2KHR const *s1,
                                                  VkPhysicalDeviceMemoryProperties2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkSparseImageFormatProperties2(VkSparseImageFormatProperties2 const *s1,
                                            VkSparseImageFormatProperties2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkSparseImageFormatProperties2KHR(VkSparseImageFormatProperties2KHR const *s1,
                                               VkSparseImageFormatProperties2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSparseImageFormatInfo2(
    VkPhysicalDeviceSparseImageFormatInfo2 const *s1,
    VkPhysicalDeviceSparseImageFormatInfo2 const *s2);
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceSparseImageFormatInfo2KHR(
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *s1,
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *s2);
#endif

#if VK_KHR_push_descriptor
bool compare_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s1,
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkConformanceVersion(VkConformanceVersion const *s1, VkConformanceVersion const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_driver_properties
bool compare_VkConformanceVersionKHR(VkConformanceVersionKHR const *s1,
                                     VkConformanceVersionKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDriverProperties(VkPhysicalDeviceDriverProperties const *s1,
                                              VkPhysicalDeviceDriverProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_driver_properties
bool compare_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *s1,
                                                 VkPhysicalDeviceDriverPropertiesKHR const *s2);
#endif

#if VK_KHR_incremental_present
bool compare_VkPresentRegionsKHR(VkPresentRegionsKHR const *s1, VkPresentRegionsKHR const *s2);
#endif

#if VK_KHR_incremental_present
bool compare_VkPresentRegionKHR(VkPresentRegionKHR const *s1, VkPresentRegionKHR const *s2);
#endif

#if VK_KHR_incremental_present
bool compare_VkRectLayerKHR(VkRectLayerKHR const *s1, VkRectLayerKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceVariablePointersFeatures(
    VkPhysicalDeviceVariablePointersFeatures const *s1,
    VkPhysicalDeviceVariablePointersFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers
bool compare_VkPhysicalDeviceVariablePointersFeaturesKHR(
    VkPhysicalDeviceVariablePointersFeaturesKHR const *s1,
    VkPhysicalDeviceVariablePointersFeaturesKHR const *s2);
#endif

#if VK_KHR_variable_pointers
bool compare_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s1,
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *s1,
    VkPhysicalDeviceVariablePointerFeatures const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryProperties(VkExternalMemoryProperties const *s1,
                                        VkExternalMemoryProperties const *s2);
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalMemoryPropertiesKHR(VkExternalMemoryPropertiesKHR const *s1,
                                           VkExternalMemoryPropertiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalImageFormatInfo(
    VkPhysicalDeviceExternalImageFormatInfo const *s1,
    VkPhysicalDeviceExternalImageFormatInfo const *s2);
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkPhysicalDeviceExternalImageFormatInfoKHR(
    VkPhysicalDeviceExternalImageFormatInfoKHR const *s1,
    VkPhysicalDeviceExternalImageFormatInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalImageFormatProperties(VkExternalImageFormatProperties const *s1,
                                             VkExternalImageFormatProperties const *s2);
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalImageFormatPropertiesKHR(VkExternalImageFormatPropertiesKHR const *s1,
                                                VkExternalImageFormatPropertiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalBufferInfo(VkPhysicalDeviceExternalBufferInfo const *s1,
                                                VkPhysicalDeviceExternalBufferInfo const *s2);
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkPhysicalDeviceExternalBufferInfoKHR(VkPhysicalDeviceExternalBufferInfoKHR const *s1,
                                                   VkPhysicalDeviceExternalBufferInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalBufferProperties(VkExternalBufferProperties const *s1,
                                        VkExternalBufferProperties const *s2);
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalBufferPropertiesKHR(VkExternalBufferPropertiesKHR const *s1,
                                           VkExternalBufferPropertiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceIDProperties(VkPhysicalDeviceIDProperties const *s1,
                                          VkPhysicalDeviceIDProperties const *s2);
#endif

#if (VK_KHR_external_memory_capabilities || VK_KHR_external_semaphore_capabilities ||              \
     VK_KHR_external_fence_capabilities)
bool compare_VkPhysicalDeviceIDPropertiesKHR(VkPhysicalDeviceIDPropertiesKHR const *s1,
                                             VkPhysicalDeviceIDPropertiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryImageCreateInfo(VkExternalMemoryImageCreateInfo const *s1,
                                             VkExternalMemoryImageCreateInfo const *s2);
#endif

#if VK_KHR_external_memory
bool compare_VkExternalMemoryImageCreateInfoKHR(VkExternalMemoryImageCreateInfoKHR const *s1,
                                                VkExternalMemoryImageCreateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryBufferCreateInfo(VkExternalMemoryBufferCreateInfo const *s1,
                                              VkExternalMemoryBufferCreateInfo const *s2);
#endif

#if VK_KHR_external_memory
bool compare_VkExternalMemoryBufferCreateInfoKHR(VkExternalMemoryBufferCreateInfoKHR const *s1,
                                                 VkExternalMemoryBufferCreateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExportMemoryAllocateInfo(VkExportMemoryAllocateInfo const *s1,
                                        VkExportMemoryAllocateInfo const *s2);
#endif

#if VK_KHR_external_memory
bool compare_VkExportMemoryAllocateInfoKHR(VkExportMemoryAllocateInfoKHR const *s1,
                                           VkExportMemoryAllocateInfoKHR const *s2);
#endif

#if VK_KHR_external_memory_win32
bool compare_VkImportMemoryWin32HandleInfoKHR(VkImportMemoryWin32HandleInfoKHR const *s1,
                                              VkImportMemoryWin32HandleInfoKHR const *s2);
#endif

#if VK_KHR_external_memory_win32
bool compare_VkExportMemoryWin32HandleInfoKHR(VkExportMemoryWin32HandleInfoKHR const *s1,
                                              VkExportMemoryWin32HandleInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkImportMemoryZirconHandleInfoFUCHSIA(VkImportMemoryZirconHandleInfoFUCHSIA const *s1,
                                                   VkImportMemoryZirconHandleInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkMemoryZirconHandlePropertiesFUCHSIA(VkMemoryZirconHandlePropertiesFUCHSIA const *s1,
                                                   VkMemoryZirconHandlePropertiesFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkMemoryGetZirconHandleInfoFUCHSIA(VkMemoryGetZirconHandleInfoFUCHSIA const *s1,
                                                VkMemoryGetZirconHandleInfoFUCHSIA const *s2);
#endif

#if VK_KHR_external_memory_win32
bool compare_VkMemoryWin32HandlePropertiesKHR(VkMemoryWin32HandlePropertiesKHR const *s1,
                                              VkMemoryWin32HandlePropertiesKHR const *s2);
#endif

#if VK_KHR_external_memory_win32
bool compare_VkMemoryGetWin32HandleInfoKHR(VkMemoryGetWin32HandleInfoKHR const *s1,
                                           VkMemoryGetWin32HandleInfoKHR const *s2);
#endif

#if VK_KHR_external_memory_fd
bool compare_VkImportMemoryFdInfoKHR(VkImportMemoryFdInfoKHR const *s1,
                                     VkImportMemoryFdInfoKHR const *s2);
#endif

#if VK_KHR_external_memory_fd
bool compare_VkMemoryFdPropertiesKHR(VkMemoryFdPropertiesKHR const *s1,
                                     VkMemoryFdPropertiesKHR const *s2);
#endif

#if VK_KHR_external_memory_fd
bool compare_VkMemoryGetFdInfoKHR(VkMemoryGetFdInfoKHR const *s1, VkMemoryGetFdInfoKHR const *s2);
#endif

#if VK_KHR_win32_keyed_mutex
bool compare_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *s1,
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalSemaphoreInfo(VkPhysicalDeviceExternalSemaphoreInfo const *s1,
                                                   VkPhysicalDeviceExternalSemaphoreInfo const *s2);
#endif

#if VK_KHR_external_semaphore_capabilities
bool compare_VkPhysicalDeviceExternalSemaphoreInfoKHR(
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *s1,
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalSemaphoreProperties(VkExternalSemaphoreProperties const *s1,
                                           VkExternalSemaphoreProperties const *s2);
#endif

#if VK_KHR_external_semaphore_capabilities
bool compare_VkExternalSemaphorePropertiesKHR(VkExternalSemaphorePropertiesKHR const *s1,
                                              VkExternalSemaphorePropertiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExportSemaphoreCreateInfo(VkExportSemaphoreCreateInfo const *s1,
                                         VkExportSemaphoreCreateInfo const *s2);
#endif

#if VK_KHR_external_semaphore
bool compare_VkExportSemaphoreCreateInfoKHR(VkExportSemaphoreCreateInfoKHR const *s1,
                                            VkExportSemaphoreCreateInfoKHR const *s2);
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkImportSemaphoreWin32HandleInfoKHR(VkImportSemaphoreWin32HandleInfoKHR const *s1,
                                                 VkImportSemaphoreWin32HandleInfoKHR const *s2);
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkExportSemaphoreWin32HandleInfoKHR(VkExportSemaphoreWin32HandleInfoKHR const *s1,
                                                 VkExportSemaphoreWin32HandleInfoKHR const *s2);
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkD3D12FenceSubmitInfoKHR(VkD3D12FenceSubmitInfoKHR const *s1,
                                       VkD3D12FenceSubmitInfoKHR const *s2);
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkSemaphoreGetWin32HandleInfoKHR(VkSemaphoreGetWin32HandleInfoKHR const *s1,
                                              VkSemaphoreGetWin32HandleInfoKHR const *s2);
#endif

#if VK_KHR_external_semaphore_fd
bool compare_VkImportSemaphoreFdInfoKHR(VkImportSemaphoreFdInfoKHR const *s1,
                                        VkImportSemaphoreFdInfoKHR const *s2);
#endif

#if VK_KHR_external_semaphore_fd
bool compare_VkSemaphoreGetFdInfoKHR(VkSemaphoreGetFdInfoKHR const *s1,
                                     VkSemaphoreGetFdInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
bool compare_VkImportSemaphoreZirconHandleInfoFUCHSIA(
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *s1,
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
bool compare_VkSemaphoreGetZirconHandleInfoFUCHSIA(VkSemaphoreGetZirconHandleInfoFUCHSIA const *s1,
                                                   VkSemaphoreGetZirconHandleInfoFUCHSIA const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalFenceInfo(VkPhysicalDeviceExternalFenceInfo const *s1,
                                               VkPhysicalDeviceExternalFenceInfo const *s2);
#endif

#if VK_KHR_external_fence_capabilities
bool compare_VkPhysicalDeviceExternalFenceInfoKHR(VkPhysicalDeviceExternalFenceInfoKHR const *s1,
                                                  VkPhysicalDeviceExternalFenceInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExternalFenceProperties(VkExternalFenceProperties const *s1,
                                       VkExternalFenceProperties const *s2);
#endif

#if VK_KHR_external_fence_capabilities
bool compare_VkExternalFencePropertiesKHR(VkExternalFencePropertiesKHR const *s1,
                                          VkExternalFencePropertiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkExportFenceCreateInfo(VkExportFenceCreateInfo const *s1,
                                     VkExportFenceCreateInfo const *s2);
#endif

#if VK_KHR_external_fence
bool compare_VkExportFenceCreateInfoKHR(VkExportFenceCreateInfoKHR const *s1,
                                        VkExportFenceCreateInfoKHR const *s2);
#endif

#if VK_KHR_external_fence_win32
bool compare_VkImportFenceWin32HandleInfoKHR(VkImportFenceWin32HandleInfoKHR const *s1,
                                             VkImportFenceWin32HandleInfoKHR const *s2);
#endif

#if VK_KHR_external_fence_win32
bool compare_VkExportFenceWin32HandleInfoKHR(VkExportFenceWin32HandleInfoKHR const *s1,
                                             VkExportFenceWin32HandleInfoKHR const *s2);
#endif

#if VK_KHR_external_fence_win32
bool compare_VkFenceGetWin32HandleInfoKHR(VkFenceGetWin32HandleInfoKHR const *s1,
                                          VkFenceGetWin32HandleInfoKHR const *s2);
#endif

#if VK_KHR_external_fence_fd
bool compare_VkImportFenceFdInfoKHR(VkImportFenceFdInfoKHR const *s1,
                                    VkImportFenceFdInfoKHR const *s2);
#endif

#if VK_KHR_external_fence_fd
bool compare_VkFenceGetFdInfoKHR(VkFenceGetFdInfoKHR const *s1, VkFenceGetFdInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMultiviewFeatures(VkPhysicalDeviceMultiviewFeatures const *s1,
                                               VkPhysicalDeviceMultiviewFeatures const *s2);
#endif

#if VK_KHR_multiview
bool compare_VkPhysicalDeviceMultiviewFeaturesKHR(VkPhysicalDeviceMultiviewFeaturesKHR const *s1,
                                                  VkPhysicalDeviceMultiviewFeaturesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMultiviewProperties(VkPhysicalDeviceMultiviewProperties const *s1,
                                                 VkPhysicalDeviceMultiviewProperties const *s2);
#endif

#if VK_KHR_multiview
bool compare_VkPhysicalDeviceMultiviewPropertiesKHR(
    VkPhysicalDeviceMultiviewPropertiesKHR const *s1,
    VkPhysicalDeviceMultiviewPropertiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkRenderPassMultiviewCreateInfo(VkRenderPassMultiviewCreateInfo const *s1,
                                             VkRenderPassMultiviewCreateInfo const *s2);
#endif

#if VK_KHR_multiview
bool compare_VkRenderPassMultiviewCreateInfoKHR(VkRenderPassMultiviewCreateInfoKHR const *s1,
                                                VkRenderPassMultiviewCreateInfoKHR const *s2);
#endif

#if VK_EXT_display_surface_counter
bool compare_VkSurfaceCapabilities2EXT(VkSurfaceCapabilities2EXT const *s1,
                                       VkSurfaceCapabilities2EXT const *s2);
#endif

#if VK_EXT_display_control
bool compare_VkDisplayPowerInfoEXT(VkDisplayPowerInfoEXT const *s1,
                                   VkDisplayPowerInfoEXT const *s2);
#endif

#if VK_EXT_display_control
bool compare_VkDeviceEventInfoEXT(VkDeviceEventInfoEXT const *s1, VkDeviceEventInfoEXT const *s2);
#endif

#if VK_EXT_display_control
bool compare_VkDisplayEventInfoEXT(VkDisplayEventInfoEXT const *s1,
                                   VkDisplayEventInfoEXT const *s2);
#endif

#if VK_EXT_display_control
bool compare_VkSwapchainCounterCreateInfoEXT(VkSwapchainCounterCreateInfoEXT const *s1,
                                             VkSwapchainCounterCreateInfoEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceGroupProperties(VkPhysicalDeviceGroupProperties const *s1,
                                             VkPhysicalDeviceGroupProperties const *s2);
#endif

#if VK_KHR_device_group_creation
bool compare_VkPhysicalDeviceGroupPropertiesKHR(VkPhysicalDeviceGroupPropertiesKHR const *s1,
                                                VkPhysicalDeviceGroupPropertiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryAllocateFlagsInfo(VkMemoryAllocateFlagsInfo const *s1,
                                       VkMemoryAllocateFlagsInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkMemoryAllocateFlagsInfoKHR(VkMemoryAllocateFlagsInfoKHR const *s1,
                                          VkMemoryAllocateFlagsInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBindBufferMemoryInfo(VkBindBufferMemoryInfo const *s1,
                                    VkBindBufferMemoryInfo const *s2);
#endif

#if VK_KHR_bind_memory2
bool compare_VkBindBufferMemoryInfoKHR(VkBindBufferMemoryInfoKHR const *s1,
                                       VkBindBufferMemoryInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBindBufferMemoryDeviceGroupInfo(VkBindBufferMemoryDeviceGroupInfo const *s1,
                                               VkBindBufferMemoryDeviceGroupInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkBindBufferMemoryDeviceGroupInfoKHR(VkBindBufferMemoryDeviceGroupInfoKHR const *s1,
                                                  VkBindBufferMemoryDeviceGroupInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBindImageMemoryInfo(VkBindImageMemoryInfo const *s1,
                                   VkBindImageMemoryInfo const *s2);
#endif

#if VK_KHR_bind_memory2
bool compare_VkBindImageMemoryInfoKHR(VkBindImageMemoryInfoKHR const *s1,
                                      VkBindImageMemoryInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBindImageMemoryDeviceGroupInfo(VkBindImageMemoryDeviceGroupInfo const *s1,
                                              VkBindImageMemoryDeviceGroupInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkBindImageMemoryDeviceGroupInfoKHR(VkBindImageMemoryDeviceGroupInfoKHR const *s1,
                                                 VkBindImageMemoryDeviceGroupInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupRenderPassBeginInfo(VkDeviceGroupRenderPassBeginInfo const *s1,
                                              VkDeviceGroupRenderPassBeginInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupRenderPassBeginInfoKHR(VkDeviceGroupRenderPassBeginInfoKHR const *s1,
                                                 VkDeviceGroupRenderPassBeginInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupCommandBufferBeginInfo(VkDeviceGroupCommandBufferBeginInfo const *s1,
                                                 VkDeviceGroupCommandBufferBeginInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupCommandBufferBeginInfoKHR(
    VkDeviceGroupCommandBufferBeginInfoKHR const *s1,
    VkDeviceGroupCommandBufferBeginInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupSubmitInfo(VkDeviceGroupSubmitInfo const *s1,
                                     VkDeviceGroupSubmitInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupSubmitInfoKHR(VkDeviceGroupSubmitInfoKHR const *s1,
                                        VkDeviceGroupSubmitInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupBindSparseInfo(VkDeviceGroupBindSparseInfo const *s1,
                                         VkDeviceGroupBindSparseInfo const *s2);
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupBindSparseInfoKHR(VkDeviceGroupBindSparseInfoKHR const *s1,
                                            VkDeviceGroupBindSparseInfoKHR const *s2);
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkDeviceGroupPresentCapabilitiesKHR(VkDeviceGroupPresentCapabilitiesKHR const *s1,
                                                 VkDeviceGroupPresentCapabilitiesKHR const *s2);
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkImageSwapchainCreateInfoKHR(VkImageSwapchainCreateInfoKHR const *s1,
                                           VkImageSwapchainCreateInfoKHR const *s2);
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkBindImageMemorySwapchainInfoKHR(VkBindImageMemorySwapchainInfoKHR const *s1,
                                               VkBindImageMemorySwapchainInfoKHR const *s2);
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkAcquireNextImageInfoKHR(VkAcquireNextImageInfoKHR const *s1,
                                       VkAcquireNextImageInfoKHR const *s2);
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkDeviceGroupPresentInfoKHR(VkDeviceGroupPresentInfoKHR const *s1,
                                         VkDeviceGroupPresentInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupDeviceCreateInfo(VkDeviceGroupDeviceCreateInfo const *s1,
                                           VkDeviceGroupDeviceCreateInfo const *s2);
#endif

#if VK_KHR_device_group_creation
bool compare_VkDeviceGroupDeviceCreateInfoKHR(VkDeviceGroupDeviceCreateInfoKHR const *s1,
                                              VkDeviceGroupDeviceCreateInfoKHR const *s2);
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkDeviceGroupSwapchainCreateInfoKHR(VkDeviceGroupSwapchainCreateInfoKHR const *s1,
                                                 VkDeviceGroupSwapchainCreateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorUpdateTemplateEntry(VkDescriptorUpdateTemplateEntry const *s1,
                                             VkDescriptorUpdateTemplateEntry const *s2);
#endif

#if VK_KHR_descriptor_update_template
bool compare_VkDescriptorUpdateTemplateEntryKHR(VkDescriptorUpdateTemplateEntryKHR const *s1,
                                                VkDescriptorUpdateTemplateEntryKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorUpdateTemplateCreateInfo(VkDescriptorUpdateTemplateCreateInfo const *s1,
                                                  VkDescriptorUpdateTemplateCreateInfo const *s2);
#endif

#if VK_KHR_descriptor_update_template
bool compare_VkDescriptorUpdateTemplateCreateInfoKHR(
    VkDescriptorUpdateTemplateCreateInfoKHR const *s1,
    VkDescriptorUpdateTemplateCreateInfoKHR const *s2);
#endif

#if VK_EXT_hdr_metadata
bool compare_VkXYColorEXT(VkXYColorEXT const *s1, VkXYColorEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
bool compare_VkPhysicalDevicePresentIdFeaturesKHR(VkPhysicalDevicePresentIdFeaturesKHR const *s1,
                                                  VkPhysicalDevicePresentIdFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
bool compare_VkPresentIdKHR(VkPresentIdKHR const *s1, VkPresentIdKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_wait
bool compare_VkPhysicalDevicePresentWaitFeaturesKHR(
    VkPhysicalDevicePresentWaitFeaturesKHR const *s1,
    VkPhysicalDevicePresentWaitFeaturesKHR const *s2);
#endif

#if VK_EXT_hdr_metadata
bool compare_VkHdrMetadataEXT(VkHdrMetadataEXT const *s1, VkHdrMetadataEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
bool compare_VkDisplayNativeHdrSurfaceCapabilitiesAMD(
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *s1,
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
bool compare_VkSwapchainDisplayNativeHdrCreateInfoAMD(
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *s1,
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *s2);
#endif

#if VK_GOOGLE_display_timing
bool compare_VkRefreshCycleDurationGOOGLE(VkRefreshCycleDurationGOOGLE const *s1,
                                          VkRefreshCycleDurationGOOGLE const *s2);
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPastPresentationTimingGOOGLE(VkPastPresentationTimingGOOGLE const *s1,
                                            VkPastPresentationTimingGOOGLE const *s2);
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPresentTimesInfoGOOGLE(VkPresentTimesInfoGOOGLE const *s1,
                                      VkPresentTimesInfoGOOGLE const *s2);
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPresentTimeGOOGLE(VkPresentTimeGOOGLE const *s1, VkPresentTimeGOOGLE const *s2);
#endif

#if VK_MVK_ios_surface
bool compare_VkIOSSurfaceCreateInfoMVK(VkIOSSurfaceCreateInfoMVK const *s1,
                                       VkIOSSurfaceCreateInfoMVK const *s2);
#endif

#if VK_MVK_macos_surface
bool compare_VkMacOSSurfaceCreateInfoMVK(VkMacOSSurfaceCreateInfoMVK const *s1,
                                         VkMacOSSurfaceCreateInfoMVK const *s2);
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface
bool compare_VkMetalSurfaceCreateInfoEXT(VkMetalSurfaceCreateInfoEXT const *s1,
                                         VkMetalSurfaceCreateInfoEXT const *s2);
#endif

#if VK_NV_clip_space_w_scaling
bool compare_VkViewportWScalingNV(VkViewportWScalingNV const *s1, VkViewportWScalingNV const *s2);
#endif

#if VK_NV_clip_space_w_scaling
bool compare_VkPipelineViewportWScalingStateCreateInfoNV(
    VkPipelineViewportWScalingStateCreateInfoNV const *s1,
    VkPipelineViewportWScalingStateCreateInfoNV const *s2);
#endif

#if VK_NV_viewport_swizzle
bool compare_VkViewportSwizzleNV(VkViewportSwizzleNV const *s1, VkViewportSwizzleNV const *s2);
#endif

#if VK_NV_viewport_swizzle
bool compare_VkPipelineViewportSwizzleStateCreateInfoNV(
    VkPipelineViewportSwizzleStateCreateInfoNV const *s1,
    VkPipelineViewportSwizzleStateCreateInfoNV const *s2);
#endif

#if VK_EXT_discard_rectangles
bool compare_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *s1,
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *s2);
#endif

#if VK_EXT_discard_rectangles
bool compare_VkPipelineDiscardRectangleStateCreateInfoEXT(
    VkPipelineDiscardRectangleStateCreateInfoEXT const *s1,
    VkPipelineDiscardRectangleStateCreateInfoEXT const *s2);
#endif

#if VK_NVX_multiview_per_view_attributes
bool compare_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *s1,
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkInputAttachmentAspectReference(VkInputAttachmentAspectReference const *s1,
                                              VkInputAttachmentAspectReference const *s2);
#endif

#if VK_KHR_maintenance2
bool compare_VkInputAttachmentAspectReferenceKHR(VkInputAttachmentAspectReferenceKHR const *s1,
                                                 VkInputAttachmentAspectReferenceKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkRenderPassInputAttachmentAspectCreateInfo(
    VkRenderPassInputAttachmentAspectCreateInfo const *s1,
    VkRenderPassInputAttachmentAspectCreateInfo const *s2);
#endif

#if VK_KHR_maintenance2
bool compare_VkRenderPassInputAttachmentAspectCreateInfoKHR(
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *s1,
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *s2);
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkPhysicalDeviceSurfaceInfo2KHR(VkPhysicalDeviceSurfaceInfo2KHR const *s1,
                                             VkPhysicalDeviceSurfaceInfo2KHR const *s2);
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkSurfaceCapabilities2KHR(VkSurfaceCapabilities2KHR const *s1,
                                       VkSurfaceCapabilities2KHR const *s2);
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkSurfaceFormat2KHR(VkSurfaceFormat2KHR const *s1, VkSurfaceFormat2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayProperties2KHR(VkDisplayProperties2KHR const *s1,
                                     VkDisplayProperties2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneProperties2KHR(VkDisplayPlaneProperties2KHR const *s1,
                                          VkDisplayPlaneProperties2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayModeProperties2KHR(VkDisplayModeProperties2KHR const *s1,
                                         VkDisplayModeProperties2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneInfo2KHR(VkDisplayPlaneInfo2KHR const *s1,
                                    VkDisplayPlaneInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneCapabilities2KHR(VkDisplayPlaneCapabilities2KHR const *s1,
                                            VkDisplayPlaneCapabilities2KHR const *s2);
#endif

#if VK_KHR_shared_presentable_image
bool compare_VkSharedPresentSurfaceCapabilitiesKHR(VkSharedPresentSurfaceCapabilitiesKHR const *s1,
                                                   VkSharedPresentSurfaceCapabilitiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDevice16BitStorageFeatures(VkPhysicalDevice16BitStorageFeatures const *s1,
                                                  VkPhysicalDevice16BitStorageFeatures const *s2);
#endif

#if VK_KHR_16bit_storage
bool compare_VkPhysicalDevice16BitStorageFeaturesKHR(
    VkPhysicalDevice16BitStorageFeaturesKHR const *s1,
    VkPhysicalDevice16BitStorageFeaturesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSubgroupProperties(VkPhysicalDeviceSubgroupProperties const *s1,
                                                VkPhysicalDeviceSubgroupProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *s1,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 123 && VK_KHR_shader_subgroup_extended_types
bool compare_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBufferMemoryRequirementsInfo2(VkBufferMemoryRequirementsInfo2 const *s1,
                                             VkBufferMemoryRequirementsInfo2 const *s2);
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkBufferMemoryRequirementsInfo2KHR(VkBufferMemoryRequirementsInfo2KHR const *s1,
                                                VkBufferMemoryRequirementsInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDeviceBufferMemoryRequirements(VkDeviceBufferMemoryRequirements const *s1,
                                              VkDeviceBufferMemoryRequirements const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
bool compare_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *s1,
                                                 VkDeviceBufferMemoryRequirementsKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkImageMemoryRequirementsInfo2(VkImageMemoryRequirementsInfo2 const *s1,
                                            VkImageMemoryRequirementsInfo2 const *s2);
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkImageMemoryRequirementsInfo2KHR(VkImageMemoryRequirementsInfo2KHR const *s1,
                                               VkImageMemoryRequirementsInfo2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkImageSparseMemoryRequirementsInfo2(VkImageSparseMemoryRequirementsInfo2 const *s1,
                                                  VkImageSparseMemoryRequirementsInfo2 const *s2);
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkImageSparseMemoryRequirementsInfo2KHR(
    VkImageSparseMemoryRequirementsInfo2KHR const *s1,
    VkImageSparseMemoryRequirementsInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDeviceImageMemoryRequirements(VkDeviceImageMemoryRequirements const *s1,
                                             VkDeviceImageMemoryRequirements const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
bool compare_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *s1,
                                                VkDeviceImageMemoryRequirementsKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryRequirements2(VkMemoryRequirements2 const *s1,
                                   VkMemoryRequirements2 const *s2);
#endif

#if (VK_KHR_get_memory_requirements2 || VK_NV_ray_tracing || VK_VERSION_1_1 || VK_NVX_raytracing)
bool compare_VkMemoryRequirements2KHR(VkMemoryRequirements2KHR const *s1,
                                      VkMemoryRequirements2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkSparseImageMemoryRequirements2(VkSparseImageMemoryRequirements2 const *s1,
                                              VkSparseImageMemoryRequirements2 const *s2);
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkSparseImageMemoryRequirements2KHR(VkSparseImageMemoryRequirements2KHR const *s1,
                                                 VkSparseImageMemoryRequirements2KHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDevicePointClippingProperties(
    VkPhysicalDevicePointClippingProperties const *s1,
    VkPhysicalDevicePointClippingProperties const *s2);
#endif

#if VK_KHR_maintenance2
bool compare_VkPhysicalDevicePointClippingPropertiesKHR(
    VkPhysicalDevicePointClippingPropertiesKHR const *s1,
    VkPhysicalDevicePointClippingPropertiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryDedicatedRequirements(VkMemoryDedicatedRequirements const *s1,
                                           VkMemoryDedicatedRequirements const *s2);
#endif

#if VK_KHR_dedicated_allocation
bool compare_VkMemoryDedicatedRequirementsKHR(VkMemoryDedicatedRequirementsKHR const *s1,
                                              VkMemoryDedicatedRequirementsKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryDedicatedAllocateInfo(VkMemoryDedicatedAllocateInfo const *s1,
                                           VkMemoryDedicatedAllocateInfo const *s2);
#endif

#if VK_KHR_dedicated_allocation
bool compare_VkMemoryDedicatedAllocateInfoKHR(VkMemoryDedicatedAllocateInfoKHR const *s1,
                                              VkMemoryDedicatedAllocateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkImageViewUsageCreateInfo(VkImageViewUsageCreateInfo const *s1,
                                        VkImageViewUsageCreateInfo const *s2);
#endif

#if VK_KHR_maintenance2
bool compare_VkImageViewUsageCreateInfoKHR(VkImageViewUsageCreateInfoKHR const *s1,
                                           VkImageViewUsageCreateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPipelineTessellationDomainOriginStateCreateInfo(
    VkPipelineTessellationDomainOriginStateCreateInfo const *s1,
    VkPipelineTessellationDomainOriginStateCreateInfo const *s2);
#endif

#if VK_KHR_maintenance2
bool compare_VkPipelineTessellationDomainOriginStateCreateInfoKHR(
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *s1,
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionInfo(VkSamplerYcbcrConversionInfo const *s1,
                                          VkSamplerYcbcrConversionInfo const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionInfoKHR(VkSamplerYcbcrConversionInfoKHR const *s1,
                                             VkSamplerYcbcrConversionInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionCreateInfo(VkSamplerYcbcrConversionCreateInfo const *s1,
                                                VkSamplerYcbcrConversionCreateInfo const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionCreateInfoKHR(VkSamplerYcbcrConversionCreateInfoKHR const *s1,
                                                   VkSamplerYcbcrConversionCreateInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkBindImagePlaneMemoryInfo(VkBindImagePlaneMemoryInfo const *s1,
                                        VkBindImagePlaneMemoryInfo const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkBindImagePlaneMemoryInfoKHR(VkBindImagePlaneMemoryInfoKHR const *s1,
                                           VkBindImagePlaneMemoryInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkImagePlaneMemoryRequirementsInfo(VkImagePlaneMemoryRequirementsInfo const *s1,
                                                VkImagePlaneMemoryRequirementsInfo const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkImagePlaneMemoryRequirementsInfoKHR(VkImagePlaneMemoryRequirementsInfoKHR const *s1,
                                                   VkImagePlaneMemoryRequirementsInfoKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *s1,
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *s1,
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionImageFormatProperties(
    VkSamplerYcbcrConversionImageFormatProperties const *s1,
    VkSamplerYcbcrConversionImageFormatProperties const *s2);
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionImageFormatPropertiesKHR(
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *s1,
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *s2);
#endif

#if VK_AMD_texture_gather_bias_lod
bool compare_VkTextureLODGatherFormatPropertiesAMD(VkTextureLODGatherFormatPropertiesAMD const *s1,
                                                   VkTextureLODGatherFormatPropertiesAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkConditionalRenderingBeginInfoEXT(VkConditionalRenderingBeginInfoEXT const *s1,
                                                VkConditionalRenderingBeginInfoEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkProtectedSubmitInfo(VkProtectedSubmitInfo const *s1,
                                   VkProtectedSubmitInfo const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProtectedMemoryFeatures(
    VkPhysicalDeviceProtectedMemoryFeatures const *s1,
    VkPhysicalDeviceProtectedMemoryFeatures const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProtectedMemoryProperties(
    VkPhysicalDeviceProtectedMemoryProperties const *s1,
    VkPhysicalDeviceProtectedMemoryProperties const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceQueueInfo2(VkDeviceQueueInfo2 const *s1, VkDeviceQueueInfo2 const *s2);
#endif

#if VK_NV_fragment_coverage_to_color
bool compare_VkPipelineCoverageToColorStateCreateInfoNV(
    VkPipelineCoverageToColorStateCreateInfoNV const *s1,
    VkPipelineCoverageToColorStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceSamplerFilterMinmaxProperties(
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *s1,
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *s2);
#endif

#if VK_EXT_sampler_filter_minmax
bool compare_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s1,
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkSampleLocationEXT(VkSampleLocationEXT const *s1, VkSampleLocationEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkSampleLocationsInfoEXT(VkSampleLocationsInfoEXT const *s1,
                                      VkSampleLocationsInfoEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkAttachmentSampleLocationsEXT(VkAttachmentSampleLocationsEXT const *s1,
                                            VkAttachmentSampleLocationsEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkSubpassSampleLocationsEXT(VkSubpassSampleLocationsEXT const *s1,
                                         VkSubpassSampleLocationsEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkRenderPassSampleLocationsBeginInfoEXT(
    VkRenderPassSampleLocationsBeginInfoEXT const *s1,
    VkRenderPassSampleLocationsBeginInfoEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkPipelineSampleLocationsStateCreateInfoEXT(
    VkPipelineSampleLocationsStateCreateInfoEXT const *s1,
    VkPipelineSampleLocationsStateCreateInfoEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *s1,
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *s2);
#endif

#if VK_EXT_sample_locations
bool compare_VkMultisamplePropertiesEXT(VkMultisamplePropertiesEXT const *s1,
                                        VkMultisamplePropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSamplerReductionModeCreateInfo(VkSamplerReductionModeCreateInfo const *s1,
                                              VkSamplerReductionModeCreateInfo const *s2);
#endif

#if VK_EXT_sampler_filter_minmax
bool compare_VkSamplerReductionModeCreateInfoEXT(VkSamplerReductionModeCreateInfoEXT const *s1,
                                                 VkSamplerReductionModeCreateInfoEXT const *s2);
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *s1,
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkPhysicalDeviceMultiDrawFeaturesEXT(VkPhysicalDeviceMultiDrawFeaturesEXT const *s1,
                                                  VkPhysicalDeviceMultiDrawFeaturesEXT const *s2);
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *s1,
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *s2);
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *s1,
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceInlineUniformBlockFeatures(
    VkPhysicalDeviceInlineUniformBlockFeatures const *s1,
    VkPhysicalDeviceInlineUniformBlockFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceInlineUniformBlockProperties(
    VkPhysicalDeviceInlineUniformBlockProperties const *s1,
    VkPhysicalDeviceInlineUniformBlockProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkWriteDescriptorSetInlineUniformBlock(
    VkWriteDescriptorSetInlineUniformBlock const *s1,
    VkWriteDescriptorSetInlineUniformBlock const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
bool compare_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *s1,
    VkWriteDescriptorSetInlineUniformBlockEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDescriptorPoolInlineUniformBlockCreateInfo(
    VkDescriptorPoolInlineUniformBlockCreateInfo const *s1,
    VkDescriptorPoolInlineUniformBlockCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
bool compare_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s1,
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s2);
#endif

#if VK_NV_framebuffer_mixed_samples
bool compare_VkPipelineCoverageModulationStateCreateInfoNV(
    VkPipelineCoverageModulationStateCreateInfoNV const *s1,
    VkPipelineCoverageModulationStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkImageFormatListCreateInfo(VkImageFormatListCreateInfo const *s1,
                                         VkImageFormatListCreateInfo const *s2);
#endif

#if VK_KHR_image_format_list
bool compare_VkImageFormatListCreateInfoKHR(VkImageFormatListCreateInfoKHR const *s1,
                                            VkImageFormatListCreateInfoKHR const *s2);
#endif

#if VK_EXT_validation_cache
bool compare_VkValidationCacheCreateInfoEXT(VkValidationCacheCreateInfoEXT const *s1,
                                            VkValidationCacheCreateInfoEXT const *s2);
#endif

#if VK_EXT_validation_cache
bool compare_VkShaderModuleValidationCacheCreateInfoEXT(
    VkShaderModuleValidationCacheCreateInfoEXT const *s1,
    VkShaderModuleValidationCacheCreateInfoEXT const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMaintenance3Properties(
    VkPhysicalDeviceMaintenance3Properties const *s1,
    VkPhysicalDeviceMaintenance3Properties const *s2);
#endif

#if VK_KHR_maintenance3
bool compare_VkPhysicalDeviceMaintenance3PropertiesKHR(
    VkPhysicalDeviceMaintenance3PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance3PropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceMaintenance4Features(VkPhysicalDeviceMaintenance4Features const *s1,
                                                  VkPhysicalDeviceMaintenance4Features const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceMaintenance4Properties(
    VkPhysicalDeviceMaintenance4Properties const *s1,
    VkPhysicalDeviceMaintenance4Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorSetLayoutSupport(VkDescriptorSetLayoutSupport const *s1,
                                          VkDescriptorSetLayoutSupport const *s2);
#endif

#if VK_KHR_maintenance3
bool compare_VkDescriptorSetLayoutSupportKHR(VkDescriptorSetLayoutSupportKHR const *s1,
                                             VkDescriptorSetLayoutSupportKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceShaderDrawParametersFeatures(
    VkPhysicalDeviceShaderDrawParametersFeatures const *s1,
    VkPhysicalDeviceShaderDrawParametersFeatures const *s2);
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *s1,
    VkPhysicalDeviceShaderDrawParameterFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderFloat16Int8Features(
    VkPhysicalDeviceShaderFloat16Int8Features const *s1,
    VkPhysicalDeviceShaderFloat16Int8Features const *s2);
#endif

#if VK_HEADER_VERSION >= 115 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 95 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceFloatControlsProperties(
    VkPhysicalDeviceFloatControlsProperties const *s1,
    VkPhysicalDeviceFloatControlsProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 95 && VK_KHR_shader_float_controls
bool compare_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s1,
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceHostQueryResetFeatures(
    VkPhysicalDeviceHostQueryResetFeatures const *s1,
    VkPhysicalDeviceHostQueryResetFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_host_query_reset
bool compare_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s1,
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkNativeBufferUsage2ANDROID(VkNativeBufferUsage2ANDROID const *s1,
                                         VkNativeBufferUsage2ANDROID const *s2);
#endif

#if VK_ANDROID_native_buffer
bool compare_VkNativeBufferANDROID(VkNativeBufferANDROID const *s1,
                                   VkNativeBufferANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkSwapchainImageCreateInfoANDROID(VkSwapchainImageCreateInfoANDROID const *s1,
                                               VkSwapchainImageCreateInfoANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkPhysicalDevicePresentationPropertiesANDROID(
    VkPhysicalDevicePresentationPropertiesANDROID const *s1,
    VkPhysicalDevicePresentationPropertiesANDROID const *s2);
#endif

#if VK_AMD_shader_info
bool compare_VkShaderResourceUsageAMD(VkShaderResourceUsageAMD const *s1,
                                      VkShaderResourceUsageAMD const *s2);
#endif

#if VK_AMD_shader_info
bool compare_VkShaderStatisticsInfoAMD(VkShaderStatisticsInfoAMD const *s1,
                                       VkShaderStatisticsInfoAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoKHR(
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s2);
#endif

#if VK_EXT_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_global_priority
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 180 && VK_EXT_global_priority_query
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_global_priority
bool compare_VkQueueFamilyGlobalPriorityPropertiesKHR(
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s1,
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 180 && VK_EXT_global_priority_query
bool compare_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s1,
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s2);
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsObjectNameInfoEXT(VkDebugUtilsObjectNameInfoEXT const *s1,
                                           VkDebugUtilsObjectNameInfoEXT const *s2);
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsObjectTagInfoEXT(VkDebugUtilsObjectTagInfoEXT const *s1,
                                          VkDebugUtilsObjectTagInfoEXT const *s2);
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsLabelEXT(VkDebugUtilsLabelEXT const *s1, VkDebugUtilsLabelEXT const *s2);
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsMessengerCreateInfoEXT(VkDebugUtilsMessengerCreateInfoEXT const *s1,
                                                VkDebugUtilsMessengerCreateInfoEXT const *s2);
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsMessengerCallbackDataEXT(VkDebugUtilsMessengerCallbackDataEXT const *s1,
                                                  VkDebugUtilsMessengerCallbackDataEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *s1,
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkDeviceDeviceMemoryReportCreateInfoEXT(
    VkDeviceDeviceMemoryReportCreateInfoEXT const *s1,
    VkDeviceDeviceMemoryReportCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkDeviceMemoryReportCallbackDataEXT(VkDeviceMemoryReportCallbackDataEXT const *s1,
                                                 VkDeviceMemoryReportCallbackDataEXT const *s2);
#endif

#if VK_EXT_external_memory_host
bool compare_VkImportMemoryHostPointerInfoEXT(VkImportMemoryHostPointerInfoEXT const *s1,
                                              VkImportMemoryHostPointerInfoEXT const *s2);
#endif

#if VK_EXT_external_memory_host
bool compare_VkMemoryHostPointerPropertiesEXT(VkMemoryHostPointerPropertiesEXT const *s1,
                                              VkMemoryHostPointerPropertiesEXT const *s2);
#endif

#if VK_EXT_external_memory_host
bool compare_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *s1,
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *s2);
#endif

#if VK_EXT_conservative_rasterization
bool compare_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_calibrated_timestamps
bool compare_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *s1,
                                          VkCalibratedTimestampInfoEXT const *s2);
#endif

#if VK_AMD_shader_core_properties
bool compare_VkPhysicalDeviceShaderCorePropertiesAMD(
    VkPhysicalDeviceShaderCorePropertiesAMD const *s1,
    VkPhysicalDeviceShaderCorePropertiesAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2
bool compare_VkPhysicalDeviceShaderCoreProperties2AMD(
    VkPhysicalDeviceShaderCoreProperties2AMD const *s1,
    VkPhysicalDeviceShaderCoreProperties2AMD const *s2);
#endif

#if VK_EXT_conservative_rasterization
bool compare_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *s1,
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDescriptorIndexingFeatures(
    VkPhysicalDeviceDescriptorIndexingFeatures const *s1,
    VkPhysicalDeviceDescriptorIndexingFeatures const *s2);
#endif

#if VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDescriptorIndexingProperties(
    VkPhysicalDeviceDescriptorIndexingProperties const *s1,
    VkPhysicalDeviceDescriptorIndexingProperties const *s2);
#endif

#if VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetLayoutBindingFlagsCreateInfo(
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *s1,
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *s2);
#endif

#if VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s1,
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetVariableDescriptorCountAllocateInfo(
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *s1,
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *s2);
#endif

#if VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s1,
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetVariableDescriptorCountLayoutSupport(
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *s1,
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *s2);
#endif

#if VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s1,
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentDescription2(VkAttachmentDescription2 const *s1,
                                      VkAttachmentDescription2 const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *s1,
                                         VkAttachmentDescription2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentReference2(VkAttachmentReference2 const *s1,
                                    VkAttachmentReference2 const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *s1,
                                       VkAttachmentReference2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDescription2(VkSubpassDescription2 const *s1,
                                   VkSubpassDescription2 const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *s1,
                                      VkSubpassDescription2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDependency2(VkSubpassDependency2 const *s1, VkSubpassDependency2 const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *s1,
                                     VkSubpassDependency2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkRenderPassCreateInfo2(VkRenderPassCreateInfo2 const *s1,
                                     VkRenderPassCreateInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *s1,
                                        VkRenderPassCreateInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassBeginInfo(VkSubpassBeginInfo const *s1, VkSubpassBeginInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *s1,
                                   VkSubpassBeginInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassEndInfo(VkSubpassEndInfo const *s1, VkSubpassEndInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *s1, VkSubpassEndInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceTimelineSemaphoreFeatures(
    VkPhysicalDeviceTimelineSemaphoreFeatures const *s1,
    VkPhysicalDeviceTimelineSemaphoreFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceTimelineSemaphoreProperties(
    VkPhysicalDeviceTimelineSemaphoreProperties const *s1,
    VkPhysicalDeviceTimelineSemaphoreProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreTypeCreateInfo(VkSemaphoreTypeCreateInfo const *s1,
                                       VkSemaphoreTypeCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *s1,
                                          VkSemaphoreTypeCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkTimelineSemaphoreSubmitInfo(VkTimelineSemaphoreSubmitInfo const *s1,
                                           VkTimelineSemaphoreSubmitInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkTimelineSemaphoreSubmitInfoKHR(VkTimelineSemaphoreSubmitInfoKHR const *s1,
                                              VkTimelineSemaphoreSubmitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreWaitInfo(VkSemaphoreWaitInfo const *s1, VkSemaphoreWaitInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *s1,
                                    VkSemaphoreWaitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreSignalInfo(VkSemaphoreSignalInfo const *s1,
                                   VkSemaphoreSignalInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *s1,
                                      VkSemaphoreSignalInfoKHR const *s2);
#endif

#if VK_EXT_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *s1,
    VkVertexInputBindingDivisorDescriptionEXT const *s2);
#endif

#if VK_EXT_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s2);
#endif

#if VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_pci_bus_info
bool compare_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s1,
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkImportAndroidHardwareBufferInfoANDROID(
    VkImportAndroidHardwareBufferInfoANDROID const *s1,
    VkImportAndroidHardwareBufferInfoANDROID const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferUsageANDROID(VkAndroidHardwareBufferUsageANDROID const *s1,
                                                 VkAndroidHardwareBufferUsageANDROID const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferPropertiesANDROID(
    VkAndroidHardwareBufferPropertiesANDROID const *s1,
    VkAndroidHardwareBufferPropertiesANDROID const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *s1,
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferFormatPropertiesANDROID(
    VkAndroidHardwareBufferFormatPropertiesANDROID const *s1,
    VkAndroidHardwareBufferFormatPropertiesANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *s1,
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *s2);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkExternalFormatANDROID(VkExternalFormatANDROID const *s1,
                                     VkExternalFormatANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDevice8BitStorageFeatures(VkPhysicalDevice8BitStorageFeatures const *s1,
                                                 VkPhysicalDevice8BitStorageFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_8bit_storage
bool compare_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *s1,
    VkPhysicalDevice8BitStorageFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *s1,
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkanMemoryModelFeatures(
    VkPhysicalDeviceVulkanMemoryModelFeatures const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_KHR_vulkan_memory_model
bool compare_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderAtomicInt64Features(
    VkPhysicalDeviceShaderAtomicInt64Features const *s1,
    VkPhysicalDeviceShaderAtomicInt64Features const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_shader_atomic_int64
bool compare_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s1,
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_shader_atomic_float
bool compare_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *s1,
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 185 && VK_EXT_shader_atomic_float2
bool compare_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *s1,
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
bool compare_VkQueueFamilyCheckpointPropertiesNV(VkQueueFamilyCheckpointPropertiesNV const *s1,
                                                 VkQueueFamilyCheckpointPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
bool compare_VkCheckpointDataNV(VkCheckpointDataNV const *s1, VkCheckpointDataNV const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDepthStencilResolveProperties(
    VkPhysicalDeviceDepthStencilResolveProperties const *s1,
    VkPhysicalDeviceDepthStencilResolveProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_KHR_depth_stencil_resolve
bool compare_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s1,
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDescriptionDepthStencilResolve(
    VkSubpassDescriptionDepthStencilResolve const *s1,
    VkSubpassDescriptionDepthStencilResolve const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_KHR_depth_stencil_resolve
bool compare_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *s1,
    VkSubpassDescriptionDepthStencilResolveKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
bool compare_VkImageViewASTCDecodeModeEXT(VkImageViewASTCDecodeModeEXT const *s1,
                                          VkImageViewASTCDecodeModeEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
bool compare_VkPhysicalDeviceASTCDecodeFeaturesEXT(VkPhysicalDeviceASTCDecodeFeaturesEXT const *s1,
                                                   VkPhysicalDeviceASTCDecodeFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *s1,
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *s1,
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPipelineRasterizationStateStreamCreateInfoEXT(
    VkPipelineRasterizationStateStreamCreateInfoEXT const *s1,
    VkPipelineRasterizationStateStreamCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
bool compare_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *s1,
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
bool compare_VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *s1,
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
bool compare_VkPhysicalDeviceExclusiveScissorFeaturesNV(
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *s1,
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
bool compare_VkPipelineViewportExclusiveScissorStateCreateInfoNV(
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *s1,
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_corner_sampled_image
bool compare_VkPhysicalDeviceCornerSampledImageFeaturesNV(
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *s1,
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_compute_shader_derivatives
bool compare_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s1,
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shader_image_footprint
bool compare_VkPhysicalDeviceShaderImageFootprintFeaturesNV(
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *s1,
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 99 && VK_NV_dedicated_allocation_image_aliasing
bool compare_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *s1,
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(
    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV const *s1,
    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(
    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV const *s1,
    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkPhysicalDeviceMemoryDecompressionFeaturesNV(
    VkPhysicalDeviceMemoryDecompressionFeaturesNV const *s1,
    VkPhysicalDeviceMemoryDecompressionFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkPhysicalDeviceMemoryDecompressionPropertiesNV(
    VkPhysicalDeviceMemoryDecompressionPropertiesNV const *s1,
    VkPhysicalDeviceMemoryDecompressionPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkShadingRatePaletteNV(VkShadingRatePaletteNV const *s1,
                                    VkShadingRatePaletteNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPipelineViewportShadingRateImageStateCreateInfoNV(
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *s1,
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPhysicalDeviceShadingRateImageFeaturesNV(
    VkPhysicalDeviceShadingRateImageFeaturesNV const *s1,
    VkPhysicalDeviceShadingRateImageFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPhysicalDeviceShadingRateImagePropertiesNV(
    VkPhysicalDeviceShadingRateImagePropertiesNV const *s1,
    VkPhysicalDeviceShadingRateImagePropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 185 && VK_HUAWEI_invocation_mask
bool compare_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *s1,
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkCoarseSampleLocationNV(VkCoarseSampleLocationNV const *s1,
                                      VkCoarseSampleLocationNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkCoarseSampleOrderCustomNV(VkCoarseSampleOrderCustomNV const *s1,
                                         VkCoarseSampleOrderCustomNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *s1,
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderFeaturesNV(VkPhysicalDeviceMeshShaderFeaturesNV const *s1,
                                                  VkPhysicalDeviceMeshShaderFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderPropertiesNV(
    VkPhysicalDeviceMeshShaderPropertiesNV const *s1,
    VkPhysicalDeviceMeshShaderPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkDrawMeshTasksIndirectCommandNV(VkDrawMeshTasksIndirectCommandNV const *s1,
                                              VkDrawMeshTasksIndirectCommandNV const *s2);
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderFeaturesEXT(VkPhysicalDeviceMeshShaderFeaturesEXT const *s1,
                                                   VkPhysicalDeviceMeshShaderFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderPropertiesEXT(
    VkPhysicalDeviceMeshShaderPropertiesEXT const *s1,
    VkPhysicalDeviceMeshShaderPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkDrawMeshTasksIndirectCommandEXT(VkDrawMeshTasksIndirectCommandEXT const *s1,
                                               VkDrawMeshTasksIndirectCommandEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *s1,
                                                 VkRayTracingShaderGroupCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_ray_tracing_pipeline || VK_KHR_ray_tracing)
bool compare_VkRayTracingShaderGroupCreateInfoKHR(VkRayTracingShaderGroupCreateInfoKHR const *s1,
                                                  VkRayTracingShaderGroupCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkRayTracingPipelineCreateInfoNV(VkRayTracingPipelineCreateInfoNV const *s1,
                                              VkRayTracingPipelineCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_ray_tracing_pipeline || VK_KHR_ray_tracing)
bool compare_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *s1,
                                               VkRayTracingPipelineCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryTrianglesNV(VkGeometryTrianglesNV const *s1,
                                   VkGeometryTrianglesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryAABBNV(VkGeometryAABBNV const *s1, VkGeometryAABBNV const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryDataNV(VkGeometryDataNV const *s1, VkGeometryDataNV const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryNV(VkGeometryNV const *s1, VkGeometryNV const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureInfoNV(VkAccelerationStructureInfoNV const *s1,
                                           VkAccelerationStructureInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureCreateInfoNV(VkAccelerationStructureCreateInfoNV const *s1,
                                                 VkAccelerationStructureCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *s1,
    VkBindAccelerationStructureMemoryInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkWriteDescriptorSetAccelerationStructureKHR(
    VkWriteDescriptorSetAccelerationStructureKHR const *s1,
    VkWriteDescriptorSetAccelerationStructureKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *s1,
    VkWriteDescriptorSetAccelerationStructureNV const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureMemoryRequirementsInfoNV(
    VkAccelerationStructureMemoryRequirementsInfoNV const *s1,
    VkAccelerationStructureMemoryRequirementsInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkPhysicalDeviceAccelerationStructureFeaturesKHR(
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *s1,
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_query
bool compare_VkPhysicalDeviceRayQueryFeaturesKHR(VkPhysicalDeviceRayQueryFeaturesKHR const *s1,
                                                 VkPhysicalDeviceRayQueryFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkPhysicalDeviceAccelerationStructurePropertiesKHR(
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *s1,
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *s1,
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkPhysicalDeviceRayTracingPropertiesNV(
    VkPhysicalDeviceRayTracingPropertiesNV const *s1,
    VkPhysicalDeviceRayTracingPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkStridedDeviceAddressRegionKHR(VkStridedDeviceAddressRegionKHR const *s1,
                                             VkStridedDeviceAddressRegionKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_ray_tracing_pipeline || VK_KHR_ray_tracing)
bool compare_VkTraceRaysIndirectCommandKHR(VkTraceRaysIndirectCommandKHR const *s1,
                                           VkTraceRaysIndirectCommandKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_KHR_ray_tracing_maintenance1
bool compare_VkTraceRaysIndirectCommand2KHR(VkTraceRaysIndirectCommand2KHR const *s1,
                                            VkTraceRaysIndirectCommand2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_KHR_ray_tracing_maintenance1
bool compare_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(
    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierPropertiesListEXT(VkDrmFormatModifierPropertiesListEXT const *s1,
                                                  VkDrmFormatModifierPropertiesListEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierPropertiesEXT(VkDrmFormatModifierPropertiesEXT const *s1,
                                              VkDrmFormatModifierPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s1,
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierListCreateInfoEXT(
    VkImageDrmFormatModifierListCreateInfoEXT const *s1,
    VkImageDrmFormatModifierListCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierExplicitCreateInfoEXT(
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *s1,
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierPropertiesEXT(VkImageDrmFormatModifierPropertiesEXT const *s1,
                                                   VkImageDrmFormatModifierPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkImageStencilUsageCreateInfo(VkImageStencilUsageCreateInfo const *s1,
                                           VkImageStencilUsageCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 93 && VK_EXT_separate_stencil_usage
bool compare_VkImageStencilUsageCreateInfoEXT(VkImageStencilUsageCreateInfoEXT const *s1,
                                              VkImageStencilUsageCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior
bool compare_VkDeviceMemoryOverallocationCreateInfoAMD(
    VkDeviceMemoryOverallocationCreateInfoAMD const *s1,
    VkDeviceMemoryOverallocationCreateInfoAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
bool compare_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
bool compare_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkRenderPassFragmentDensityMapCreateInfoEXT(
    VkRenderPassFragmentDensityMapCreateInfoEXT const *s1,
    VkRenderPassFragmentDensityMapCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_QCOM_fragment_density_map_offset
bool compare_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s1,
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceScalarBlockLayoutFeatures(
    VkPhysicalDeviceScalarBlockLayoutFeatures const *s1,
    VkPhysicalDeviceScalarBlockLayoutFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 93 && VK_EXT_scalar_block_layout
bool compare_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s1,
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_KHR_surface_protected_capabilities
bool compare_VkSurfaceProtectedCapabilitiesKHR(VkSurfaceProtectedCapabilitiesKHR const *s1,
                                               VkSurfaceProtectedCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *s1,
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 108 && VK_KHR_uniform_buffer_standard_layout
bool compare_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s1,
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
bool compare_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
bool compare_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *s1,
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_budget
bool compare_VkPhysicalDeviceMemoryBudgetPropertiesEXT(
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *s1,
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
bool compare_VkPhysicalDeviceMemoryPriorityFeaturesEXT(
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *s1,
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
bool compare_VkMemoryPriorityAllocateInfoEXT(VkMemoryPriorityAllocateInfoEXT const *s1,
                                             VkMemoryPriorityAllocateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 191 && VK_EXT_pageable_device_local_memory
bool compare_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *s1,
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceBufferDeviceAddressFeatures(
    VkPhysicalDeviceBufferDeviceAddressFeatures const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
bool compare_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address
bool compare_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
bool compare_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s1,
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkBufferDeviceAddressInfo(VkBufferDeviceAddressInfo const *s1,
                                       VkBufferDeviceAddressInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
bool compare_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *s1,
                                          VkBufferDeviceAddressInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *s1,
                                          VkBufferDeviceAddressInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkBufferOpaqueCaptureAddressCreateInfo(
    VkBufferOpaqueCaptureAddressCreateInfo const *s1,
    VkBufferOpaqueCaptureAddressCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
bool compare_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s1,
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *s1,
                                                VkBufferDeviceAddressCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
bool compare_VkPhysicalDeviceImageViewImageFormatInfoEXT(
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *s1,
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
bool compare_VkFilterCubicImageViewImageFormatPropertiesEXT(
    VkFilterCubicImageViewImageFormatPropertiesEXT const *s1,
    VkFilterCubicImageViewImageFormatPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceImagelessFramebufferFeatures(
    VkPhysicalDeviceImagelessFramebufferFeatures const *s1,
    VkPhysicalDeviceImagelessFramebufferFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
bool compare_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s1,
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkFramebufferAttachmentsCreateInfo(VkFramebufferAttachmentsCreateInfo const *s1,
                                                VkFramebufferAttachmentsCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
bool compare_VkFramebufferAttachmentsCreateInfoKHR(VkFramebufferAttachmentsCreateInfoKHR const *s1,
                                                   VkFramebufferAttachmentsCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkFramebufferAttachmentImageInfo(VkFramebufferAttachmentImageInfo const *s1,
                                              VkFramebufferAttachmentImageInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
bool compare_VkFramebufferAttachmentImageInfoKHR(VkFramebufferAttachmentImageInfoKHR const *s1,
                                                 VkFramebufferAttachmentImageInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkRenderPassAttachmentBeginInfo(VkRenderPassAttachmentBeginInfo const *s1,
                                             VkRenderPassAttachmentBeginInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
bool compare_VkRenderPassAttachmentBeginInfoKHR(VkRenderPassAttachmentBeginInfoKHR const *s1,
                                                VkRenderPassAttachmentBeginInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceTextureCompressionASTCHDRFeatures(
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures const *s1,
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_texture_compression_astc_hdr
bool compare_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s1,
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixFeaturesNV(
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *s1,
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *s1,
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkCooperativeMatrixPropertiesNV(VkCooperativeMatrixPropertiesNV const *s1,
                                             VkCooperativeMatrixPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_ycbcr_image_arrays
bool compare_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *s1,
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 102 && VK_NVX_image_view_handle
bool compare_VkImageViewHandleInfoNVX(VkImageViewHandleInfoNVX const *s1,
                                      VkImageViewHandleInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 137 && VK_NVX_image_view_handle
bool compare_VkImageViewAddressPropertiesNVX(VkImageViewAddressPropertiesNVX const *s1,
                                             VkImageViewAddressPropertiesNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_frame_token
bool compare_VkPresentFrameTokenGGP(VkPresentFrameTokenGGP const *s1,
                                    VkPresentFrameTokenGGP const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineCreationFeedback(VkPipelineCreationFeedback const *s1,
                                        VkPipelineCreationFeedback const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackEXT(VkPipelineCreationFeedbackEXT const *s1,
                                           VkPipelineCreationFeedbackEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineCreationFeedbackCreateInfo(VkPipelineCreationFeedbackCreateInfo const *s1,
                                                  VkPipelineCreationFeedbackCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *s1,
    VkPipelineCreationFeedbackCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
bool compare_VkSurfaceFullScreenExclusiveInfoEXT(VkSurfaceFullScreenExclusiveInfoEXT const *s1,
                                                 VkSurfaceFullScreenExclusiveInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
bool compare_VkSurfaceFullScreenExclusiveWin32InfoEXT(
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *s1,
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
bool compare_VkSurfaceCapabilitiesFullScreenExclusiveEXT(
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *s1,
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkPhysicalDevicePresentBarrierFeaturesNV(
    VkPhysicalDevicePresentBarrierFeaturesNV const *s1,
    VkPhysicalDevicePresentBarrierFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkSurfaceCapabilitiesPresentBarrierNV(VkSurfaceCapabilitiesPresentBarrierNV const *s1,
                                                   VkSurfaceCapabilitiesPresentBarrierNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkSwapchainPresentBarrierCreateInfoNV(VkSwapchainPresentBarrierCreateInfoNV const *s1,
                                                   VkSwapchainPresentBarrierCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPhysicalDevicePerformanceQueryFeaturesKHR(
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *s1,
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPhysicalDevicePerformanceQueryPropertiesKHR(
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *s1,
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceCounterKHR(VkPerformanceCounterKHR const *s1,
                                     VkPerformanceCounterKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceCounterDescriptionKHR(VkPerformanceCounterDescriptionKHR const *s1,
                                                VkPerformanceCounterDescriptionKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkQueryPoolPerformanceCreateInfoKHR(VkQueryPoolPerformanceCreateInfoKHR const *s1,
                                                 VkQueryPoolPerformanceCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkAcquireProfilingLockInfoKHR(VkAcquireProfilingLockInfoKHR const *s1,
                                           VkAcquireProfilingLockInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceQuerySubmitInfoKHR(VkPerformanceQuerySubmitInfoKHR const *s1,
                                             VkPerformanceQuerySubmitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface
bool compare_VkHeadlessSurfaceCreateInfoEXT(VkHeadlessSurfaceCreateInfoEXT const *s1,
                                            VkHeadlessSurfaceCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkPhysicalDeviceCoverageReductionModeFeaturesNV(
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *s1,
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkPipelineCoverageReductionStateCreateInfoNV(
    VkPipelineCoverageReductionStateCreateInfoNV const *s1,
    VkPipelineCoverageReductionStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkFramebufferMixedSamplesCombinationNV(
    VkFramebufferMixedSamplesCombinationNV const *s1,
    VkFramebufferMixedSamplesCombinationNV const *s2);
#endif

#if VK_HEADER_VERSION >= 115 && VK_INTEL_shader_integer_functions2
bool compare_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *s1,
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkInitializePerformanceApiInfoINTEL(VkInitializePerformanceApiInfoINTEL const *s1,
                                                 VkInitializePerformanceApiInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query
bool compare_VkQueryPoolPerformanceQueryCreateInfoINTEL(
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *s1,
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *s1,
                                        VkQueryPoolCreateInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceMarkerInfoINTEL(VkPerformanceMarkerInfoINTEL const *s1,
                                          VkPerformanceMarkerInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceStreamMarkerInfoINTEL(VkPerformanceStreamMarkerInfoINTEL const *s1,
                                                VkPerformanceStreamMarkerInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceOverrideInfoINTEL(VkPerformanceOverrideInfoINTEL const *s1,
                                            VkPerformanceOverrideInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceConfigurationAcquireInfoINTEL(
    VkPerformanceConfigurationAcquireInfoINTEL const *s1,
    VkPerformanceConfigurationAcquireInfoINTEL const *s2);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_shader_clock
bool compare_VkPhysicalDeviceShaderClockFeaturesKHR(
    VkPhysicalDeviceShaderClockFeaturesKHR const *s1,
    VkPhysicalDeviceShaderClockFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
bool compare_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *s1,
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
bool compare_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *s1,
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 110 && VK_EXT_fragment_shader_interlock
bool compare_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *s1,
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *s1,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s1,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentReferenceStencilLayout(VkAttachmentReferenceStencilLayout const *s1,
                                                VkAttachmentReferenceStencilLayout const *s2);
#endif

#if VK_HEADER_VERSION >= 190 && VK_EXT_primitive_topology_list_restart
bool compare_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *s1,
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentReferenceStencilLayoutKHR(VkAttachmentReferenceStencilLayoutKHR const *s1,
                                                   VkAttachmentReferenceStencilLayoutKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentDescriptionStencilLayout(VkAttachmentDescriptionStencilLayout const *s1,
                                                  VkAttachmentDescriptionStencilLayout const *s2);
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *s1,
    VkAttachmentDescriptionStencilLayoutKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *s1,
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineInfoKHR(VkPipelineInfoKHR const *s1, VkPipelineInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPipelineInfoEXT(VkPipelineInfoEXT const *s1, VkPipelineInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutablePropertiesKHR(VkPipelineExecutablePropertiesKHR const *s1,
                                               VkPipelineExecutablePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutableInfoKHR(VkPipelineExecutableInfoKHR const *s1,
                                         VkPipelineExecutableInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutableInternalRepresentationKHR(
    VkPipelineExecutableInternalRepresentationKHR const *s1,
    VkPipelineExecutableInternalRepresentationKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures const *s1,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_shader_demote_to_helper_invocation
bool compare_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s1,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
bool compare_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *s1,
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceTexelBufferAlignmentProperties(
    VkPhysicalDeviceTexelBufferAlignmentProperties const *s1,
    VkPhysicalDeviceTexelBufferAlignmentProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
bool compare_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s1,
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSubgroupSizeControlFeatures(
    VkPhysicalDeviceSubgroupSizeControlFeatures const *s1,
    VkPhysicalDeviceSubgroupSizeControlFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 118 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSubgroupSizeControlProperties(
    VkPhysicalDeviceSubgroupSizeControlProperties const *s1,
    VkPhysicalDeviceSubgroupSizeControlProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 116 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo const *s1,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 116 && VK_EXT_subgroup_size_control
bool compare_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s1,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkSubpassShadingPipelineCreateInfoHUAWEI(
    VkSubpassShadingPipelineCreateInfoHUAWEI const *s1,
    VkSubpassShadingPipelineCreateInfoHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *s1,
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 239 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkMemoryOpaqueCaptureAddressAllocateInfo(
    VkMemoryOpaqueCaptureAddressAllocateInfo const *s1,
    VkMemoryOpaqueCaptureAddressAllocateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
bool compare_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s1,
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDeviceMemoryOpaqueCaptureAddressInfo(
    VkDeviceMemoryOpaqueCaptureAddressInfo const *s1,
    VkDeviceMemoryOpaqueCaptureAddressInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
bool compare_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s1,
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *s1,
    VkPipelineRasterizationLineStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDevicePipelineCreationCacheControlFeatures(
    VkPhysicalDevicePipelineCreationCacheControlFeatures const *s1,
    VkPhysicalDevicePipelineCreationCacheControlFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_EXT_pipeline_creation_cache_control
bool compare_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s1,
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan11Features(VkPhysicalDeviceVulkan11Features const *s1,
                                              VkPhysicalDeviceVulkan11Features const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan11Properties(VkPhysicalDeviceVulkan11Properties const *s1,
                                                VkPhysicalDeviceVulkan11Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan12Features(VkPhysicalDeviceVulkan12Features const *s1,
                                              VkPhysicalDeviceVulkan12Features const *s2);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan12Properties(VkPhysicalDeviceVulkan12Properties const *s1,
                                                VkPhysicalDeviceVulkan12Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceVulkan13Features(VkPhysicalDeviceVulkan13Features const *s1,
                                              VkPhysicalDeviceVulkan13Features const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceVulkan13Properties(VkPhysicalDeviceVulkan13Properties const *s1,
                                                VkPhysicalDeviceVulkan13Properties const *s2);
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control
bool compare_VkPipelineCompilerControlCreateInfoAMD(
    VkPipelineCompilerControlCreateInfoAMD const *s1,
    VkPipelineCompilerControlCreateInfoAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 121 && VK_AMD_device_coherent_memory
bool compare_VkPhysicalDeviceCoherentMemoryFeaturesAMD(
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *s1,
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceToolProperties(VkPhysicalDeviceToolProperties const *s1,
                                            VkPhysicalDeviceToolProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 130 && VK_EXT_tooling_info
bool compare_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *s1,
                                               VkPhysicalDeviceToolPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
bool compare_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *s1,
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
bool compare_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *s1,
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
bool compare_VkSamplerBorderColorComponentMappingCreateInfoEXT(
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *s1,
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
bool compare_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *s1,
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureBuildRangeInfoKHR(
    VkAccelerationStructureBuildRangeInfoKHR const *s1,
    VkAccelerationStructureBuildRangeInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkAccelerationStructureCreateInfoKHR(VkAccelerationStructureCreateInfoKHR const *s1,
                                                  VkAccelerationStructureCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkAabbPositionsKHR(VkAabbPositionsKHR const *s1, VkAabbPositionsKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkAabbPositionsNV(VkAabbPositionsNV const *s1, VkAabbPositionsNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkTransformMatrixKHR(VkTransformMatrixKHR const *s1, VkTransformMatrixKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkTransformMatrixNV(VkTransformMatrixNV const *s1, VkTransformMatrixNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkAccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR const *s1,
                                                VkAccelerationStructureInstanceKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureInstanceNV(VkAccelerationStructureInstanceNV const *s1,
                                               VkAccelerationStructureInstanceNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkAccelerationStructureDeviceAddressInfoKHR(
    VkAccelerationStructureDeviceAddressInfoKHR const *s1,
    VkAccelerationStructureDeviceAddressInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureVersionInfoKHR(VkAccelerationStructureVersionInfoKHR const *s1,
                                                   VkAccelerationStructureVersionInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkCopyAccelerationStructureInfoKHR(VkCopyAccelerationStructureInfoKHR const *s1,
                                                VkCopyAccelerationStructureInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_ray_tracing_pipeline || VK_KHR_ray_tracing)
bool compare_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s1,
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_pipeline_library
bool compare_VkPipelineLibraryCreateInfoKHR(VkPipelineLibraryCreateInfoKHR const *s1,
                                            VkPipelineLibraryCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 145 && VK_EXT_extended_dynamic_state
bool compare_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 176 && VK_EXT_extended_dynamic_state2
bool compare_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(
    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkColorBlendEquationEXT(VkColorBlendEquationEXT const *s1,
                                     VkColorBlendEquationEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkColorBlendAdvancedEXT(VkColorBlendAdvancedEXT const *s1,
                                     VkColorBlendAdvancedEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
bool compare_VkRenderPassTransformBeginInfoQCOM(VkRenderPassTransformBeginInfoQCOM const *s1,
                                                VkRenderPassTransformBeginInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 159 && VK_QCOM_rotated_copy_commands
bool compare_VkCopyCommandTransformInfoQCOM(VkCopyCommandTransformInfoQCOM const *s1,
                                            VkCopyCommandTransformInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
bool compare_VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *s1,
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
bool compare_VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *s1,
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
bool compare_VkDeviceDiagnosticsConfigCreateInfoNV(VkDeviceDiagnosticsConfigCreateInfoNV const *s1,
                                                   VkDeviceDiagnosticsConfigCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures const *s1,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_zero_initialize_workgroup_memory
bool compare_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s1,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 180 && VK_KHR_shader_subgroup_uniform_control_flow
bool compare_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 139 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *s1,
    VkPhysicalDeviceRobustness2FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 139 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *s1,
    VkPhysicalDeviceRobustness2PropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceImageRobustnessFeatures(
    VkPhysicalDeviceImageRobustnessFeatures const *s1,
    VkPhysicalDeviceImageRobustnessFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_image_robustness
bool compare_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s1,
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_workgroup_memory_explicit_layout
bool compare_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *s1,
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset
bool compare_VkPhysicalDevicePortabilitySubsetFeaturesKHR(
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *s1,
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset
bool compare_VkPhysicalDevicePortabilitySubsetPropertiesKHR(
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *s1,
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 149 && VK_EXT_4444_formats
bool compare_VkPhysicalDevice4444FormatsFeaturesEXT(
    VkPhysicalDevice4444FormatsFeaturesEXT const *s1,
    VkPhysicalDevice4444FormatsFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *s1,
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 239 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferCopy2(VkBufferCopy2 const *s1, VkBufferCopy2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkBufferCopy2KHR(VkBufferCopy2KHR const *s1, VkBufferCopy2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageCopy2(VkImageCopy2 const *s1, VkImageCopy2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkImageCopy2KHR(VkImageCopy2KHR const *s1, VkImageCopy2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageBlit2(VkImageBlit2 const *s1, VkImageBlit2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkImageBlit2KHR(VkImageBlit2KHR const *s1, VkImageBlit2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferImageCopy2(VkBufferImageCopy2 const *s1, VkBufferImageCopy2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *s1,
                                   VkBufferImageCopy2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageResolve2(VkImageResolve2 const *s1, VkImageResolve2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkImageResolve2KHR(VkImageResolve2KHR const *s1, VkImageResolve2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyBufferInfo2(VkCopyBufferInfo2 const *s1, VkCopyBufferInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *s1, VkCopyBufferInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyImageInfo2(VkCopyImageInfo2 const *s1, VkCopyImageInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *s1, VkCopyImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBlitImageInfo2(VkBlitImageInfo2 const *s1, VkBlitImageInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *s1, VkBlitImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyBufferToImageInfo2(VkCopyBufferToImageInfo2 const *s1,
                                      VkCopyBufferToImageInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *s1,
                                         VkCopyBufferToImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyImageToBufferInfo2(VkCopyImageToBufferInfo2 const *s1,
                                      VkCopyImageToBufferInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *s1,
                                         VkCopyImageToBufferInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkResolveImageInfo2(VkResolveImageInfo2 const *s1, VkResolveImageInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *s1,
                                    VkResolveImageInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 155 && VK_EXT_shader_image_atomic_int64
bool compare_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *s1,
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkFragmentShadingRateAttachmentInfoKHR(
    VkFragmentShadingRateAttachmentInfoKHR const *s1,
    VkFragmentShadingRateAttachmentInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPipelineFragmentShadingRateStateCreateInfoKHR(
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *s1,
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRateFeaturesKHR(
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *s1,
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRatePropertiesKHR(
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *s1,
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRateKHR(
    VkPhysicalDeviceFragmentShadingRateKHR const *s1,
    VkPhysicalDeviceFragmentShadingRateKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderTerminateInvocationFeatures(
    VkPhysicalDeviceShaderTerminateInvocationFeatures const *s1,
    VkPhysicalDeviceShaderTerminateInvocationFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_shader_terminate_invocation
bool compare_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s1,
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *s1,
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *s1,
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPipelineFragmentShadingRateEnumStateCreateInfoNV(
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *s1,
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureBuildSizesInfoKHR(
    VkAccelerationStructureBuildSizesInfoKHR const *s1,
    VkAccelerationStructureBuildSizesInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 211 && VK_EXT_image_2d_view_of_3d
bool compare_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(
    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT const *s1,
    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT const *s1,
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
bool compare_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s1,
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeListEXT(VkMutableDescriptorTypeListEXT const *s1,
                                            VkMutableDescriptorTypeListEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *s1,
                                              VkMutableDescriptorTypeListVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeCreateInfoEXT(VkMutableDescriptorTypeCreateInfoEXT const *s1,
                                                  VkMutableDescriptorTypeCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *s1,
    VkMutableDescriptorTypeCreateInfoVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control
bool compare_VkPhysicalDeviceDepthClipControlFeaturesEXT(
    VkPhysicalDeviceDepthClipControlFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClipControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control
bool compare_VkPipelineViewportDepthClipControlCreateInfoEXT(
    VkPipelineViewportDepthClipControlCreateInfoEXT const *s1,
    VkPipelineViewportDepthClipControlCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
bool compare_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *s1,
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
bool compare_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *s1,
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
bool compare_VkVertexInputBindingDescription2EXT(VkVertexInputBindingDescription2EXT const *s1,
                                                 VkVertexInputBindingDescription2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
bool compare_VkVertexInputAttributeDescription2EXT(VkVertexInputAttributeDescription2EXT const *s1,
                                                   VkVertexInputAttributeDescription2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
bool compare_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *s1,
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
bool compare_VkPipelineColorWriteCreateInfoEXT(VkPipelineColorWriteCreateInfoEXT const *s1,
                                               VkPipelineColorWriteCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkMemoryBarrier2(VkMemoryBarrier2 const *s1, VkMemoryBarrier2 const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *s1, VkMemoryBarrier2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageMemoryBarrier2(VkImageMemoryBarrier2 const *s1,
                                   VkImageMemoryBarrier2 const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *s1,
                                      VkImageMemoryBarrier2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferMemoryBarrier2(VkBufferMemoryBarrier2 const *s1,
                                    VkBufferMemoryBarrier2 const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *s1,
                                       VkBufferMemoryBarrier2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDependencyInfo(VkDependencyInfo const *s1, VkDependencyInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkDependencyInfoKHR(VkDependencyInfoKHR const *s1, VkDependencyInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkSemaphoreSubmitInfo(VkSemaphoreSubmitInfo const *s1,
                                   VkSemaphoreSubmitInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *s1,
                                      VkSemaphoreSubmitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCommandBufferSubmitInfo(VkCommandBufferSubmitInfo const *s1,
                                       VkCommandBufferSubmitInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *s1,
                                          VkCommandBufferSubmitInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkSubmitInfo2(VkSubmitInfo2 const *s1, VkSubmitInfo2 const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *s1, VkSubmitInfo2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkQueueFamilyCheckpointProperties2NV(VkQueueFamilyCheckpointProperties2NV const *s1,
                                                  VkQueueFamilyCheckpointProperties2NV const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkCheckpointData2NV(VkCheckpointData2NV const *s1, VkCheckpointData2NV const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSynchronization2Features(
    VkPhysicalDeviceSynchronization2Features const *s1,
    VkPhysicalDeviceSynchronization2Features const *s2);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s1,
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_primitives_generated_query
bool compare_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(
    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT const *s1,
    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 227 && VK_EXT_legacy_dithering
bool compare_VkPhysicalDeviceLegacyDitheringFeaturesEXT(
    VkPhysicalDeviceLegacyDitheringFeaturesEXT const *s1,
    VkPhysicalDeviceLegacyDitheringFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(
    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT const *s1,
    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkSubpassResolvePerformanceQueryEXT(VkSubpassResolvePerformanceQueryEXT const *s1,
                                                 VkSubpassResolvePerformanceQueryEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkMultisampledRenderToSingleSampledInfoEXT(
    VkMultisampledRenderToSingleSampledInfoEXT const *s1,
    VkMultisampledRenderToSingleSampledInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_pipeline_protected_access
bool compare_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkQueueFamilyVideoPropertiesKHR(VkQueueFamilyVideoPropertiesKHR const *s1,
                                             VkQueueFamilyVideoPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkQueueFamilyQueryResultStatusPropertiesKHR(
    VkQueueFamilyQueryResultStatusPropertiesKHR const *s1,
    VkQueueFamilyQueryResultStatusPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkVideoProfileListInfoKHR(VkVideoProfileListInfoKHR const *s1,
                                       VkVideoProfileListInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *s1,
                                                VkPhysicalDeviceVideoFormatInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *s1,
                                        VkVideoFormatPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkVideoProfileInfoKHR(VkVideoProfileInfoKHR const *s1,
                                   VkVideoProfileInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *s1,
                                    VkVideoCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkVideoSessionMemoryRequirementsKHR(VkVideoSessionMemoryRequirementsKHR const *s1,
                                                 VkVideoSessionMemoryRequirementsKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkBindVideoSessionMemoryInfoKHR(VkBindVideoSessionMemoryInfoKHR const *s1,
                                             VkBindVideoSessionMemoryInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkVideoPictureResourceInfoKHR(VkVideoPictureResourceInfoKHR const *s1,
                                           VkVideoPictureResourceInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkVideoReferenceSlotInfoKHR(VkVideoReferenceSlotInfoKHR const *s1,
                                         VkVideoReferenceSlotInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 207 && VK_KHR_video_decode_queue
bool compare_VkVideoDecodeCapabilitiesKHR(VkVideoDecodeCapabilitiesKHR const *s1,
                                          VkVideoDecodeCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 226 && VK_KHR_video_decode_queue
bool compare_VkVideoDecodeUsageInfoKHR(VkVideoDecodeUsageInfoKHR const *s1,
                                       VkVideoDecodeUsageInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_decode_queue
bool compare_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *s1, VkVideoDecodeInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264ProfileInfoKHR(VkVideoDecodeH264ProfileInfoKHR const *s1,
                                             VkVideoDecodeH264ProfileInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264CapabilitiesKHR(VkVideoDecodeH264CapabilitiesKHR const *s1,
                                              VkVideoDecodeH264CapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersAddInfoKHR(
    VkVideoDecodeH264SessionParametersAddInfoKHR const *s1,
    VkVideoDecodeH264SessionParametersAddInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersCreateInfoKHR(
    VkVideoDecodeH264SessionParametersCreateInfoKHR const *s1,
    VkVideoDecodeH264SessionParametersCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264PictureInfoKHR(VkVideoDecodeH264PictureInfoKHR const *s1,
                                             VkVideoDecodeH264PictureInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264DpbSlotInfoKHR(VkVideoDecodeH264DpbSlotInfoKHR const *s1,
                                             VkVideoDecodeH264DpbSlotInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265ProfileInfoKHR(VkVideoDecodeH265ProfileInfoKHR const *s1,
                                             VkVideoDecodeH265ProfileInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265CapabilitiesKHR(VkVideoDecodeH265CapabilitiesKHR const *s1,
                                              VkVideoDecodeH265CapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersAddInfoKHR(
    VkVideoDecodeH265SessionParametersAddInfoKHR const *s1,
    VkVideoDecodeH265SessionParametersAddInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersCreateInfoKHR(
    VkVideoDecodeH265SessionParametersCreateInfoKHR const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265PictureInfoKHR(VkVideoDecodeH265PictureInfoKHR const *s1,
                                             VkVideoDecodeH265PictureInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265DpbSlotInfoKHR(VkVideoDecodeH265DpbSlotInfoKHR const *s1,
                                             VkVideoDecodeH265DpbSlotInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *s1,
                                         VkVideoSessionCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoSessionParametersCreateInfoKHR(VkVideoSessionParametersCreateInfoKHR const *s1,
                                                   VkVideoSessionParametersCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoSessionParametersUpdateInfoKHR(VkVideoSessionParametersUpdateInfoKHR const *s1,
                                                   VkVideoSessionParametersUpdateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *s1,
                                       VkVideoBeginCodingInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoEndCodingInfoKHR(VkVideoEndCodingInfoKHR const *s1,
                                     VkVideoEndCodingInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoCodingControlInfoKHR(VkVideoCodingControlInfoKHR const *s1,
                                         VkVideoCodingControlInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 226 && VK_KHR_video_encode_queue
bool compare_VkVideoEncodeUsageInfoKHR(VkVideoEncodeUsageInfoKHR const *s1,
                                       VkVideoEncodeUsageInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
bool compare_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *s1,
                                             VkVideoEncodeRateControlInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_KHR_video_encode_queue
bool compare_VkVideoEncodeRateControlLayerInfoKHR(VkVideoEncodeRateControlLayerInfoKHR const *s1,
                                                  VkVideoEncodeRateControlLayerInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 206 && VK_KHR_video_encode_queue
bool compare_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *s1,
                                          VkVideoEncodeCapabilitiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH264DpbSlotInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH264VclFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264ReferenceListsInfoEXT(
    VkVideoEncodeH264ReferenceListsInfoEXT const *s1,
    VkVideoEncodeH264ReferenceListsInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264EmitPictureParametersInfoEXT(
    VkVideoEncodeH264EmitPictureParametersInfoEXT const *s1,
    VkVideoEncodeH264EmitPictureParametersInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264ProfileInfoEXT(VkVideoEncodeH264ProfileInfoEXT const *s1,
                                             VkVideoEncodeH264ProfileInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *s1,
                                               VkVideoEncodeH264NaluSliceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264QpEXT(VkVideoEncodeH264QpEXT const *s1,
                                    VkVideoEncodeH264QpEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264FrameSizeEXT(VkVideoEncodeH264FrameSizeEXT const *s1,
                                           VkVideoEncodeH264FrameSizeEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH264RateControlLayerInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH265VclFrameInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265EmitPictureParametersInfoEXT(
    VkVideoEncodeH265EmitPictureParametersInfoEXT const *s1,
    VkVideoEncodeH265EmitPictureParametersInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s1,
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265QpEXT(VkVideoEncodeH265QpEXT const *s1,
                                    VkVideoEncodeH265QpEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265FrameSizeEXT(VkVideoEncodeH265FrameSizeEXT const *s1,
                                           VkVideoEncodeH265FrameSizeEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH265RateControlLayerInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265ProfileInfoEXT(VkVideoEncodeH265ProfileInfoEXT const *s1,
                                             VkVideoEncodeH265ProfileInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH265DpbSlotInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265ReferenceListsInfoEXT(
    VkVideoEncodeH265ReferenceListsInfoEXT const *s1,
    VkVideoEncodeH265ReferenceListsInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
bool compare_VkPhysicalDeviceInheritedViewportScissorFeaturesNV(
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *s1,
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
bool compare_VkCommandBufferInheritanceViewportScissorInfoNV(
    VkCommandBufferInheritanceViewportScissorInfoNV const *s1,
    VkCommandBufferInheritanceViewportScissorInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_ycbcr_2plane_444_formats
bool compare_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *s1,
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPhysicalDeviceProvokingVertexFeaturesEXT(
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *s1,
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPhysicalDeviceProvokingVertexPropertiesEXT(
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *s1,
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *s1,
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuModuleCreateInfoNVX(VkCuModuleCreateInfoNVX const *s1,
                                     VkCuModuleCreateInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuFunctionCreateInfoNVX(VkCuFunctionCreateInfoNVX const *s1,
                                       VkCuFunctionCreateInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuLaunchInfoNVX(VkCuLaunchInfoNVX const *s1, VkCuLaunchInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferFeaturesEXT(
    VkPhysicalDeviceDescriptorBufferFeaturesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorAddressInfoEXT(VkDescriptorAddressInfoEXT const *s1,
                                        VkDescriptorAddressInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorBufferBindingInfoEXT(VkDescriptorBufferBindingInfoEXT const *s1,
                                              VkDescriptorBufferBindingInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(
    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT const *s1,
    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkBufferCaptureDescriptorDataInfoEXT(VkBufferCaptureDescriptorDataInfoEXT const *s1,
                                                  VkBufferCaptureDescriptorDataInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkImageCaptureDescriptorDataInfoEXT(VkImageCaptureDescriptorDataInfoEXT const *s1,
                                                 VkImageCaptureDescriptorDataInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkImageViewCaptureDescriptorDataInfoEXT(
    VkImageViewCaptureDescriptorDataInfoEXT const *s1,
    VkImageViewCaptureDescriptorDataInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkSamplerCaptureDescriptorDataInfoEXT(VkSamplerCaptureDescriptorDataInfoEXT const *s1,
                                                   VkSamplerCaptureDescriptorDataInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkAccelerationStructureCaptureDescriptorDataInfoEXT(
    VkAccelerationStructureCaptureDescriptorDataInfoEXT const *s1,
    VkAccelerationStructureCaptureDescriptorDataInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkOpaqueCaptureDescriptorDataCreateInfoEXT(
    VkOpaqueCaptureDescriptorDataCreateInfoEXT const *s1,
    VkOpaqueCaptureDescriptorDataCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderIntegerDotProductFeatures(
    VkPhysicalDeviceShaderIntegerDotProductFeatures const *s1,
    VkPhysicalDeviceShaderIntegerDotProductFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 190 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderIntegerDotProductProperties(
    VkPhysicalDeviceShaderIntegerDotProductProperties const *s1,
    VkPhysicalDeviceShaderIntegerDotProductProperties const *s2);
#endif

#if VK_HEADER_VERSION >= 190 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_physical_device_drm
bool compare_VkPhysicalDeviceDrmPropertiesEXT(VkPhysicalDeviceDrmPropertiesEXT const *s1,
                                              VkPhysicalDeviceDrmPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureMotionInfoNV(VkAccelerationStructureMotionInfoNV const *s1,
                                                 VkAccelerationStructureMotionInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkSRTDataNV(VkSRTDataNV const *s1, VkSRTDataNV const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureSRTMotionInstanceNV(
    VkAccelerationStructureSRTMotionInstanceNV const *s1,
    VkAccelerationStructureSRTMotionInstanceNV const *s2);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureMatrixMotionInstanceNV(
    VkAccelerationStructureMatrixMotionInstanceNV const *s1,
    VkAccelerationStructureMatrixMotionInstanceNV const *s2);
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
bool compare_VkMemoryGetRemoteAddressInfoNV(VkMemoryGetRemoteAddressInfoNV const *s1,
                                            VkMemoryGetRemoteAddressInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImportMemoryBufferCollectionFUCHSIA(VkImportMemoryBufferCollectionFUCHSIA const *s1,
                                                   VkImportMemoryBufferCollectionFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionImageCreateInfoFUCHSIA(
    VkBufferCollectionImageCreateInfoFUCHSIA const *s1,
    VkBufferCollectionImageCreateInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionBufferCreateInfoFUCHSIA(
    VkBufferCollectionBufferCreateInfoFUCHSIA const *s1,
    VkBufferCollectionBufferCreateInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionCreateInfoFUCHSIA(VkBufferCollectionCreateInfoFUCHSIA const *s1,
                                                 VkBufferCollectionCreateInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionPropertiesFUCHSIA(VkBufferCollectionPropertiesFUCHSIA const *s1,
                                                 VkBufferCollectionPropertiesFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferConstraintsInfoFUCHSIA(VkBufferConstraintsInfoFUCHSIA const *s1,
                                            VkBufferConstraintsInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkSysmemColorSpaceFUCHSIA(VkSysmemColorSpaceFUCHSIA const *s1,
                                       VkSysmemColorSpaceFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImageFormatConstraintsInfoFUCHSIA(VkImageFormatConstraintsInfoFUCHSIA const *s1,
                                                 VkImageFormatConstraintsInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImageConstraintsInfoFUCHSIA(VkImageConstraintsInfoFUCHSIA const *s1,
                                           VkImageConstraintsInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionConstraintsInfoFUCHSIA(
    VkBufferCollectionConstraintsInfoFUCHSIA const *s1,
    VkBufferCollectionConstraintsInfoFUCHSIA const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_rgba10x6_formats
bool compare_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *s1,
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkFormatProperties3(VkFormatProperties3 const *s1, VkFormatProperties3 const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_format_feature_flags2
bool compare_VkFormatProperties3KHR(VkFormatProperties3KHR const *s1,
                                    VkFormatProperties3KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierPropertiesList2EXT(VkDrmFormatModifierPropertiesList2EXT const *s1,
                                                   VkDrmFormatModifierPropertiesList2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierProperties2EXT(VkDrmFormatModifierProperties2EXT const *s1,
                                               VkDrmFormatModifierProperties2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 195 && VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s1,
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineRenderingCreateInfo(VkPipelineRenderingCreateInfo const *s1,
                                           VkPipelineRenderingCreateInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkPipelineRenderingCreateInfoKHR(VkPipelineRenderingCreateInfoKHR const *s1,
                                              VkPipelineRenderingCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkRenderingInfo(VkRenderingInfo const *s1, VkRenderingInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && (VK_KHR_dynamic_rendering || VK_QCOM_tile_properties)
bool compare_VkRenderingInfoKHR(VkRenderingInfoKHR const *s1, VkRenderingInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkRenderingFragmentShadingRateAttachmentInfoKHR(
    VkRenderingFragmentShadingRateAttachmentInfoKHR const *s1,
    VkRenderingFragmentShadingRateAttachmentInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkRenderingFragmentDensityMapAttachmentInfoEXT(
    VkRenderingFragmentDensityMapAttachmentInfoEXT const *s1,
    VkRenderingFragmentDensityMapAttachmentInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceDynamicRenderingFeatures(
    VkPhysicalDeviceDynamicRenderingFeatures const *s1,
    VkPhysicalDeviceDynamicRenderingFeatures const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkPhysicalDeviceDynamicRenderingFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s1,
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCommandBufferInheritanceRenderingInfo(
    VkCommandBufferInheritanceRenderingInfo const *s1,
    VkCommandBufferInheritanceRenderingInfo const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkCommandBufferInheritanceRenderingInfoKHR(
    VkCommandBufferInheritanceRenderingInfoKHR const *s1,
    VkCommandBufferInheritanceRenderingInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkAttachmentSampleCountInfoAMD(VkAttachmentSampleCountInfoAMD const *s1,
                                            VkAttachmentSampleCountInfoAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkAttachmentSampleCountInfoNV(VkAttachmentSampleCountInfoNV const *s1,
                                           VkAttachmentSampleCountInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkMultiviewPerViewAttributesInfoNVX(VkMultiviewPerViewAttributesInfoNVX const *s1,
                                                 VkMultiviewPerViewAttributesInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod
bool compare_VkPhysicalDeviceImageViewMinLodFeaturesEXT(
    VkPhysicalDeviceImageViewMinLodFeaturesEXT const *s1,
    VkPhysicalDeviceImageViewMinLodFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod
bool compare_VkImageViewMinLodCreateInfoEXT(VkImageViewMinLodCreateInfoEXT const *s1,
                                            VkImageViewMinLodCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_rasterization_order_attachment_access
bool compare_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT const *s1,
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 200 && VK_ARM_rasterization_order_attachment_access
bool compare_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s1,
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_NV_linear_color_attachment
bool compare_VkPhysicalDeviceLinearColorAttachmentFeaturesNV(
    VkPhysicalDeviceLinearColorAttachmentFeaturesNV const *s1,
    VkPhysicalDeviceLinearColorAttachmentFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT const *s1,
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT const *s1,
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkGraphicsPipelineLibraryCreateInfoEXT(
    VkGraphicsPipelineLibraryCreateInfoEXT const *s1,
    VkGraphicsPipelineLibraryCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(
    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE const *s1,
    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkDescriptorSetBindingReferenceVALVE(VkDescriptorSetBindingReferenceVALVE const *s1,
                                                  VkDescriptorSetBindingReferenceVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkDescriptorSetLayoutHostMappingInfoVALVE(
    VkDescriptorSetLayoutHostMappingInfoVALVE const *s1,
    VkDescriptorSetLayoutHostMappingInfoVALVE const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(
    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT const *s1,
    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(
    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT const *s1,
    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPipelineShaderStageModuleIdentifierCreateInfoEXT(
    VkPipelineShaderStageModuleIdentifierCreateInfoEXT const *s1,
    VkPipelineShaderStageModuleIdentifierCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkShaderModuleIdentifierEXT(VkShaderModuleIdentifierEXT const *s1,
                                         VkShaderModuleIdentifierEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkImageCompressionControlEXT(VkImageCompressionControlEXT const *s1,
                                          VkImageCompressionControlEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkPhysicalDeviceImageCompressionControlFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlFeaturesEXT const *s1,
    VkPhysicalDeviceImageCompressionControlFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkImageCompressionPropertiesEXT(VkImageCompressionPropertiesEXT const *s1,
                                             VkImageCompressionPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control_swapchain
bool compare_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT const *s1,
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkImageSubresource2EXT(VkImageSubresource2EXT const *s1,
                                    VkImageSubresource2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *s1,
                                     VkSubresourceLayout2EXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationControlEXT(VkRenderPassCreationControlEXT const *s1,
                                            VkRenderPassCreationControlEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationFeedbackInfoEXT(VkRenderPassCreationFeedbackInfoEXT const *s1,
                                                 VkRenderPassCreationFeedbackInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationFeedbackCreateInfoEXT(
    VkRenderPassCreationFeedbackCreateInfoEXT const *s1,
    VkRenderPassCreationFeedbackCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassSubpassFeedbackInfoEXT(VkRenderPassSubpassFeedbackInfoEXT const *s1,
                                                VkRenderPassSubpassFeedbackInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassSubpassFeedbackCreateInfoEXT(
    VkRenderPassSubpassFeedbackCreateInfoEXT const *s1,
    VkRenderPassSubpassFeedbackCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(
    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT const *s1,
    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapCreateInfoEXT(VkMicromapCreateInfoEXT const *s1,
                                     VkMicromapCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapVersionInfoEXT(VkMicromapVersionInfoEXT const *s1,
                                      VkMicromapVersionInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkCopyMicromapInfoEXT(VkCopyMicromapInfoEXT const *s1,
                                   VkCopyMicromapInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapBuildSizesInfoEXT(VkMicromapBuildSizesInfoEXT const *s1,
                                         VkMicromapBuildSizesInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapUsageEXT(VkMicromapUsageEXT const *s1, VkMicromapUsageEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapTriangleEXT(VkMicromapTriangleEXT const *s1,
                                   VkMicromapTriangleEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkPhysicalDeviceOpacityMicromapFeaturesEXT(
    VkPhysicalDeviceOpacityMicromapFeaturesEXT const *s1,
    VkPhysicalDeviceOpacityMicromapFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkPhysicalDeviceOpacityMicromapPropertiesEXT(
    VkPhysicalDeviceOpacityMicromapPropertiesEXT const *s1,
    VkPhysicalDeviceOpacityMicromapPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPipelinePropertiesIdentifierEXT(VkPipelinePropertiesIdentifierEXT const *s1,
                                               VkPipelinePropertiesIdentifierEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPhysicalDevicePipelinePropertiesFeaturesEXT(
    VkPhysicalDevicePipelinePropertiesFeaturesEXT const *s1,
    VkPhysicalDevicePipelinePropertiesFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 215 && VK_AMD_shader_early_and_late_fragment_tests
bool compare_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD const *s1,
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalObjectCreateInfoEXT(VkExportMetalObjectCreateInfoEXT const *s1,
                                              VkExportMetalObjectCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalObjectsInfoEXT(VkExportMetalObjectsInfoEXT const *s1,
                                         VkExportMetalObjectsInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalDeviceInfoEXT(VkExportMetalDeviceInfoEXT const *s1,
                                        VkExportMetalDeviceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalCommandQueueInfoEXT(VkExportMetalCommandQueueInfoEXT const *s1,
                                              VkExportMetalCommandQueueInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalBufferInfoEXT(VkExportMetalBufferInfoEXT const *s1,
                                        VkExportMetalBufferInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalBufferInfoEXT(VkImportMetalBufferInfoEXT const *s1,
                                        VkImportMetalBufferInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalTextureInfoEXT(VkExportMetalTextureInfoEXT const *s1,
                                         VkExportMetalTextureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalTextureInfoEXT(VkImportMetalTextureInfoEXT const *s1,
                                         VkImportMetalTextureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalIOSurfaceInfoEXT(VkExportMetalIOSurfaceInfoEXT const *s1,
                                           VkExportMetalIOSurfaceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalIOSurfaceInfoEXT(VkImportMetalIOSurfaceInfoEXT const *s1,
                                           VkImportMetalIOSurfaceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalSharedEventInfoEXT(VkExportMetalSharedEventInfoEXT const *s1,
                                             VkExportMetalSharedEventInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalSharedEventInfoEXT(VkImportMetalSharedEventInfoEXT const *s1,
                                             VkImportMetalSharedEventInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_non_seamless_cube_map
bool compare_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(
    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT const *s1,
    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 221 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessFeaturesEXT(
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 221 && VK_EXT_pipeline_robustness
bool compare_VkPipelineRobustnessCreateInfoEXT(VkPipelineRobustnessCreateInfoEXT const *s1,
                                               VkPipelineRobustnessCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 221 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessPropertiesEXT(
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkImageViewSampleWeightCreateInfoQCOM(VkImageViewSampleWeightCreateInfoQCOM const *s1,
                                                   VkImageViewSampleWeightCreateInfoQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkPhysicalDeviceImageProcessingFeaturesQCOM(
    VkPhysicalDeviceImageProcessingFeaturesQCOM const *s1,
    VkPhysicalDeviceImageProcessingFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkPhysicalDeviceImageProcessingPropertiesQCOM(
    VkPhysicalDeviceImageProcessingPropertiesQCOM const *s1,
    VkPhysicalDeviceImageProcessingPropertiesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties
bool compare_VkPhysicalDeviceTilePropertiesFeaturesQCOM(
    VkPhysicalDeviceTilePropertiesFeaturesQCOM const *s1,
    VkPhysicalDeviceTilePropertiesFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties
bool compare_VkTilePropertiesQCOM(VkTilePropertiesQCOM const *s1, VkTilePropertiesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling
bool compare_VkPhysicalDeviceAmigoProfilingFeaturesSEC(
    VkPhysicalDeviceAmigoProfilingFeaturesSEC const *s1,
    VkPhysicalDeviceAmigoProfilingFeaturesSEC const *s2);
#endif

#if VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling
bool compare_VkAmigoProfilingSubmitInfoSEC(VkAmigoProfilingSubmitInfoSEC const *s1,
                                           VkAmigoProfilingSubmitInfoSEC const *s2);
#endif

#if VK_HEADER_VERSION >= 224 && VK_EXT_attachment_feedback_loop_layout
bool compare_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(
    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT const *s1,
    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_depth_clamp_zero_one
bool compare_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report
bool compare_VkPhysicalDeviceAddressBindingReportFeaturesEXT(
    VkPhysicalDeviceAddressBindingReportFeaturesEXT const *s1,
    VkPhysicalDeviceAddressBindingReportFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report
bool compare_VkDeviceAddressBindingCallbackDataEXT(VkDeviceAddressBindingCallbackDataEXT const *s1,
                                                   VkDeviceAddressBindingCallbackDataEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkPhysicalDeviceOpticalFlowFeaturesNV(VkPhysicalDeviceOpticalFlowFeaturesNV const *s1,
                                                   VkPhysicalDeviceOpticalFlowFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkPhysicalDeviceOpticalFlowPropertiesNV(
    VkPhysicalDeviceOpticalFlowPropertiesNV const *s1,
    VkPhysicalDeviceOpticalFlowPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowImageFormatInfoNV(VkOpticalFlowImageFormatInfoNV const *s1,
                                            VkOpticalFlowImageFormatInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowImageFormatPropertiesNV(VkOpticalFlowImageFormatPropertiesNV const *s1,
                                                  VkOpticalFlowImageFormatPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowSessionCreateInfoNV(VkOpticalFlowSessionCreateInfoNV const *s1,
                                              VkOpticalFlowSessionCreateInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowSessionCreatePrivateDataInfoNV(
    VkOpticalFlowSessionCreatePrivateDataInfoNV const *s1,
    VkOpticalFlowSessionCreatePrivateDataInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowExecuteInfoNV(VkOpticalFlowExecuteInfoNV const *s1,
                                        VkOpticalFlowExecuteInfoNV const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkPhysicalDeviceFaultFeaturesEXT(VkPhysicalDeviceFaultFeaturesEXT const *s1,
                                              VkPhysicalDeviceFaultFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultAddressInfoEXT(VkDeviceFaultAddressInfoEXT const *s1,
                                         VkDeviceFaultAddressInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultVendorInfoEXT(VkDeviceFaultVendorInfoEXT const *s1,
                                        VkDeviceFaultVendorInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultCountsEXT(VkDeviceFaultCountsEXT const *s1,
                                    VkDeviceFaultCountsEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultInfoEXT(VkDeviceFaultInfoEXT const *s1, VkDeviceFaultInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultVendorBinaryHeaderVersionOneEXT(
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s1,
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 240 && VK_EXT_pipeline_library_group_handles
bool compare_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(
    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT const *s1,
    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkDecompressMemoryRegionNV(VkDecompressMemoryRegionNV const *s1,
                                        VkDecompressMemoryRegionNV const *s2);
#endif

#if VK_HEADER_VERSION >= 231 && VK_ARM_shader_core_builtins
bool compare_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s1,
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 231 && VK_ARM_shader_core_builtins
bool compare_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(
    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM const *s1,
    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentModeEXT(VkSurfacePresentModeEXT const *s1,
                                     VkSurfacePresentModeEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentScalingCapabilitiesEXT(
    VkSurfacePresentScalingCapabilitiesEXT const *s1,
    VkSurfacePresentScalingCapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentModeCompatibilityEXT(VkSurfacePresentModeCompatibilityEXT const *s1,
                                                  VkSurfacePresentModeCompatibilityEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT const *s1,
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentFenceInfoEXT(VkSwapchainPresentFenceInfoEXT const *s1,
                                            VkSwapchainPresentFenceInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentModesCreateInfoEXT(VkSwapchainPresentModesCreateInfoEXT const *s1,
                                                  VkSwapchainPresentModesCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentModeInfoEXT(VkSwapchainPresentModeInfoEXT const *s1,
                                           VkSwapchainPresentModeInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentScalingCreateInfoEXT(
    VkSwapchainPresentScalingCreateInfoEXT const *s1,
    VkSwapchainPresentScalingCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkReleaseSwapchainImagesInfoEXT(VkReleaseSwapchainImagesInfoEXT const *s1,
                                             VkReleaseSwapchainImagesInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder
bool compare_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(
    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder
bool compare_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(
    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV const *s1,
    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV const *s2);
#endif

#if VK_HEADER_VERSION >= 236 && VK_LUNARG_direct_driver_loading
bool compare_VkDirectDriverLoadingInfoLUNARG(VkDirectDriverLoadingInfoLUNARG const *s1,
                                             VkDirectDriverLoadingInfoLUNARG const *s2);
#endif

#if VK_HEADER_VERSION >= 236 && VK_LUNARG_direct_driver_loading
bool compare_VkDirectDriverLoadingListLUNARG(VkDirectDriverLoadingListLUNARG const *s1,
                                             VkDirectDriverLoadingListLUNARG const *s2);
#endif

#if VK_HEADER_VERSION >= 236 && VK_QCOM_multiview_per_view_viewports
bool compare_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(
    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM const *s1,
    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264ProfileInfoEXT(VkVideoDecodeH264ProfileInfoEXT const *s1,
                                             VkVideoDecodeH264ProfileInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *s1,
                                              VkVideoDecodeH264CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *s1,
                                             VkVideoDecodeH264PictureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264DpbSlotInfoEXT(VkVideoDecodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoDecodeH264DpbSlotInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265ProfileInfoEXT(VkVideoDecodeH265ProfileInfoEXT const *s1,
                                             VkVideoDecodeH265ProfileInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *s1,
                                              VkVideoDecodeH265CapabilitiesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *s1,
                                             VkVideoDecodeH265PictureInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265DpbSlotInfoEXT(VkVideoDecodeH265DpbSlotInfoEXT const *s1,
                                             VkVideoDecodeH265DpbSlotInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264MvcInfoEXT(VkVideoDecodeH264MvcInfoEXT const *s1,
                                         VkVideoDecodeH264MvcInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoQueueFamilyProperties2KHR(VkVideoQueueFamilyProperties2KHR const *s1,
                                              VkVideoQueueFamilyProperties2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkQueueFamilyQueryResultStatusProperties2KHR(
    VkQueueFamilyQueryResultStatusProperties2KHR const *s1,
    VkQueueFamilyQueryResultStatusProperties2KHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoProfilesKHR(VkVideoProfilesKHR const *s1, VkVideoProfilesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoProfileKHR(VkVideoProfileKHR const *s1, VkVideoProfileKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoGetMemoryPropertiesKHR(VkVideoGetMemoryPropertiesKHR const *s1,
                                           VkVideoGetMemoryPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoBindMemoryKHR(VkVideoBindMemoryKHR const *s1, VkVideoBindMemoryKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoPictureResourceKHR(VkVideoPictureResourceKHR const *s1,
                                       VkVideoPictureResourceKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoReferenceSlotKHR(VkVideoReferenceSlotKHR const *s1,
                                     VkVideoReferenceSlotKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *s1,
                                         VkVideoDecodeH264ProfileEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264MvcEXT(VkVideoDecodeH264MvcEXT const *s1,
                                     VkVideoDecodeH264MvcEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265ProfileEXT(VkVideoDecodeH265ProfileEXT const *s1,
                                         VkVideoDecodeH265ProfileEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264ReferenceListsEXT(VkVideoEncodeH264ReferenceListsEXT const *s1,
                                                VkVideoEncodeH264ReferenceListsEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264EmitPictureParametersEXT(
    VkVideoEncodeH264EmitPictureParametersEXT const *s1,
    VkVideoEncodeH264EmitPictureParametersEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264ProfileEXT(VkVideoEncodeH264ProfileEXT const *s1,
                                         VkVideoEncodeH264ProfileEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *s1,
                                           VkVideoEncodeH264NaluSliceEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265EmitPictureParametersEXT(
    VkVideoEncodeH265EmitPictureParametersEXT const *s1,
    VkVideoEncodeH265EmitPictureParametersEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265NaluSliceSegmentEXT(VkVideoEncodeH265NaluSliceSegmentEXT const *s1,
                                                  VkVideoEncodeH265NaluSliceSegmentEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265ProfileEXT(VkVideoEncodeH265ProfileEXT const *s1,
                                         VkVideoEncodeH265ProfileEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265ReferenceListsEXT(VkVideoEncodeH265ReferenceListsEXT const *s1,
                                                VkVideoEncodeH265ReferenceListsEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 214 && VK_HEADER_VERSION <= 214 &&                                        \
    VK_AMD_shader_early_and_late_fragment_tests
bool compare_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT const *s1,
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264SessionCreateInfoEXT(VkVideoDecodeH264SessionCreateInfoEXT const *s1,
                                                   VkVideoDecodeH264SessionCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265SessionCreateInfoEXT(VkVideoDecodeH265SessionCreateInfoEXT const *s1,
                                                   VkVideoDecodeH265SessionCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264SessionCreateInfoEXT(VkVideoEncodeH264SessionCreateInfoEXT const *s1,
                                                   VkVideoEncodeH264SessionCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265SessionCreateInfoEXT(VkVideoEncodeH265SessionCreateInfoEXT const *s1,
                                                   VkVideoEncodeH265SessionCreateInfoEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265NaluSliceEXT(VkVideoEncodeH265NaluSliceEXT const *s1,
                                           VkVideoEncodeH265NaluSliceEXT const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkBindAccelerationStructureMemoryInfoKHR(
    VkBindAccelerationStructureMemoryInfoKHR const *s1,
    VkBindAccelerationStructureMemoryInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkAccelerationStructureMemoryRequirementsInfoKHR(
    VkAccelerationStructureMemoryRequirementsInfoKHR const *s1,
    VkAccelerationStructureMemoryRequirementsInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkPhysicalDeviceRayTracingFeaturesKHR(VkPhysicalDeviceRayTracingFeaturesKHR const *s1,
                                                   VkPhysicalDeviceRayTracingFeaturesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkPhysicalDeviceRayTracingPropertiesKHR(
    VkPhysicalDeviceRayTracingPropertiesKHR const *s1,
    VkPhysicalDeviceRayTracingPropertiesKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkStridedBufferRegionKHR(VkStridedBufferRegionKHR const *s1,
                                      VkStridedBufferRegionKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkAccelerationStructureBuildOffsetInfoKHR(
    VkAccelerationStructureBuildOffsetInfoKHR const *s1,
    VkAccelerationStructureBuildOffsetInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkAccelerationStructureCreateGeometryTypeInfoKHR(
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *s1,
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkAccelerationStructureVersionKHR(VkAccelerationStructureVersionKHR const *s1,
                                               VkAccelerationStructureVersionKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_deferred_host_operations
bool compare_VkDeferredOperationInfoKHR(VkDeferredOperationInfoKHR const *s1,
                                        VkDeferredOperationInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkDeviceGeneratedCommandsFeaturesNVX(VkDeviceGeneratedCommandsFeaturesNVX const *s1,
                                                  VkDeviceGeneratedCommandsFeaturesNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkDeviceGeneratedCommandsLimitsNVX(VkDeviceGeneratedCommandsLimitsNVX const *s1,
                                                VkDeviceGeneratedCommandsLimitsNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsTokenNVX(VkIndirectCommandsTokenNVX const *s1,
                                        VkIndirectCommandsTokenNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsLayoutTokenNVX(VkIndirectCommandsLayoutTokenNVX const *s1,
                                              VkIndirectCommandsLayoutTokenNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsLayoutCreateInfoNVX(VkIndirectCommandsLayoutCreateInfoNVX const *s1,
                                                   VkIndirectCommandsLayoutCreateInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkCmdProcessCommandsInfoNVX(VkCmdProcessCommandsInfoNVX const *s1,
                                         VkCmdProcessCommandsInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkCmdReserveSpaceForCommandsInfoNVX(VkCmdReserveSpaceForCommandsInfoNVX const *s1,
                                                 VkCmdReserveSpaceForCommandsInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableCreateInfoNVX(VkObjectTableCreateInfoNVX const *s1,
                                        VkObjectTableCreateInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableEntryNVX(VkObjectTableEntryNVX const *s1,
                                   VkObjectTableEntryNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTablePipelineEntryNVX(VkObjectTablePipelineEntryNVX const *s1,
                                           VkObjectTablePipelineEntryNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableDescriptorSetEntryNVX(VkObjectTableDescriptorSetEntryNVX const *s1,
                                                VkObjectTableDescriptorSetEntryNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableVertexBufferEntryNVX(VkObjectTableVertexBufferEntryNVX const *s1,
                                               VkObjectTableVertexBufferEntryNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableIndexBufferEntryNVX(VkObjectTableIndexBufferEntryNVX const *s1,
                                              VkObjectTableIndexBufferEntryNVX const *s2);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTablePushConstantEntryNVX(VkObjectTablePushConstantEntryNVX const *s1,
                                               VkObjectTablePushConstantEntryNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 114 && VK_INTEL_shader_integer_functions2
bool compare_VkPhysicalDeviceShaderIntegerFunctions2INTEL(
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *s1,
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *s2);
#endif

#if VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface
bool compare_VkMirSurfaceCreateInfoKHR(VkMirSurfaceCreateInfoKHR const *s1,
                                       VkMirSurfaceCreateInfoKHR const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkRaytracingPipelineCreateInfoNVX(VkRaytracingPipelineCreateInfoNVX const *s1,
                                               VkRaytracingPipelineCreateInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryTrianglesNVX(VkGeometryTrianglesNVX const *s1,
                                    VkGeometryTrianglesNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryAABBNVX(VkGeometryAABBNVX const *s1, VkGeometryAABBNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryDataNVX(VkGeometryDataNVX const *s1, VkGeometryDataNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryNVX(VkGeometryNVX const *s1, VkGeometryNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkAccelerationStructureCreateInfoNVX(VkAccelerationStructureCreateInfoNVX const *s1,
                                                  VkAccelerationStructureCreateInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkBindAccelerationStructureMemoryInfoNVX(
    VkBindAccelerationStructureMemoryInfoNVX const *s1,
    VkBindAccelerationStructureMemoryInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkDescriptorAccelerationStructureInfoNVX(
    VkDescriptorAccelerationStructureInfoNVX const *s1,
    VkDescriptorAccelerationStructureInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkAccelerationStructureMemoryRequirementsInfoNVX(
    VkAccelerationStructureMemoryRequirementsInfoNVX const *s1,
    VkAccelerationStructureMemoryRequirementsInfoNVX const *s2);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkPhysicalDeviceRaytracingPropertiesNVX(
    VkPhysicalDeviceRaytracingPropertiesNVX const *s1,
    VkPhysicalDeviceRaytracingPropertiesNVX const *s2);
#endif

#ifdef VK_STRUCT_COMPARE_CONFIG_MAIN

bool compare_VkOffset2D(VkOffset2D const *s1, VkOffset2D const *s2) {
  if ((s1->x != s2->x) || (s1->y != s2->y) || false)
    return false;

  return true;
}

bool compare_VkOffset3D(VkOffset3D const *s1, VkOffset3D const *s2) {
  if ((s1->x != s2->x) || (s1->y != s2->y) || (s1->z != s2->z) || false)
    return false;

  return true;
}

bool compare_VkExtent2D(VkExtent2D const *s1, VkExtent2D const *s2) {
  if ((s1->width != s2->width) || (s1->height != s2->height) || false)
    return false;

  return true;
}

bool compare_VkExtent3D(VkExtent3D const *s1, VkExtent3D const *s2) {
  if ((s1->width != s2->width) || (s1->height != s2->height) || (s1->depth != s2->depth) || false)
    return false;

  return true;
}

bool compare_VkViewport(VkViewport const *s1, VkViewport const *s2) {
  if ((s1->x != s2->x) || (s1->y != s2->y) || (s1->width != s2->width) ||
      (s1->height != s2->height) || (s1->minDepth != s2->minDepth) ||
      (s1->maxDepth != s2->maxDepth) || false)
    return false;

  return true;
}

bool compare_VkRect2D(VkRect2D const *s1, VkRect2D const *s2) {
  if (!compare_VkOffset2D(&s1->offset, &s2->offset) ||
      !compare_VkExtent2D(&s1->extent, &s2->extent) || false)
    return false;

  return true;
}

bool compare_VkClearRect(VkClearRect const *s1, VkClearRect const *s2) {
  if (!compare_VkRect2D(&s1->rect, &s2->rect) || (s1->baseArrayLayer != s2->baseArrayLayer) ||
      (s1->layerCount != s2->layerCount) || false)
    return false;

  return true;
}

bool compare_VkComponentMapping(VkComponentMapping const *s1, VkComponentMapping const *s2) {
  if ((s1->r != s2->r) || (s1->g != s2->g) || (s1->b != s2->b) || (s1->a != s2->a) || false)
    return false;

  return true;
}

bool compare_VkPhysicalDeviceProperties(VkPhysicalDeviceProperties const *s1,
                                        VkPhysicalDeviceProperties const *s2) {
  if ((s1->apiVersion != s2->apiVersion) || (s1->driverVersion != s2->driverVersion) ||
      (s1->vendorID != s2->vendorID) || (s1->deviceID != s2->deviceID) ||
      (s1->deviceType != s2->deviceType) ||
      !compare_VkPhysicalDeviceLimits(&s1->limits, &s2->limits) ||
      !compare_VkPhysicalDeviceSparseProperties(&s1->sparseProperties, &s2->sparseProperties) ||
      false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_PHYSICAL_DEVICE_NAME_SIZE; ++i) {
    if (s1->deviceName[i] != s2->deviceName[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
    if (s1->pipelineCacheUUID[i] != s2->pipelineCacheUUID[i])
      return false;
  }

  return true;
}

bool compare_VkExtensionProperties(VkExtensionProperties const *s1,
                                   VkExtensionProperties const *s2) {
  if ((s1->specVersion != s2->specVersion) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_EXTENSION_NAME_SIZE; ++i) {
    if (s1->extensionName[i] != s2->extensionName[i])
      return false;
  }

  return true;
}

bool compare_VkLayerProperties(VkLayerProperties const *s1, VkLayerProperties const *s2) {
  if ((s1->specVersion != s2->specVersion) ||
      (s1->implementationVersion != s2->implementationVersion) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_EXTENSION_NAME_SIZE; ++i) {
    if (s1->layerName[i] != s2->layerName[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->description[i] != s2->description[i])
      return false;
  }

  return true;
}

bool compare_VkApplicationInfo(VkApplicationInfo const *s1, VkApplicationInfo const *s2) {
  if ((s1->applicationVersion != s2->applicationVersion) ||
      (s1->engineVersion != s2->engineVersion) || (s1->apiVersion != s2->apiVersion) || false)
    return false;

  return true;
}

bool compare_VkAllocationCallbacks(VkAllocationCallbacks const *s1,
                                   VkAllocationCallbacks const *s2) {
  if ((s1->pfnAllocation != s2->pfnAllocation) || (s1->pfnReallocation != s2->pfnReallocation) ||
      (s1->pfnFree != s2->pfnFree) || (s1->pfnInternalAllocation != s2->pfnInternalAllocation) ||
      (s1->pfnInternalFree != s2->pfnInternalFree) || false)
    return false;

  return true;
}

bool compare_VkDeviceQueueCreateInfo(VkDeviceQueueCreateInfo const *s1,
                                     VkDeviceQueueCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->queueFamilyIndex != s2->queueFamilyIndex) ||
      (s1->queueCount != s2->queueCount) || false)
    return false;

  return true;
}

bool compare_VkDeviceCreateInfo(VkDeviceCreateInfo const *s1, VkDeviceCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->queueCreateInfoCount != s2->queueCreateInfoCount) ||
      (s1->enabledLayerCount != s2->enabledLayerCount) ||
      (s1->enabledExtensionCount != s2->enabledExtensionCount) || false)
    return false;

  return true;
}

bool compare_VkInstanceCreateInfo(VkInstanceCreateInfo const *s1, VkInstanceCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->enabledLayerCount != s2->enabledLayerCount) ||
      (s1->enabledExtensionCount != s2->enabledExtensionCount) || false)
    return false;

  return true;
}

bool compare_VkQueueFamilyProperties(VkQueueFamilyProperties const *s1,
                                     VkQueueFamilyProperties const *s2) {
  if ((s1->queueFlags != s2->queueFlags) || (s1->queueCount != s2->queueCount) ||
      (s1->timestampValidBits != s2->timestampValidBits) ||
      !compare_VkExtent3D(&s1->minImageTransferGranularity, &s2->minImageTransferGranularity) ||
      false)
    return false;

  return true;
}

bool compare_VkPhysicalDeviceMemoryProperties(VkPhysicalDeviceMemoryProperties const *s1,
                                              VkPhysicalDeviceMemoryProperties const *s2) {
  if ((s1->memoryTypeCount != s2->memoryTypeCount) ||
      (s1->memoryHeapCount != s2->memoryHeapCount) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_MEMORY_TYPES; ++i) {
    if (compare_VkMemoryType(&s1->memoryTypes[i], &s2->memoryTypes[i]))
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_MEMORY_HEAPS; ++i) {
    if (compare_VkMemoryHeap(&s1->memoryHeaps[i], &s2->memoryHeaps[i]))
      return false;
  }

  return true;
}

bool compare_VkMemoryAllocateInfo(VkMemoryAllocateInfo const *s1, VkMemoryAllocateInfo const *s2) {
  if ((s1->allocationSize != s2->allocationSize) || (s1->memoryTypeIndex != s2->memoryTypeIndex) ||
      false)
    return false;

  return true;
}

bool compare_VkMemoryRequirements(VkMemoryRequirements const *s1, VkMemoryRequirements const *s2) {
  if ((s1->size != s2->size) || (s1->alignment != s2->alignment) ||
      (s1->memoryTypeBits != s2->memoryTypeBits) || false)
    return false;

  return true;
}

bool compare_VkSparseImageFormatProperties(VkSparseImageFormatProperties const *s1,
                                           VkSparseImageFormatProperties const *s2) {
  if ((s1->aspectMask != s2->aspectMask) ||
      !compare_VkExtent3D(&s1->imageGranularity, &s2->imageGranularity) ||
      (s1->flags != s2->flags) || false)
    return false;

  return true;
}

bool compare_VkSparseImageMemoryRequirements(VkSparseImageMemoryRequirements const *s1,
                                             VkSparseImageMemoryRequirements const *s2) {
  if (!compare_VkSparseImageFormatProperties(&s1->formatProperties, &s2->formatProperties) ||
      (s1->imageMipTailFirstLod != s2->imageMipTailFirstLod) ||
      (s1->imageMipTailSize != s2->imageMipTailSize) ||
      (s1->imageMipTailOffset != s2->imageMipTailOffset) ||
      (s1->imageMipTailStride != s2->imageMipTailStride) || false)
    return false;

  return true;
}

bool compare_VkMemoryType(VkMemoryType const *s1, VkMemoryType const *s2) {
  if ((s1->propertyFlags != s2->propertyFlags) || (s1->heapIndex != s2->heapIndex) || false)
    return false;

  return true;
}

bool compare_VkMemoryHeap(VkMemoryHeap const *s1, VkMemoryHeap const *s2) {
  if ((s1->size != s2->size) || (s1->flags != s2->flags) || false)
    return false;

  return true;
}

bool compare_VkMappedMemoryRange(VkMappedMemoryRange const *s1, VkMappedMemoryRange const *s2) {
  if ((s1->memory != s2->memory) || (s1->offset != s2->offset) || (s1->size != s2->size) || false)
    return false;

  return true;
}

bool compare_VkFormatProperties(VkFormatProperties const *s1, VkFormatProperties const *s2) {
  if ((s1->linearTilingFeatures != s2->linearTilingFeatures) ||
      (s1->optimalTilingFeatures != s2->optimalTilingFeatures) ||
      (s1->bufferFeatures != s2->bufferFeatures) || false)
    return false;

  return true;
}

bool compare_VkImageFormatProperties(VkImageFormatProperties const *s1,
                                     VkImageFormatProperties const *s2) {
  if (!compare_VkExtent3D(&s1->maxExtent, &s2->maxExtent) ||
      (s1->maxMipLevels != s2->maxMipLevels) || (s1->maxArrayLayers != s2->maxArrayLayers) ||
      (s1->sampleCounts != s2->sampleCounts) || (s1->maxResourceSize != s2->maxResourceSize) ||
      false)
    return false;

  return true;
}

bool compare_VkDescriptorBufferInfo(VkDescriptorBufferInfo const *s1,
                                    VkDescriptorBufferInfo const *s2) {
  if ((s1->buffer != s2->buffer) || (s1->offset != s2->offset) || (s1->range != s2->range) || false)
    return false;

  return true;
}

bool compare_VkDescriptorImageInfo(VkDescriptorImageInfo const *s1,
                                   VkDescriptorImageInfo const *s2) {
  if ((s1->sampler != s2->sampler) || (s1->imageView != s2->imageView) ||
      (s1->imageLayout != s2->imageLayout) || false)
    return false;

  return true;
}

bool compare_VkWriteDescriptorSet(VkWriteDescriptorSet const *s1, VkWriteDescriptorSet const *s2) {
  if ((s1->dstSet != s2->dstSet) || (s1->dstBinding != s2->dstBinding) ||
      (s1->dstArrayElement != s2->dstArrayElement) ||
      (s1->descriptorCount != s2->descriptorCount) || (s1->descriptorType != s2->descriptorType) ||
      false)
    return false;

  return true;
}

bool compare_VkCopyDescriptorSet(VkCopyDescriptorSet const *s1, VkCopyDescriptorSet const *s2) {
  if ((s1->srcSet != s2->srcSet) || (s1->srcBinding != s2->srcBinding) ||
      (s1->srcArrayElement != s2->srcArrayElement) || (s1->dstSet != s2->dstSet) ||
      (s1->dstBinding != s2->dstBinding) || (s1->dstArrayElement != s2->dstArrayElement) ||
      (s1->descriptorCount != s2->descriptorCount) || false)
    return false;

  return true;
}

bool compare_VkBufferCreateInfo(VkBufferCreateInfo const *s1, VkBufferCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->size != s2->size) || (s1->usage != s2->usage) ||
      (s1->sharingMode != s2->sharingMode) ||
      (s1->queueFamilyIndexCount != s2->queueFamilyIndexCount) || false)
    return false;

  return true;
}

bool compare_VkBufferViewCreateInfo(VkBufferViewCreateInfo const *s1,
                                    VkBufferViewCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->buffer != s2->buffer) || (s1->format != s2->format) ||
      (s1->offset != s2->offset) || (s1->range != s2->range) || false)
    return false;

  return true;
}

bool compare_VkImageSubresource(VkImageSubresource const *s1, VkImageSubresource const *s2) {
  if ((s1->aspectMask != s2->aspectMask) || (s1->mipLevel != s2->mipLevel) ||
      (s1->arrayLayer != s2->arrayLayer) || false)
    return false;

  return true;
}

bool compare_VkImageSubresourceLayers(VkImageSubresourceLayers const *s1,
                                      VkImageSubresourceLayers const *s2) {
  if ((s1->aspectMask != s2->aspectMask) || (s1->mipLevel != s2->mipLevel) ||
      (s1->baseArrayLayer != s2->baseArrayLayer) || (s1->layerCount != s2->layerCount) || false)
    return false;

  return true;
}

bool compare_VkImageSubresourceRange(VkImageSubresourceRange const *s1,
                                     VkImageSubresourceRange const *s2) {
  if ((s1->aspectMask != s2->aspectMask) || (s1->baseMipLevel != s2->baseMipLevel) ||
      (s1->levelCount != s2->levelCount) || (s1->baseArrayLayer != s2->baseArrayLayer) ||
      (s1->layerCount != s2->layerCount) || false)
    return false;

  return true;
}

bool compare_VkMemoryBarrier(VkMemoryBarrier const *s1, VkMemoryBarrier const *s2) {
  if ((s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) || false)
    return false;

  return true;
}

bool compare_VkBufferMemoryBarrier(VkBufferMemoryBarrier const *s1,
                                   VkBufferMemoryBarrier const *s2) {
  if ((s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->buffer != s2->buffer) ||
      (s1->offset != s2->offset) || (s1->size != s2->size) || false)
    return false;

  return true;
}

bool compare_VkImageMemoryBarrier(VkImageMemoryBarrier const *s1, VkImageMemoryBarrier const *s2) {
  if ((s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->oldLayout != s2->oldLayout) || (s1->newLayout != s2->newLayout) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->image != s2->image) ||
      !compare_VkImageSubresourceRange(&s1->subresourceRange, &s2->subresourceRange) || false)
    return false;

  return true;
}

bool compare_VkImageCreateInfo(VkImageCreateInfo const *s1, VkImageCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->imageType != s2->imageType) || (s1->format != s2->format) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent) || (s1->mipLevels != s2->mipLevels) ||
      (s1->arrayLayers != s2->arrayLayers) || (s1->samples != s2->samples) ||
      (s1->tiling != s2->tiling) || (s1->usage != s2->usage) ||
      (s1->sharingMode != s2->sharingMode) ||
      (s1->queueFamilyIndexCount != s2->queueFamilyIndexCount) ||
      (s1->initialLayout != s2->initialLayout) || false)
    return false;

  return true;
}

bool compare_VkSubresourceLayout(VkSubresourceLayout const *s1, VkSubresourceLayout const *s2) {
  if ((s1->offset != s2->offset) || (s1->size != s2->size) || (s1->rowPitch != s2->rowPitch) ||
      (s1->arrayPitch != s2->arrayPitch) || (s1->depthPitch != s2->depthPitch) || false)
    return false;

  return true;
}

bool compare_VkImageViewCreateInfo(VkImageViewCreateInfo const *s1,
                                   VkImageViewCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->image != s2->image) || (s1->viewType != s2->viewType) ||
      (s1->format != s2->format) || !compare_VkComponentMapping(&s1->components, &s2->components) ||
      !compare_VkImageSubresourceRange(&s1->subresourceRange, &s2->subresourceRange) || false)
    return false;

  return true;
}

bool compare_VkBufferCopy(VkBufferCopy const *s1, VkBufferCopy const *s2) {
  if ((s1->srcOffset != s2->srcOffset) || (s1->dstOffset != s2->dstOffset) ||
      (s1->size != s2->size) || false)
    return false;

  return true;
}

bool compare_VkSparseMemoryBind(VkSparseMemoryBind const *s1, VkSparseMemoryBind const *s2) {
  if ((s1->resourceOffset != s2->resourceOffset) || (s1->size != s2->size) ||
      (s1->memory != s2->memory) || (s1->memoryOffset != s2->memoryOffset) ||
      (s1->flags != s2->flags) || false)
    return false;

  return true;
}

bool compare_VkSparseImageMemoryBind(VkSparseImageMemoryBind const *s1,
                                     VkSparseImageMemoryBind const *s2) {
  if (!compare_VkImageSubresource(&s1->subresource, &s2->subresource) ||
      !compare_VkOffset3D(&s1->offset, &s2->offset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->flags != s2->flags) || false)
    return false;

  return true;
}

bool compare_VkSparseBufferMemoryBindInfo(VkSparseBufferMemoryBindInfo const *s1,
                                          VkSparseBufferMemoryBindInfo const *s2) {
  if ((s1->buffer != s2->buffer) || (s1->bindCount != s2->bindCount) || false)
    return false;

  return true;
}

bool compare_VkSparseImageOpaqueMemoryBindInfo(VkSparseImageOpaqueMemoryBindInfo const *s1,
                                               VkSparseImageOpaqueMemoryBindInfo const *s2) {
  if ((s1->image != s2->image) || (s1->bindCount != s2->bindCount) || false)
    return false;

  return true;
}

bool compare_VkSparseImageMemoryBindInfo(VkSparseImageMemoryBindInfo const *s1,
                                         VkSparseImageMemoryBindInfo const *s2) {
  if ((s1->image != s2->image) || (s1->bindCount != s2->bindCount) || false)
    return false;

  return true;
}

bool compare_VkBindSparseInfo(VkBindSparseInfo const *s1, VkBindSparseInfo const *s2) {
  if ((s1->waitSemaphoreCount != s2->waitSemaphoreCount) ||
      (s1->bufferBindCount != s2->bufferBindCount) ||
      (s1->imageOpaqueBindCount != s2->imageOpaqueBindCount) ||
      (s1->imageBindCount != s2->imageBindCount) ||
      (s1->signalSemaphoreCount != s2->signalSemaphoreCount) || false)
    return false;

  return true;
}

bool compare_VkImageCopy(VkImageCopy const *s1, VkImageCopy const *s2) {
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent) || false)
    return false;

  return true;
}

bool compare_VkImageBlit(VkImageBlit const *s1, VkImageBlit const *s2) {
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) || false)
    return false;

  for (uint32_t i = 0; i < 2; ++i) {
    if (compare_VkOffset3D(&s1->srcOffsets[i], &s2->srcOffsets[i]))
      return false;
  }
  for (uint32_t i = 0; i < 2; ++i) {
    if (compare_VkOffset3D(&s1->dstOffsets[i], &s2->dstOffsets[i]))
      return false;
  }

  return true;
}

bool compare_VkBufferImageCopy(VkBufferImageCopy const *s1, VkBufferImageCopy const *s2) {
  if ((s1->bufferOffset != s2->bufferOffset) || (s1->bufferRowLength != s2->bufferRowLength) ||
      (s1->bufferImageHeight != s2->bufferImageHeight) ||
      !compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent) || false)
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkCopyMemoryIndirectCommandNV(VkCopyMemoryIndirectCommandNV const *s1,
                                           VkCopyMemoryIndirectCommandNV const *s2) {
  if ((s1->srcAddress != s2->srcAddress) || (s1->dstAddress != s2->dstAddress) ||
      (s1->size != s2->size) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkCopyMemoryToImageIndirectCommandNV(VkCopyMemoryToImageIndirectCommandNV const *s1,
                                                  VkCopyMemoryToImageIndirectCommandNV const *s2) {
  if ((s1->srcAddress != s2->srcAddress) || (s1->bufferRowLength != s2->bufferRowLength) ||
      (s1->bufferImageHeight != s2->bufferImageHeight) ||
      !compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent) || false)
    return false;

  return true;
}
#endif

bool compare_VkImageResolve(VkImageResolve const *s1, VkImageResolve const *s2) {
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent) || false)
    return false;

  return true;
}

bool compare_VkShaderModuleCreateInfo(VkShaderModuleCreateInfo const *s1,
                                      VkShaderModuleCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->codeSize != s2->codeSize) || false)
    return false;

  return true;
}

bool compare_VkDescriptorSetLayoutBinding(VkDescriptorSetLayoutBinding const *s1,
                                          VkDescriptorSetLayoutBinding const *s2) {
  if ((s1->binding != s2->binding) || (s1->descriptorType != s2->descriptorType) ||
      (s1->descriptorCount != s2->descriptorCount) || (s1->stageFlags != s2->stageFlags) || false)
    return false;

  return true;
}

bool compare_VkDescriptorSetLayoutCreateInfo(VkDescriptorSetLayoutCreateInfo const *s1,
                                             VkDescriptorSetLayoutCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->bindingCount != s2->bindingCount) || false)
    return false;

  return true;
}

bool compare_VkDescriptorPoolSize(VkDescriptorPoolSize const *s1, VkDescriptorPoolSize const *s2) {
  if ((s1->type != s2->type) || (s1->descriptorCount != s2->descriptorCount) || false)
    return false;

  return true;
}

bool compare_VkDescriptorPoolCreateInfo(VkDescriptorPoolCreateInfo const *s1,
                                        VkDescriptorPoolCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->maxSets != s2->maxSets) ||
      (s1->poolSizeCount != s2->poolSizeCount) || false)
    return false;

  return true;
}

bool compare_VkDescriptorSetAllocateInfo(VkDescriptorSetAllocateInfo const *s1,
                                         VkDescriptorSetAllocateInfo const *s2) {
  if ((s1->descriptorPool != s2->descriptorPool) ||
      (s1->descriptorSetCount != s2->descriptorSetCount) || false)
    return false;

  return true;
}

bool compare_VkSpecializationMapEntry(VkSpecializationMapEntry const *s1,
                                      VkSpecializationMapEntry const *s2) {
  if ((s1->constantID != s2->constantID) || (s1->offset != s2->offset) || (s1->size != s2->size) ||
      false)
    return false;

  return true;
}

bool compare_VkSpecializationInfo(VkSpecializationInfo const *s1, VkSpecializationInfo const *s2) {
  if ((s1->mapEntryCount != s2->mapEntryCount) || (s1->dataSize != s2->dataSize) || false)
    return false;

  return true;
}

bool compare_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *s1,
                                             VkPipelineShaderStageCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->stage != s2->stage) || (s1->module != s2->module) || false)
    return false;

  return true;
}

bool compare_VkComputePipelineCreateInfo(VkComputePipelineCreateInfo const *s1,
                                         VkComputePipelineCreateInfo const *s2) {
  if ((s1->flags != s2->flags) ||
      !compare_VkPipelineShaderStageCreateInfo(&s1->stage, &s2->stage) ||
      (s1->layout != s2->layout) || (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex) || false)
    return false;

  return true;
}

bool compare_VkVertexInputBindingDescription(VkVertexInputBindingDescription const *s1,
                                             VkVertexInputBindingDescription const *s2) {
  if ((s1->binding != s2->binding) || (s1->stride != s2->stride) ||
      (s1->inputRate != s2->inputRate) || false)
    return false;

  return true;
}

bool compare_VkVertexInputAttributeDescription(VkVertexInputAttributeDescription const *s1,
                                               VkVertexInputAttributeDescription const *s2) {
  if ((s1->location != s2->location) || (s1->binding != s2->binding) ||
      (s1->format != s2->format) || (s1->offset != s2->offset) || false)
    return false;

  return true;
}

bool compare_VkPipelineVertexInputStateCreateInfo(VkPipelineVertexInputStateCreateInfo const *s1,
                                                  VkPipelineVertexInputStateCreateInfo const *s2) {
  if ((s1->flags != s2->flags) ||
      (s1->vertexBindingDescriptionCount != s2->vertexBindingDescriptionCount) ||
      (s1->vertexAttributeDescriptionCount != s2->vertexAttributeDescriptionCount) || false)
    return false;

  return true;
}

bool compare_VkPipelineInputAssemblyStateCreateInfo(
    VkPipelineInputAssemblyStateCreateInfo const *s1,
    VkPipelineInputAssemblyStateCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->topology != s2->topology) ||
      (s1->primitiveRestartEnable != s2->primitiveRestartEnable) || false)
    return false;

  return true;
}

bool compare_VkPipelineTessellationStateCreateInfo(
    VkPipelineTessellationStateCreateInfo const *s1,
    VkPipelineTessellationStateCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->patchControlPoints != s2->patchControlPoints) || false)
    return false;

  return true;
}

bool compare_VkPipelineViewportStateCreateInfo(VkPipelineViewportStateCreateInfo const *s1,
                                               VkPipelineViewportStateCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->viewportCount != s2->viewportCount) ||
      (s1->scissorCount != s2->scissorCount) || false)
    return false;

  return true;
}

bool compare_VkPipelineRasterizationStateCreateInfo(
    VkPipelineRasterizationStateCreateInfo const *s1,
    VkPipelineRasterizationStateCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->depthClampEnable != s2->depthClampEnable) ||
      (s1->rasterizerDiscardEnable != s2->rasterizerDiscardEnable) ||
      (s1->polygonMode != s2->polygonMode) || (s1->cullMode != s2->cullMode) ||
      (s1->frontFace != s2->frontFace) || (s1->depthBiasEnable != s2->depthBiasEnable) ||
      (s1->depthBiasConstantFactor != s2->depthBiasConstantFactor) ||
      (s1->depthBiasClamp != s2->depthBiasClamp) ||
      (s1->depthBiasSlopeFactor != s2->depthBiasSlopeFactor) || (s1->lineWidth != s2->lineWidth) ||
      false)
    return false;

  return true;
}

bool compare_VkPipelineMultisampleStateCreateInfo(VkPipelineMultisampleStateCreateInfo const *s1,
                                                  VkPipelineMultisampleStateCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->rasterizationSamples != s2->rasterizationSamples) ||
      (s1->sampleShadingEnable != s2->sampleShadingEnable) ||
      (s1->minSampleShading != s2->minSampleShading) ||
      (s1->alphaToCoverageEnable != s2->alphaToCoverageEnable) ||
      (s1->alphaToOneEnable != s2->alphaToOneEnable) || false)
    return false;

  return true;
}

bool compare_VkPipelineColorBlendAttachmentState(VkPipelineColorBlendAttachmentState const *s1,
                                                 VkPipelineColorBlendAttachmentState const *s2) {
  if ((s1->blendEnable != s2->blendEnable) ||
      (s1->srcColorBlendFactor != s2->srcColorBlendFactor) ||
      (s1->dstColorBlendFactor != s2->dstColorBlendFactor) ||
      (s1->colorBlendOp != s2->colorBlendOp) ||
      (s1->srcAlphaBlendFactor != s2->srcAlphaBlendFactor) ||
      (s1->dstAlphaBlendFactor != s2->dstAlphaBlendFactor) ||
      (s1->alphaBlendOp != s2->alphaBlendOp) || (s1->colorWriteMask != s2->colorWriteMask) || false)
    return false;

  return true;
}

bool compare_VkPipelineColorBlendStateCreateInfo(VkPipelineColorBlendStateCreateInfo const *s1,
                                                 VkPipelineColorBlendStateCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->logicOpEnable != s2->logicOpEnable) ||
      (s1->logicOp != s2->logicOp) || (s1->attachmentCount != s2->attachmentCount) || false)
    return false;

  for (uint32_t i = 0; i < 4; ++i) {
    if (s1->blendConstants[i] != s2->blendConstants[i])
      return false;
  }

  return true;
}

bool compare_VkPipelineDynamicStateCreateInfo(VkPipelineDynamicStateCreateInfo const *s1,
                                              VkPipelineDynamicStateCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->dynamicStateCount != s2->dynamicStateCount) || false)
    return false;

  return true;
}

bool compare_VkStencilOpState(VkStencilOpState const *s1, VkStencilOpState const *s2) {
  if ((s1->failOp != s2->failOp) || (s1->passOp != s2->passOp) ||
      (s1->depthFailOp != s2->depthFailOp) || (s1->compareOp != s2->compareOp) ||
      (s1->compareMask != s2->compareMask) || (s1->writeMask != s2->writeMask) ||
      (s1->reference != s2->reference) || false)
    return false;

  return true;
}

bool compare_VkPipelineDepthStencilStateCreateInfo(
    VkPipelineDepthStencilStateCreateInfo const *s1,
    VkPipelineDepthStencilStateCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->depthTestEnable != s2->depthTestEnable) ||
      (s1->depthWriteEnable != s2->depthWriteEnable) ||
      (s1->depthCompareOp != s2->depthCompareOp) ||
      (s1->depthBoundsTestEnable != s2->depthBoundsTestEnable) ||
      (s1->stencilTestEnable != s2->stencilTestEnable) ||
      !compare_VkStencilOpState(&s1->front, &s2->front) ||
      !compare_VkStencilOpState(&s1->back, &s2->back) ||
      (s1->minDepthBounds != s2->minDepthBounds) || (s1->maxDepthBounds != s2->maxDepthBounds) ||
      false)
    return false;

  return true;
}

bool compare_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *s1,
                                          VkGraphicsPipelineCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->stageCount != s2->stageCount) ||
      (s1->layout != s2->layout) || (s1->renderPass != s2->renderPass) ||
      (s1->subpass != s2->subpass) || (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex) || false)
    return false;

  return true;
}

bool compare_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *s1,
                                       VkPipelineCacheCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->initialDataSize != s2->initialDataSize) || false)
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 184
bool compare_VkPipelineCacheHeaderVersionOne(VkPipelineCacheHeaderVersionOne const *s1,
                                             VkPipelineCacheHeaderVersionOne const *s2) {
  if ((s1->headerSize != s2->headerSize) || (s1->headerVersion != s2->headerVersion) ||
      (s1->vendorID != s2->vendorID) || (s1->deviceID != s2->deviceID) || false)
    return false;

  for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
    if (s1->pipelineCacheUUID[i] != s2->pipelineCacheUUID[i])
      return false;
  }

  return true;
}
#endif

bool compare_VkPushConstantRange(VkPushConstantRange const *s1, VkPushConstantRange const *s2) {
  if ((s1->stageFlags != s2->stageFlags) || (s1->offset != s2->offset) || (s1->size != s2->size) ||
      false)
    return false;

  return true;
}

bool compare_VkPipelineLayoutCreateInfo(VkPipelineLayoutCreateInfo const *s1,
                                        VkPipelineLayoutCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->setLayoutCount != s2->setLayoutCount) ||
      (s1->pushConstantRangeCount != s2->pushConstantRangeCount) || false)
    return false;

  return true;
}

bool compare_VkSamplerCreateInfo(VkSamplerCreateInfo const *s1, VkSamplerCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->magFilter != s2->magFilter) ||
      (s1->minFilter != s2->minFilter) || (s1->mipmapMode != s2->mipmapMode) ||
      (s1->addressModeU != s2->addressModeU) || (s1->addressModeV != s2->addressModeV) ||
      (s1->addressModeW != s2->addressModeW) || (s1->mipLodBias != s2->mipLodBias) ||
      (s1->anisotropyEnable != s2->anisotropyEnable) || (s1->maxAnisotropy != s2->maxAnisotropy) ||
      (s1->compareEnable != s2->compareEnable) || (s1->compareOp != s2->compareOp) ||
      (s1->minLod != s2->minLod) || (s1->maxLod != s2->maxLod) ||
      (s1->borderColor != s2->borderColor) ||
      (s1->unnormalizedCoordinates != s2->unnormalizedCoordinates) || false)
    return false;

  return true;
}

bool compare_VkCommandPoolCreateInfo(VkCommandPoolCreateInfo const *s1,
                                     VkCommandPoolCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->queueFamilyIndex != s2->queueFamilyIndex) || false)
    return false;

  return true;
}

bool compare_VkCommandBufferAllocateInfo(VkCommandBufferAllocateInfo const *s1,
                                         VkCommandBufferAllocateInfo const *s2) {
  if ((s1->commandPool != s2->commandPool) || (s1->level != s2->level) ||
      (s1->commandBufferCount != s2->commandBufferCount) || false)
    return false;

  return true;
}

bool compare_VkCommandBufferInheritanceInfo(VkCommandBufferInheritanceInfo const *s1,
                                            VkCommandBufferInheritanceInfo const *s2) {
  if ((s1->renderPass != s2->renderPass) || (s1->subpass != s2->subpass) ||
      (s1->framebuffer != s2->framebuffer) ||
      (s1->occlusionQueryEnable != s2->occlusionQueryEnable) ||
      (s1->queryFlags != s2->queryFlags) || (s1->pipelineStatistics != s2->pipelineStatistics) ||
      false)
    return false;

  return true;
}

bool compare_VkCommandBufferBeginInfo(VkCommandBufferBeginInfo const *s1,
                                      VkCommandBufferBeginInfo const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}

bool compare_VkRenderPassBeginInfo(VkRenderPassBeginInfo const *s1,
                                   VkRenderPassBeginInfo const *s2) {
  if ((s1->renderPass != s2->renderPass) || (s1->framebuffer != s2->framebuffer) ||
      !compare_VkRect2D(&s1->renderArea, &s2->renderArea) ||
      (s1->clearValueCount != s2->clearValueCount) || false)
    return false;

  return true;
}

bool compare_VkClearDepthStencilValue(VkClearDepthStencilValue const *s1,
                                      VkClearDepthStencilValue const *s2) {
  if ((s1->depth != s2->depth) || (s1->stencil != s2->stencil) || false)
    return false;

  return true;
}

bool compare_VkAttachmentDescription(VkAttachmentDescription const *s1,
                                     VkAttachmentDescription const *s2) {
  if ((s1->flags != s2->flags) || (s1->format != s2->format) || (s1->samples != s2->samples) ||
      (s1->loadOp != s2->loadOp) || (s1->storeOp != s2->storeOp) ||
      (s1->stencilLoadOp != s2->stencilLoadOp) || (s1->stencilStoreOp != s2->stencilStoreOp) ||
      (s1->initialLayout != s2->initialLayout) || (s1->finalLayout != s2->finalLayout) || false)
    return false;

  return true;
}

bool compare_VkAttachmentReference(VkAttachmentReference const *s1,
                                   VkAttachmentReference const *s2) {
  if ((s1->attachment != s2->attachment) || (s1->layout != s2->layout) || false)
    return false;

  return true;
}

bool compare_VkSubpassDescription(VkSubpassDescription const *s1, VkSubpassDescription const *s2) {
  if ((s1->flags != s2->flags) || (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->inputAttachmentCount != s2->inputAttachmentCount) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->preserveAttachmentCount != s2->preserveAttachmentCount) || false)
    return false;

  return true;
}

bool compare_VkSubpassDependency(VkSubpassDependency const *s1, VkSubpassDependency const *s2) {
  if ((s1->srcSubpass != s2->srcSubpass) || (s1->dstSubpass != s2->dstSubpass) ||
      (s1->srcStageMask != s2->srcStageMask) || (s1->dstStageMask != s2->dstStageMask) ||
      (s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->dependencyFlags != s2->dependencyFlags) || false)
    return false;

  return true;
}

bool compare_VkRenderPassCreateInfo(VkRenderPassCreateInfo const *s1,
                                    VkRenderPassCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->attachmentCount != s2->attachmentCount) ||
      (s1->subpassCount != s2->subpassCount) || (s1->dependencyCount != s2->dependencyCount) ||
      false)
    return false;

  return true;
}

bool compare_VkEventCreateInfo(VkEventCreateInfo const *s1, VkEventCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}

bool compare_VkFenceCreateInfo(VkFenceCreateInfo const *s1, VkFenceCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}

bool compare_VkPhysicalDeviceFeatures(VkPhysicalDeviceFeatures const *s1,
                                      VkPhysicalDeviceFeatures const *s2) {
  if ((s1->robustBufferAccess != s2->robustBufferAccess) ||
      (s1->fullDrawIndexUint32 != s2->fullDrawIndexUint32) ||
      (s1->imageCubeArray != s2->imageCubeArray) ||
      (s1->independentBlend != s2->independentBlend) ||
      (s1->geometryShader != s2->geometryShader) ||
      (s1->tessellationShader != s2->tessellationShader) ||
      (s1->sampleRateShading != s2->sampleRateShading) || (s1->dualSrcBlend != s2->dualSrcBlend) ||
      (s1->logicOp != s2->logicOp) || (s1->multiDrawIndirect != s2->multiDrawIndirect) ||
      (s1->drawIndirectFirstInstance != s2->drawIndirectFirstInstance) ||
      (s1->depthClamp != s2->depthClamp) || (s1->depthBiasClamp != s2->depthBiasClamp) ||
      (s1->fillModeNonSolid != s2->fillModeNonSolid) || (s1->depthBounds != s2->depthBounds) ||
      (s1->wideLines != s2->wideLines) || (s1->largePoints != s2->largePoints) ||
      (s1->alphaToOne != s2->alphaToOne) || (s1->multiViewport != s2->multiViewport) ||
      (s1->samplerAnisotropy != s2->samplerAnisotropy) ||
      (s1->textureCompressionETC2 != s2->textureCompressionETC2) ||
      (s1->textureCompressionASTC_LDR != s2->textureCompressionASTC_LDR) ||
      (s1->textureCompressionBC != s2->textureCompressionBC) ||
      (s1->occlusionQueryPrecise != s2->occlusionQueryPrecise) ||
      (s1->pipelineStatisticsQuery != s2->pipelineStatisticsQuery) ||
      (s1->vertexPipelineStoresAndAtomics != s2->vertexPipelineStoresAndAtomics) ||
      (s1->fragmentStoresAndAtomics != s2->fragmentStoresAndAtomics) ||
      (s1->shaderTessellationAndGeometryPointSize != s2->shaderTessellationAndGeometryPointSize) ||
      (s1->shaderImageGatherExtended != s2->shaderImageGatherExtended) ||
      (s1->shaderStorageImageExtendedFormats != s2->shaderStorageImageExtendedFormats) ||
      (s1->shaderStorageImageMultisample != s2->shaderStorageImageMultisample) ||
      (s1->shaderStorageImageReadWithoutFormat != s2->shaderStorageImageReadWithoutFormat) ||
      (s1->shaderStorageImageWriteWithoutFormat != s2->shaderStorageImageWriteWithoutFormat) ||
      (s1->shaderUniformBufferArrayDynamicIndexing !=
       s2->shaderUniformBufferArrayDynamicIndexing) ||
      (s1->shaderSampledImageArrayDynamicIndexing != s2->shaderSampledImageArrayDynamicIndexing) ||
      (s1->shaderStorageBufferArrayDynamicIndexing !=
       s2->shaderStorageBufferArrayDynamicIndexing) ||
      (s1->shaderStorageImageArrayDynamicIndexing != s2->shaderStorageImageArrayDynamicIndexing) ||
      (s1->shaderClipDistance != s2->shaderClipDistance) ||
      (s1->shaderCullDistance != s2->shaderCullDistance) ||
      (s1->shaderFloat64 != s2->shaderFloat64) || (s1->shaderInt64 != s2->shaderInt64) ||
      (s1->shaderInt16 != s2->shaderInt16) ||
      (s1->shaderResourceResidency != s2->shaderResourceResidency) ||
      (s1->shaderResourceMinLod != s2->shaderResourceMinLod) ||
      (s1->sparseBinding != s2->sparseBinding) ||
      (s1->sparseResidencyBuffer != s2->sparseResidencyBuffer) ||
      (s1->sparseResidencyImage2D != s2->sparseResidencyImage2D) ||
      (s1->sparseResidencyImage3D != s2->sparseResidencyImage3D) ||
      (s1->sparseResidency2Samples != s2->sparseResidency2Samples) ||
      (s1->sparseResidency4Samples != s2->sparseResidency4Samples) ||
      (s1->sparseResidency8Samples != s2->sparseResidency8Samples) ||
      (s1->sparseResidency16Samples != s2->sparseResidency16Samples) ||
      (s1->sparseResidencyAliased != s2->sparseResidencyAliased) ||
      (s1->variableMultisampleRate != s2->variableMultisampleRate) ||
      (s1->inheritedQueries != s2->inheritedQueries) || false)
    return false;

  return true;
}

bool compare_VkPhysicalDeviceSparseProperties(VkPhysicalDeviceSparseProperties const *s1,
                                              VkPhysicalDeviceSparseProperties const *s2) {
  if ((s1->residencyStandard2DBlockShape != s2->residencyStandard2DBlockShape) ||
      (s1->residencyStandard2DMultisampleBlockShape !=
       s2->residencyStandard2DMultisampleBlockShape) ||
      (s1->residencyStandard3DBlockShape != s2->residencyStandard3DBlockShape) ||
      (s1->residencyAlignedMipSize != s2->residencyAlignedMipSize) ||
      (s1->residencyNonResidentStrict != s2->residencyNonResidentStrict) || false)
    return false;

  return true;
}

bool compare_VkPhysicalDeviceLimits(VkPhysicalDeviceLimits const *s1,
                                    VkPhysicalDeviceLimits const *s2) {
  if ((s1->maxImageDimension1D != s2->maxImageDimension1D) ||
      (s1->maxImageDimension2D != s2->maxImageDimension2D) ||
      (s1->maxImageDimension3D != s2->maxImageDimension3D) ||
      (s1->maxImageDimensionCube != s2->maxImageDimensionCube) ||
      (s1->maxImageArrayLayers != s2->maxImageArrayLayers) ||
      (s1->maxTexelBufferElements != s2->maxTexelBufferElements) ||
      (s1->maxUniformBufferRange != s2->maxUniformBufferRange) ||
      (s1->maxStorageBufferRange != s2->maxStorageBufferRange) ||
      (s1->maxPushConstantsSize != s2->maxPushConstantsSize) ||
      (s1->maxMemoryAllocationCount != s2->maxMemoryAllocationCount) ||
      (s1->maxSamplerAllocationCount != s2->maxSamplerAllocationCount) ||
      (s1->bufferImageGranularity != s2->bufferImageGranularity) ||
      (s1->sparseAddressSpaceSize != s2->sparseAddressSpaceSize) ||
      (s1->maxBoundDescriptorSets != s2->maxBoundDescriptorSets) ||
      (s1->maxPerStageDescriptorSamplers != s2->maxPerStageDescriptorSamplers) ||
      (s1->maxPerStageDescriptorUniformBuffers != s2->maxPerStageDescriptorUniformBuffers) ||
      (s1->maxPerStageDescriptorStorageBuffers != s2->maxPerStageDescriptorStorageBuffers) ||
      (s1->maxPerStageDescriptorSampledImages != s2->maxPerStageDescriptorSampledImages) ||
      (s1->maxPerStageDescriptorStorageImages != s2->maxPerStageDescriptorStorageImages) ||
      (s1->maxPerStageDescriptorInputAttachments != s2->maxPerStageDescriptorInputAttachments) ||
      (s1->maxPerStageResources != s2->maxPerStageResources) ||
      (s1->maxDescriptorSetSamplers != s2->maxDescriptorSetSamplers) ||
      (s1->maxDescriptorSetUniformBuffers != s2->maxDescriptorSetUniformBuffers) ||
      (s1->maxDescriptorSetUniformBuffersDynamic != s2->maxDescriptorSetUniformBuffersDynamic) ||
      (s1->maxDescriptorSetStorageBuffers != s2->maxDescriptorSetStorageBuffers) ||
      (s1->maxDescriptorSetStorageBuffersDynamic != s2->maxDescriptorSetStorageBuffersDynamic) ||
      (s1->maxDescriptorSetSampledImages != s2->maxDescriptorSetSampledImages) ||
      (s1->maxDescriptorSetStorageImages != s2->maxDescriptorSetStorageImages) ||
      (s1->maxDescriptorSetInputAttachments != s2->maxDescriptorSetInputAttachments) ||
      (s1->maxVertexInputAttributes != s2->maxVertexInputAttributes) ||
      (s1->maxVertexInputBindings != s2->maxVertexInputBindings) ||
      (s1->maxVertexInputAttributeOffset != s2->maxVertexInputAttributeOffset) ||
      (s1->maxVertexInputBindingStride != s2->maxVertexInputBindingStride) ||
      (s1->maxVertexOutputComponents != s2->maxVertexOutputComponents) ||
      (s1->maxTessellationGenerationLevel != s2->maxTessellationGenerationLevel) ||
      (s1->maxTessellationPatchSize != s2->maxTessellationPatchSize) ||
      (s1->maxTessellationControlPerVertexInputComponents !=
       s2->maxTessellationControlPerVertexInputComponents) ||
      (s1->maxTessellationControlPerVertexOutputComponents !=
       s2->maxTessellationControlPerVertexOutputComponents) ||
      (s1->maxTessellationControlPerPatchOutputComponents !=
       s2->maxTessellationControlPerPatchOutputComponents) ||
      (s1->maxTessellationControlTotalOutputComponents !=
       s2->maxTessellationControlTotalOutputComponents) ||
      (s1->maxTessellationEvaluationInputComponents !=
       s2->maxTessellationEvaluationInputComponents) ||
      (s1->maxTessellationEvaluationOutputComponents !=
       s2->maxTessellationEvaluationOutputComponents) ||
      (s1->maxGeometryShaderInvocations != s2->maxGeometryShaderInvocations) ||
      (s1->maxGeometryInputComponents != s2->maxGeometryInputComponents) ||
      (s1->maxGeometryOutputComponents != s2->maxGeometryOutputComponents) ||
      (s1->maxGeometryOutputVertices != s2->maxGeometryOutputVertices) ||
      (s1->maxGeometryTotalOutputComponents != s2->maxGeometryTotalOutputComponents) ||
      (s1->maxFragmentInputComponents != s2->maxFragmentInputComponents) ||
      (s1->maxFragmentOutputAttachments != s2->maxFragmentOutputAttachments) ||
      (s1->maxFragmentDualSrcAttachments != s2->maxFragmentDualSrcAttachments) ||
      (s1->maxFragmentCombinedOutputResources != s2->maxFragmentCombinedOutputResources) ||
      (s1->maxComputeSharedMemorySize != s2->maxComputeSharedMemorySize) ||
      (s1->maxComputeWorkGroupInvocations != s2->maxComputeWorkGroupInvocations) ||
      (s1->subPixelPrecisionBits != s2->subPixelPrecisionBits) ||
      (s1->subTexelPrecisionBits != s2->subTexelPrecisionBits) ||
      (s1->mipmapPrecisionBits != s2->mipmapPrecisionBits) ||
      (s1->maxDrawIndexedIndexValue != s2->maxDrawIndexedIndexValue) ||
      (s1->maxDrawIndirectCount != s2->maxDrawIndirectCount) ||
      (s1->maxSamplerLodBias != s2->maxSamplerLodBias) ||
      (s1->maxSamplerAnisotropy != s2->maxSamplerAnisotropy) ||
      (s1->maxViewports != s2->maxViewports) ||
      (s1->viewportSubPixelBits != s2->viewportSubPixelBits) ||
      (s1->minMemoryMapAlignment != s2->minMemoryMapAlignment) ||
      (s1->minTexelBufferOffsetAlignment != s2->minTexelBufferOffsetAlignment) ||
      (s1->minUniformBufferOffsetAlignment != s2->minUniformBufferOffsetAlignment) ||
      (s1->minStorageBufferOffsetAlignment != s2->minStorageBufferOffsetAlignment) ||
      (s1->minTexelOffset != s2->minTexelOffset) || (s1->maxTexelOffset != s2->maxTexelOffset) ||
      (s1->minTexelGatherOffset != s2->minTexelGatherOffset) ||
      (s1->maxTexelGatherOffset != s2->maxTexelGatherOffset) ||
      (s1->minInterpolationOffset != s2->minInterpolationOffset) ||
      (s1->maxInterpolationOffset != s2->maxInterpolationOffset) ||
      (s1->subPixelInterpolationOffsetBits != s2->subPixelInterpolationOffsetBits) ||
      (s1->maxFramebufferWidth != s2->maxFramebufferWidth) ||
      (s1->maxFramebufferHeight != s2->maxFramebufferHeight) ||
      (s1->maxFramebufferLayers != s2->maxFramebufferLayers) ||
      (s1->framebufferColorSampleCounts != s2->framebufferColorSampleCounts) ||
      (s1->framebufferDepthSampleCounts != s2->framebufferDepthSampleCounts) ||
      (s1->framebufferStencilSampleCounts != s2->framebufferStencilSampleCounts) ||
      (s1->framebufferNoAttachmentsSampleCounts != s2->framebufferNoAttachmentsSampleCounts) ||
      (s1->maxColorAttachments != s2->maxColorAttachments) ||
      (s1->sampledImageColorSampleCounts != s2->sampledImageColorSampleCounts) ||
      (s1->sampledImageIntegerSampleCounts != s2->sampledImageIntegerSampleCounts) ||
      (s1->sampledImageDepthSampleCounts != s2->sampledImageDepthSampleCounts) ||
      (s1->sampledImageStencilSampleCounts != s2->sampledImageStencilSampleCounts) ||
      (s1->storageImageSampleCounts != s2->storageImageSampleCounts) ||
      (s1->maxSampleMaskWords != s2->maxSampleMaskWords) ||
      (s1->timestampComputeAndGraphics != s2->timestampComputeAndGraphics) ||
      (s1->timestampPeriod != s2->timestampPeriod) ||
      (s1->maxClipDistances != s2->maxClipDistances) ||
      (s1->maxCullDistances != s2->maxCullDistances) ||
      (s1->maxCombinedClipAndCullDistances != s2->maxCombinedClipAndCullDistances) ||
      (s1->discreteQueuePriorities != s2->discreteQueuePriorities) ||
      (s1->pointSizeGranularity != s2->pointSizeGranularity) ||
      (s1->lineWidthGranularity != s2->lineWidthGranularity) ||
      (s1->strictLines != s2->strictLines) ||
      (s1->standardSampleLocations != s2->standardSampleLocations) ||
      (s1->optimalBufferCopyOffsetAlignment != s2->optimalBufferCopyOffsetAlignment) ||
      (s1->optimalBufferCopyRowPitchAlignment != s2->optimalBufferCopyRowPitchAlignment) ||
      (s1->nonCoherentAtomSize != s2->nonCoherentAtomSize) || false)
    return false;

  for (uint32_t i = 0; i < 3; ++i) {
    if (s1->maxComputeWorkGroupCount[i] != s2->maxComputeWorkGroupCount[i])
      return false;
  }
  for (uint32_t i = 0; i < 3; ++i) {
    if (s1->maxComputeWorkGroupSize[i] != s2->maxComputeWorkGroupSize[i])
      return false;
  }
  for (uint32_t i = 0; i < 2; ++i) {
    if (s1->maxViewportDimensions[i] != s2->maxViewportDimensions[i])
      return false;
  }
  for (uint32_t i = 0; i < 2; ++i) {
    if (s1->viewportBoundsRange[i] != s2->viewportBoundsRange[i])
      return false;
  }
  for (uint32_t i = 0; i < 2; ++i) {
    if (s1->pointSizeRange[i] != s2->pointSizeRange[i])
      return false;
  }
  for (uint32_t i = 0; i < 2; ++i) {
    if (s1->lineWidthRange[i] != s2->lineWidthRange[i])
      return false;
  }

  return true;
}

bool compare_VkSemaphoreCreateInfo(VkSemaphoreCreateInfo const *s1,
                                   VkSemaphoreCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}

bool compare_VkQueryPoolCreateInfo(VkQueryPoolCreateInfo const *s1,
                                   VkQueryPoolCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->queryType != s2->queryType) ||
      (s1->queryCount != s2->queryCount) || (s1->pipelineStatistics != s2->pipelineStatistics) ||
      false)
    return false;

  return true;
}

bool compare_VkFramebufferCreateInfo(VkFramebufferCreateInfo const *s1,
                                     VkFramebufferCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->renderPass != s2->renderPass) ||
      (s1->attachmentCount != s2->attachmentCount) || (s1->width != s2->width) ||
      (s1->height != s2->height) || (s1->layers != s2->layers) || false)
    return false;

  return true;
}

bool compare_VkDrawIndirectCommand(VkDrawIndirectCommand const *s1,
                                   VkDrawIndirectCommand const *s2) {
  if ((s1->vertexCount != s2->vertexCount) || (s1->instanceCount != s2->instanceCount) ||
      (s1->firstVertex != s2->firstVertex) || (s1->firstInstance != s2->firstInstance) || false)
    return false;

  return true;
}

bool compare_VkDrawIndexedIndirectCommand(VkDrawIndexedIndirectCommand const *s1,
                                          VkDrawIndexedIndirectCommand const *s2) {
  if ((s1->indexCount != s2->indexCount) || (s1->instanceCount != s2->instanceCount) ||
      (s1->firstIndex != s2->firstIndex) || (s1->vertexOffset != s2->vertexOffset) ||
      (s1->firstInstance != s2->firstInstance) || false)
    return false;

  return true;
}

bool compare_VkDispatchIndirectCommand(VkDispatchIndirectCommand const *s1,
                                       VkDispatchIndirectCommand const *s2) {
  if ((s1->x != s2->x) || (s1->y != s2->y) || (s1->z != s2->z) || false)
    return false;

  return true;
}

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkMultiDrawInfoEXT(VkMultiDrawInfoEXT const *s1, VkMultiDrawInfoEXT const *s2) {
  if ((s1->firstVertex != s2->firstVertex) || (s1->vertexCount != s2->vertexCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkMultiDrawIndexedInfoEXT(VkMultiDrawIndexedInfoEXT const *s1,
                                       VkMultiDrawIndexedInfoEXT const *s2) {
  if ((s1->firstIndex != s2->firstIndex) || (s1->indexCount != s2->indexCount) ||
      (s1->vertexOffset != s2->vertexOffset) || false)
    return false;

  return true;
}
#endif

bool compare_VkSubmitInfo(VkSubmitInfo const *s1, VkSubmitInfo const *s2) {
  if ((s1->waitSemaphoreCount != s2->waitSemaphoreCount) ||
      (s1->commandBufferCount != s2->commandBufferCount) ||
      (s1->signalSemaphoreCount != s2->signalSemaphoreCount) || false)
    return false;

  return true;
}

#if VK_KHR_display
bool compare_VkDisplayPropertiesKHR(VkDisplayPropertiesKHR const *s1,
                                    VkDisplayPropertiesKHR const *s2) {
  if ((s1->display != s2->display) ||
      !compare_VkExtent2D(&s1->physicalDimensions, &s2->physicalDimensions) ||
      !compare_VkExtent2D(&s1->physicalResolution, &s2->physicalResolution) ||
      (s1->supportedTransforms != s2->supportedTransforms) ||
      (s1->planeReorderPossible != s2->planeReorderPossible) ||
      (s1->persistentContent != s2->persistentContent) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplayPlanePropertiesKHR(VkDisplayPlanePropertiesKHR const *s1,
                                         VkDisplayPlanePropertiesKHR const *s2) {
  if ((s1->currentDisplay != s2->currentDisplay) ||
      (s1->currentStackIndex != s2->currentStackIndex) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplayModeParametersKHR(VkDisplayModeParametersKHR const *s1,
                                        VkDisplayModeParametersKHR const *s2) {
  if (!compare_VkExtent2D(&s1->visibleRegion, &s2->visibleRegion) ||
      (s1->refreshRate != s2->refreshRate) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplayModePropertiesKHR(VkDisplayModePropertiesKHR const *s1,
                                        VkDisplayModePropertiesKHR const *s2) {
  if ((s1->displayMode != s2->displayMode) ||
      !compare_VkDisplayModeParametersKHR(&s1->parameters, &s2->parameters) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplayModeCreateInfoKHR(VkDisplayModeCreateInfoKHR const *s1,
                                        VkDisplayModeCreateInfoKHR const *s2) {
  if ((s1->flags != s2->flags) ||
      !compare_VkDisplayModeParametersKHR(&s1->parameters, &s2->parameters) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplayPlaneCapabilitiesKHR(VkDisplayPlaneCapabilitiesKHR const *s1,
                                           VkDisplayPlaneCapabilitiesKHR const *s2) {
  if ((s1->supportedAlpha != s2->supportedAlpha) ||
      !compare_VkOffset2D(&s1->minSrcPosition, &s2->minSrcPosition) ||
      !compare_VkOffset2D(&s1->maxSrcPosition, &s2->maxSrcPosition) ||
      !compare_VkExtent2D(&s1->minSrcExtent, &s2->minSrcExtent) ||
      !compare_VkExtent2D(&s1->maxSrcExtent, &s2->maxSrcExtent) ||
      !compare_VkOffset2D(&s1->minDstPosition, &s2->minDstPosition) ||
      !compare_VkOffset2D(&s1->maxDstPosition, &s2->maxDstPosition) ||
      !compare_VkExtent2D(&s1->minDstExtent, &s2->minDstExtent) ||
      !compare_VkExtent2D(&s1->maxDstExtent, &s2->maxDstExtent) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_display
bool compare_VkDisplaySurfaceCreateInfoKHR(VkDisplaySurfaceCreateInfoKHR const *s1,
                                           VkDisplaySurfaceCreateInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->displayMode != s2->displayMode) ||
      (s1->planeIndex != s2->planeIndex) || (s1->planeStackIndex != s2->planeStackIndex) ||
      (s1->transform != s2->transform) || (s1->globalAlpha != s2->globalAlpha) ||
      (s1->alphaMode != s2->alphaMode) || !compare_VkExtent2D(&s1->imageExtent, &s2->imageExtent) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_display_swapchain
bool compare_VkDisplayPresentInfoKHR(VkDisplayPresentInfoKHR const *s1,
                                     VkDisplayPresentInfoKHR const *s2) {
  if (!compare_VkRect2D(&s1->srcRect, &s2->srcRect) ||
      !compare_VkRect2D(&s1->dstRect, &s2->dstRect) || (s1->persistent != s2->persistent) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_surface
bool compare_VkSurfaceCapabilitiesKHR(VkSurfaceCapabilitiesKHR const *s1,
                                      VkSurfaceCapabilitiesKHR const *s2) {
  if ((s1->minImageCount != s2->minImageCount) || (s1->maxImageCount != s2->maxImageCount) ||
      !compare_VkExtent2D(&s1->currentExtent, &s2->currentExtent) ||
      !compare_VkExtent2D(&s1->minImageExtent, &s2->minImageExtent) ||
      !compare_VkExtent2D(&s1->maxImageExtent, &s2->maxImageExtent) ||
      (s1->maxImageArrayLayers != s2->maxImageArrayLayers) ||
      (s1->supportedTransforms != s2->supportedTransforms) ||
      (s1->currentTransform != s2->currentTransform) ||
      (s1->supportedCompositeAlpha != s2->supportedCompositeAlpha) ||
      (s1->supportedUsageFlags != s2->supportedUsageFlags) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_android_surface
bool compare_VkAndroidSurfaceCreateInfoKHR(VkAndroidSurfaceCreateInfoKHR const *s1,
                                           VkAndroidSurfaceCreateInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_NN_vi_surface
bool compare_VkViSurfaceCreateInfoNN(VkViSurfaceCreateInfoNN const *s1,
                                     VkViSurfaceCreateInfoNN const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_wayland_surface
bool compare_VkWaylandSurfaceCreateInfoKHR(VkWaylandSurfaceCreateInfoKHR const *s1,
                                           VkWaylandSurfaceCreateInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_win32_surface
bool compare_VkWin32SurfaceCreateInfoKHR(VkWin32SurfaceCreateInfoKHR const *s1,
                                         VkWin32SurfaceCreateInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->hinstance != s2->hinstance) || (s1->hwnd != s2->hwnd) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_xlib_surface
bool compare_VkXlibSurfaceCreateInfoKHR(VkXlibSurfaceCreateInfoKHR const *s1,
                                        VkXlibSurfaceCreateInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->window != s2->window) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_xcb_surface
bool compare_VkXcbSurfaceCreateInfoKHR(VkXcbSurfaceCreateInfoKHR const *s1,
                                       VkXcbSurfaceCreateInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->window != s2->window) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface
bool compare_VkDirectFBSurfaceCreateInfoEXT(VkDirectFBSurfaceCreateInfoEXT const *s1,
                                            VkDirectFBSurfaceCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface
bool compare_VkImagePipeSurfaceCreateInfoFUCHSIA(VkImagePipeSurfaceCreateInfoFUCHSIA const *s1,
                                                 VkImagePipeSurfaceCreateInfoFUCHSIA const *s2) {
  if ((s1->flags != s2->flags) || (s1->imagePipeHandle != s2->imagePipeHandle) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface
bool compare_VkStreamDescriptorSurfaceCreateInfoGGP(
    VkStreamDescriptorSurfaceCreateInfoGGP const *s1,
    VkStreamDescriptorSurfaceCreateInfoGGP const *s2) {
  if ((s1->flags != s2->flags) || (s1->streamDescriptor != s2->streamDescriptor) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface
bool compare_VkScreenSurfaceCreateInfoQNX(VkScreenSurfaceCreateInfoQNX const *s1,
                                          VkScreenSurfaceCreateInfoQNX const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_surface
bool compare_VkSurfaceFormatKHR(VkSurfaceFormatKHR const *s1, VkSurfaceFormatKHR const *s2) {
  if ((s1->format != s2->format) || (s1->colorSpace != s2->colorSpace) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_swapchain
bool compare_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *s1,
                                      VkSwapchainCreateInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->surface != s2->surface) ||
      (s1->minImageCount != s2->minImageCount) || (s1->imageFormat != s2->imageFormat) ||
      (s1->imageColorSpace != s2->imageColorSpace) ||
      !compare_VkExtent2D(&s1->imageExtent, &s2->imageExtent) ||
      (s1->imageArrayLayers != s2->imageArrayLayers) || (s1->imageUsage != s2->imageUsage) ||
      (s1->imageSharingMode != s2->imageSharingMode) ||
      (s1->queueFamilyIndexCount != s2->queueFamilyIndexCount) ||
      (s1->preTransform != s2->preTransform) || (s1->compositeAlpha != s2->compositeAlpha) ||
      (s1->presentMode != s2->presentMode) || (s1->clipped != s2->clipped) ||
      (s1->oldSwapchain != s2->oldSwapchain) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_swapchain
bool compare_VkPresentInfoKHR(VkPresentInfoKHR const *s1, VkPresentInfoKHR const *s2) {
  if ((s1->waitSemaphoreCount != s2->waitSemaphoreCount) ||
      (s1->swapchainCount != s2->swapchainCount) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_debug_report
bool compare_VkDebugReportCallbackCreateInfoEXT(VkDebugReportCallbackCreateInfoEXT const *s1,
                                                VkDebugReportCallbackCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->pfnCallback != s2->pfnCallback) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_validation_flags
bool compare_VkValidationFlagsEXT(VkValidationFlagsEXT const *s1, VkValidationFlagsEXT const *s2) {
  if ((s1->disabledValidationCheckCount != s2->disabledValidationCheckCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_validation_features
bool compare_VkValidationFeaturesEXT(VkValidationFeaturesEXT const *s1,
                                     VkValidationFeaturesEXT const *s2) {
  if ((s1->enabledValidationFeatureCount != s2->enabledValidationFeatureCount) ||
      (s1->disabledValidationFeatureCount != s2->disabledValidationFeatureCount) || false)
    return false;

  return true;
}
#endif

#if VK_AMD_rasterization_order
bool compare_VkPipelineRasterizationStateRasterizationOrderAMD(
    VkPipelineRasterizationStateRasterizationOrderAMD const *s1,
    VkPipelineRasterizationStateRasterizationOrderAMD const *s2) {
  if ((s1->rasterizationOrder != s2->rasterizationOrder) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerObjectNameInfoEXT(VkDebugMarkerObjectNameInfoEXT const *s1,
                                            VkDebugMarkerObjectNameInfoEXT const *s2) {
  if ((s1->objectType != s2->objectType) || (s1->object != s2->object) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerObjectTagInfoEXT(VkDebugMarkerObjectTagInfoEXT const *s1,
                                           VkDebugMarkerObjectTagInfoEXT const *s2) {
  if ((s1->objectType != s2->objectType) || (s1->object != s2->object) ||
      (s1->tagName != s2->tagName) || (s1->tagSize != s2->tagSize) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_debug_marker
bool compare_VkDebugMarkerMarkerInfoEXT(VkDebugMarkerMarkerInfoEXT const *s1,
                                        VkDebugMarkerMarkerInfoEXT const *s2) {
  for (uint32_t i = 0; i < 4; ++i) {
    if (s1->color[i] != s2->color[i])
      return false;
  }

  return true;
}
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationImageCreateInfoNV(
    VkDedicatedAllocationImageCreateInfoNV const *s1,
    VkDedicatedAllocationImageCreateInfoNV const *s2) {
  if ((s1->dedicatedAllocation != s2->dedicatedAllocation) || false)
    return false;

  return true;
}
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationBufferCreateInfoNV(
    VkDedicatedAllocationBufferCreateInfoNV const *s1,
    VkDedicatedAllocationBufferCreateInfoNV const *s2) {
  if ((s1->dedicatedAllocation != s2->dedicatedAllocation) || false)
    return false;

  return true;
}
#endif

#if VK_NV_dedicated_allocation
bool compare_VkDedicatedAllocationMemoryAllocateInfoNV(
    VkDedicatedAllocationMemoryAllocateInfoNV const *s1,
    VkDedicatedAllocationMemoryAllocateInfoNV const *s2) {
  if ((s1->image != s2->image) || (s1->buffer != s2->buffer) || false)
    return false;

  return true;
}
#endif

#if VK_NV_external_memory_capabilities
bool compare_VkExternalImageFormatPropertiesNV(VkExternalImageFormatPropertiesNV const *s1,
                                               VkExternalImageFormatPropertiesNV const *s2) {
  if (!compare_VkImageFormatProperties(&s1->imageFormatProperties, &s2->imageFormatProperties) ||
      (s1->externalMemoryFeatures != s2->externalMemoryFeatures) ||
      (s1->exportFromImportedHandleTypes != s2->exportFromImportedHandleTypes) ||
      (s1->compatibleHandleTypes != s2->compatibleHandleTypes) || false)
    return false;

  return true;
}
#endif

#if VK_NV_external_memory
bool compare_VkExternalMemoryImageCreateInfoNV(VkExternalMemoryImageCreateInfoNV const *s1,
                                               VkExternalMemoryImageCreateInfoNV const *s2) {
  if ((s1->handleTypes != s2->handleTypes) || false)
    return false;

  return true;
}
#endif

#if VK_NV_external_memory
bool compare_VkExportMemoryAllocateInfoNV(VkExportMemoryAllocateInfoNV const *s1,
                                          VkExportMemoryAllocateInfoNV const *s2) {
  if ((s1->handleTypes != s2->handleTypes) || false)
    return false;

  return true;
}
#endif

#if VK_NV_external_memory_win32
bool compare_VkImportMemoryWin32HandleInfoNV(VkImportMemoryWin32HandleInfoNV const *s1,
                                             VkImportMemoryWin32HandleInfoNV const *s2) {
  if ((s1->handleType != s2->handleType) || (s1->handle != s2->handle) || false)
    return false;

  return true;
}
#endif

#if VK_NV_external_memory_win32
bool compare_VkExportMemoryWin32HandleInfoNV(VkExportMemoryWin32HandleInfoNV const *s1,
                                             VkExportMemoryWin32HandleInfoNV const *s2) {
  if ((s1->dwAccess != s2->dwAccess) || false)
    return false;

  return true;
}
#endif

#if VK_NV_win32_keyed_mutex
bool compare_VkWin32KeyedMutexAcquireReleaseInfoNV(
    VkWin32KeyedMutexAcquireReleaseInfoNV const *s1,
    VkWin32KeyedMutexAcquireReleaseInfoNV const *s2) {
  if ((s1->acquireCount != s2->acquireCount) || (s1->releaseCount != s2->releaseCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *s2) {
  if ((s1->deviceGeneratedCommands != s2->deviceGeneratedCommands) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDevicePrivateDataCreateInfo(VkDevicePrivateDataCreateInfo const *s1,
                                           VkDevicePrivateDataCreateInfo const *s2) {
  if ((s1->privateDataSlotRequestCount != s2->privateDataSlotRequestCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
bool compare_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *s1,
                                              VkDevicePrivateDataCreateInfoEXT const *s2) {
  if ((s1->privateDataSlotRequestCount != s2->privateDataSlotRequestCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPrivateDataSlotCreateInfo(VkPrivateDataSlotCreateInfo const *s1,
                                         VkPrivateDataSlotCreateInfo const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
bool compare_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *s1,
                                            VkPrivateDataSlotCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDevicePrivateDataFeatures(VkPhysicalDevicePrivateDataFeatures const *s1,
                                                 VkPhysicalDevicePrivateDataFeatures const *s2) {
  if ((s1->privateData != s2->privateData) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
bool compare_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *s1,
    VkPhysicalDevicePrivateDataFeaturesEXT const *s2) {
  if ((s1->privateData != s2->privateData) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *s1,
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *s2) {
  if ((s1->maxGraphicsShaderGroupCount != s2->maxGraphicsShaderGroupCount) ||
      (s1->maxIndirectSequenceCount != s2->maxIndirectSequenceCount) ||
      (s1->maxIndirectCommandsTokenCount != s2->maxIndirectCommandsTokenCount) ||
      (s1->maxIndirectCommandsStreamCount != s2->maxIndirectCommandsStreamCount) ||
      (s1->maxIndirectCommandsTokenOffset != s2->maxIndirectCommandsTokenOffset) ||
      (s1->maxIndirectCommandsStreamStride != s2->maxIndirectCommandsStreamStride) ||
      (s1->minSequencesCountBufferOffsetAlignment != s2->minSequencesCountBufferOffsetAlignment) ||
      (s1->minSequencesIndexBufferOffsetAlignment != s2->minSequencesIndexBufferOffsetAlignment) ||
      (s1->minIndirectCommandsBufferOffsetAlignment !=
       s2->minIndirectCommandsBufferOffsetAlignment) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkPhysicalDeviceMultiDrawPropertiesEXT(
    VkPhysicalDeviceMultiDrawPropertiesEXT const *s1,
    VkPhysicalDeviceMultiDrawPropertiesEXT const *s2) {
  if ((s1->maxMultiDrawCount != s2->maxMultiDrawCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGraphicsShaderGroupCreateInfoNV(VkGraphicsShaderGroupCreateInfoNV const *s1,
                                               VkGraphicsShaderGroupCreateInfoNV const *s2) {
  if ((s1->stageCount != s2->stageCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGraphicsPipelineShaderGroupsCreateInfoNV(
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *s1,
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *s2) {
  if ((s1->groupCount != s2->groupCount) || (s1->pipelineCount != s2->pipelineCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindShaderGroupIndirectCommandNV(VkBindShaderGroupIndirectCommandNV const *s1,
                                                VkBindShaderGroupIndirectCommandNV const *s2) {
  if ((s1->groupIndex != s2->groupIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindIndexBufferIndirectCommandNV(VkBindIndexBufferIndirectCommandNV const *s1,
                                                VkBindIndexBufferIndirectCommandNV const *s2) {
  if ((s1->bufferAddress != s2->bufferAddress) || (s1->size != s2->size) ||
      (s1->indexType != s2->indexType) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkBindVertexBufferIndirectCommandNV(VkBindVertexBufferIndirectCommandNV const *s1,
                                                 VkBindVertexBufferIndirectCommandNV const *s2) {
  if ((s1->bufferAddress != s2->bufferAddress) || (s1->size != s2->size) ||
      (s1->stride != s2->stride) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkSetStateFlagsIndirectCommandNV(VkSetStateFlagsIndirectCommandNV const *s1,
                                              VkSetStateFlagsIndirectCommandNV const *s2) {
  if ((s1->data != s2->data) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsStreamNV(VkIndirectCommandsStreamNV const *s1,
                                        VkIndirectCommandsStreamNV const *s2) {
  if ((s1->buffer != s2->buffer) || (s1->offset != s2->offset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsLayoutTokenNV(VkIndirectCommandsLayoutTokenNV const *s1,
                                             VkIndirectCommandsLayoutTokenNV const *s2) {
  if ((s1->tokenType != s2->tokenType) || (s1->stream != s2->stream) ||
      (s1->offset != s2->offset) || (s1->vertexBindingUnit != s2->vertexBindingUnit) ||
      (s1->vertexDynamicStride != s2->vertexDynamicStride) ||
      (s1->pushconstantPipelineLayout != s2->pushconstantPipelineLayout) ||
      (s1->pushconstantShaderStageFlags != s2->pushconstantShaderStageFlags) ||
      (s1->pushconstantOffset != s2->pushconstantOffset) ||
      (s1->pushconstantSize != s2->pushconstantSize) ||
      (s1->indirectStateFlags != s2->indirectStateFlags) ||
      (s1->indexTypeCount != s2->indexTypeCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkIndirectCommandsLayoutCreateInfoNV(VkIndirectCommandsLayoutCreateInfoNV const *s1,
                                                  VkIndirectCommandsLayoutCreateInfoNV const *s2) {
  if ((s1->flags != s2->flags) || (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->tokenCount != s2->tokenCount) || (s1->streamCount != s2->streamCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGeneratedCommandsInfoNV(VkGeneratedCommandsInfoNV const *s1,
                                       VkGeneratedCommandsInfoNV const *s2) {
  if ((s1->pipelineBindPoint != s2->pipelineBindPoint) || (s1->pipeline != s2->pipeline) ||
      (s1->indirectCommandsLayout != s2->indirectCommandsLayout) ||
      (s1->streamCount != s2->streamCount) || (s1->sequencesCount != s2->sequencesCount) ||
      (s1->preprocessBuffer != s2->preprocessBuffer) ||
      (s1->preprocessOffset != s2->preprocessOffset) ||
      (s1->preprocessSize != s2->preprocessSize) ||
      (s1->sequencesCountBuffer != s2->sequencesCountBuffer) ||
      (s1->sequencesCountOffset != s2->sequencesCountOffset) ||
      (s1->sequencesIndexBuffer != s2->sequencesIndexBuffer) ||
      (s1->sequencesIndexOffset != s2->sequencesIndexOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
bool compare_VkGeneratedCommandsMemoryRequirementsInfoNV(
    VkGeneratedCommandsMemoryRequirementsInfoNV const *s1,
    VkGeneratedCommandsMemoryRequirementsInfoNV const *s2) {
  if ((s1->pipelineBindPoint != s2->pipelineBindPoint) || (s1->pipeline != s2->pipeline) ||
      (s1->indirectCommandsLayout != s2->indirectCommandsLayout) ||
      (s1->maxSequencesCount != s2->maxSequencesCount) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceFeatures2(VkPhysicalDeviceFeatures2 const *s1,
                                       VkPhysicalDeviceFeatures2 const *s2) {
  if (!compare_VkPhysicalDeviceFeatures(&s1->features, &s2->features) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceFeatures2KHR(VkPhysicalDeviceFeatures2KHR const *s1,
                                          VkPhysicalDeviceFeatures2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProperties2(VkPhysicalDeviceProperties2 const *s1,
                                         VkPhysicalDeviceProperties2 const *s2) {
  if (!compare_VkPhysicalDeviceProperties(&s1->properties, &s2->properties) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceProperties2KHR(VkPhysicalDeviceProperties2KHR const *s1,
                                            VkPhysicalDeviceProperties2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkFormatProperties2(VkFormatProperties2 const *s1, VkFormatProperties2 const *s2) {
  if (!compare_VkFormatProperties(&s1->formatProperties, &s2->formatProperties) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkFormatProperties2KHR(VkFormatProperties2KHR const *s1,
                                    VkFormatProperties2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkImageFormatProperties2(VkImageFormatProperties2 const *s1,
                                      VkImageFormatProperties2 const *s2) {
  if (!compare_VkImageFormatProperties(&s1->imageFormatProperties, &s2->imageFormatProperties) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkImageFormatProperties2KHR(VkImageFormatProperties2KHR const *s1,
                                         VkImageFormatProperties2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceImageFormatInfo2(VkPhysicalDeviceImageFormatInfo2 const *s1,
                                              VkPhysicalDeviceImageFormatInfo2 const *s2) {
  if ((s1->format != s2->format) || (s1->type != s2->type) || (s1->tiling != s2->tiling) ||
      (s1->usage != s2->usage) || (s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceImageFormatInfo2KHR(VkPhysicalDeviceImageFormatInfo2KHR const *s1,
                                                 VkPhysicalDeviceImageFormatInfo2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkQueueFamilyProperties2(VkQueueFamilyProperties2 const *s1,
                                      VkQueueFamilyProperties2 const *s2) {
  if (!compare_VkQueueFamilyProperties(&s1->queueFamilyProperties, &s2->queueFamilyProperties) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkQueueFamilyProperties2KHR(VkQueueFamilyProperties2KHR const *s1,
                                         VkQueueFamilyProperties2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMemoryProperties2(VkPhysicalDeviceMemoryProperties2 const *s1,
                                               VkPhysicalDeviceMemoryProperties2 const *s2) {
  if (!compare_VkPhysicalDeviceMemoryProperties(&s1->memoryProperties, &s2->memoryProperties) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceMemoryProperties2KHR(VkPhysicalDeviceMemoryProperties2KHR const *s1,
                                                  VkPhysicalDeviceMemoryProperties2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkSparseImageFormatProperties2(VkSparseImageFormatProperties2 const *s1,
                                            VkSparseImageFormatProperties2 const *s2) {
  if (!compare_VkSparseImageFormatProperties(&s1->properties, &s2->properties) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkSparseImageFormatProperties2KHR(VkSparseImageFormatProperties2KHR const *s1,
                                               VkSparseImageFormatProperties2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSparseImageFormatInfo2(
    VkPhysicalDeviceSparseImageFormatInfo2 const *s1,
    VkPhysicalDeviceSparseImageFormatInfo2 const *s2) {
  if ((s1->format != s2->format) || (s1->type != s2->type) || (s1->samples != s2->samples) ||
      (s1->usage != s2->usage) || (s1->tiling != s2->tiling) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_physical_device_properties2
bool compare_VkPhysicalDeviceSparseImageFormatInfo2KHR(
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *s1,
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *s2) {
  return true;
}
#endif

#if VK_KHR_push_descriptor
bool compare_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s1,
    VkPhysicalDevicePushDescriptorPropertiesKHR const *s2) {
  if ((s1->maxPushDescriptors != s2->maxPushDescriptors) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkConformanceVersion(VkConformanceVersion const *s1, VkConformanceVersion const *s2) {
  if ((s1->major != s2->major) || (s1->minor != s2->minor) || (s1->subminor != s2->subminor) ||
      (s1->patch != s2->patch) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_driver_properties
bool compare_VkConformanceVersionKHR(VkConformanceVersionKHR const *s1,
                                     VkConformanceVersionKHR const *s2) {
  if ((s1->major != s2->major) || (s1->minor != s2->minor) || (s1->subminor != s2->subminor) ||
      (s1->patch != s2->patch) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDriverProperties(VkPhysicalDeviceDriverProperties const *s1,
                                              VkPhysicalDeviceDriverProperties const *s2) {
  if ((s1->driverID != s2->driverID) ||
      !compare_VkConformanceVersion(&s1->conformanceVersion, &s2->conformanceVersion) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_DRIVER_NAME_SIZE; ++i) {
    if (s1->driverName[i] != s2->driverName[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_DRIVER_INFO_SIZE; ++i) {
    if (s1->driverInfo[i] != s2->driverInfo[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_driver_properties
bool compare_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *s1,
                                                 VkPhysicalDeviceDriverPropertiesKHR const *s2) {
  if ((s1->driverID != s2->driverID) ||
      !compare_VkConformanceVersionKHR(&s1->conformanceVersion, &s2->conformanceVersion) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_DRIVER_NAME_SIZE_KHR; ++i) {
    if (s1->driverName[i] != s2->driverName[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_DRIVER_INFO_SIZE_KHR; ++i) {
    if (s1->driverInfo[i] != s2->driverInfo[i])
      return false;
  }

  return true;
}
#endif

#if VK_KHR_incremental_present
bool compare_VkPresentRegionsKHR(VkPresentRegionsKHR const *s1, VkPresentRegionsKHR const *s2) {
  if ((s1->swapchainCount != s2->swapchainCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_incremental_present
bool compare_VkPresentRegionKHR(VkPresentRegionKHR const *s1, VkPresentRegionKHR const *s2) {
  if ((s1->rectangleCount != s2->rectangleCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_incremental_present
bool compare_VkRectLayerKHR(VkRectLayerKHR const *s1, VkRectLayerKHR const *s2) {
  if (!compare_VkOffset2D(&s1->offset, &s2->offset) ||
      !compare_VkExtent2D(&s1->extent, &s2->extent) || (s1->layer != s2->layer) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceVariablePointersFeatures(
    VkPhysicalDeviceVariablePointersFeatures const *s1,
    VkPhysicalDeviceVariablePointersFeatures const *s2) {
  if ((s1->variablePointersStorageBuffer != s2->variablePointersStorageBuffer) ||
      (s1->variablePointers != s2->variablePointers) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers
bool compare_VkPhysicalDeviceVariablePointersFeaturesKHR(
    VkPhysicalDeviceVariablePointersFeaturesKHR const *s1,
    VkPhysicalDeviceVariablePointersFeaturesKHR const *s2) {
  return true;
}
#endif

#if VK_KHR_variable_pointers
bool compare_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s1,
    VkPhysicalDeviceVariablePointerFeaturesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *s1,
    VkPhysicalDeviceVariablePointerFeatures const *s2) {
  if ((s1->variablePointersStorageBuffer != s2->variablePointersStorageBuffer) ||
      (s1->variablePointers != s2->variablePointers) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryProperties(VkExternalMemoryProperties const *s1,
                                        VkExternalMemoryProperties const *s2) {
  if ((s1->externalMemoryFeatures != s2->externalMemoryFeatures) ||
      (s1->exportFromImportedHandleTypes != s2->exportFromImportedHandleTypes) ||
      (s1->compatibleHandleTypes != s2->compatibleHandleTypes) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalMemoryPropertiesKHR(VkExternalMemoryPropertiesKHR const *s1,
                                           VkExternalMemoryPropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalImageFormatInfo(
    VkPhysicalDeviceExternalImageFormatInfo const *s1,
    VkPhysicalDeviceExternalImageFormatInfo const *s2) {
  if ((s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkPhysicalDeviceExternalImageFormatInfoKHR(
    VkPhysicalDeviceExternalImageFormatInfoKHR const *s1,
    VkPhysicalDeviceExternalImageFormatInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalImageFormatProperties(VkExternalImageFormatProperties const *s1,
                                             VkExternalImageFormatProperties const *s2) {
  if (!compare_VkExternalMemoryProperties(&s1->externalMemoryProperties,
                                          &s2->externalMemoryProperties) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalImageFormatPropertiesKHR(VkExternalImageFormatPropertiesKHR const *s1,
                                                VkExternalImageFormatPropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalBufferInfo(VkPhysicalDeviceExternalBufferInfo const *s1,
                                                VkPhysicalDeviceExternalBufferInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->usage != s2->usage) || (s1->handleType != s2->handleType) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkPhysicalDeviceExternalBufferInfoKHR(
    VkPhysicalDeviceExternalBufferInfoKHR const *s1,
    VkPhysicalDeviceExternalBufferInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalBufferProperties(VkExternalBufferProperties const *s1,
                                        VkExternalBufferProperties const *s2) {
  if (!compare_VkExternalMemoryProperties(&s1->externalMemoryProperties,
                                          &s2->externalMemoryProperties) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_capabilities
bool compare_VkExternalBufferPropertiesKHR(VkExternalBufferPropertiesKHR const *s1,
                                           VkExternalBufferPropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceIDProperties(VkPhysicalDeviceIDProperties const *s1,
                                          VkPhysicalDeviceIDProperties const *s2) {
  if ((s1->deviceNodeMask != s2->deviceNodeMask) || (s1->deviceLUIDValid != s2->deviceLUIDValid) ||
      false)
    return false;

  for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
    if (s1->deviceUUID[i] != s2->deviceUUID[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
    if (s1->driverUUID[i] != s2->driverUUID[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_LUID_SIZE; ++i) {
    if (s1->deviceLUID[i] != s2->deviceLUID[i])
      return false;
  }

  return true;
}
#endif

#if (VK_KHR_external_memory_capabilities || VK_KHR_external_semaphore_capabilities ||              \
     VK_KHR_external_fence_capabilities)
bool compare_VkPhysicalDeviceIDPropertiesKHR(VkPhysicalDeviceIDPropertiesKHR const *s1,
                                             VkPhysicalDeviceIDPropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryImageCreateInfo(VkExternalMemoryImageCreateInfo const *s1,
                                             VkExternalMemoryImageCreateInfo const *s2) {
  if ((s1->handleTypes != s2->handleTypes) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory
bool compare_VkExternalMemoryImageCreateInfoKHR(VkExternalMemoryImageCreateInfoKHR const *s1,
                                                VkExternalMemoryImageCreateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalMemoryBufferCreateInfo(VkExternalMemoryBufferCreateInfo const *s1,
                                              VkExternalMemoryBufferCreateInfo const *s2) {
  if ((s1->handleTypes != s2->handleTypes) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory
bool compare_VkExternalMemoryBufferCreateInfoKHR(VkExternalMemoryBufferCreateInfoKHR const *s1,
                                                 VkExternalMemoryBufferCreateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExportMemoryAllocateInfo(VkExportMemoryAllocateInfo const *s1,
                                        VkExportMemoryAllocateInfo const *s2) {
  if ((s1->handleTypes != s2->handleTypes) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory
bool compare_VkExportMemoryAllocateInfoKHR(VkExportMemoryAllocateInfoKHR const *s1,
                                           VkExportMemoryAllocateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_KHR_external_memory_win32
bool compare_VkImportMemoryWin32HandleInfoKHR(VkImportMemoryWin32HandleInfoKHR const *s1,
                                              VkImportMemoryWin32HandleInfoKHR const *s2) {
  if ((s1->handleType != s2->handleType) || (s1->handle != s2->handle) || (s1->name != s2->name) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_win32
bool compare_VkExportMemoryWin32HandleInfoKHR(VkExportMemoryWin32HandleInfoKHR const *s1,
                                              VkExportMemoryWin32HandleInfoKHR const *s2) {
  if ((s1->dwAccess != s2->dwAccess) || (s1->name != s2->name) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkImportMemoryZirconHandleInfoFUCHSIA(
    VkImportMemoryZirconHandleInfoFUCHSIA const *s1,
    VkImportMemoryZirconHandleInfoFUCHSIA const *s2) {
  if ((s1->handleType != s2->handleType) || (s1->handle != s2->handle) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkMemoryZirconHandlePropertiesFUCHSIA(
    VkMemoryZirconHandlePropertiesFUCHSIA const *s1,
    VkMemoryZirconHandlePropertiesFUCHSIA const *s2) {
  if ((s1->memoryTypeBits != s2->memoryTypeBits) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
bool compare_VkMemoryGetZirconHandleInfoFUCHSIA(VkMemoryGetZirconHandleInfoFUCHSIA const *s1,
                                                VkMemoryGetZirconHandleInfoFUCHSIA const *s2) {
  if ((s1->memory != s2->memory) || (s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_win32
bool compare_VkMemoryWin32HandlePropertiesKHR(VkMemoryWin32HandlePropertiesKHR const *s1,
                                              VkMemoryWin32HandlePropertiesKHR const *s2) {
  if ((s1->memoryTypeBits != s2->memoryTypeBits) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_win32
bool compare_VkMemoryGetWin32HandleInfoKHR(VkMemoryGetWin32HandleInfoKHR const *s1,
                                           VkMemoryGetWin32HandleInfoKHR const *s2) {
  if ((s1->memory != s2->memory) || (s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_fd
bool compare_VkImportMemoryFdInfoKHR(VkImportMemoryFdInfoKHR const *s1,
                                     VkImportMemoryFdInfoKHR const *s2) {
  if ((s1->handleType != s2->handleType) || (s1->fd != s2->fd) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_fd
bool compare_VkMemoryFdPropertiesKHR(VkMemoryFdPropertiesKHR const *s1,
                                     VkMemoryFdPropertiesKHR const *s2) {
  if ((s1->memoryTypeBits != s2->memoryTypeBits) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_memory_fd
bool compare_VkMemoryGetFdInfoKHR(VkMemoryGetFdInfoKHR const *s1, VkMemoryGetFdInfoKHR const *s2) {
  if ((s1->memory != s2->memory) || (s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_win32_keyed_mutex
bool compare_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *s1,
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *s2) {
  if ((s1->acquireCount != s2->acquireCount) || (s1->releaseCount != s2->releaseCount) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalSemaphoreInfo(
    VkPhysicalDeviceExternalSemaphoreInfo const *s1,
    VkPhysicalDeviceExternalSemaphoreInfo const *s2) {
  if ((s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_capabilities
bool compare_VkPhysicalDeviceExternalSemaphoreInfoKHR(
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *s1,
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalSemaphoreProperties(VkExternalSemaphoreProperties const *s1,
                                           VkExternalSemaphoreProperties const *s2) {
  if ((s1->exportFromImportedHandleTypes != s2->exportFromImportedHandleTypes) ||
      (s1->compatibleHandleTypes != s2->compatibleHandleTypes) ||
      (s1->externalSemaphoreFeatures != s2->externalSemaphoreFeatures) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_capabilities
bool compare_VkExternalSemaphorePropertiesKHR(VkExternalSemaphorePropertiesKHR const *s1,
                                              VkExternalSemaphorePropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExportSemaphoreCreateInfo(VkExportSemaphoreCreateInfo const *s1,
                                         VkExportSemaphoreCreateInfo const *s2) {
  if ((s1->handleTypes != s2->handleTypes) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore
bool compare_VkExportSemaphoreCreateInfoKHR(VkExportSemaphoreCreateInfoKHR const *s1,
                                            VkExportSemaphoreCreateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkImportSemaphoreWin32HandleInfoKHR(VkImportSemaphoreWin32HandleInfoKHR const *s1,
                                                 VkImportSemaphoreWin32HandleInfoKHR const *s2) {
  if ((s1->semaphore != s2->semaphore) || (s1->flags != s2->flags) ||
      (s1->handleType != s2->handleType) || (s1->handle != s2->handle) || (s1->name != s2->name) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkExportSemaphoreWin32HandleInfoKHR(VkExportSemaphoreWin32HandleInfoKHR const *s1,
                                                 VkExportSemaphoreWin32HandleInfoKHR const *s2) {
  if ((s1->dwAccess != s2->dwAccess) || (s1->name != s2->name) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkD3D12FenceSubmitInfoKHR(VkD3D12FenceSubmitInfoKHR const *s1,
                                       VkD3D12FenceSubmitInfoKHR const *s2) {
  if ((s1->waitSemaphoreValuesCount != s2->waitSemaphoreValuesCount) ||
      (s1->signalSemaphoreValuesCount != s2->signalSemaphoreValuesCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_win32
bool compare_VkSemaphoreGetWin32HandleInfoKHR(VkSemaphoreGetWin32HandleInfoKHR const *s1,
                                              VkSemaphoreGetWin32HandleInfoKHR const *s2) {
  if ((s1->semaphore != s2->semaphore) || (s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_fd
bool compare_VkImportSemaphoreFdInfoKHR(VkImportSemaphoreFdInfoKHR const *s1,
                                        VkImportSemaphoreFdInfoKHR const *s2) {
  if ((s1->semaphore != s2->semaphore) || (s1->flags != s2->flags) ||
      (s1->handleType != s2->handleType) || (s1->fd != s2->fd) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_semaphore_fd
bool compare_VkSemaphoreGetFdInfoKHR(VkSemaphoreGetFdInfoKHR const *s1,
                                     VkSemaphoreGetFdInfoKHR const *s2) {
  if ((s1->semaphore != s2->semaphore) || (s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
bool compare_VkImportSemaphoreZirconHandleInfoFUCHSIA(
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *s1,
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *s2) {
  if ((s1->semaphore != s2->semaphore) || (s1->flags != s2->flags) ||
      (s1->handleType != s2->handleType) || (s1->zirconHandle != s2->zirconHandle) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
bool compare_VkSemaphoreGetZirconHandleInfoFUCHSIA(
    VkSemaphoreGetZirconHandleInfoFUCHSIA const *s1,
    VkSemaphoreGetZirconHandleInfoFUCHSIA const *s2) {
  if ((s1->semaphore != s2->semaphore) || (s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceExternalFenceInfo(VkPhysicalDeviceExternalFenceInfo const *s1,
                                               VkPhysicalDeviceExternalFenceInfo const *s2) {
  if ((s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_capabilities
bool compare_VkPhysicalDeviceExternalFenceInfoKHR(VkPhysicalDeviceExternalFenceInfoKHR const *s1,
                                                  VkPhysicalDeviceExternalFenceInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExternalFenceProperties(VkExternalFenceProperties const *s1,
                                       VkExternalFenceProperties const *s2) {
  if ((s1->exportFromImportedHandleTypes != s2->exportFromImportedHandleTypes) ||
      (s1->compatibleHandleTypes != s2->compatibleHandleTypes) ||
      (s1->externalFenceFeatures != s2->externalFenceFeatures) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_capabilities
bool compare_VkExternalFencePropertiesKHR(VkExternalFencePropertiesKHR const *s1,
                                          VkExternalFencePropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkExportFenceCreateInfo(VkExportFenceCreateInfo const *s1,
                                     VkExportFenceCreateInfo const *s2) {
  if ((s1->handleTypes != s2->handleTypes) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence
bool compare_VkExportFenceCreateInfoKHR(VkExportFenceCreateInfoKHR const *s1,
                                        VkExportFenceCreateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_KHR_external_fence_win32
bool compare_VkImportFenceWin32HandleInfoKHR(VkImportFenceWin32HandleInfoKHR const *s1,
                                             VkImportFenceWin32HandleInfoKHR const *s2) {
  if ((s1->fence != s2->fence) || (s1->flags != s2->flags) || (s1->handleType != s2->handleType) ||
      (s1->handle != s2->handle) || (s1->name != s2->name) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_win32
bool compare_VkExportFenceWin32HandleInfoKHR(VkExportFenceWin32HandleInfoKHR const *s1,
                                             VkExportFenceWin32HandleInfoKHR const *s2) {
  if ((s1->dwAccess != s2->dwAccess) || (s1->name != s2->name) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_win32
bool compare_VkFenceGetWin32HandleInfoKHR(VkFenceGetWin32HandleInfoKHR const *s1,
                                          VkFenceGetWin32HandleInfoKHR const *s2) {
  if ((s1->fence != s2->fence) || (s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_fd
bool compare_VkImportFenceFdInfoKHR(VkImportFenceFdInfoKHR const *s1,
                                    VkImportFenceFdInfoKHR const *s2) {
  if ((s1->fence != s2->fence) || (s1->flags != s2->flags) || (s1->handleType != s2->handleType) ||
      (s1->fd != s2->fd) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_external_fence_fd
bool compare_VkFenceGetFdInfoKHR(VkFenceGetFdInfoKHR const *s1, VkFenceGetFdInfoKHR const *s2) {
  if ((s1->fence != s2->fence) || (s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMultiviewFeatures(VkPhysicalDeviceMultiviewFeatures const *s1,
                                               VkPhysicalDeviceMultiviewFeatures const *s2) {
  if ((s1->multiview != s2->multiview) ||
      (s1->multiviewGeometryShader != s2->multiviewGeometryShader) ||
      (s1->multiviewTessellationShader != s2->multiviewTessellationShader) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_multiview
bool compare_VkPhysicalDeviceMultiviewFeaturesKHR(VkPhysicalDeviceMultiviewFeaturesKHR const *s1,
                                                  VkPhysicalDeviceMultiviewFeaturesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMultiviewProperties(VkPhysicalDeviceMultiviewProperties const *s1,
                                                 VkPhysicalDeviceMultiviewProperties const *s2) {
  if ((s1->maxMultiviewViewCount != s2->maxMultiviewViewCount) ||
      (s1->maxMultiviewInstanceIndex != s2->maxMultiviewInstanceIndex) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_multiview
bool compare_VkPhysicalDeviceMultiviewPropertiesKHR(
    VkPhysicalDeviceMultiviewPropertiesKHR const *s1,
    VkPhysicalDeviceMultiviewPropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkRenderPassMultiviewCreateInfo(VkRenderPassMultiviewCreateInfo const *s1,
                                             VkRenderPassMultiviewCreateInfo const *s2) {
  if ((s1->subpassCount != s2->subpassCount) || (s1->dependencyCount != s2->dependencyCount) ||
      (s1->correlationMaskCount != s2->correlationMaskCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_multiview
bool compare_VkRenderPassMultiviewCreateInfoKHR(VkRenderPassMultiviewCreateInfoKHR const *s1,
                                                VkRenderPassMultiviewCreateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_EXT_display_surface_counter
bool compare_VkSurfaceCapabilities2EXT(VkSurfaceCapabilities2EXT const *s1,
                                       VkSurfaceCapabilities2EXT const *s2) {
  if ((s1->minImageCount != s2->minImageCount) || (s1->maxImageCount != s2->maxImageCount) ||
      !compare_VkExtent2D(&s1->currentExtent, &s2->currentExtent) ||
      !compare_VkExtent2D(&s1->minImageExtent, &s2->minImageExtent) ||
      !compare_VkExtent2D(&s1->maxImageExtent, &s2->maxImageExtent) ||
      (s1->maxImageArrayLayers != s2->maxImageArrayLayers) ||
      (s1->supportedTransforms != s2->supportedTransforms) ||
      (s1->currentTransform != s2->currentTransform) ||
      (s1->supportedCompositeAlpha != s2->supportedCompositeAlpha) ||
      (s1->supportedUsageFlags != s2->supportedUsageFlags) ||
      (s1->supportedSurfaceCounters != s2->supportedSurfaceCounters) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_display_control
bool compare_VkDisplayPowerInfoEXT(VkDisplayPowerInfoEXT const *s1,
                                   VkDisplayPowerInfoEXT const *s2) {
  if ((s1->powerState != s2->powerState) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_display_control
bool compare_VkDeviceEventInfoEXT(VkDeviceEventInfoEXT const *s1, VkDeviceEventInfoEXT const *s2) {
  if ((s1->deviceEvent != s2->deviceEvent) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_display_control
bool compare_VkDisplayEventInfoEXT(VkDisplayEventInfoEXT const *s1,
                                   VkDisplayEventInfoEXT const *s2) {
  if ((s1->displayEvent != s2->displayEvent) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_display_control
bool compare_VkSwapchainCounterCreateInfoEXT(VkSwapchainCounterCreateInfoEXT const *s1,
                                             VkSwapchainCounterCreateInfoEXT const *s2) {
  if ((s1->surfaceCounters != s2->surfaceCounters) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceGroupProperties(VkPhysicalDeviceGroupProperties const *s1,
                                             VkPhysicalDeviceGroupProperties const *s2) {
  if ((s1->physicalDeviceCount != s2->physicalDeviceCount) ||
      (s1->subsetAllocation != s2->subsetAllocation) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_DEVICE_GROUP_SIZE; ++i) {
    if (s1->physicalDevices[i] != s2->physicalDevices[i])
      return false;
  }

  return true;
}
#endif

#if VK_KHR_device_group_creation
bool compare_VkPhysicalDeviceGroupPropertiesKHR(VkPhysicalDeviceGroupPropertiesKHR const *s1,
                                                VkPhysicalDeviceGroupPropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryAllocateFlagsInfo(VkMemoryAllocateFlagsInfo const *s1,
                                       VkMemoryAllocateFlagsInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->deviceMask != s2->deviceMask) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkMemoryAllocateFlagsInfoKHR(VkMemoryAllocateFlagsInfoKHR const *s1,
                                          VkMemoryAllocateFlagsInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBindBufferMemoryInfo(VkBindBufferMemoryInfo const *s1,
                                    VkBindBufferMemoryInfo const *s2) {
  if ((s1->buffer != s2->buffer) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_bind_memory2
bool compare_VkBindBufferMemoryInfoKHR(VkBindBufferMemoryInfoKHR const *s1,
                                       VkBindBufferMemoryInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBindBufferMemoryDeviceGroupInfo(VkBindBufferMemoryDeviceGroupInfo const *s1,
                                               VkBindBufferMemoryDeviceGroupInfo const *s2) {
  if ((s1->deviceIndexCount != s2->deviceIndexCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkBindBufferMemoryDeviceGroupInfoKHR(VkBindBufferMemoryDeviceGroupInfoKHR const *s1,
                                                  VkBindBufferMemoryDeviceGroupInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBindImageMemoryInfo(VkBindImageMemoryInfo const *s1,
                                   VkBindImageMemoryInfo const *s2) {
  if ((s1->image != s2->image) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_bind_memory2
bool compare_VkBindImageMemoryInfoKHR(VkBindImageMemoryInfoKHR const *s1,
                                      VkBindImageMemoryInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBindImageMemoryDeviceGroupInfo(VkBindImageMemoryDeviceGroupInfo const *s1,
                                              VkBindImageMemoryDeviceGroupInfo const *s2) {
  if ((s1->deviceIndexCount != s2->deviceIndexCount) ||
      (s1->splitInstanceBindRegionCount != s2->splitInstanceBindRegionCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkBindImageMemoryDeviceGroupInfoKHR(VkBindImageMemoryDeviceGroupInfoKHR const *s1,
                                                 VkBindImageMemoryDeviceGroupInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupRenderPassBeginInfo(VkDeviceGroupRenderPassBeginInfo const *s1,
                                              VkDeviceGroupRenderPassBeginInfo const *s2) {
  if ((s1->deviceMask != s2->deviceMask) ||
      (s1->deviceRenderAreaCount != s2->deviceRenderAreaCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupRenderPassBeginInfoKHR(VkDeviceGroupRenderPassBeginInfoKHR const *s1,
                                                 VkDeviceGroupRenderPassBeginInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupCommandBufferBeginInfo(VkDeviceGroupCommandBufferBeginInfo const *s1,
                                                 VkDeviceGroupCommandBufferBeginInfo const *s2) {
  if ((s1->deviceMask != s2->deviceMask) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupCommandBufferBeginInfoKHR(
    VkDeviceGroupCommandBufferBeginInfoKHR const *s1,
    VkDeviceGroupCommandBufferBeginInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupSubmitInfo(VkDeviceGroupSubmitInfo const *s1,
                                     VkDeviceGroupSubmitInfo const *s2) {
  if ((s1->waitSemaphoreCount != s2->waitSemaphoreCount) ||
      (s1->commandBufferCount != s2->commandBufferCount) ||
      (s1->signalSemaphoreCount != s2->signalSemaphoreCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupSubmitInfoKHR(VkDeviceGroupSubmitInfoKHR const *s1,
                                        VkDeviceGroupSubmitInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupBindSparseInfo(VkDeviceGroupBindSparseInfo const *s1,
                                         VkDeviceGroupBindSparseInfo const *s2) {
  if ((s1->resourceDeviceIndex != s2->resourceDeviceIndex) ||
      (s1->memoryDeviceIndex != s2->memoryDeviceIndex) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_device_group
bool compare_VkDeviceGroupBindSparseInfoKHR(VkDeviceGroupBindSparseInfoKHR const *s1,
                                            VkDeviceGroupBindSparseInfoKHR const *s2) {
  return true;
}
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkDeviceGroupPresentCapabilitiesKHR(VkDeviceGroupPresentCapabilitiesKHR const *s1,
                                                 VkDeviceGroupPresentCapabilitiesKHR const *s2) {
  if ((s1->modes != s2->modes) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_DEVICE_GROUP_SIZE; ++i) {
    if (s1->presentMask[i] != s2->presentMask[i])
      return false;
  }

  return true;
}
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkImageSwapchainCreateInfoKHR(VkImageSwapchainCreateInfoKHR const *s1,
                                           VkImageSwapchainCreateInfoKHR const *s2) {
  if ((s1->swapchain != s2->swapchain) || false)
    return false;

  return true;
}
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkBindImageMemorySwapchainInfoKHR(VkBindImageMemorySwapchainInfoKHR const *s1,
                                               VkBindImageMemorySwapchainInfoKHR const *s2) {
  if ((s1->swapchain != s2->swapchain) || (s1->imageIndex != s2->imageIndex) || false)
    return false;

  return true;
}
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkAcquireNextImageInfoKHR(VkAcquireNextImageInfoKHR const *s1,
                                       VkAcquireNextImageInfoKHR const *s2) {
  if ((s1->swapchain != s2->swapchain) || (s1->timeout != s2->timeout) ||
      (s1->semaphore != s2->semaphore) || (s1->fence != s2->fence) ||
      (s1->deviceMask != s2->deviceMask) || false)
    return false;

  return true;
}
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkDeviceGroupPresentInfoKHR(VkDeviceGroupPresentInfoKHR const *s1,
                                         VkDeviceGroupPresentInfoKHR const *s2) {
  if ((s1->swapchainCount != s2->swapchainCount) || (s1->mode != s2->mode) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceGroupDeviceCreateInfo(VkDeviceGroupDeviceCreateInfo const *s1,
                                           VkDeviceGroupDeviceCreateInfo const *s2) {
  if ((s1->physicalDeviceCount != s2->physicalDeviceCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_device_group_creation
bool compare_VkDeviceGroupDeviceCreateInfoKHR(VkDeviceGroupDeviceCreateInfoKHR const *s1,
                                              VkDeviceGroupDeviceCreateInfoKHR const *s2) {
  return true;
}
#endif

#if (VK_KHR_swapchain || VK_KHR_device_group)
bool compare_VkDeviceGroupSwapchainCreateInfoKHR(VkDeviceGroupSwapchainCreateInfoKHR const *s1,
                                                 VkDeviceGroupSwapchainCreateInfoKHR const *s2) {
  if ((s1->modes != s2->modes) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorUpdateTemplateEntry(VkDescriptorUpdateTemplateEntry const *s1,
                                             VkDescriptorUpdateTemplateEntry const *s2) {
  if ((s1->dstBinding != s2->dstBinding) || (s1->dstArrayElement != s2->dstArrayElement) ||
      (s1->descriptorCount != s2->descriptorCount) || (s1->descriptorType != s2->descriptorType) ||
      (s1->offset != s2->offset) || (s1->stride != s2->stride) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_descriptor_update_template
bool compare_VkDescriptorUpdateTemplateEntryKHR(VkDescriptorUpdateTemplateEntryKHR const *s1,
                                                VkDescriptorUpdateTemplateEntryKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorUpdateTemplateCreateInfo(VkDescriptorUpdateTemplateCreateInfo const *s1,
                                                  VkDescriptorUpdateTemplateCreateInfo const *s2) {
  if ((s1->flags != s2->flags) ||
      (s1->descriptorUpdateEntryCount != s2->descriptorUpdateEntryCount) ||
      (s1->templateType != s2->templateType) ||
      (s1->descriptorSetLayout != s2->descriptorSetLayout) ||
      (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->pipelineLayout != s2->pipelineLayout) || (s1->set != s2->set) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_descriptor_update_template
bool compare_VkDescriptorUpdateTemplateCreateInfoKHR(
    VkDescriptorUpdateTemplateCreateInfoKHR const *s1,
    VkDescriptorUpdateTemplateCreateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_EXT_hdr_metadata
bool compare_VkXYColorEXT(VkXYColorEXT const *s1, VkXYColorEXT const *s2) {
  if ((s1->x != s2->x) || (s1->y != s2->y) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
bool compare_VkPhysicalDevicePresentIdFeaturesKHR(VkPhysicalDevicePresentIdFeaturesKHR const *s1,
                                                  VkPhysicalDevicePresentIdFeaturesKHR const *s2) {
  if ((s1->presentId != s2->presentId) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
bool compare_VkPresentIdKHR(VkPresentIdKHR const *s1, VkPresentIdKHR const *s2) {
  if ((s1->swapchainCount != s2->swapchainCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_wait
bool compare_VkPhysicalDevicePresentWaitFeaturesKHR(
    VkPhysicalDevicePresentWaitFeaturesKHR const *s1,
    VkPhysicalDevicePresentWaitFeaturesKHR const *s2) {
  if ((s1->presentWait != s2->presentWait) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_hdr_metadata
bool compare_VkHdrMetadataEXT(VkHdrMetadataEXT const *s1, VkHdrMetadataEXT const *s2) {
  if (!compare_VkXYColorEXT(&s1->displayPrimaryRed, &s2->displayPrimaryRed) ||
      !compare_VkXYColorEXT(&s1->displayPrimaryGreen, &s2->displayPrimaryGreen) ||
      !compare_VkXYColorEXT(&s1->displayPrimaryBlue, &s2->displayPrimaryBlue) ||
      !compare_VkXYColorEXT(&s1->whitePoint, &s2->whitePoint) ||
      (s1->maxLuminance != s2->maxLuminance) || (s1->minLuminance != s2->minLuminance) ||
      (s1->maxContentLightLevel != s2->maxContentLightLevel) ||
      (s1->maxFrameAverageLightLevel != s2->maxFrameAverageLightLevel) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
bool compare_VkDisplayNativeHdrSurfaceCapabilitiesAMD(
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *s1,
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *s2) {
  if ((s1->localDimmingSupport != s2->localDimmingSupport) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
bool compare_VkSwapchainDisplayNativeHdrCreateInfoAMD(
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *s1,
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *s2) {
  if ((s1->localDimmingEnable != s2->localDimmingEnable) || false)
    return false;

  return true;
}
#endif

#if VK_GOOGLE_display_timing
bool compare_VkRefreshCycleDurationGOOGLE(VkRefreshCycleDurationGOOGLE const *s1,
                                          VkRefreshCycleDurationGOOGLE const *s2) {
  if ((s1->refreshDuration != s2->refreshDuration) || false)
    return false;

  return true;
}
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPastPresentationTimingGOOGLE(VkPastPresentationTimingGOOGLE const *s1,
                                            VkPastPresentationTimingGOOGLE const *s2) {
  if ((s1->presentID != s2->presentID) || (s1->desiredPresentTime != s2->desiredPresentTime) ||
      (s1->actualPresentTime != s2->actualPresentTime) ||
      (s1->earliestPresentTime != s2->earliestPresentTime) ||
      (s1->presentMargin != s2->presentMargin) || false)
    return false;

  return true;
}
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPresentTimesInfoGOOGLE(VkPresentTimesInfoGOOGLE const *s1,
                                      VkPresentTimesInfoGOOGLE const *s2) {
  if ((s1->swapchainCount != s2->swapchainCount) || false)
    return false;

  return true;
}
#endif

#if VK_GOOGLE_display_timing
bool compare_VkPresentTimeGOOGLE(VkPresentTimeGOOGLE const *s1, VkPresentTimeGOOGLE const *s2) {
  if ((s1->presentID != s2->presentID) || (s1->desiredPresentTime != s2->desiredPresentTime) ||
      false)
    return false;

  return true;
}
#endif

#if VK_MVK_ios_surface
bool compare_VkIOSSurfaceCreateInfoMVK(VkIOSSurfaceCreateInfoMVK const *s1,
                                       VkIOSSurfaceCreateInfoMVK const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_MVK_macos_surface
bool compare_VkMacOSSurfaceCreateInfoMVK(VkMacOSSurfaceCreateInfoMVK const *s1,
                                         VkMacOSSurfaceCreateInfoMVK const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface
bool compare_VkMetalSurfaceCreateInfoEXT(VkMetalSurfaceCreateInfoEXT const *s1,
                                         VkMetalSurfaceCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_NV_clip_space_w_scaling
bool compare_VkViewportWScalingNV(VkViewportWScalingNV const *s1, VkViewportWScalingNV const *s2) {
  if ((s1->xcoeff != s2->xcoeff) || (s1->ycoeff != s2->ycoeff) || false)
    return false;

  return true;
}
#endif

#if VK_NV_clip_space_w_scaling
bool compare_VkPipelineViewportWScalingStateCreateInfoNV(
    VkPipelineViewportWScalingStateCreateInfoNV const *s1,
    VkPipelineViewportWScalingStateCreateInfoNV const *s2) {
  if ((s1->viewportWScalingEnable != s2->viewportWScalingEnable) ||
      (s1->viewportCount != s2->viewportCount) || false)
    return false;

  return true;
}
#endif

#if VK_NV_viewport_swizzle
bool compare_VkViewportSwizzleNV(VkViewportSwizzleNV const *s1, VkViewportSwizzleNV const *s2) {
  if ((s1->x != s2->x) || (s1->y != s2->y) || (s1->z != s2->z) || (s1->w != s2->w) || false)
    return false;

  return true;
}
#endif

#if VK_NV_viewport_swizzle
bool compare_VkPipelineViewportSwizzleStateCreateInfoNV(
    VkPipelineViewportSwizzleStateCreateInfoNV const *s1,
    VkPipelineViewportSwizzleStateCreateInfoNV const *s2) {
  if ((s1->flags != s2->flags) || (s1->viewportCount != s2->viewportCount) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_discard_rectangles
bool compare_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *s1,
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *s2) {
  if ((s1->maxDiscardRectangles != s2->maxDiscardRectangles) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_discard_rectangles
bool compare_VkPipelineDiscardRectangleStateCreateInfoEXT(
    VkPipelineDiscardRectangleStateCreateInfoEXT const *s1,
    VkPipelineDiscardRectangleStateCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->discardRectangleMode != s2->discardRectangleMode) ||
      (s1->discardRectangleCount != s2->discardRectangleCount) || false)
    return false;

  return true;
}
#endif

#if VK_NVX_multiview_per_view_attributes
bool compare_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *s1,
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *s2) {
  if ((s1->perViewPositionAllComponents != s2->perViewPositionAllComponents) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkInputAttachmentAspectReference(VkInputAttachmentAspectReference const *s1,
                                              VkInputAttachmentAspectReference const *s2) {
  if ((s1->subpass != s2->subpass) || (s1->inputAttachmentIndex != s2->inputAttachmentIndex) ||
      (s1->aspectMask != s2->aspectMask) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance2
bool compare_VkInputAttachmentAspectReferenceKHR(VkInputAttachmentAspectReferenceKHR const *s1,
                                                 VkInputAttachmentAspectReferenceKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkRenderPassInputAttachmentAspectCreateInfo(
    VkRenderPassInputAttachmentAspectCreateInfo const *s1,
    VkRenderPassInputAttachmentAspectCreateInfo const *s2) {
  if ((s1->aspectReferenceCount != s2->aspectReferenceCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance2
bool compare_VkRenderPassInputAttachmentAspectCreateInfoKHR(
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *s1,
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkPhysicalDeviceSurfaceInfo2KHR(VkPhysicalDeviceSurfaceInfo2KHR const *s1,
                                             VkPhysicalDeviceSurfaceInfo2KHR const *s2) {
  if ((s1->surface != s2->surface) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkSurfaceCapabilities2KHR(VkSurfaceCapabilities2KHR const *s1,
                                       VkSurfaceCapabilities2KHR const *s2) {
  if (!compare_VkSurfaceCapabilitiesKHR(&s1->surfaceCapabilities, &s2->surfaceCapabilities) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_surface_capabilities2
bool compare_VkSurfaceFormat2KHR(VkSurfaceFormat2KHR const *s1, VkSurfaceFormat2KHR const *s2) {
  if (!compare_VkSurfaceFormatKHR(&s1->surfaceFormat, &s2->surfaceFormat) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayProperties2KHR(VkDisplayProperties2KHR const *s1,
                                     VkDisplayProperties2KHR const *s2) {
  if (!compare_VkDisplayPropertiesKHR(&s1->displayProperties, &s2->displayProperties) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneProperties2KHR(VkDisplayPlaneProperties2KHR const *s1,
                                          VkDisplayPlaneProperties2KHR const *s2) {
  if (!compare_VkDisplayPlanePropertiesKHR(&s1->displayPlaneProperties,
                                           &s2->displayPlaneProperties) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayModeProperties2KHR(VkDisplayModeProperties2KHR const *s1,
                                         VkDisplayModeProperties2KHR const *s2) {
  if (!compare_VkDisplayModePropertiesKHR(&s1->displayModeProperties, &s2->displayModeProperties) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneInfo2KHR(VkDisplayPlaneInfo2KHR const *s1,
                                    VkDisplayPlaneInfo2KHR const *s2) {
  if ((s1->mode != s2->mode) || (s1->planeIndex != s2->planeIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
bool compare_VkDisplayPlaneCapabilities2KHR(VkDisplayPlaneCapabilities2KHR const *s1,
                                            VkDisplayPlaneCapabilities2KHR const *s2) {
  if (!compare_VkDisplayPlaneCapabilitiesKHR(&s1->capabilities, &s2->capabilities) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_shared_presentable_image
bool compare_VkSharedPresentSurfaceCapabilitiesKHR(
    VkSharedPresentSurfaceCapabilitiesKHR const *s1,
    VkSharedPresentSurfaceCapabilitiesKHR const *s2) {
  if ((s1->sharedPresentSupportedUsageFlags != s2->sharedPresentSupportedUsageFlags) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDevice16BitStorageFeatures(VkPhysicalDevice16BitStorageFeatures const *s1,
                                                  VkPhysicalDevice16BitStorageFeatures const *s2) {
  if ((s1->storageBuffer16BitAccess != s2->storageBuffer16BitAccess) ||
      (s1->uniformAndStorageBuffer16BitAccess != s2->uniformAndStorageBuffer16BitAccess) ||
      (s1->storagePushConstant16 != s2->storagePushConstant16) ||
      (s1->storageInputOutput16 != s2->storageInputOutput16) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_16bit_storage
bool compare_VkPhysicalDevice16BitStorageFeaturesKHR(
    VkPhysicalDevice16BitStorageFeaturesKHR const *s1,
    VkPhysicalDevice16BitStorageFeaturesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSubgroupProperties(VkPhysicalDeviceSubgroupProperties const *s1,
                                                VkPhysicalDeviceSubgroupProperties const *s2) {
  if ((s1->subgroupSize != s2->subgroupSize) || (s1->supportedStages != s2->supportedStages) ||
      (s1->supportedOperations != s2->supportedOperations) ||
      (s1->quadOperationsInAllStages != s2->quadOperationsInAllStages) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *s1,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *s2) {
  if ((s1->shaderSubgroupExtendedTypes != s2->shaderSubgroupExtendedTypes) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 123 && VK_KHR_shader_subgroup_extended_types
bool compare_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *s2) {
  if ((s1->shaderSubgroupExtendedTypes != s2->shaderSubgroupExtendedTypes) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBufferMemoryRequirementsInfo2(VkBufferMemoryRequirementsInfo2 const *s1,
                                             VkBufferMemoryRequirementsInfo2 const *s2) {
  if ((s1->buffer != s2->buffer) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkBufferMemoryRequirementsInfo2KHR(VkBufferMemoryRequirementsInfo2KHR const *s1,
                                                VkBufferMemoryRequirementsInfo2KHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDeviceBufferMemoryRequirements(VkDeviceBufferMemoryRequirements const *s1,
                                              VkDeviceBufferMemoryRequirements const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
bool compare_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *s1,
                                                 VkDeviceBufferMemoryRequirementsKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkImageMemoryRequirementsInfo2(VkImageMemoryRequirementsInfo2 const *s1,
                                            VkImageMemoryRequirementsInfo2 const *s2) {
  if ((s1->image != s2->image) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkImageMemoryRequirementsInfo2KHR(VkImageMemoryRequirementsInfo2KHR const *s1,
                                               VkImageMemoryRequirementsInfo2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkImageSparseMemoryRequirementsInfo2(VkImageSparseMemoryRequirementsInfo2 const *s1,
                                                  VkImageSparseMemoryRequirementsInfo2 const *s2) {
  if ((s1->image != s2->image) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkImageSparseMemoryRequirementsInfo2KHR(
    VkImageSparseMemoryRequirementsInfo2KHR const *s1,
    VkImageSparseMemoryRequirementsInfo2KHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDeviceImageMemoryRequirements(VkDeviceImageMemoryRequirements const *s1,
                                             VkDeviceImageMemoryRequirements const *s2) {
  if ((s1->planeAspect != s2->planeAspect) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
bool compare_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *s1,
                                                VkDeviceImageMemoryRequirementsKHR const *s2) {
  if ((s1->planeAspect != s2->planeAspect) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryRequirements2(VkMemoryRequirements2 const *s1,
                                   VkMemoryRequirements2 const *s2) {
  if (!compare_VkMemoryRequirements(&s1->memoryRequirements, &s2->memoryRequirements) || false)
    return false;

  return true;
}
#endif

#if (VK_KHR_get_memory_requirements2 || VK_NV_ray_tracing || VK_VERSION_1_1 || VK_NVX_raytracing)
bool compare_VkMemoryRequirements2KHR(VkMemoryRequirements2KHR const *s1,
                                      VkMemoryRequirements2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkSparseImageMemoryRequirements2(VkSparseImageMemoryRequirements2 const *s1,
                                              VkSparseImageMemoryRequirements2 const *s2) {
  if (!compare_VkSparseImageMemoryRequirements(&s1->memoryRequirements, &s2->memoryRequirements) ||
      false)
    return false;

  return true;
}
#endif

#if VK_KHR_get_memory_requirements2
bool compare_VkSparseImageMemoryRequirements2KHR(VkSparseImageMemoryRequirements2KHR const *s1,
                                                 VkSparseImageMemoryRequirements2KHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDevicePointClippingProperties(
    VkPhysicalDevicePointClippingProperties const *s1,
    VkPhysicalDevicePointClippingProperties const *s2) {
  if ((s1->pointClippingBehavior != s2->pointClippingBehavior) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance2
bool compare_VkPhysicalDevicePointClippingPropertiesKHR(
    VkPhysicalDevicePointClippingPropertiesKHR const *s1,
    VkPhysicalDevicePointClippingPropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryDedicatedRequirements(VkMemoryDedicatedRequirements const *s1,
                                           VkMemoryDedicatedRequirements const *s2) {
  if ((s1->prefersDedicatedAllocation != s2->prefersDedicatedAllocation) ||
      (s1->requiresDedicatedAllocation != s2->requiresDedicatedAllocation) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_dedicated_allocation
bool compare_VkMemoryDedicatedRequirementsKHR(VkMemoryDedicatedRequirementsKHR const *s1,
                                              VkMemoryDedicatedRequirementsKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkMemoryDedicatedAllocateInfo(VkMemoryDedicatedAllocateInfo const *s1,
                                           VkMemoryDedicatedAllocateInfo const *s2) {
  if ((s1->image != s2->image) || (s1->buffer != s2->buffer) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_dedicated_allocation
bool compare_VkMemoryDedicatedAllocateInfoKHR(VkMemoryDedicatedAllocateInfoKHR const *s1,
                                              VkMemoryDedicatedAllocateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkImageViewUsageCreateInfo(VkImageViewUsageCreateInfo const *s1,
                                        VkImageViewUsageCreateInfo const *s2) {
  if ((s1->usage != s2->usage) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance2
bool compare_VkImageViewUsageCreateInfoKHR(VkImageViewUsageCreateInfoKHR const *s1,
                                           VkImageViewUsageCreateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPipelineTessellationDomainOriginStateCreateInfo(
    VkPipelineTessellationDomainOriginStateCreateInfo const *s1,
    VkPipelineTessellationDomainOriginStateCreateInfo const *s2) {
  if ((s1->domainOrigin != s2->domainOrigin) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance2
bool compare_VkPipelineTessellationDomainOriginStateCreateInfoKHR(
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *s1,
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionInfo(VkSamplerYcbcrConversionInfo const *s1,
                                          VkSamplerYcbcrConversionInfo const *s2) {
  if ((s1->conversion != s2->conversion) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionInfoKHR(VkSamplerYcbcrConversionInfoKHR const *s1,
                                             VkSamplerYcbcrConversionInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionCreateInfo(VkSamplerYcbcrConversionCreateInfo const *s1,
                                                VkSamplerYcbcrConversionCreateInfo const *s2) {
  if ((s1->format != s2->format) || (s1->ycbcrModel != s2->ycbcrModel) ||
      (s1->ycbcrRange != s2->ycbcrRange) ||
      !compare_VkComponentMapping(&s1->components, &s2->components) ||
      (s1->xChromaOffset != s2->xChromaOffset) || (s1->yChromaOffset != s2->yChromaOffset) ||
      (s1->chromaFilter != s2->chromaFilter) ||
      (s1->forceExplicitReconstruction != s2->forceExplicitReconstruction) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionCreateInfoKHR(
    VkSamplerYcbcrConversionCreateInfoKHR const *s1,
    VkSamplerYcbcrConversionCreateInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkBindImagePlaneMemoryInfo(VkBindImagePlaneMemoryInfo const *s1,
                                        VkBindImagePlaneMemoryInfo const *s2) {
  if ((s1->planeAspect != s2->planeAspect) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkBindImagePlaneMemoryInfoKHR(VkBindImagePlaneMemoryInfoKHR const *s1,
                                           VkBindImagePlaneMemoryInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkImagePlaneMemoryRequirementsInfo(VkImagePlaneMemoryRequirementsInfo const *s1,
                                                VkImagePlaneMemoryRequirementsInfo const *s2) {
  if ((s1->planeAspect != s2->planeAspect) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkImagePlaneMemoryRequirementsInfoKHR(
    VkImagePlaneMemoryRequirementsInfoKHR const *s1,
    VkImagePlaneMemoryRequirementsInfoKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *s1,
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *s2) {
  if ((s1->samplerYcbcrConversion != s2->samplerYcbcrConversion) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *s1,
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *s2) {
  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkSamplerYcbcrConversionImageFormatProperties(
    VkSamplerYcbcrConversionImageFormatProperties const *s1,
    VkSamplerYcbcrConversionImageFormatProperties const *s2) {
  if ((s1->combinedImageSamplerDescriptorCount != s2->combinedImageSamplerDescriptorCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
bool compare_VkSamplerYcbcrConversionImageFormatPropertiesKHR(
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *s1,
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_AMD_texture_gather_bias_lod
bool compare_VkTextureLODGatherFormatPropertiesAMD(
    VkTextureLODGatherFormatPropertiesAMD const *s1,
    VkTextureLODGatherFormatPropertiesAMD const *s2) {
  if ((s1->supportsTextureGatherLODBiasAMD != s2->supportsTextureGatherLODBiasAMD) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkConditionalRenderingBeginInfoEXT(VkConditionalRenderingBeginInfoEXT const *s1,
                                                VkConditionalRenderingBeginInfoEXT const *s2) {
  if ((s1->buffer != s2->buffer) || (s1->offset != s2->offset) || (s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkProtectedSubmitInfo(VkProtectedSubmitInfo const *s1,
                                   VkProtectedSubmitInfo const *s2) {
  if ((s1->protectedSubmit != s2->protectedSubmit) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProtectedMemoryFeatures(
    VkPhysicalDeviceProtectedMemoryFeatures const *s1,
    VkPhysicalDeviceProtectedMemoryFeatures const *s2) {
  if ((s1->protectedMemory != s2->protectedMemory) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceProtectedMemoryProperties(
    VkPhysicalDeviceProtectedMemoryProperties const *s1,
    VkPhysicalDeviceProtectedMemoryProperties const *s2) {
  if ((s1->protectedNoFault != s2->protectedNoFault) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDeviceQueueInfo2(VkDeviceQueueInfo2 const *s1, VkDeviceQueueInfo2 const *s2) {
  if ((s1->flags != s2->flags) || (s1->queueFamilyIndex != s2->queueFamilyIndex) ||
      (s1->queueIndex != s2->queueIndex) || false)
    return false;

  return true;
}
#endif

#if VK_NV_fragment_coverage_to_color
bool compare_VkPipelineCoverageToColorStateCreateInfoNV(
    VkPipelineCoverageToColorStateCreateInfoNV const *s1,
    VkPipelineCoverageToColorStateCreateInfoNV const *s2) {
  if ((s1->flags != s2->flags) || (s1->coverageToColorEnable != s2->coverageToColorEnable) ||
      (s1->coverageToColorLocation != s2->coverageToColorLocation) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceSamplerFilterMinmaxProperties(
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *s1,
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *s2) {
  if ((s1->filterMinmaxSingleComponentFormats != s2->filterMinmaxSingleComponentFormats) ||
      (s1->filterMinmaxImageComponentMapping != s2->filterMinmaxImageComponentMapping) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_sampler_filter_minmax
bool compare_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s1,
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *s2) {
  if ((s1->filterMinmaxSingleComponentFormats != s2->filterMinmaxSingleComponentFormats) ||
      (s1->filterMinmaxImageComponentMapping != s2->filterMinmaxImageComponentMapping) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkSampleLocationEXT(VkSampleLocationEXT const *s1, VkSampleLocationEXT const *s2) {
  if ((s1->x != s2->x) || (s1->y != s2->y) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkSampleLocationsInfoEXT(VkSampleLocationsInfoEXT const *s1,
                                      VkSampleLocationsInfoEXT const *s2) {
  if ((s1->sampleLocationsPerPixel != s2->sampleLocationsPerPixel) ||
      !compare_VkExtent2D(&s1->sampleLocationGridSize, &s2->sampleLocationGridSize) ||
      (s1->sampleLocationsCount != s2->sampleLocationsCount) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkAttachmentSampleLocationsEXT(VkAttachmentSampleLocationsEXT const *s1,
                                            VkAttachmentSampleLocationsEXT const *s2) {
  if ((s1->attachmentIndex != s2->attachmentIndex) ||
      !compare_VkSampleLocationsInfoEXT(&s1->sampleLocationsInfo, &s2->sampleLocationsInfo) ||
      false)
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkSubpassSampleLocationsEXT(VkSubpassSampleLocationsEXT const *s1,
                                         VkSubpassSampleLocationsEXT const *s2) {
  if ((s1->subpassIndex != s2->subpassIndex) ||
      !compare_VkSampleLocationsInfoEXT(&s1->sampleLocationsInfo, &s2->sampleLocationsInfo) ||
      false)
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkRenderPassSampleLocationsBeginInfoEXT(
    VkRenderPassSampleLocationsBeginInfoEXT const *s1,
    VkRenderPassSampleLocationsBeginInfoEXT const *s2) {
  if ((s1->attachmentInitialSampleLocationsCount != s2->attachmentInitialSampleLocationsCount) ||
      (s1->postSubpassSampleLocationsCount != s2->postSubpassSampleLocationsCount) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkPipelineSampleLocationsStateCreateInfoEXT(
    VkPipelineSampleLocationsStateCreateInfoEXT const *s1,
    VkPipelineSampleLocationsStateCreateInfoEXT const *s2) {
  if ((s1->sampleLocationsEnable != s2->sampleLocationsEnable) ||
      !compare_VkSampleLocationsInfoEXT(&s1->sampleLocationsInfo, &s2->sampleLocationsInfo) ||
      false)
    return false;

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *s1,
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *s2) {
  if ((s1->sampleLocationSampleCounts != s2->sampleLocationSampleCounts) ||
      !compare_VkExtent2D(&s1->maxSampleLocationGridSize, &s2->maxSampleLocationGridSize) ||
      (s1->sampleLocationSubPixelBits != s2->sampleLocationSubPixelBits) ||
      (s1->variableSampleLocations != s2->variableSampleLocations) || false)
    return false;

  for (uint32_t i = 0; i < 2; ++i) {
    if (s1->sampleLocationCoordinateRange[i] != s2->sampleLocationCoordinateRange[i])
      return false;
  }

  return true;
}
#endif

#if VK_EXT_sample_locations
bool compare_VkMultisamplePropertiesEXT(VkMultisamplePropertiesEXT const *s1,
                                        VkMultisamplePropertiesEXT const *s2) {
  if (!compare_VkExtent2D(&s1->maxSampleLocationGridSize, &s2->maxSampleLocationGridSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSamplerReductionModeCreateInfo(VkSamplerReductionModeCreateInfo const *s1,
                                              VkSamplerReductionModeCreateInfo const *s2) {
  if ((s1->reductionMode != s2->reductionMode) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_sampler_filter_minmax
bool compare_VkSamplerReductionModeCreateInfoEXT(VkSamplerReductionModeCreateInfoEXT const *s1,
                                                 VkSamplerReductionModeCreateInfoEXT const *s2) {
  if ((s1->reductionMode != s2->reductionMode) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *s1,
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *s2) {
  if ((s1->advancedBlendCoherentOperations != s2->advancedBlendCoherentOperations) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
bool compare_VkPhysicalDeviceMultiDrawFeaturesEXT(VkPhysicalDeviceMultiDrawFeaturesEXT const *s1,
                                                  VkPhysicalDeviceMultiDrawFeaturesEXT const *s2) {
  if ((s1->multiDraw != s2->multiDraw) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *s1,
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *s2) {
  if ((s1->advancedBlendMaxColorAttachments != s2->advancedBlendMaxColorAttachments) ||
      (s1->advancedBlendIndependentBlend != s2->advancedBlendIndependentBlend) ||
      (s1->advancedBlendNonPremultipliedSrcColor != s2->advancedBlendNonPremultipliedSrcColor) ||
      (s1->advancedBlendNonPremultipliedDstColor != s2->advancedBlendNonPremultipliedDstColor) ||
      (s1->advancedBlendCorrelatedOverlap != s2->advancedBlendCorrelatedOverlap) ||
      (s1->advancedBlendAllOperations != s2->advancedBlendAllOperations) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_blend_operation_advanced
bool compare_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *s1,
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *s2) {
  if ((s1->srcPremultiplied != s2->srcPremultiplied) ||
      (s1->dstPremultiplied != s2->dstPremultiplied) || (s1->blendOverlap != s2->blendOverlap) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceInlineUniformBlockFeatures(
    VkPhysicalDeviceInlineUniformBlockFeatures const *s1,
    VkPhysicalDeviceInlineUniformBlockFeatures const *s2) {
  if ((s1->inlineUniformBlock != s2->inlineUniformBlock) ||
      (s1->descriptorBindingInlineUniformBlockUpdateAfterBind !=
       s2->descriptorBindingInlineUniformBlockUpdateAfterBind) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *s2) {
  if ((s1->inlineUniformBlock != s2->inlineUniformBlock) ||
      (s1->descriptorBindingInlineUniformBlockUpdateAfterBind !=
       s2->descriptorBindingInlineUniformBlockUpdateAfterBind) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceInlineUniformBlockProperties(
    VkPhysicalDeviceInlineUniformBlockProperties const *s1,
    VkPhysicalDeviceInlineUniformBlockProperties const *s2) {
  if ((s1->maxInlineUniformBlockSize != s2->maxInlineUniformBlockSize) ||
      (s1->maxPerStageDescriptorInlineUniformBlocks !=
       s2->maxPerStageDescriptorInlineUniformBlocks) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks !=
       s2->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks) ||
      (s1->maxDescriptorSetInlineUniformBlocks != s2->maxDescriptorSetInlineUniformBlocks) ||
      (s1->maxDescriptorSetUpdateAfterBindInlineUniformBlocks !=
       s2->maxDescriptorSetUpdateAfterBindInlineUniformBlocks) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
bool compare_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s1,
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *s2) {
  if ((s1->maxInlineUniformBlockSize != s2->maxInlineUniformBlockSize) ||
      (s1->maxPerStageDescriptorInlineUniformBlocks !=
       s2->maxPerStageDescriptorInlineUniformBlocks) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks !=
       s2->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks) ||
      (s1->maxDescriptorSetInlineUniformBlocks != s2->maxDescriptorSetInlineUniformBlocks) ||
      (s1->maxDescriptorSetUpdateAfterBindInlineUniformBlocks !=
       s2->maxDescriptorSetUpdateAfterBindInlineUniformBlocks) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkWriteDescriptorSetInlineUniformBlock(
    VkWriteDescriptorSetInlineUniformBlock const *s1,
    VkWriteDescriptorSetInlineUniformBlock const *s2) {
  if ((s1->dataSize != s2->dataSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
bool compare_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *s1,
    VkWriteDescriptorSetInlineUniformBlockEXT const *s2) {
  if ((s1->dataSize != s2->dataSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDescriptorPoolInlineUniformBlockCreateInfo(
    VkDescriptorPoolInlineUniformBlockCreateInfo const *s1,
    VkDescriptorPoolInlineUniformBlockCreateInfo const *s2) {
  if ((s1->maxInlineUniformBlockBindings != s2->maxInlineUniformBlockBindings) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
bool compare_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s1,
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *s2) {
  if ((s1->maxInlineUniformBlockBindings != s2->maxInlineUniformBlockBindings) || false)
    return false;

  return true;
}
#endif

#if VK_NV_framebuffer_mixed_samples
bool compare_VkPipelineCoverageModulationStateCreateInfoNV(
    VkPipelineCoverageModulationStateCreateInfoNV const *s1,
    VkPipelineCoverageModulationStateCreateInfoNV const *s2) {
  if ((s1->flags != s2->flags) || (s1->coverageModulationMode != s2->coverageModulationMode) ||
      (s1->coverageModulationTableEnable != s2->coverageModulationTableEnable) ||
      (s1->coverageModulationTableCount != s2->coverageModulationTableCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkImageFormatListCreateInfo(VkImageFormatListCreateInfo const *s1,
                                         VkImageFormatListCreateInfo const *s2) {
  if ((s1->viewFormatCount != s2->viewFormatCount) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_image_format_list
bool compare_VkImageFormatListCreateInfoKHR(VkImageFormatListCreateInfoKHR const *s1,
                                            VkImageFormatListCreateInfoKHR const *s2) {
  if ((s1->viewFormatCount != s2->viewFormatCount) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_validation_cache
bool compare_VkValidationCacheCreateInfoEXT(VkValidationCacheCreateInfoEXT const *s1,
                                            VkValidationCacheCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->initialDataSize != s2->initialDataSize) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_validation_cache
bool compare_VkShaderModuleValidationCacheCreateInfoEXT(
    VkShaderModuleValidationCacheCreateInfoEXT const *s1,
    VkShaderModuleValidationCacheCreateInfoEXT const *s2) {
  if ((s1->validationCache != s2->validationCache) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceMaintenance3Properties(
    VkPhysicalDeviceMaintenance3Properties const *s1,
    VkPhysicalDeviceMaintenance3Properties const *s2) {
  if ((s1->maxPerSetDescriptors != s2->maxPerSetDescriptors) ||
      (s1->maxMemoryAllocationSize != s2->maxMemoryAllocationSize) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance3
bool compare_VkPhysicalDeviceMaintenance3PropertiesKHR(
    VkPhysicalDeviceMaintenance3PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance3PropertiesKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceMaintenance4Features(VkPhysicalDeviceMaintenance4Features const *s1,
                                                  VkPhysicalDeviceMaintenance4Features const *s2) {
  if ((s1->maintenance4 != s2->maintenance4) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s1,
    VkPhysicalDeviceMaintenance4FeaturesKHR const *s2) {
  if ((s1->maintenance4 != s2->maintenance4) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceMaintenance4Properties(
    VkPhysicalDeviceMaintenance4Properties const *s1,
    VkPhysicalDeviceMaintenance4Properties const *s2) {
  if ((s1->maxBufferSize != s2->maxBufferSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
bool compare_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s1,
    VkPhysicalDeviceMaintenance4PropertiesKHR const *s2) {
  if ((s1->maxBufferSize != s2->maxBufferSize) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkDescriptorSetLayoutSupport(VkDescriptorSetLayoutSupport const *s1,
                                          VkDescriptorSetLayoutSupport const *s2) {
  if ((s1->supported != s2->supported) || false)
    return false;

  return true;
}
#endif

#if VK_KHR_maintenance3
bool compare_VkDescriptorSetLayoutSupportKHR(VkDescriptorSetLayoutSupportKHR const *s1,
                                             VkDescriptorSetLayoutSupportKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
bool compare_VkPhysicalDeviceShaderDrawParametersFeatures(
    VkPhysicalDeviceShaderDrawParametersFeatures const *s1,
    VkPhysicalDeviceShaderDrawParametersFeatures const *s2) {
  if ((s1->shaderDrawParameters != s2->shaderDrawParameters) || false)
    return false;

  return true;
}
#endif

#if VK_VERSION_1_1
bool compare_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *s1,
    VkPhysicalDeviceShaderDrawParameterFeatures const *s2) {
  if ((s1->shaderDrawParameters != s2->shaderDrawParameters) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderFloat16Int8Features(
    VkPhysicalDeviceShaderFloat16Int8Features const *s1,
    VkPhysicalDeviceShaderFloat16Int8Features const *s2) {
  if ((s1->shaderFloat16 != s2->shaderFloat16) || (s1->shaderInt8 != s2->shaderInt8) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 115 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *s2) {
  if ((s1->shaderFloat16 != s2->shaderFloat16) || (s1->shaderInt8 != s2->shaderInt8) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 95 && VK_KHR_shader_float16_int8
bool compare_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s1,
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *s2) {
  if ((s1->shaderFloat16 != s2->shaderFloat16) || (s1->shaderInt8 != s2->shaderInt8) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceFloatControlsProperties(
    VkPhysicalDeviceFloatControlsProperties const *s1,
    VkPhysicalDeviceFloatControlsProperties const *s2) {
  if ((s1->denormBehaviorIndependence != s2->denormBehaviorIndependence) ||
      (s1->roundingModeIndependence != s2->roundingModeIndependence) ||
      (s1->shaderSignedZeroInfNanPreserveFloat16 != s2->shaderSignedZeroInfNanPreserveFloat16) ||
      (s1->shaderSignedZeroInfNanPreserveFloat32 != s2->shaderSignedZeroInfNanPreserveFloat32) ||
      (s1->shaderSignedZeroInfNanPreserveFloat64 != s2->shaderSignedZeroInfNanPreserveFloat64) ||
      (s1->shaderDenormPreserveFloat16 != s2->shaderDenormPreserveFloat16) ||
      (s1->shaderDenormPreserveFloat32 != s2->shaderDenormPreserveFloat32) ||
      (s1->shaderDenormPreserveFloat64 != s2->shaderDenormPreserveFloat64) ||
      (s1->shaderDenormFlushToZeroFloat16 != s2->shaderDenormFlushToZeroFloat16) ||
      (s1->shaderDenormFlushToZeroFloat32 != s2->shaderDenormFlushToZeroFloat32) ||
      (s1->shaderDenormFlushToZeroFloat64 != s2->shaderDenormFlushToZeroFloat64) ||
      (s1->shaderRoundingModeRTEFloat16 != s2->shaderRoundingModeRTEFloat16) ||
      (s1->shaderRoundingModeRTEFloat32 != s2->shaderRoundingModeRTEFloat32) ||
      (s1->shaderRoundingModeRTEFloat64 != s2->shaderRoundingModeRTEFloat64) ||
      (s1->shaderRoundingModeRTZFloat16 != s2->shaderRoundingModeRTZFloat16) ||
      (s1->shaderRoundingModeRTZFloat32 != s2->shaderRoundingModeRTZFloat32) ||
      (s1->shaderRoundingModeRTZFloat64 != s2->shaderRoundingModeRTZFloat64) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 95 && VK_KHR_shader_float_controls
bool compare_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s1,
    VkPhysicalDeviceFloatControlsPropertiesKHR const *s2) {
  if (
#if VK_HEADER_VERSION >= 116
      (s1->denormBehaviorIndependence != s2->denormBehaviorIndependence) ||
#endif
#if VK_HEADER_VERSION >= 116
      (s1->roundingModeIndependence != s2->roundingModeIndependence) ||
#endif
      (s1->shaderSignedZeroInfNanPreserveFloat16 != s2->shaderSignedZeroInfNanPreserveFloat16) ||
      (s1->shaderSignedZeroInfNanPreserveFloat32 != s2->shaderSignedZeroInfNanPreserveFloat32) ||
      (s1->shaderSignedZeroInfNanPreserveFloat64 != s2->shaderSignedZeroInfNanPreserveFloat64) ||
      (s1->shaderDenormPreserveFloat16 != s2->shaderDenormPreserveFloat16) ||
      (s1->shaderDenormPreserveFloat32 != s2->shaderDenormPreserveFloat32) ||
      (s1->shaderDenormPreserveFloat64 != s2->shaderDenormPreserveFloat64) ||
      (s1->shaderDenormFlushToZeroFloat16 != s2->shaderDenormFlushToZeroFloat16) ||
      (s1->shaderDenormFlushToZeroFloat32 != s2->shaderDenormFlushToZeroFloat32) ||
      (s1->shaderDenormFlushToZeroFloat64 != s2->shaderDenormFlushToZeroFloat64) ||
      (s1->shaderRoundingModeRTEFloat16 != s2->shaderRoundingModeRTEFloat16) ||
      (s1->shaderRoundingModeRTEFloat32 != s2->shaderRoundingModeRTEFloat32) ||
      (s1->shaderRoundingModeRTEFloat64 != s2->shaderRoundingModeRTEFloat64) ||
      (s1->shaderRoundingModeRTZFloat16 != s2->shaderRoundingModeRTZFloat16) ||
      (s1->shaderRoundingModeRTZFloat32 != s2->shaderRoundingModeRTZFloat32) ||
      (s1->shaderRoundingModeRTZFloat64 != s2->shaderRoundingModeRTZFloat64) ||
#if VK_HEADER_VERSION <= 115
      (s1->separateDenormSettings != s2->separateDenormSettings) ||
#endif
#if VK_HEADER_VERSION <= 115
      (s1->separateRoundingModeSettings != s2->separateRoundingModeSettings) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceHostQueryResetFeatures(
    VkPhysicalDeviceHostQueryResetFeatures const *s1,
    VkPhysicalDeviceHostQueryResetFeatures const *s2) {
  if ((s1->hostQueryReset != s2->hostQueryReset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_host_query_reset
bool compare_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s1,
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *s2) {
  if ((s1->hostQueryReset != s2->hostQueryReset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkNativeBufferUsage2ANDROID(VkNativeBufferUsage2ANDROID const *s1,
                                         VkNativeBufferUsage2ANDROID const *s2) {
  if ((s1->consumer != s2->consumer) || (s1->producer != s2->producer) || false)
    return false;

  return true;
}
#endif

#if VK_ANDROID_native_buffer
bool compare_VkNativeBufferANDROID(VkNativeBufferANDROID const *s1,
                                   VkNativeBufferANDROID const *s2) {
  if ((s1->stride != s2->stride) || (s1->format != s2->format) || (s1->usage != s2->usage) ||
#if VK_HEADER_VERSION >= 117
      !compare_VkNativeBufferUsage2ANDROID(&s1->usage2, &s2->usage2) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkSwapchainImageCreateInfoANDROID(VkSwapchainImageCreateInfoANDROID const *s1,
                                               VkSwapchainImageCreateInfoANDROID const *s2) {
  if ((s1->usage != s2->usage) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
bool compare_VkPhysicalDevicePresentationPropertiesANDROID(
    VkPhysicalDevicePresentationPropertiesANDROID const *s1,
    VkPhysicalDevicePresentationPropertiesANDROID const *s2) {
  if ((s1->sharedImage != s2->sharedImage) || false)
    return false;

  return true;
}
#endif

#if VK_AMD_shader_info
bool compare_VkShaderResourceUsageAMD(VkShaderResourceUsageAMD const *s1,
                                      VkShaderResourceUsageAMD const *s2) {
  if ((s1->numUsedVgprs != s2->numUsedVgprs) || (s1->numUsedSgprs != s2->numUsedSgprs) ||
      (s1->ldsSizePerLocalWorkGroup != s2->ldsSizePerLocalWorkGroup) ||
      (s1->ldsUsageSizeInBytes != s2->ldsUsageSizeInBytes) ||
      (s1->scratchMemUsageInBytes != s2->scratchMemUsageInBytes) || false)
    return false;

  return true;
}
#endif

#if VK_AMD_shader_info
bool compare_VkShaderStatisticsInfoAMD(VkShaderStatisticsInfoAMD const *s1,
                                       VkShaderStatisticsInfoAMD const *s2) {
  if ((s1->shaderStageMask != s2->shaderStageMask) ||
      !compare_VkShaderResourceUsageAMD(&s1->resourceUsage, &s2->resourceUsage) ||
      (s1->numPhysicalVgprs != s2->numPhysicalVgprs) ||
      (s1->numPhysicalSgprs != s2->numPhysicalSgprs) ||
      (s1->numAvailableVgprs != s2->numAvailableVgprs) ||
      (s1->numAvailableSgprs != s2->numAvailableSgprs) || false)
    return false;

  for (uint32_t i = 0; i < 3; ++i) {
    if (s1->computeWorkGroupSize[i] != s2->computeWorkGroupSize[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoKHR(
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *s2) {
  if ((s1->globalPriority != s2->globalPriority) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_global_priority
bool compare_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s1,
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *s2) {
  if ((s1->globalPriority != s2->globalPriority) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_global_priority
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *s2) {
  if ((s1->globalPriorityQuery != s2->globalPriorityQuery) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 180 && VK_EXT_global_priority_query
bool compare_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s1,
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *s2) {
  if ((s1->globalPriorityQuery != s2->globalPriorityQuery) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_KHR_global_priority
bool compare_VkQueueFamilyGlobalPriorityPropertiesKHR(
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s1,
    VkQueueFamilyGlobalPriorityPropertiesKHR const *s2) {
  if ((s1->priorityCount != s2->priorityCount) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_GLOBAL_PRIORITY_SIZE_KHR; ++i) {
    if (s1->priorities[i] != s2->priorities[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 180 && VK_EXT_global_priority_query
bool compare_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s1,
    VkQueueFamilyGlobalPriorityPropertiesEXT const *s2) {
  if ((s1->priorityCount != s2->priorityCount) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_GLOBAL_PRIORITY_SIZE_EXT; ++i) {
    if (s1->priorities[i] != s2->priorities[i])
      return false;
  }

  return true;
}
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsObjectNameInfoEXT(VkDebugUtilsObjectNameInfoEXT const *s1,
                                           VkDebugUtilsObjectNameInfoEXT const *s2) {
  if ((s1->objectType != s2->objectType) || (s1->objectHandle != s2->objectHandle) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsObjectTagInfoEXT(VkDebugUtilsObjectTagInfoEXT const *s1,
                                          VkDebugUtilsObjectTagInfoEXT const *s2) {
  if ((s1->objectType != s2->objectType) || (s1->objectHandle != s2->objectHandle) ||
      (s1->tagName != s2->tagName) || (s1->tagSize != s2->tagSize) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsLabelEXT(VkDebugUtilsLabelEXT const *s1, VkDebugUtilsLabelEXT const *s2) {
  for (uint32_t i = 0; i < 4; ++i) {
    if (s1->color[i] != s2->color[i])
      return false;
  }

  return true;
}
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsMessengerCreateInfoEXT(VkDebugUtilsMessengerCreateInfoEXT const *s1,
                                                VkDebugUtilsMessengerCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->messageSeverity != s2->messageSeverity) ||
      (s1->messageType != s2->messageType) || (s1->pfnUserCallback != s2->pfnUserCallback) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_debug_utils
bool compare_VkDebugUtilsMessengerCallbackDataEXT(VkDebugUtilsMessengerCallbackDataEXT const *s1,
                                                  VkDebugUtilsMessengerCallbackDataEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->messageIdNumber != s2->messageIdNumber) ||
      (s1->queueLabelCount != s2->queueLabelCount) ||
      (s1->cmdBufLabelCount != s2->cmdBufLabelCount) || (s1->objectCount != s2->objectCount) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *s1,
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *s2) {
  if ((s1->deviceMemoryReport != s2->deviceMemoryReport) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkDeviceDeviceMemoryReportCreateInfoEXT(
    VkDeviceDeviceMemoryReportCreateInfoEXT const *s1,
    VkDeviceDeviceMemoryReportCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->pfnUserCallback != s2->pfnUserCallback) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
bool compare_VkDeviceMemoryReportCallbackDataEXT(VkDeviceMemoryReportCallbackDataEXT const *s1,
                                                 VkDeviceMemoryReportCallbackDataEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->type != s2->type) ||
      (s1->memoryObjectId != s2->memoryObjectId) || (s1->size != s2->size) ||
      (s1->objectType != s2->objectType) || (s1->objectHandle != s2->objectHandle) ||
      (s1->heapIndex != s2->heapIndex) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_external_memory_host
bool compare_VkImportMemoryHostPointerInfoEXT(VkImportMemoryHostPointerInfoEXT const *s1,
                                              VkImportMemoryHostPointerInfoEXT const *s2) {
  if ((s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_external_memory_host
bool compare_VkMemoryHostPointerPropertiesEXT(VkMemoryHostPointerPropertiesEXT const *s1,
                                              VkMemoryHostPointerPropertiesEXT const *s2) {
  if ((s1->memoryTypeBits != s2->memoryTypeBits) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_external_memory_host
bool compare_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *s1,
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *s2) {
  if ((s1->minImportedHostPointerAlignment != s2->minImportedHostPointerAlignment) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_conservative_rasterization
bool compare_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *s2) {
  if ((s1->primitiveOverestimationSize != s2->primitiveOverestimationSize) ||
      (s1->maxExtraPrimitiveOverestimationSize != s2->maxExtraPrimitiveOverestimationSize) ||
      (s1->extraPrimitiveOverestimationSizeGranularity !=
       s2->extraPrimitiveOverestimationSizeGranularity) ||
      (s1->primitiveUnderestimation != s2->primitiveUnderestimation) ||
      (s1->conservativePointAndLineRasterization != s2->conservativePointAndLineRasterization) ||
      (s1->degenerateTrianglesRasterized != s2->degenerateTrianglesRasterized) ||
      (s1->degenerateLinesRasterized != s2->degenerateLinesRasterized) ||
      (s1->fullyCoveredFragmentShaderInputVariable !=
       s2->fullyCoveredFragmentShaderInputVariable) ||
      (s1->conservativeRasterizationPostDepthCoverage !=
       s2->conservativeRasterizationPostDepthCoverage) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_calibrated_timestamps
bool compare_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *s1,
                                          VkCalibratedTimestampInfoEXT const *s2) {
  if ((s1->timeDomain != s2->timeDomain) || false)
    return false;

  return true;
}
#endif

#if VK_AMD_shader_core_properties
bool compare_VkPhysicalDeviceShaderCorePropertiesAMD(
    VkPhysicalDeviceShaderCorePropertiesAMD const *s1,
    VkPhysicalDeviceShaderCorePropertiesAMD const *s2) {
  if ((s1->shaderEngineCount != s2->shaderEngineCount) ||
      (s1->shaderArraysPerEngineCount != s2->shaderArraysPerEngineCount) ||
      (s1->computeUnitsPerShaderArray != s2->computeUnitsPerShaderArray) ||
      (s1->simdPerComputeUnit != s2->simdPerComputeUnit) ||
      (s1->wavefrontsPerSimd != s2->wavefrontsPerSimd) ||
      (s1->wavefrontSize != s2->wavefrontSize) || (s1->sgprsPerSimd != s2->sgprsPerSimd) ||
      (s1->minSgprAllocation != s2->minSgprAllocation) ||
      (s1->maxSgprAllocation != s2->maxSgprAllocation) ||
      (s1->sgprAllocationGranularity != s2->sgprAllocationGranularity) ||
      (s1->vgprsPerSimd != s2->vgprsPerSimd) || (s1->minVgprAllocation != s2->minVgprAllocation) ||
      (s1->maxVgprAllocation != s2->maxVgprAllocation) ||
      (s1->vgprAllocationGranularity != s2->vgprAllocationGranularity) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2
bool compare_VkPhysicalDeviceShaderCoreProperties2AMD(
    VkPhysicalDeviceShaderCoreProperties2AMD const *s1,
    VkPhysicalDeviceShaderCoreProperties2AMD const *s2) {
  if ((s1->shaderCoreFeatures != s2->shaderCoreFeatures) ||
      (s1->activeComputeUnitCount != s2->activeComputeUnitCount) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_conservative_rasterization
bool compare_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *s1,
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) ||
      (s1->conservativeRasterizationMode != s2->conservativeRasterizationMode) ||
      (s1->extraPrimitiveOverestimationSize != s2->extraPrimitiveOverestimationSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDescriptorIndexingFeatures(
    VkPhysicalDeviceDescriptorIndexingFeatures const *s1,
    VkPhysicalDeviceDescriptorIndexingFeatures const *s2) {
  if ((s1->shaderInputAttachmentArrayDynamicIndexing !=
       s2->shaderInputAttachmentArrayDynamicIndexing) ||
      (s1->shaderUniformTexelBufferArrayDynamicIndexing !=
       s2->shaderUniformTexelBufferArrayDynamicIndexing) ||
      (s1->shaderStorageTexelBufferArrayDynamicIndexing !=
       s2->shaderStorageTexelBufferArrayDynamicIndexing) ||
      (s1->shaderUniformBufferArrayNonUniformIndexing !=
       s2->shaderUniformBufferArrayNonUniformIndexing) ||
      (s1->shaderSampledImageArrayNonUniformIndexing !=
       s2->shaderSampledImageArrayNonUniformIndexing) ||
      (s1->shaderStorageBufferArrayNonUniformIndexing !=
       s2->shaderStorageBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageImageArrayNonUniformIndexing !=
       s2->shaderStorageImageArrayNonUniformIndexing) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexing !=
       s2->shaderInputAttachmentArrayNonUniformIndexing) ||
      (s1->shaderUniformTexelBufferArrayNonUniformIndexing !=
       s2->shaderUniformTexelBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageTexelBufferArrayNonUniformIndexing !=
       s2->shaderStorageTexelBufferArrayNonUniformIndexing) ||
      (s1->descriptorBindingUniformBufferUpdateAfterBind !=
       s2->descriptorBindingUniformBufferUpdateAfterBind) ||
      (s1->descriptorBindingSampledImageUpdateAfterBind !=
       s2->descriptorBindingSampledImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageImageUpdateAfterBind !=
       s2->descriptorBindingStorageImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageBufferUpdateAfterBind !=
       s2->descriptorBindingStorageBufferUpdateAfterBind) ||
      (s1->descriptorBindingUniformTexelBufferUpdateAfterBind !=
       s2->descriptorBindingUniformTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingStorageTexelBufferUpdateAfterBind !=
       s2->descriptorBindingStorageTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingUpdateUnusedWhilePending !=
       s2->descriptorBindingUpdateUnusedWhilePending) ||
      (s1->descriptorBindingPartiallyBound != s2->descriptorBindingPartiallyBound) ||
      (s1->descriptorBindingVariableDescriptorCount !=
       s2->descriptorBindingVariableDescriptorCount) ||
      (s1->runtimeDescriptorArray != s2->runtimeDescriptorArray) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *s2) {
  if ((s1->shaderInputAttachmentArrayDynamicIndexing !=
       s2->shaderInputAttachmentArrayDynamicIndexing) ||
      (s1->shaderUniformTexelBufferArrayDynamicIndexing !=
       s2->shaderUniformTexelBufferArrayDynamicIndexing) ||
      (s1->shaderStorageTexelBufferArrayDynamicIndexing !=
       s2->shaderStorageTexelBufferArrayDynamicIndexing) ||
      (s1->shaderUniformBufferArrayNonUniformIndexing !=
       s2->shaderUniformBufferArrayNonUniformIndexing) ||
      (s1->shaderSampledImageArrayNonUniformIndexing !=
       s2->shaderSampledImageArrayNonUniformIndexing) ||
      (s1->shaderStorageBufferArrayNonUniformIndexing !=
       s2->shaderStorageBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageImageArrayNonUniformIndexing !=
       s2->shaderStorageImageArrayNonUniformIndexing) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexing !=
       s2->shaderInputAttachmentArrayNonUniformIndexing) ||
      (s1->shaderUniformTexelBufferArrayNonUniformIndexing !=
       s2->shaderUniformTexelBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageTexelBufferArrayNonUniformIndexing !=
       s2->shaderStorageTexelBufferArrayNonUniformIndexing) ||
      (s1->descriptorBindingUniformBufferUpdateAfterBind !=
       s2->descriptorBindingUniformBufferUpdateAfterBind) ||
      (s1->descriptorBindingSampledImageUpdateAfterBind !=
       s2->descriptorBindingSampledImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageImageUpdateAfterBind !=
       s2->descriptorBindingStorageImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageBufferUpdateAfterBind !=
       s2->descriptorBindingStorageBufferUpdateAfterBind) ||
      (s1->descriptorBindingUniformTexelBufferUpdateAfterBind !=
       s2->descriptorBindingUniformTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingStorageTexelBufferUpdateAfterBind !=
       s2->descriptorBindingStorageTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingUpdateUnusedWhilePending !=
       s2->descriptorBindingUpdateUnusedWhilePending) ||
      (s1->descriptorBindingPartiallyBound != s2->descriptorBindingPartiallyBound) ||
      (s1->descriptorBindingVariableDescriptorCount !=
       s2->descriptorBindingVariableDescriptorCount) ||
      (s1->runtimeDescriptorArray != s2->runtimeDescriptorArray) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDescriptorIndexingProperties(
    VkPhysicalDeviceDescriptorIndexingProperties const *s1,
    VkPhysicalDeviceDescriptorIndexingProperties const *s2) {
  if ((s1->maxUpdateAfterBindDescriptorsInAllPools !=
       s2->maxUpdateAfterBindDescriptorsInAllPools) ||
      (s1->shaderUniformBufferArrayNonUniformIndexingNative !=
       s2->shaderUniformBufferArrayNonUniformIndexingNative) ||
      (s1->shaderSampledImageArrayNonUniformIndexingNative !=
       s2->shaderSampledImageArrayNonUniformIndexingNative) ||
      (s1->shaderStorageBufferArrayNonUniformIndexingNative !=
       s2->shaderStorageBufferArrayNonUniformIndexingNative) ||
      (s1->shaderStorageImageArrayNonUniformIndexingNative !=
       s2->shaderStorageImageArrayNonUniformIndexingNative) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexingNative !=
       s2->shaderInputAttachmentArrayNonUniformIndexingNative) ||
      (s1->robustBufferAccessUpdateAfterBind != s2->robustBufferAccessUpdateAfterBind) ||
      (s1->quadDivergentImplicitLod != s2->quadDivergentImplicitLod) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSamplers !=
       s2->maxPerStageDescriptorUpdateAfterBindSamplers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindUniformBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindUniformBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSampledImages !=
       s2->maxPerStageDescriptorUpdateAfterBindSampledImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageImages !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInputAttachments !=
       s2->maxPerStageDescriptorUpdateAfterBindInputAttachments) ||
      (s1->maxPerStageUpdateAfterBindResources != s2->maxPerStageUpdateAfterBindResources) ||
      (s1->maxDescriptorSetUpdateAfterBindSamplers !=
       s2->maxDescriptorSetUpdateAfterBindSamplers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffers !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffers !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindSampledImages !=
       s2->maxDescriptorSetUpdateAfterBindSampledImages) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageImages !=
       s2->maxDescriptorSetUpdateAfterBindStorageImages) ||
      (s1->maxDescriptorSetUpdateAfterBindInputAttachments !=
       s2->maxDescriptorSetUpdateAfterBindInputAttachments) ||
      false)
    return false;

  return true;
}
#endif

#if VK_EXT_descriptor_indexing
bool compare_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *s2) {
  if ((s1->maxUpdateAfterBindDescriptorsInAllPools !=
       s2->maxUpdateAfterBindDescriptorsInAllPools) ||
      (s1->shaderUniformBufferArrayNonUniformIndexingNative !=
       s2->shaderUniformBufferArrayNonUniformIndexingNative) ||
      (s1->shaderSampledImageArrayNonUniformIndexingNative !=
       s2->shaderSampledImageArrayNonUniformIndexingNative) ||
      (s1->shaderStorageBufferArrayNonUniformIndexingNative !=
       s2->shaderStorageBufferArrayNonUniformIndexingNative) ||
      (s1->shaderStorageImageArrayNonUniformIndexingNative !=
       s2->shaderStorageImageArrayNonUniformIndexingNative) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexingNative !=
       s2->shaderInputAttachmentArrayNonUniformIndexingNative) ||
      (s1->robustBufferAccessUpdateAfterBind != s2->robustBufferAccessUpdateAfterBind) ||
      (s1->quadDivergentImplicitLod != s2->quadDivergentImplicitLod) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSamplers !=
       s2->maxPerStageDescriptorUpdateAfterBindSamplers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindUniformBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindUniformBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSampledImages !=
       s2->maxPerStageDescriptorUpdateAfterBindSampledImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageImages !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInputAttachments !=
       s2->maxPerStageDescriptorUpdateAfterBindInputAttachments) ||
      (s1->maxPerStageUpdateAfterBindResources != s2->maxPerStageUpdateAfterBindResources) ||
      (s1->maxDescriptorSetUpdateAfterBindSamplers !=
       s2->maxDescriptorSetUpdateAfterBindSamplers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffers !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffers !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindSampledImages !=
       s2->maxDescriptorSetUpdateAfterBindSampledImages) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageImages !=
       s2->maxDescriptorSetUpdateAfterBindStorageImages) ||
      (s1->maxDescriptorSetUpdateAfterBindInputAttachments !=
       s2->maxDescriptorSetUpdateAfterBindInputAttachments) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetLayoutBindingFlagsCreateInfo(
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *s1,
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *s2) {
  if ((s1->bindingCount != s2->bindingCount) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s1,
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *s2) {
  if ((s1->bindingCount != s2->bindingCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetVariableDescriptorCountAllocateInfo(
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *s1,
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *s2) {
  if ((s1->descriptorSetCount != s2->descriptorSetCount) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s1,
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *s2) {
  if ((s1->descriptorSetCount != s2->descriptorSetCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDescriptorSetVariableDescriptorCountLayoutSupport(
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *s1,
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *s2) {
  if ((s1->maxVariableDescriptorCount != s2->maxVariableDescriptorCount) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_descriptor_indexing
bool compare_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s1,
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *s2) {
  if ((s1->maxVariableDescriptorCount != s2->maxVariableDescriptorCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentDescription2(VkAttachmentDescription2 const *s1,
                                      VkAttachmentDescription2 const *s2) {
  if ((s1->flags != s2->flags) || (s1->format != s2->format) || (s1->samples != s2->samples) ||
      (s1->loadOp != s2->loadOp) || (s1->storeOp != s2->storeOp) ||
      (s1->stencilLoadOp != s2->stencilLoadOp) || (s1->stencilStoreOp != s2->stencilStoreOp) ||
      (s1->initialLayout != s2->initialLayout) || (s1->finalLayout != s2->finalLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *s1,
                                         VkAttachmentDescription2KHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->format != s2->format) || (s1->samples != s2->samples) ||
      (s1->loadOp != s2->loadOp) || (s1->storeOp != s2->storeOp) ||
      (s1->stencilLoadOp != s2->stencilLoadOp) || (s1->stencilStoreOp != s2->stencilStoreOp) ||
      (s1->initialLayout != s2->initialLayout) || (s1->finalLayout != s2->finalLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentReference2(VkAttachmentReference2 const *s1,
                                    VkAttachmentReference2 const *s2) {
  if ((s1->attachment != s2->attachment) || (s1->layout != s2->layout) ||
      (s1->aspectMask != s2->aspectMask) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *s1,
                                       VkAttachmentReference2KHR const *s2) {
  if ((s1->attachment != s2->attachment) || (s1->layout != s2->layout) ||
      (s1->aspectMask != s2->aspectMask) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDescription2(VkSubpassDescription2 const *s1,
                                   VkSubpassDescription2 const *s2) {
  if ((s1->flags != s2->flags) || (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->viewMask != s2->viewMask) || (s1->inputAttachmentCount != s2->inputAttachmentCount) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->preserveAttachmentCount != s2->preserveAttachmentCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *s1,
                                      VkSubpassDescription2KHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->pipelineBindPoint != s2->pipelineBindPoint) ||
      (s1->viewMask != s2->viewMask) || (s1->inputAttachmentCount != s2->inputAttachmentCount) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->preserveAttachmentCount != s2->preserveAttachmentCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDependency2(VkSubpassDependency2 const *s1, VkSubpassDependency2 const *s2) {
  if ((s1->srcSubpass != s2->srcSubpass) || (s1->dstSubpass != s2->dstSubpass) ||
      (s1->srcStageMask != s2->srcStageMask) || (s1->dstStageMask != s2->dstStageMask) ||
      (s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->dependencyFlags != s2->dependencyFlags) || (s1->viewOffset != s2->viewOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *s1,
                                     VkSubpassDependency2KHR const *s2) {
  if ((s1->srcSubpass != s2->srcSubpass) || (s1->dstSubpass != s2->dstSubpass) ||
      (s1->srcStageMask != s2->srcStageMask) || (s1->dstStageMask != s2->dstStageMask) ||
      (s1->srcAccessMask != s2->srcAccessMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->dependencyFlags != s2->dependencyFlags) || (s1->viewOffset != s2->viewOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkRenderPassCreateInfo2(VkRenderPassCreateInfo2 const *s1,
                                     VkRenderPassCreateInfo2 const *s2) {
  if ((s1->flags != s2->flags) || (s1->attachmentCount != s2->attachmentCount) ||
      (s1->subpassCount != s2->subpassCount) || (s1->dependencyCount != s2->dependencyCount) ||
      (s1->correlatedViewMaskCount != s2->correlatedViewMaskCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *s1,
                                        VkRenderPassCreateInfo2KHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->attachmentCount != s2->attachmentCount) ||
      (s1->subpassCount != s2->subpassCount) || (s1->dependencyCount != s2->dependencyCount) ||
      (s1->correlatedViewMaskCount != s2->correlatedViewMaskCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassBeginInfo(VkSubpassBeginInfo const *s1, VkSubpassBeginInfo const *s2) {
  if ((s1->contents != s2->contents) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *s1,
                                   VkSubpassBeginInfoKHR const *s2) {
  if ((s1->contents != s2->contents) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassEndInfo(VkSubpassEndInfo const *s1, VkSubpassEndInfo const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
bool compare_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *s1, VkSubpassEndInfoKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceTimelineSemaphoreFeatures(
    VkPhysicalDeviceTimelineSemaphoreFeatures const *s1,
    VkPhysicalDeviceTimelineSemaphoreFeatures const *s2) {
  if ((s1->timelineSemaphore != s2->timelineSemaphore) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *s2) {
  if ((s1->timelineSemaphore != s2->timelineSemaphore) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceTimelineSemaphoreProperties(
    VkPhysicalDeviceTimelineSemaphoreProperties const *s1,
    VkPhysicalDeviceTimelineSemaphoreProperties const *s2) {
  if ((s1->maxTimelineSemaphoreValueDifference != s2->maxTimelineSemaphoreValueDifference) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s1,
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *s2) {
  if ((s1->maxTimelineSemaphoreValueDifference != s2->maxTimelineSemaphoreValueDifference) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreTypeCreateInfo(VkSemaphoreTypeCreateInfo const *s1,
                                       VkSemaphoreTypeCreateInfo const *s2) {
  if ((s1->semaphoreType != s2->semaphoreType) || (s1->initialValue != s2->initialValue) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *s1,
                                          VkSemaphoreTypeCreateInfoKHR const *s2) {
  if ((s1->semaphoreType != s2->semaphoreType) || (s1->initialValue != s2->initialValue) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkTimelineSemaphoreSubmitInfo(VkTimelineSemaphoreSubmitInfo const *s1,
                                           VkTimelineSemaphoreSubmitInfo const *s2) {
  if ((s1->waitSemaphoreValueCount != s2->waitSemaphoreValueCount) ||
      (s1->signalSemaphoreValueCount != s2->signalSemaphoreValueCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkTimelineSemaphoreSubmitInfoKHR(VkTimelineSemaphoreSubmitInfoKHR const *s1,
                                              VkTimelineSemaphoreSubmitInfoKHR const *s2) {
  if ((s1->waitSemaphoreValueCount != s2->waitSemaphoreValueCount) ||
      (s1->signalSemaphoreValueCount != s2->signalSemaphoreValueCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreWaitInfo(VkSemaphoreWaitInfo const *s1, VkSemaphoreWaitInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->semaphoreCount != s2->semaphoreCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *s1,
                                    VkSemaphoreWaitInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->semaphoreCount != s2->semaphoreCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSemaphoreSignalInfo(VkSemaphoreSignalInfo const *s1,
                                   VkSemaphoreSignalInfo const *s2) {
  if ((s1->semaphore != s2->semaphore) || (s1->value != s2->value) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
bool compare_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *s1,
                                      VkSemaphoreSignalInfoKHR const *s2) {
  if ((s1->semaphore != s2->semaphore) || (s1->value != s2->value) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_vertex_attribute_divisor
bool compare_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *s1,
    VkVertexInputBindingDivisorDescriptionEXT const *s2) {
  if ((s1->binding != s2->binding) || (s1->divisor != s2->divisor) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_vertex_attribute_divisor
bool compare_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s1,
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *s2) {
  if ((s1->vertexBindingDivisorCount != s2->vertexBindingDivisorCount) || false)
    return false;

  return true;
}
#endif

#if VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *s2) {
  if ((s1->maxVertexAttribDivisor != s2->maxVertexAttribDivisor) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_pci_bus_info
bool compare_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s1,
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *s2) {
  if ((s1->pciDomain != s2->pciDomain) || (s1->pciBus != s2->pciBus) ||
      (s1->pciDevice != s2->pciDevice) || (s1->pciFunction != s2->pciFunction) || false)
    return false;

  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkImportAndroidHardwareBufferInfoANDROID(
    VkImportAndroidHardwareBufferInfoANDROID const *s1,
    VkImportAndroidHardwareBufferInfoANDROID const *s2) {
  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferUsageANDROID(VkAndroidHardwareBufferUsageANDROID const *s1,
                                                 VkAndroidHardwareBufferUsageANDROID const *s2) {
  if ((s1->androidHardwareBufferUsage != s2->androidHardwareBufferUsage) || false)
    return false;

  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferPropertiesANDROID(
    VkAndroidHardwareBufferPropertiesANDROID const *s1,
    VkAndroidHardwareBufferPropertiesANDROID const *s2) {
  if ((s1->allocationSize != s2->allocationSize) || (s1->memoryTypeBits != s2->memoryTypeBits) ||
      false)
    return false;

  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *s1,
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *s2) {
  if ((s1->memory != s2->memory) || false)
    return false;

  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferFormatPropertiesANDROID(
    VkAndroidHardwareBufferFormatPropertiesANDROID const *s1,
    VkAndroidHardwareBufferFormatPropertiesANDROID const *s2) {
  if ((s1->format != s2->format) || (s1->externalFormat != s2->externalFormat) ||
      (s1->formatFeatures != s2->formatFeatures) ||
      !compare_VkComponentMapping(&s1->samplerYcbcrConversionComponents,
                                  &s2->samplerYcbcrConversionComponents) ||
      (s1->suggestedYcbcrModel != s2->suggestedYcbcrModel) ||
      (s1->suggestedYcbcrRange != s2->suggestedYcbcrRange) ||
      (s1->suggestedXChromaOffset != s2->suggestedXChromaOffset) ||
      (s1->suggestedYChromaOffset != s2->suggestedYChromaOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *s1,
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *s2) {
  if ((s1->conditionalRenderingEnable != s2->conditionalRenderingEnable) || false)
    return false;

  return true;
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkExternalFormatANDROID(VkExternalFormatANDROID const *s1,
                                     VkExternalFormatANDROID const *s2) {
  if ((s1->externalFormat != s2->externalFormat) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDevice8BitStorageFeatures(VkPhysicalDevice8BitStorageFeatures const *s1,
                                                 VkPhysicalDevice8BitStorageFeatures const *s2) {
  if ((s1->storageBuffer8BitAccess != s2->storageBuffer8BitAccess) ||
      (s1->uniformAndStorageBuffer8BitAccess != s2->uniformAndStorageBuffer8BitAccess) ||
      (s1->storagePushConstant8 != s2->storagePushConstant8) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_8bit_storage
bool compare_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *s1,
    VkPhysicalDevice8BitStorageFeaturesKHR const *s2) {
  if ((s1->storageBuffer8BitAccess != s2->storageBuffer8BitAccess) ||
      (s1->uniformAndStorageBuffer8BitAccess != s2->uniformAndStorageBuffer8BitAccess) ||
      (s1->storagePushConstant8 != s2->storagePushConstant8) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
bool compare_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *s1,
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *s2) {
  if ((s1->conditionalRendering != s2->conditionalRendering) ||
      (s1->inheritedConditionalRendering != s2->inheritedConditionalRendering) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkanMemoryModelFeatures(
    VkPhysicalDeviceVulkanMemoryModelFeatures const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeatures const *s2) {
  if ((s1->vulkanMemoryModel != s2->vulkanMemoryModel) ||
      (s1->vulkanMemoryModelDeviceScope != s2->vulkanMemoryModelDeviceScope) ||
      (s1->vulkanMemoryModelAvailabilityVisibilityChains !=
       s2->vulkanMemoryModelAvailabilityVisibilityChains) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_KHR_vulkan_memory_model
bool compare_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s1,
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *s2) {
  if ((s1->vulkanMemoryModel != s2->vulkanMemoryModel) ||
      (s1->vulkanMemoryModelDeviceScope != s2->vulkanMemoryModelDeviceScope) ||
#if VK_HEADER_VERSION >= 98
      (s1->vulkanMemoryModelAvailabilityVisibilityChains !=
       s2->vulkanMemoryModelAvailabilityVisibilityChains) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceShaderAtomicInt64Features(
    VkPhysicalDeviceShaderAtomicInt64Features const *s1,
    VkPhysicalDeviceShaderAtomicInt64Features const *s2) {
  if ((s1->shaderBufferInt64Atomics != s2->shaderBufferInt64Atomics) ||
      (s1->shaderSharedInt64Atomics != s2->shaderSharedInt64Atomics) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_shader_atomic_int64
bool compare_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s1,
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *s2) {
  if ((s1->shaderBufferInt64Atomics != s2->shaderBufferInt64Atomics) ||
      (s1->shaderSharedInt64Atomics != s2->shaderSharedInt64Atomics) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_shader_atomic_float
bool compare_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *s1,
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *s2) {
  if ((s1->shaderBufferFloat32Atomics != s2->shaderBufferFloat32Atomics) ||
      (s1->shaderBufferFloat32AtomicAdd != s2->shaderBufferFloat32AtomicAdd) ||
      (s1->shaderBufferFloat64Atomics != s2->shaderBufferFloat64Atomics) ||
      (s1->shaderBufferFloat64AtomicAdd != s2->shaderBufferFloat64AtomicAdd) ||
      (s1->shaderSharedFloat32Atomics != s2->shaderSharedFloat32Atomics) ||
      (s1->shaderSharedFloat32AtomicAdd != s2->shaderSharedFloat32AtomicAdd) ||
      (s1->shaderSharedFloat64Atomics != s2->shaderSharedFloat64Atomics) ||
      (s1->shaderSharedFloat64AtomicAdd != s2->shaderSharedFloat64AtomicAdd) ||
      (s1->shaderImageFloat32Atomics != s2->shaderImageFloat32Atomics) ||
      (s1->shaderImageFloat32AtomicAdd != s2->shaderImageFloat32AtomicAdd) ||
      (s1->sparseImageFloat32Atomics != s2->sparseImageFloat32Atomics) ||
      (s1->sparseImageFloat32AtomicAdd != s2->sparseImageFloat32AtomicAdd) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_EXT_shader_atomic_float2
bool compare_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *s1,
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *s2) {
  if ((s1->shaderBufferFloat16Atomics != s2->shaderBufferFloat16Atomics) ||
      (s1->shaderBufferFloat16AtomicAdd != s2->shaderBufferFloat16AtomicAdd) ||
      (s1->shaderBufferFloat16AtomicMinMax != s2->shaderBufferFloat16AtomicMinMax) ||
      (s1->shaderBufferFloat32AtomicMinMax != s2->shaderBufferFloat32AtomicMinMax) ||
      (s1->shaderBufferFloat64AtomicMinMax != s2->shaderBufferFloat64AtomicMinMax) ||
      (s1->shaderSharedFloat16Atomics != s2->shaderSharedFloat16Atomics) ||
      (s1->shaderSharedFloat16AtomicAdd != s2->shaderSharedFloat16AtomicAdd) ||
      (s1->shaderSharedFloat16AtomicMinMax != s2->shaderSharedFloat16AtomicMinMax) ||
      (s1->shaderSharedFloat32AtomicMinMax != s2->shaderSharedFloat32AtomicMinMax) ||
      (s1->shaderSharedFloat64AtomicMinMax != s2->shaderSharedFloat64AtomicMinMax) ||
      (s1->shaderImageFloat32AtomicMinMax != s2->shaderImageFloat32AtomicMinMax) ||
      (s1->sparseImageFloat32AtomicMinMax != s2->sparseImageFloat32AtomicMinMax) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_vertex_attribute_divisor
bool compare_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s1,
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *s2) {
  if ((s1->vertexAttributeInstanceRateDivisor != s2->vertexAttributeInstanceRateDivisor) ||
      (s1->vertexAttributeInstanceRateZeroDivisor != s2->vertexAttributeInstanceRateZeroDivisor) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
bool compare_VkQueueFamilyCheckpointPropertiesNV(VkQueueFamilyCheckpointPropertiesNV const *s1,
                                                 VkQueueFamilyCheckpointPropertiesNV const *s2) {
  if ((s1->checkpointExecutionStageMask != s2->checkpointExecutionStageMask) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
bool compare_VkCheckpointDataNV(VkCheckpointDataNV const *s1, VkCheckpointDataNV const *s2) {
  if ((s1->stage != s2->stage) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceDepthStencilResolveProperties(
    VkPhysicalDeviceDepthStencilResolveProperties const *s1,
    VkPhysicalDeviceDepthStencilResolveProperties const *s2) {
  if ((s1->supportedDepthResolveModes != s2->supportedDepthResolveModes) ||
      (s1->supportedStencilResolveModes != s2->supportedStencilResolveModes) ||
      (s1->independentResolveNone != s2->independentResolveNone) ||
      (s1->independentResolve != s2->independentResolve) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_KHR_depth_stencil_resolve
bool compare_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s1,
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *s2) {
  if ((s1->supportedDepthResolveModes != s2->supportedDepthResolveModes) ||
      (s1->supportedStencilResolveModes != s2->supportedStencilResolveModes) ||
      (s1->independentResolveNone != s2->independentResolveNone) ||
      (s1->independentResolve != s2->independentResolve) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkSubpassDescriptionDepthStencilResolve(
    VkSubpassDescriptionDepthStencilResolve const *s1,
    VkSubpassDescriptionDepthStencilResolve const *s2) {
  if ((s1->depthResolveMode != s2->depthResolveMode) ||
      (s1->stencilResolveMode != s2->stencilResolveMode) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_KHR_depth_stencil_resolve
bool compare_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *s1,
    VkSubpassDescriptionDepthStencilResolveKHR const *s2) {
  if ((s1->depthResolveMode != s2->depthResolveMode) ||
      (s1->stencilResolveMode != s2->stencilResolveMode) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
bool compare_VkImageViewASTCDecodeModeEXT(VkImageViewASTCDecodeModeEXT const *s1,
                                          VkImageViewASTCDecodeModeEXT const *s2) {
  if ((s1->decodeMode != s2->decodeMode) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
bool compare_VkPhysicalDeviceASTCDecodeFeaturesEXT(
    VkPhysicalDeviceASTCDecodeFeaturesEXT const *s1,
    VkPhysicalDeviceASTCDecodeFeaturesEXT const *s2) {
  if ((s1->decodeModeSharedExponent != s2->decodeModeSharedExponent) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *s1,
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *s2) {
  if ((s1->transformFeedback != s2->transformFeedback) ||
      (s1->geometryStreams != s2->geometryStreams) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *s1,
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *s2) {
  if ((s1->maxTransformFeedbackStreams != s2->maxTransformFeedbackStreams) ||
      (s1->maxTransformFeedbackBuffers != s2->maxTransformFeedbackBuffers) ||
      (s1->maxTransformFeedbackBufferSize != s2->maxTransformFeedbackBufferSize) ||
      (s1->maxTransformFeedbackStreamDataSize != s2->maxTransformFeedbackStreamDataSize) ||
      (s1->maxTransformFeedbackBufferDataSize != s2->maxTransformFeedbackBufferDataSize) ||
      (s1->maxTransformFeedbackBufferDataStride != s2->maxTransformFeedbackBufferDataStride) ||
      (s1->transformFeedbackQueries != s2->transformFeedbackQueries) ||
      (s1->transformFeedbackStreamsLinesTriangles != s2->transformFeedbackStreamsLinesTriangles) ||
      (s1->transformFeedbackRasterizationStreamSelect !=
       s2->transformFeedbackRasterizationStreamSelect) ||
      (s1->transformFeedbackDraw != s2->transformFeedbackDraw) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
bool compare_VkPipelineRasterizationStateStreamCreateInfoEXT(
    VkPipelineRasterizationStateStreamCreateInfoEXT const *s1,
    VkPipelineRasterizationStateStreamCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->rasterizationStream != s2->rasterizationStream) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
bool compare_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *s1,
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *s2) {
  if ((s1->representativeFragmentTest != s2->representativeFragmentTest) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
bool compare_VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *s1,
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *s2) {
  if ((s1->representativeFragmentTestEnable != s2->representativeFragmentTestEnable) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
bool compare_VkPhysicalDeviceExclusiveScissorFeaturesNV(
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *s1,
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *s2) {
  if ((s1->exclusiveScissor != s2->exclusiveScissor) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
bool compare_VkPipelineViewportExclusiveScissorStateCreateInfoNV(
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *s1,
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *s2) {
  if ((s1->exclusiveScissorCount != s2->exclusiveScissorCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_corner_sampled_image
bool compare_VkPhysicalDeviceCornerSampledImageFeaturesNV(
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *s1,
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *s2) {
  if ((s1->cornerSampledImage != s2->cornerSampledImage) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_compute_shader_derivatives
bool compare_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s1,
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *s2) {
  if ((s1->computeDerivativeGroupQuads != s2->computeDerivativeGroupQuads) ||
      (s1->computeDerivativeGroupLinear != s2->computeDerivativeGroupLinear) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *s2) {
  if ((s1->fragmentShaderBarycentric != s2->fragmentShaderBarycentric) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shader_image_footprint
bool compare_VkPhysicalDeviceShaderImageFootprintFeaturesNV(
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *s1,
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *s2) {
  if ((s1->imageFootprint != s2->imageFootprint) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 99 && VK_NV_dedicated_allocation_image_aliasing
bool compare_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *s1,
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *s2) {
  if ((s1->dedicatedAllocationImageAliasing != s2->dedicatedAllocationImageAliasing) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(
    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV const *s1,
    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV const *s2) {
  if ((s1->indirectCopy != s2->indirectCopy) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect
bool compare_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(
    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV const *s1,
    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV const *s2) {
  if ((s1->supportedQueues != s2->supportedQueues) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkPhysicalDeviceMemoryDecompressionFeaturesNV(
    VkPhysicalDeviceMemoryDecompressionFeaturesNV const *s1,
    VkPhysicalDeviceMemoryDecompressionFeaturesNV const *s2) {
  if ((s1->memoryDecompression != s2->memoryDecompression) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkPhysicalDeviceMemoryDecompressionPropertiesNV(
    VkPhysicalDeviceMemoryDecompressionPropertiesNV const *s1,
    VkPhysicalDeviceMemoryDecompressionPropertiesNV const *s2) {
  if ((s1->decompressionMethods != s2->decompressionMethods) ||
      (s1->maxDecompressionIndirectCount != s2->maxDecompressionIndirectCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkShadingRatePaletteNV(VkShadingRatePaletteNV const *s1,
                                    VkShadingRatePaletteNV const *s2) {
  if ((s1->shadingRatePaletteEntryCount != s2->shadingRatePaletteEntryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPipelineViewportShadingRateImageStateCreateInfoNV(
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *s1,
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *s2) {
  if ((s1->shadingRateImageEnable != s2->shadingRateImageEnable) ||
      (s1->viewportCount != s2->viewportCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPhysicalDeviceShadingRateImageFeaturesNV(
    VkPhysicalDeviceShadingRateImageFeaturesNV const *s1,
    VkPhysicalDeviceShadingRateImageFeaturesNV const *s2) {
  if ((s1->shadingRateImage != s2->shadingRateImage) ||
      (s1->shadingRateCoarseSampleOrder != s2->shadingRateCoarseSampleOrder) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPhysicalDeviceShadingRateImagePropertiesNV(
    VkPhysicalDeviceShadingRateImagePropertiesNV const *s1,
    VkPhysicalDeviceShadingRateImagePropertiesNV const *s2) {
  if (!compare_VkExtent2D(&s1->shadingRateTexelSize, &s2->shadingRateTexelSize) ||
      (s1->shadingRatePaletteSize != s2->shadingRatePaletteSize) ||
      (s1->shadingRateMaxCoarseSamples != s2->shadingRateMaxCoarseSamples) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_HUAWEI_invocation_mask
bool compare_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *s1,
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *s2) {
  if ((s1->invocationMask != s2->invocationMask) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkCoarseSampleLocationNV(VkCoarseSampleLocationNV const *s1,
                                      VkCoarseSampleLocationNV const *s2) {
  if ((s1->pixelX != s2->pixelX) || (s1->pixelY != s2->pixelY) || (s1->sample != s2->sample) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkCoarseSampleOrderCustomNV(VkCoarseSampleOrderCustomNV const *s1,
                                         VkCoarseSampleOrderCustomNV const *s2) {
  if ((s1->shadingRate != s2->shadingRate) || (s1->sampleCount != s2->sampleCount) ||
      (s1->sampleLocationCount != s2->sampleLocationCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
bool compare_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *s1,
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *s2) {
  if ((s1->sampleOrderType != s2->sampleOrderType) ||
      (s1->customSampleOrderCount != s2->customSampleOrderCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderFeaturesNV(VkPhysicalDeviceMeshShaderFeaturesNV const *s1,
                                                  VkPhysicalDeviceMeshShaderFeaturesNV const *s2) {
  if ((s1->taskShader != s2->taskShader) || (s1->meshShader != s2->meshShader) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderPropertiesNV(
    VkPhysicalDeviceMeshShaderPropertiesNV const *s1,
    VkPhysicalDeviceMeshShaderPropertiesNV const *s2) {
  if ((s1->maxDrawMeshTasksCount != s2->maxDrawMeshTasksCount) ||
      (s1->maxTaskWorkGroupInvocations != s2->maxTaskWorkGroupInvocations) ||
      (s1->maxTaskTotalMemorySize != s2->maxTaskTotalMemorySize) ||
      (s1->maxTaskOutputCount != s2->maxTaskOutputCount) ||
      (s1->maxMeshWorkGroupInvocations != s2->maxMeshWorkGroupInvocations) ||
      (s1->maxMeshTotalMemorySize != s2->maxMeshTotalMemorySize) ||
      (s1->maxMeshOutputVertices != s2->maxMeshOutputVertices) ||
      (s1->maxMeshOutputPrimitives != s2->maxMeshOutputPrimitives) ||
      (s1->maxMeshMultiviewViewCount != s2->maxMeshMultiviewViewCount) ||
      (s1->meshOutputPerVertexGranularity != s2->meshOutputPerVertexGranularity) ||
      (s1->meshOutputPerPrimitiveGranularity != s2->meshOutputPerPrimitiveGranularity) || false)
    return false;

  for (uint32_t i = 0; i < 3; ++i) {
    if (s1->maxTaskWorkGroupSize[i] != s2->maxTaskWorkGroupSize[i])
      return false;
  }
  for (uint32_t i = 0; i < 3; ++i) {
    if (s1->maxMeshWorkGroupSize[i] != s2->maxMeshWorkGroupSize[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
bool compare_VkDrawMeshTasksIndirectCommandNV(VkDrawMeshTasksIndirectCommandNV const *s1,
                                              VkDrawMeshTasksIndirectCommandNV const *s2) {
  if ((s1->taskCount != s2->taskCount) || (s1->firstTask != s2->firstTask) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderFeaturesEXT(
    VkPhysicalDeviceMeshShaderFeaturesEXT const *s1,
    VkPhysicalDeviceMeshShaderFeaturesEXT const *s2) {
  if ((s1->taskShader != s2->taskShader) || (s1->meshShader != s2->meshShader) ||
      (s1->multiviewMeshShader != s2->multiviewMeshShader) ||
      (s1->primitiveFragmentShadingRateMeshShader != s2->primitiveFragmentShadingRateMeshShader) ||
      (s1->meshShaderQueries != s2->meshShaderQueries) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkPhysicalDeviceMeshShaderPropertiesEXT(
    VkPhysicalDeviceMeshShaderPropertiesEXT const *s1,
    VkPhysicalDeviceMeshShaderPropertiesEXT const *s2) {
  if ((s1->maxTaskWorkGroupTotalCount != s2->maxTaskWorkGroupTotalCount) ||
      (s1->maxTaskWorkGroupInvocations != s2->maxTaskWorkGroupInvocations) ||
      (s1->maxTaskPayloadSize != s2->maxTaskPayloadSize) ||
      (s1->maxTaskSharedMemorySize != s2->maxTaskSharedMemorySize) ||
      (s1->maxTaskPayloadAndSharedMemorySize != s2->maxTaskPayloadAndSharedMemorySize) ||
      (s1->maxMeshWorkGroupTotalCount != s2->maxMeshWorkGroupTotalCount) ||
      (s1->maxMeshWorkGroupInvocations != s2->maxMeshWorkGroupInvocations) ||
      (s1->maxMeshSharedMemorySize != s2->maxMeshSharedMemorySize) ||
      (s1->maxMeshPayloadAndSharedMemorySize != s2->maxMeshPayloadAndSharedMemorySize) ||
      (s1->maxMeshOutputMemorySize != s2->maxMeshOutputMemorySize) ||
      (s1->maxMeshPayloadAndOutputMemorySize != s2->maxMeshPayloadAndOutputMemorySize) ||
      (s1->maxMeshOutputComponents != s2->maxMeshOutputComponents) ||
      (s1->maxMeshOutputVertices != s2->maxMeshOutputVertices) ||
      (s1->maxMeshOutputPrimitives != s2->maxMeshOutputPrimitives) ||
      (s1->maxMeshOutputLayers != s2->maxMeshOutputLayers) ||
      (s1->maxMeshMultiviewViewCount != s2->maxMeshMultiviewViewCount) ||
      (s1->meshOutputPerVertexGranularity != s2->meshOutputPerVertexGranularity) ||
      (s1->meshOutputPerPrimitiveGranularity != s2->meshOutputPerPrimitiveGranularity) ||
      (s1->maxPreferredTaskWorkGroupInvocations != s2->maxPreferredTaskWorkGroupInvocations) ||
      (s1->maxPreferredMeshWorkGroupInvocations != s2->maxPreferredMeshWorkGroupInvocations) ||
      (s1->prefersLocalInvocationVertexOutput != s2->prefersLocalInvocationVertexOutput) ||
      (s1->prefersLocalInvocationPrimitiveOutput != s2->prefersLocalInvocationPrimitiveOutput) ||
      (s1->prefersCompactVertexOutput != s2->prefersCompactVertexOutput) ||
      (s1->prefersCompactPrimitiveOutput != s2->prefersCompactPrimitiveOutput) || false)
    return false;

  for (uint32_t i = 0; i < 3; ++i) {
    if (s1->maxTaskWorkGroupCount[i] != s2->maxTaskWorkGroupCount[i])
      return false;
  }
  for (uint32_t i = 0; i < 3; ++i) {
    if (s1->maxTaskWorkGroupSize[i] != s2->maxTaskWorkGroupSize[i])
      return false;
  }
  for (uint32_t i = 0; i < 3; ++i) {
    if (s1->maxMeshWorkGroupCount[i] != s2->maxMeshWorkGroupCount[i])
      return false;
  }
  for (uint32_t i = 0; i < 3; ++i) {
    if (s1->maxMeshWorkGroupSize[i] != s2->maxMeshWorkGroupSize[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader
bool compare_VkDrawMeshTasksIndirectCommandEXT(VkDrawMeshTasksIndirectCommandEXT const *s1,
                                               VkDrawMeshTasksIndirectCommandEXT const *s2) {
  if ((s1->groupCountX != s2->groupCountX) || (s1->groupCountY != s2->groupCountY) ||
      (s1->groupCountZ != s2->groupCountZ) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *s1,
                                                 VkRayTracingShaderGroupCreateInfoNV const *s2) {
  if ((s1->type != s2->type) || (s1->generalShader != s2->generalShader) ||
      (s1->closestHitShader != s2->closestHitShader) || (s1->anyHitShader != s2->anyHitShader) ||
      (s1->intersectionShader != s2->intersectionShader) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_ray_tracing_pipeline || VK_KHR_ray_tracing)
bool compare_VkRayTracingShaderGroupCreateInfoKHR(VkRayTracingShaderGroupCreateInfoKHR const *s1,
                                                  VkRayTracingShaderGroupCreateInfoKHR const *s2) {
  if ((s1->type != s2->type) || (s1->generalShader != s2->generalShader) ||
      (s1->closestHitShader != s2->closestHitShader) || (s1->anyHitShader != s2->anyHitShader) ||
      (s1->intersectionShader != s2->intersectionShader) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkRayTracingPipelineCreateInfoNV(VkRayTracingPipelineCreateInfoNV const *s1,
                                              VkRayTracingPipelineCreateInfoNV const *s2) {
  if ((s1->flags != s2->flags) || (s1->stageCount != s2->stageCount) ||
      (s1->groupCount != s2->groupCount) || (s1->maxRecursionDepth != s2->maxRecursionDepth) ||
      (s1->layout != s2->layout) || (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_ray_tracing_pipeline || VK_KHR_ray_tracing)
bool compare_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *s1,
                                               VkRayTracingPipelineCreateInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->stageCount != s2->stageCount) ||
      (s1->groupCount != s2->groupCount) ||
#if VK_HEADER_VERSION >= 162
      (s1->maxPipelineRayRecursionDepth != s2->maxPipelineRayRecursionDepth) ||
#endif
      (s1->layout != s2->layout) || (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex) ||
#if VK_HEADER_VERSION <= 161
      (s1->maxRecursionDepth != s2->maxRecursionDepth) ||
#endif
#if VK_HEADER_VERSION <= 161
      !compare_VkPipelineLibraryCreateInfoKHR(&s1->libraries, &s2->libraries) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryTrianglesNV(VkGeometryTrianglesNV const *s1,
                                   VkGeometryTrianglesNV const *s2) {
  if ((s1->vertexData != s2->vertexData) || (s1->vertexOffset != s2->vertexOffset) ||
      (s1->vertexCount != s2->vertexCount) || (s1->vertexStride != s2->vertexStride) ||
      (s1->vertexFormat != s2->vertexFormat) || (s1->indexData != s2->indexData) ||
      (s1->indexOffset != s2->indexOffset) || (s1->indexCount != s2->indexCount) ||
      (s1->indexType != s2->indexType) || (s1->transformData != s2->transformData) ||
      (s1->transformOffset != s2->transformOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryAABBNV(VkGeometryAABBNV const *s1, VkGeometryAABBNV const *s2) {
  if ((s1->aabbData != s2->aabbData) || (s1->numAABBs != s2->numAABBs) ||
      (s1->stride != s2->stride) || (s1->offset != s2->offset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryDataNV(VkGeometryDataNV const *s1, VkGeometryDataNV const *s2) {
  if (!compare_VkGeometryTrianglesNV(&s1->triangles, &s2->triangles) ||
      !compare_VkGeometryAABBNV(&s1->aabbs, &s2->aabbs) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkGeometryNV(VkGeometryNV const *s1, VkGeometryNV const *s2) {
  if ((s1->geometryType != s2->geometryType) ||
      !compare_VkGeometryDataNV(&s1->geometry, &s2->geometry) || (s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureInfoNV(VkAccelerationStructureInfoNV const *s1,
                                           VkAccelerationStructureInfoNV const *s2) {
  if ((s1->type != s2->type) || (s1->flags != s2->flags) ||
      (s1->instanceCount != s2->instanceCount) || (s1->geometryCount != s2->geometryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureCreateInfoNV(VkAccelerationStructureCreateInfoNV const *s1,
                                                 VkAccelerationStructureCreateInfoNV const *s2) {
  if ((s1->compactedSize != s2->compactedSize) ||
      !compare_VkAccelerationStructureInfoNV(&s1->info, &s2->info) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *s1,
    VkBindAccelerationStructureMemoryInfoNV const *s2) {
  if ((s1->accelerationStructure != s2->accelerationStructure) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->deviceIndexCount != s2->deviceIndexCount) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkWriteDescriptorSetAccelerationStructureKHR(
    VkWriteDescriptorSetAccelerationStructureKHR const *s1,
    VkWriteDescriptorSetAccelerationStructureKHR const *s2) {
  if ((s1->accelerationStructureCount != s2->accelerationStructureCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *s1,
    VkWriteDescriptorSetAccelerationStructureNV const *s2) {
  if ((s1->accelerationStructureCount != s2->accelerationStructureCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureMemoryRequirementsInfoNV(
    VkAccelerationStructureMemoryRequirementsInfoNV const *s1,
    VkAccelerationStructureMemoryRequirementsInfoNV const *s2) {
  if ((s1->type != s2->type) || (s1->accelerationStructure != s2->accelerationStructure) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkPhysicalDeviceAccelerationStructureFeaturesKHR(
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *s1,
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *s2) {
  if ((s1->accelerationStructure != s2->accelerationStructure) ||
      (s1->accelerationStructureCaptureReplay != s2->accelerationStructureCaptureReplay) ||
      (s1->accelerationStructureIndirectBuild != s2->accelerationStructureIndirectBuild) ||
      (s1->accelerationStructureHostCommands != s2->accelerationStructureHostCommands) ||
      (s1->descriptorBindingAccelerationStructureUpdateAfterBind !=
       s2->descriptorBindingAccelerationStructureUpdateAfterBind) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *s2) {
  if ((s1->rayTracingPipeline != s2->rayTracingPipeline) ||
      (s1->rayTracingPipelineShaderGroupHandleCaptureReplay !=
       s2->rayTracingPipelineShaderGroupHandleCaptureReplay) ||
      (s1->rayTracingPipelineShaderGroupHandleCaptureReplayMixed !=
       s2->rayTracingPipelineShaderGroupHandleCaptureReplayMixed) ||
      (s1->rayTracingPipelineTraceRaysIndirect != s2->rayTracingPipelineTraceRaysIndirect) ||
      (s1->rayTraversalPrimitiveCulling != s2->rayTraversalPrimitiveCulling) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_query
bool compare_VkPhysicalDeviceRayQueryFeaturesKHR(VkPhysicalDeviceRayQueryFeaturesKHR const *s1,
                                                 VkPhysicalDeviceRayQueryFeaturesKHR const *s2) {
  if ((s1->rayQuery != s2->rayQuery) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkPhysicalDeviceAccelerationStructurePropertiesKHR(
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *s1,
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *s2) {
  if ((s1->maxGeometryCount != s2->maxGeometryCount) ||
      (s1->maxInstanceCount != s2->maxInstanceCount) ||
      (s1->maxPrimitiveCount != s2->maxPrimitiveCount) ||
      (s1->maxPerStageDescriptorAccelerationStructures !=
       s2->maxPerStageDescriptorAccelerationStructures) ||
      (s1->maxPerStageDescriptorUpdateAfterBindAccelerationStructures !=
       s2->maxPerStageDescriptorUpdateAfterBindAccelerationStructures) ||
      (s1->maxDescriptorSetAccelerationStructures != s2->maxDescriptorSetAccelerationStructures) ||
      (s1->maxDescriptorSetUpdateAfterBindAccelerationStructures !=
       s2->maxDescriptorSetUpdateAfterBindAccelerationStructures) ||
      (s1->minAccelerationStructureScratchOffsetAlignment !=
       s2->minAccelerationStructureScratchOffsetAlignment) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *s1,
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *s2) {
  if ((s1->shaderGroupHandleSize != s2->shaderGroupHandleSize) ||
      (s1->maxRayRecursionDepth != s2->maxRayRecursionDepth) ||
      (s1->maxShaderGroupStride != s2->maxShaderGroupStride) ||
      (s1->shaderGroupBaseAlignment != s2->shaderGroupBaseAlignment) ||
      (s1->shaderGroupHandleCaptureReplaySize != s2->shaderGroupHandleCaptureReplaySize) ||
      (s1->maxRayDispatchInvocationCount != s2->maxRayDispatchInvocationCount) ||
      (s1->shaderGroupHandleAlignment != s2->shaderGroupHandleAlignment) ||
      (s1->maxRayHitAttributeSize != s2->maxRayHitAttributeSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
bool compare_VkPhysicalDeviceRayTracingPropertiesNV(
    VkPhysicalDeviceRayTracingPropertiesNV const *s1,
    VkPhysicalDeviceRayTracingPropertiesNV const *s2) {
  if ((s1->shaderGroupHandleSize != s2->shaderGroupHandleSize) ||
      (s1->maxRecursionDepth != s2->maxRecursionDepth) ||
      (s1->maxShaderGroupStride != s2->maxShaderGroupStride) ||
      (s1->shaderGroupBaseAlignment != s2->shaderGroupBaseAlignment) ||
      (s1->maxGeometryCount != s2->maxGeometryCount) ||
      (s1->maxInstanceCount != s2->maxInstanceCount) ||
      (s1->maxTriangleCount != s2->maxTriangleCount) ||
      (s1->maxDescriptorSetAccelerationStructures != s2->maxDescriptorSetAccelerationStructures) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
bool compare_VkStridedDeviceAddressRegionKHR(VkStridedDeviceAddressRegionKHR const *s1,
                                             VkStridedDeviceAddressRegionKHR const *s2) {
  if ((s1->deviceAddress != s2->deviceAddress) || (s1->stride != s2->stride) ||
      (s1->size != s2->size) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_ray_tracing_pipeline || VK_KHR_ray_tracing)
bool compare_VkTraceRaysIndirectCommandKHR(VkTraceRaysIndirectCommandKHR const *s1,
                                           VkTraceRaysIndirectCommandKHR const *s2) {
  if ((s1->width != s2->width) || (s1->height != s2->height) || (s1->depth != s2->depth) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_KHR_ray_tracing_maintenance1
bool compare_VkTraceRaysIndirectCommand2KHR(VkTraceRaysIndirectCommand2KHR const *s1,
                                            VkTraceRaysIndirectCommand2KHR const *s2) {
  if ((s1->raygenShaderRecordAddress != s2->raygenShaderRecordAddress) ||
      (s1->raygenShaderRecordSize != s2->raygenShaderRecordSize) ||
      (s1->missShaderBindingTableAddress != s2->missShaderBindingTableAddress) ||
      (s1->missShaderBindingTableSize != s2->missShaderBindingTableSize) ||
      (s1->missShaderBindingTableStride != s2->missShaderBindingTableStride) ||
      (s1->hitShaderBindingTableAddress != s2->hitShaderBindingTableAddress) ||
      (s1->hitShaderBindingTableSize != s2->hitShaderBindingTableSize) ||
      (s1->hitShaderBindingTableStride != s2->hitShaderBindingTableStride) ||
      (s1->callableShaderBindingTableAddress != s2->callableShaderBindingTableAddress) ||
      (s1->callableShaderBindingTableSize != s2->callableShaderBindingTableSize) ||
      (s1->callableShaderBindingTableStride != s2->callableShaderBindingTableStride) ||
      (s1->width != s2->width) || (s1->height != s2->height) || (s1->depth != s2->depth) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_KHR_ray_tracing_maintenance1
bool compare_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(
    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR const *s2) {
  if ((s1->rayTracingMaintenance1 != s2->rayTracingMaintenance1) ||
      (s1->rayTracingPipelineTraceRaysIndirect2 != s2->rayTracingPipelineTraceRaysIndirect2) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierPropertiesListEXT(VkDrmFormatModifierPropertiesListEXT const *s1,
                                                  VkDrmFormatModifierPropertiesListEXT const *s2) {
  if ((s1->drmFormatModifierCount != s2->drmFormatModifierCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierPropertiesEXT(VkDrmFormatModifierPropertiesEXT const *s1,
                                              VkDrmFormatModifierPropertiesEXT const *s2) {
  if ((s1->drmFormatModifier != s2->drmFormatModifier) ||
      (s1->drmFormatModifierPlaneCount != s2->drmFormatModifierPlaneCount) ||
      (s1->drmFormatModifierTilingFeatures != s2->drmFormatModifierTilingFeatures) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s1,
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *s2) {
  if ((s1->drmFormatModifier != s2->drmFormatModifier) ||
#if VK_HEADER_VERSION >= 88
      (s1->sharingMode != s2->sharingMode) ||
#endif
#if VK_HEADER_VERSION >= 88
      (s1->queueFamilyIndexCount != s2->queueFamilyIndexCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierListCreateInfoEXT(
    VkImageDrmFormatModifierListCreateInfoEXT const *s1,
    VkImageDrmFormatModifierListCreateInfoEXT const *s2) {
  if ((s1->drmFormatModifierCount != s2->drmFormatModifierCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierExplicitCreateInfoEXT(
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *s1,
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *s2) {
  if ((s1->drmFormatModifier != s2->drmFormatModifier) ||
      (s1->drmFormatModifierPlaneCount != s2->drmFormatModifierPlaneCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
bool compare_VkImageDrmFormatModifierPropertiesEXT(
    VkImageDrmFormatModifierPropertiesEXT const *s1,
    VkImageDrmFormatModifierPropertiesEXT const *s2) {
  if ((s1->drmFormatModifier != s2->drmFormatModifier) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkImageStencilUsageCreateInfo(VkImageStencilUsageCreateInfo const *s1,
                                           VkImageStencilUsageCreateInfo const *s2) {
  if ((s1->stencilUsage != s2->stencilUsage) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 93 && VK_EXT_separate_stencil_usage
bool compare_VkImageStencilUsageCreateInfoEXT(VkImageStencilUsageCreateInfoEXT const *s1,
                                              VkImageStencilUsageCreateInfoEXT const *s2) {
  if ((s1->stencilUsage != s2->stencilUsage) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior
bool compare_VkDeviceMemoryOverallocationCreateInfoAMD(
    VkDeviceMemoryOverallocationCreateInfoAMD const *s1,
    VkDeviceMemoryOverallocationCreateInfoAMD const *s2) {
  if ((s1->overallocationBehavior != s2->overallocationBehavior) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *s2) {
  if ((s1->fragmentDensityMap != s2->fragmentDensityMap) ||
      (s1->fragmentDensityMapDynamic != s2->fragmentDensityMapDynamic) ||
      (s1->fragmentDensityMapNonSubsampledImages != s2->fragmentDensityMapNonSubsampledImages) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
bool compare_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *s2) {
  if ((s1->fragmentDensityMapDeferred != s2->fragmentDensityMapDeferred) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *s2) {
  if ((s1->fragmentDensityMapOffset != s2->fragmentDensityMapOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *s2) {
  if (!compare_VkExtent2D(&s1->minFragmentDensityTexelSize, &s2->minFragmentDensityTexelSize) ||
      !compare_VkExtent2D(&s1->maxFragmentDensityTexelSize, &s2->maxFragmentDensityTexelSize) ||
      (s1->fragmentDensityInvocations != s2->fragmentDensityInvocations) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
bool compare_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *s1,
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *s2) {
  if ((s1->subsampledLoads != s2->subsampledLoads) ||
      (s1->subsampledCoarseReconstructionEarlyAccess !=
       s2->subsampledCoarseReconstructionEarlyAccess) ||
      (s1->maxSubsampledArrayLayers != s2->maxSubsampledArrayLayers) ||
      (s1->maxDescriptorSetSubsampledSamplers != s2->maxDescriptorSetSubsampledSamplers) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_QCOM_fragment_density_map_offset
bool compare_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s1,
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *s2) {
  if (!compare_VkExtent2D(&s1->fragmentDensityOffsetGranularity,
                          &s2->fragmentDensityOffsetGranularity) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
bool compare_VkRenderPassFragmentDensityMapCreateInfoEXT(
    VkRenderPassFragmentDensityMapCreateInfoEXT const *s1,
    VkRenderPassFragmentDensityMapCreateInfoEXT const *s2) {
  if (!compare_VkAttachmentReference(&s1->fragmentDensityMapAttachment,
                                     &s2->fragmentDensityMapAttachment) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_QCOM_fragment_density_map_offset
bool compare_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s1,
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *s2) {
  if ((s1->fragmentDensityOffsetCount != s2->fragmentDensityOffsetCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceScalarBlockLayoutFeatures(
    VkPhysicalDeviceScalarBlockLayoutFeatures const *s1,
    VkPhysicalDeviceScalarBlockLayoutFeatures const *s2) {
  if ((s1->scalarBlockLayout != s2->scalarBlockLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 93 && VK_EXT_scalar_block_layout
bool compare_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s1,
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *s2) {
  if ((s1->scalarBlockLayout != s2->scalarBlockLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_KHR_surface_protected_capabilities
bool compare_VkSurfaceProtectedCapabilitiesKHR(VkSurfaceProtectedCapabilitiesKHR const *s1,
                                               VkSurfaceProtectedCapabilitiesKHR const *s2) {
  if ((s1->supportsProtected != s2->supportsProtected) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *s1,
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *s2) {
  if ((s1->uniformBufferStandardLayout != s2->uniformBufferStandardLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_KHR_uniform_buffer_standard_layout
bool compare_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s1,
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *s2) {
  if ((s1->uniformBufferStandardLayout != s2->uniformBufferStandardLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
bool compare_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *s2) {
  if ((s1->depthClipEnable != s2->depthClipEnable) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
bool compare_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *s1,
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->depthClipEnable != s2->depthClipEnable) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_budget
bool compare_VkPhysicalDeviceMemoryBudgetPropertiesEXT(
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *s1,
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *s2) {
  for (uint32_t i = 0; i < VK_MAX_MEMORY_HEAPS; ++i) {
    if (s1->heapBudget[i] != s2->heapBudget[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_MEMORY_HEAPS; ++i) {
    if (s1->heapUsage[i] != s2->heapUsage[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
bool compare_VkPhysicalDeviceMemoryPriorityFeaturesEXT(
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *s1,
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *s2) {
  if ((s1->memoryPriority != s2->memoryPriority) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
bool compare_VkMemoryPriorityAllocateInfoEXT(VkMemoryPriorityAllocateInfoEXT const *s1,
                                             VkMemoryPriorityAllocateInfoEXT const *s2) {
  if ((s1->priority != s2->priority) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 191 && VK_EXT_pageable_device_local_memory
bool compare_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *s1,
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *s2) {
  if ((s1->pageableDeviceLocalMemory != s2->pageableDeviceLocalMemory) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceBufferDeviceAddressFeatures(
    VkPhysicalDeviceBufferDeviceAddressFeatures const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeatures const *s2) {
  if ((s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
bool compare_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *s2) {
  if ((s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address
bool compare_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *s1,
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *s2) {
  if ((s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
bool compare_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s1,
    VkPhysicalDeviceBufferAddressFeaturesEXT const *s2) {
  if ((s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkBufferDeviceAddressInfo(VkBufferDeviceAddressInfo const *s1,
                                       VkBufferDeviceAddressInfo const *s2) {
  if ((s1->buffer != s2->buffer) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
bool compare_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *s1,
                                          VkBufferDeviceAddressInfoKHR const *s2) {
  if ((s1->buffer != s2->buffer) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *s1,
                                          VkBufferDeviceAddressInfoEXT const *s2) {
  if ((s1->buffer != s2->buffer) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkBufferOpaqueCaptureAddressCreateInfo(
    VkBufferOpaqueCaptureAddressCreateInfo const *s1,
    VkBufferOpaqueCaptureAddressCreateInfo const *s2) {
  if ((s1->opaqueCaptureAddress != s2->opaqueCaptureAddress) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
bool compare_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s1,
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *s2) {
  if ((s1->opaqueCaptureAddress != s2->opaqueCaptureAddress) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
bool compare_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *s1,
                                                VkBufferDeviceAddressCreateInfoEXT const *s2) {
  if ((s1->deviceAddress != s2->deviceAddress) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
bool compare_VkPhysicalDeviceImageViewImageFormatInfoEXT(
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *s1,
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *s2) {
  if ((s1->imageViewType != s2->imageViewType) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
bool compare_VkFilterCubicImageViewImageFormatPropertiesEXT(
    VkFilterCubicImageViewImageFormatPropertiesEXT const *s1,
    VkFilterCubicImageViewImageFormatPropertiesEXT const *s2) {
  if ((s1->filterCubic != s2->filterCubic) || (s1->filterCubicMinmax != s2->filterCubicMinmax) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceImagelessFramebufferFeatures(
    VkPhysicalDeviceImagelessFramebufferFeatures const *s1,
    VkPhysicalDeviceImagelessFramebufferFeatures const *s2) {
  if ((s1->imagelessFramebuffer != s2->imagelessFramebuffer) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
bool compare_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s1,
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *s2) {
  if ((s1->imagelessFramebuffer != s2->imagelessFramebuffer) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkFramebufferAttachmentsCreateInfo(VkFramebufferAttachmentsCreateInfo const *s1,
                                                VkFramebufferAttachmentsCreateInfo const *s2) {
  if ((s1->attachmentImageInfoCount != s2->attachmentImageInfoCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
bool compare_VkFramebufferAttachmentsCreateInfoKHR(
    VkFramebufferAttachmentsCreateInfoKHR const *s1,
    VkFramebufferAttachmentsCreateInfoKHR const *s2) {
  if ((s1->attachmentImageInfoCount != s2->attachmentImageInfoCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkFramebufferAttachmentImageInfo(VkFramebufferAttachmentImageInfo const *s1,
                                              VkFramebufferAttachmentImageInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->usage != s2->usage) || (s1->width != s2->width) ||
      (s1->height != s2->height) || (s1->layerCount != s2->layerCount) ||
      (s1->viewFormatCount != s2->viewFormatCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
bool compare_VkFramebufferAttachmentImageInfoKHR(VkFramebufferAttachmentImageInfoKHR const *s1,
                                                 VkFramebufferAttachmentImageInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->usage != s2->usage) || (s1->width != s2->width) ||
      (s1->height != s2->height) || (s1->layerCount != s2->layerCount) ||
      (s1->viewFormatCount != s2->viewFormatCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkRenderPassAttachmentBeginInfo(VkRenderPassAttachmentBeginInfo const *s1,
                                             VkRenderPassAttachmentBeginInfo const *s2) {
  if ((s1->attachmentCount != s2->attachmentCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
bool compare_VkRenderPassAttachmentBeginInfoKHR(VkRenderPassAttachmentBeginInfoKHR const *s1,
                                                VkRenderPassAttachmentBeginInfoKHR const *s2) {
  if ((s1->attachmentCount != s2->attachmentCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceTextureCompressionASTCHDRFeatures(
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures const *s1,
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures const *s2) {
  if ((s1->textureCompressionASTC_HDR != s2->textureCompressionASTC_HDR) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_texture_compression_astc_hdr
bool compare_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s1,
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *s2) {
  if ((s1->textureCompressionASTC_HDR != s2->textureCompressionASTC_HDR) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixFeaturesNV(
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *s1,
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *s2) {
  if ((s1->cooperativeMatrix != s2->cooperativeMatrix) ||
      (s1->cooperativeMatrixRobustBufferAccess != s2->cooperativeMatrixRobustBufferAccess) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *s1,
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *s2) {
  if ((s1->cooperativeMatrixSupportedStages != s2->cooperativeMatrixSupportedStages) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
bool compare_VkCooperativeMatrixPropertiesNV(VkCooperativeMatrixPropertiesNV const *s1,
                                             VkCooperativeMatrixPropertiesNV const *s2) {
  if ((s1->MSize != s2->MSize) || (s1->NSize != s2->NSize) || (s1->KSize != s2->KSize) ||
      (s1->AType != s2->AType) || (s1->BType != s2->BType) || (s1->CType != s2->CType) ||
      (s1->DType != s2->DType) || (s1->scope != s2->scope) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_ycbcr_image_arrays
bool compare_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *s1,
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *s2) {
  if ((s1->ycbcrImageArrays != s2->ycbcrImageArrays) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 102 && VK_NVX_image_view_handle
bool compare_VkImageViewHandleInfoNVX(VkImageViewHandleInfoNVX const *s1,
                                      VkImageViewHandleInfoNVX const *s2) {
  if ((s1->imageView != s2->imageView) || (s1->descriptorType != s2->descriptorType) ||
      (s1->sampler != s2->sampler) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 137 && VK_NVX_image_view_handle
bool compare_VkImageViewAddressPropertiesNVX(VkImageViewAddressPropertiesNVX const *s1,
                                             VkImageViewAddressPropertiesNVX const *s2) {
  if ((s1->deviceAddress != s2->deviceAddress) || (s1->size != s2->size) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_frame_token
bool compare_VkPresentFrameTokenGGP(VkPresentFrameTokenGGP const *s1,
                                    VkPresentFrameTokenGGP const *s2) {
  if ((s1->frameToken != s2->frameToken) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineCreationFeedback(VkPipelineCreationFeedback const *s1,
                                        VkPipelineCreationFeedback const *s2) {
  if ((s1->flags != s2->flags) || (s1->duration != s2->duration) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackEXT(VkPipelineCreationFeedbackEXT const *s1,
                                           VkPipelineCreationFeedbackEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->duration != s2->duration) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineCreationFeedbackCreateInfo(VkPipelineCreationFeedbackCreateInfo const *s1,
                                                  VkPipelineCreationFeedbackCreateInfo const *s2) {
  if ((s1->pipelineStageCreationFeedbackCount != s2->pipelineStageCreationFeedbackCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_pipeline_creation_feedback
bool compare_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *s1,
    VkPipelineCreationFeedbackCreateInfoEXT const *s2) {
  if ((s1->pipelineStageCreationFeedbackCount != s2->pipelineStageCreationFeedbackCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
bool compare_VkSurfaceFullScreenExclusiveInfoEXT(VkSurfaceFullScreenExclusiveInfoEXT const *s1,
                                                 VkSurfaceFullScreenExclusiveInfoEXT const *s2) {
  if ((s1->fullScreenExclusive != s2->fullScreenExclusive) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
bool compare_VkSurfaceFullScreenExclusiveWin32InfoEXT(
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *s1,
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *s2) {
  if ((s1->hmonitor != s2->hmonitor) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
bool compare_VkSurfaceCapabilitiesFullScreenExclusiveEXT(
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *s1,
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *s2) {
  if ((s1->fullScreenExclusiveSupported != s2->fullScreenExclusiveSupported) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkPhysicalDevicePresentBarrierFeaturesNV(
    VkPhysicalDevicePresentBarrierFeaturesNV const *s1,
    VkPhysicalDevicePresentBarrierFeaturesNV const *s2) {
  if ((s1->presentBarrier != s2->presentBarrier) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkSurfaceCapabilitiesPresentBarrierNV(
    VkSurfaceCapabilitiesPresentBarrierNV const *s1,
    VkSurfaceCapabilitiesPresentBarrierNV const *s2) {
  if ((s1->presentBarrierSupported != s2->presentBarrierSupported) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_present_barrier
bool compare_VkSwapchainPresentBarrierCreateInfoNV(
    VkSwapchainPresentBarrierCreateInfoNV const *s1,
    VkSwapchainPresentBarrierCreateInfoNV const *s2) {
  if ((s1->presentBarrierEnable != s2->presentBarrierEnable) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPhysicalDevicePerformanceQueryFeaturesKHR(
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *s1,
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *s2) {
  if ((s1->performanceCounterQueryPools != s2->performanceCounterQueryPools) ||
      (s1->performanceCounterMultipleQueryPools != s2->performanceCounterMultipleQueryPools) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPhysicalDevicePerformanceQueryPropertiesKHR(
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *s1,
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *s2) {
  if ((s1->allowCommandBufferQueryCopies != s2->allowCommandBufferQueryCopies) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceCounterKHR(VkPerformanceCounterKHR const *s1,
                                     VkPerformanceCounterKHR const *s2) {
  if ((s1->unit != s2->unit) || (s1->scope != s2->scope) || (s1->storage != s2->storage) || false)
    return false;

  for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
    if (s1->uuid[i] != s2->uuid[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceCounterDescriptionKHR(VkPerformanceCounterDescriptionKHR const *s1,
                                                VkPerformanceCounterDescriptionKHR const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->name[i] != s2->name[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->category[i] != s2->category[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->description[i] != s2->description[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkQueryPoolPerformanceCreateInfoKHR(VkQueryPoolPerformanceCreateInfoKHR const *s1,
                                                 VkQueryPoolPerformanceCreateInfoKHR const *s2) {
  if ((s1->queueFamilyIndex != s2->queueFamilyIndex) ||
      (s1->counterIndexCount != s2->counterIndexCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkAcquireProfilingLockInfoKHR(VkAcquireProfilingLockInfoKHR const *s1,
                                           VkAcquireProfilingLockInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->timeout != s2->timeout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
bool compare_VkPerformanceQuerySubmitInfoKHR(VkPerformanceQuerySubmitInfoKHR const *s1,
                                             VkPerformanceQuerySubmitInfoKHR const *s2) {
  if ((s1->counterPassIndex != s2->counterPassIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface
bool compare_VkHeadlessSurfaceCreateInfoEXT(VkHeadlessSurfaceCreateInfoEXT const *s1,
                                            VkHeadlessSurfaceCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkPhysicalDeviceCoverageReductionModeFeaturesNV(
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *s1,
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *s2) {
  if ((s1->coverageReductionMode != s2->coverageReductionMode) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkPipelineCoverageReductionStateCreateInfoNV(
    VkPipelineCoverageReductionStateCreateInfoNV const *s1,
    VkPipelineCoverageReductionStateCreateInfoNV const *s2) {
  if ((s1->flags != s2->flags) || (s1->coverageReductionMode != s2->coverageReductionMode) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
bool compare_VkFramebufferMixedSamplesCombinationNV(
    VkFramebufferMixedSamplesCombinationNV const *s1,
    VkFramebufferMixedSamplesCombinationNV const *s2) {
  if ((s1->coverageReductionMode != s2->coverageReductionMode) ||
      (s1->rasterizationSamples != s2->rasterizationSamples) ||
      (s1->depthStencilSamples != s2->depthStencilSamples) ||
      (s1->colorSamples != s2->colorSamples) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 115 && VK_INTEL_shader_integer_functions2
bool compare_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *s1,
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *s2) {
  if ((s1->shaderIntegerFunctions2 != s2->shaderIntegerFunctions2) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkInitializePerformanceApiInfoINTEL(VkInitializePerformanceApiInfoINTEL const *s1,
                                                 VkInitializePerformanceApiInfoINTEL const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query
bool compare_VkQueryPoolPerformanceQueryCreateInfoINTEL(
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *s1,
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *s2) {
  if ((s1->performanceCountersSampling != s2->performanceCountersSampling) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *s1,
                                        VkQueryPoolCreateInfoINTEL const *s2) {
  if ((s1->performanceCountersSampling != s2->performanceCountersSampling) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceMarkerInfoINTEL(VkPerformanceMarkerInfoINTEL const *s1,
                                          VkPerformanceMarkerInfoINTEL const *s2) {
  if ((s1->marker != s2->marker) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceStreamMarkerInfoINTEL(VkPerformanceStreamMarkerInfoINTEL const *s1,
                                                VkPerformanceStreamMarkerInfoINTEL const *s2) {
  if ((s1->marker != s2->marker) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceOverrideInfoINTEL(VkPerformanceOverrideInfoINTEL const *s1,
                                            VkPerformanceOverrideInfoINTEL const *s2) {
  if ((s1->type != s2->type) || (s1->enable != s2->enable) || (s1->parameter != s2->parameter) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
bool compare_VkPerformanceConfigurationAcquireInfoINTEL(
    VkPerformanceConfigurationAcquireInfoINTEL const *s1,
    VkPerformanceConfigurationAcquireInfoINTEL const *s2) {
  if ((s1->type != s2->type) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_shader_clock
bool compare_VkPhysicalDeviceShaderClockFeaturesKHR(
    VkPhysicalDeviceShaderClockFeaturesKHR const *s1,
    VkPhysicalDeviceShaderClockFeaturesKHR const *s2) {
  if ((s1->shaderSubgroupClock != s2->shaderSubgroupClock) ||
      (s1->shaderDeviceClock != s2->shaderDeviceClock) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_index_type_uint8
bool compare_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s1,
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *s2) {
  if ((s1->indexTypeUint8 != s2->indexTypeUint8) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
bool compare_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *s1,
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *s2) {
  if ((s1->shaderSMCount != s2->shaderSMCount) || (s1->shaderWarpsPerSM != s2->shaderWarpsPerSM) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
bool compare_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *s1,
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *s2) {
  if ((s1->shaderSMBuiltins != s2->shaderSMBuiltins) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 110 && VK_EXT_fragment_shader_interlock
bool compare_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *s1,
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *s2) {
  if ((s1->fragmentShaderSampleInterlock != s2->fragmentShaderSampleInterlock) ||
      (s1->fragmentShaderPixelInterlock != s2->fragmentShaderPixelInterlock) ||
      (s1->fragmentShaderShadingRateInterlock != s2->fragmentShaderShadingRateInterlock) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *s1,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *s2) {
  if ((s1->separateDepthStencilLayouts != s2->separateDepthStencilLayouts) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s1,
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *s2) {
  if ((s1->separateDepthStencilLayouts != s2->separateDepthStencilLayouts) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentReferenceStencilLayout(VkAttachmentReferenceStencilLayout const *s1,
                                                VkAttachmentReferenceStencilLayout const *s2) {
  if ((s1->stencilLayout != s2->stencilLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 190 && VK_EXT_primitive_topology_list_restart
bool compare_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *s1,
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *s2) {
  if ((s1->primitiveTopologyListRestart != s2->primitiveTopologyListRestart) ||
      (s1->primitiveTopologyPatchListRestart != s2->primitiveTopologyPatchListRestart) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentReferenceStencilLayoutKHR(
    VkAttachmentReferenceStencilLayoutKHR const *s1,
    VkAttachmentReferenceStencilLayoutKHR const *s2) {
  if ((s1->stencilLayout != s2->stencilLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkAttachmentDescriptionStencilLayout(VkAttachmentDescriptionStencilLayout const *s1,
                                                  VkAttachmentDescriptionStencilLayout const *s2) {
  if ((s1->stencilInitialLayout != s2->stencilInitialLayout) ||
      (s1->stencilFinalLayout != s2->stencilFinalLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
bool compare_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *s1,
    VkAttachmentDescriptionStencilLayoutKHR const *s2) {
  if ((s1->stencilInitialLayout != s2->stencilInitialLayout) ||
      (s1->stencilFinalLayout != s2->stencilFinalLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *s1,
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *s2) {
  if ((s1->pipelineExecutableInfo != s2->pipelineExecutableInfo) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineInfoKHR(VkPipelineInfoKHR const *s1, VkPipelineInfoKHR const *s2) {
  if ((s1->pipeline != s2->pipeline) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPipelineInfoEXT(VkPipelineInfoEXT const *s1, VkPipelineInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutablePropertiesKHR(VkPipelineExecutablePropertiesKHR const *s1,
                                               VkPipelineExecutablePropertiesKHR const *s2) {
  if ((s1->stages != s2->stages) || (s1->subgroupSize != s2->subgroupSize) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->name[i] != s2->name[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->description[i] != s2->description[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutableInfoKHR(VkPipelineExecutableInfoKHR const *s1,
                                         VkPipelineExecutableInfoKHR const *s2) {
  if ((s1->pipeline != s2->pipeline) || (s1->executableIndex != s2->executableIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
bool compare_VkPipelineExecutableInternalRepresentationKHR(
    VkPipelineExecutableInternalRepresentationKHR const *s1,
    VkPipelineExecutableInternalRepresentationKHR const *s2) {
  if ((s1->isText != s2->isText) || (s1->dataSize != s2->dataSize) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->name[i] != s2->name[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->description[i] != s2->description[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures const *s1,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures const *s2) {
  if ((s1->shaderDemoteToHelperInvocation != s2->shaderDemoteToHelperInvocation) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_shader_demote_to_helper_invocation
bool compare_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s1,
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *s2) {
  if ((s1->shaderDemoteToHelperInvocation != s2->shaderDemoteToHelperInvocation) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
bool compare_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *s1,
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *s2) {
  if ((s1->texelBufferAlignment != s2->texelBufferAlignment) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceTexelBufferAlignmentProperties(
    VkPhysicalDeviceTexelBufferAlignmentProperties const *s1,
    VkPhysicalDeviceTexelBufferAlignmentProperties const *s2) {
  if ((s1->storageTexelBufferOffsetAlignmentBytes != s2->storageTexelBufferOffsetAlignmentBytes) ||
      (s1->storageTexelBufferOffsetSingleTexelAlignment !=
       s2->storageTexelBufferOffsetSingleTexelAlignment) ||
      (s1->uniformTexelBufferOffsetAlignmentBytes != s2->uniformTexelBufferOffsetAlignmentBytes) ||
      (s1->uniformTexelBufferOffsetSingleTexelAlignment !=
       s2->uniformTexelBufferOffsetSingleTexelAlignment) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
bool compare_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s1,
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *s2) {
  if ((s1->storageTexelBufferOffsetAlignmentBytes != s2->storageTexelBufferOffsetAlignmentBytes) ||
      (s1->storageTexelBufferOffsetSingleTexelAlignment !=
       s2->storageTexelBufferOffsetSingleTexelAlignment) ||
      (s1->uniformTexelBufferOffsetAlignmentBytes != s2->uniformTexelBufferOffsetAlignmentBytes) ||
      (s1->uniformTexelBufferOffsetSingleTexelAlignment !=
       s2->uniformTexelBufferOffsetSingleTexelAlignment) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSubgroupSizeControlFeatures(
    VkPhysicalDeviceSubgroupSizeControlFeatures const *s1,
    VkPhysicalDeviceSubgroupSizeControlFeatures const *s2) {
  if ((s1->subgroupSizeControl != s2->subgroupSizeControl) ||
      (s1->computeFullSubgroups != s2->computeFullSubgroups) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 118 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *s2) {
  if ((s1->subgroupSizeControl != s2->subgroupSizeControl) ||
      (s1->computeFullSubgroups != s2->computeFullSubgroups) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSubgroupSizeControlProperties(
    VkPhysicalDeviceSubgroupSizeControlProperties const *s1,
    VkPhysicalDeviceSubgroupSizeControlProperties const *s2) {
  if ((s1->minSubgroupSize != s2->minSubgroupSize) ||
      (s1->maxSubgroupSize != s2->maxSubgroupSize) ||
      (s1->maxComputeWorkgroupSubgroups != s2->maxComputeWorkgroupSubgroups) ||
      (s1->requiredSubgroupSizeStages != s2->requiredSubgroupSizeStages) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 116 && VK_EXT_subgroup_size_control
bool compare_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s1,
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *s2) {
  if ((s1->minSubgroupSize != s2->minSubgroupSize) ||
      (s1->maxSubgroupSize != s2->maxSubgroupSize) ||
      (s1->maxComputeWorkgroupSubgroups != s2->maxComputeWorkgroupSubgroups) ||
      (s1->requiredSubgroupSizeStages != s2->requiredSubgroupSizeStages) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo const *s1,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo const *s2) {
  if ((s1->requiredSubgroupSize != s2->requiredSubgroupSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 116 && VK_EXT_subgroup_size_control
bool compare_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s1,
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *s2) {
  if ((s1->requiredSubgroupSize != s2->requiredSubgroupSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkSubpassShadingPipelineCreateInfoHUAWEI(
    VkSubpassShadingPipelineCreateInfoHUAWEI const *s1,
    VkSubpassShadingPipelineCreateInfoHUAWEI const *s2) {
  if ((s1->renderPass != s2->renderPass) || (s1->subpass != s2->subpass) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *s1,
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *s2) {
  if ((s1->maxSubpassShadingWorkgroupSizeAspectRatio !=
       s2->maxSubpassShadingWorkgroupSizeAspectRatio) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 239 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *s2) {
  if ((s1->maxOutputClusterCount != s2->maxOutputClusterCount) || false)
    return false;

  for (uint32_t i = 0; i < 3; ++i) {
    if (s1->maxWorkGroupCount[i] != s2->maxWorkGroupCount[i])
      return false;
  }
  for (uint32_t i = 0; i < 3; ++i) {
    if (s1->maxWorkGroupSize[i] != s2->maxWorkGroupSize[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkMemoryOpaqueCaptureAddressAllocateInfo(
    VkMemoryOpaqueCaptureAddressAllocateInfo const *s1,
    VkMemoryOpaqueCaptureAddressAllocateInfo const *s2) {
  if ((s1->opaqueCaptureAddress != s2->opaqueCaptureAddress) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
bool compare_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s1,
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *s2) {
  if ((s1->opaqueCaptureAddress != s2->opaqueCaptureAddress) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkDeviceMemoryOpaqueCaptureAddressInfo(
    VkDeviceMemoryOpaqueCaptureAddressInfo const *s1,
    VkDeviceMemoryOpaqueCaptureAddressInfo const *s2) {
  if ((s1->memory != s2->memory) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
bool compare_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s1,
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *s2) {
  if ((s1->memory != s2->memory) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s1,
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *s2) {
  if ((s1->rectangularLines != s2->rectangularLines) ||
      (s1->bresenhamLines != s2->bresenhamLines) || (s1->smoothLines != s2->smoothLines) ||
      (s1->stippledRectangularLines != s2->stippledRectangularLines) ||
      (s1->stippledBresenhamLines != s2->stippledBresenhamLines) ||
      (s1->stippledSmoothLines != s2->stippledSmoothLines) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
bool compare_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s1,
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *s2) {
  if ((s1->lineSubPixelPrecisionBits != s2->lineSubPixelPrecisionBits) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
bool compare_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *s1,
    VkPipelineRasterizationLineStateCreateInfoEXT const *s2) {
  if ((s1->lineRasterizationMode != s2->lineRasterizationMode) ||
      (s1->stippledLineEnable != s2->stippledLineEnable) ||
      (s1->lineStippleFactor != s2->lineStippleFactor) ||
      (s1->lineStipplePattern != s2->lineStipplePattern) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDevicePipelineCreationCacheControlFeatures(
    VkPhysicalDevicePipelineCreationCacheControlFeatures const *s1,
    VkPhysicalDevicePipelineCreationCacheControlFeatures const *s2) {
  if ((s1->pipelineCreationCacheControl != s2->pipelineCreationCacheControl) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_EXT_pipeline_creation_cache_control
bool compare_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s1,
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *s2) {
  if ((s1->pipelineCreationCacheControl != s2->pipelineCreationCacheControl) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan11Features(VkPhysicalDeviceVulkan11Features const *s1,
                                              VkPhysicalDeviceVulkan11Features const *s2) {
  if ((s1->storageBuffer16BitAccess != s2->storageBuffer16BitAccess) ||
      (s1->uniformAndStorageBuffer16BitAccess != s2->uniformAndStorageBuffer16BitAccess) ||
      (s1->storagePushConstant16 != s2->storagePushConstant16) ||
      (s1->storageInputOutput16 != s2->storageInputOutput16) || (s1->multiview != s2->multiview) ||
      (s1->multiviewGeometryShader != s2->multiviewGeometryShader) ||
      (s1->multiviewTessellationShader != s2->multiviewTessellationShader) ||
      (s1->variablePointersStorageBuffer != s2->variablePointersStorageBuffer) ||
      (s1->variablePointers != s2->variablePointers) ||
      (s1->protectedMemory != s2->protectedMemory) ||
      (s1->samplerYcbcrConversion != s2->samplerYcbcrConversion) ||
      (s1->shaderDrawParameters != s2->shaderDrawParameters) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan11Properties(VkPhysicalDeviceVulkan11Properties const *s1,
                                                VkPhysicalDeviceVulkan11Properties const *s2) {
  if ((s1->deviceNodeMask != s2->deviceNodeMask) || (s1->deviceLUIDValid != s2->deviceLUIDValid) ||
      (s1->subgroupSize != s2->subgroupSize) ||
      (s1->subgroupSupportedStages != s2->subgroupSupportedStages) ||
      (s1->subgroupSupportedOperations != s2->subgroupSupportedOperations) ||
      (s1->subgroupQuadOperationsInAllStages != s2->subgroupQuadOperationsInAllStages) ||
      (s1->pointClippingBehavior != s2->pointClippingBehavior) ||
      (s1->maxMultiviewViewCount != s2->maxMultiviewViewCount) ||
      (s1->maxMultiviewInstanceIndex != s2->maxMultiviewInstanceIndex) ||
      (s1->protectedNoFault != s2->protectedNoFault) ||
      (s1->maxPerSetDescriptors != s2->maxPerSetDescriptors) ||
      (s1->maxMemoryAllocationSize != s2->maxMemoryAllocationSize) || false)
    return false;

  for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
    if (s1->deviceUUID[i] != s2->deviceUUID[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
    if (s1->driverUUID[i] != s2->driverUUID[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_LUID_SIZE; ++i) {
    if (s1->deviceLUID[i] != s2->deviceLUID[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan12Features(VkPhysicalDeviceVulkan12Features const *s1,
                                              VkPhysicalDeviceVulkan12Features const *s2) {
  if ((s1->samplerMirrorClampToEdge != s2->samplerMirrorClampToEdge) ||
      (s1->drawIndirectCount != s2->drawIndirectCount) ||
      (s1->storageBuffer8BitAccess != s2->storageBuffer8BitAccess) ||
      (s1->uniformAndStorageBuffer8BitAccess != s2->uniformAndStorageBuffer8BitAccess) ||
      (s1->storagePushConstant8 != s2->storagePushConstant8) ||
      (s1->shaderBufferInt64Atomics != s2->shaderBufferInt64Atomics) ||
      (s1->shaderSharedInt64Atomics != s2->shaderSharedInt64Atomics) ||
      (s1->shaderFloat16 != s2->shaderFloat16) || (s1->shaderInt8 != s2->shaderInt8) ||
      (s1->descriptorIndexing != s2->descriptorIndexing) ||
      (s1->shaderInputAttachmentArrayDynamicIndexing !=
       s2->shaderInputAttachmentArrayDynamicIndexing) ||
      (s1->shaderUniformTexelBufferArrayDynamicIndexing !=
       s2->shaderUniformTexelBufferArrayDynamicIndexing) ||
      (s1->shaderStorageTexelBufferArrayDynamicIndexing !=
       s2->shaderStorageTexelBufferArrayDynamicIndexing) ||
      (s1->shaderUniformBufferArrayNonUniformIndexing !=
       s2->shaderUniformBufferArrayNonUniformIndexing) ||
      (s1->shaderSampledImageArrayNonUniformIndexing !=
       s2->shaderSampledImageArrayNonUniformIndexing) ||
      (s1->shaderStorageBufferArrayNonUniformIndexing !=
       s2->shaderStorageBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageImageArrayNonUniformIndexing !=
       s2->shaderStorageImageArrayNonUniformIndexing) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexing !=
       s2->shaderInputAttachmentArrayNonUniformIndexing) ||
      (s1->shaderUniformTexelBufferArrayNonUniformIndexing !=
       s2->shaderUniformTexelBufferArrayNonUniformIndexing) ||
      (s1->shaderStorageTexelBufferArrayNonUniformIndexing !=
       s2->shaderStorageTexelBufferArrayNonUniformIndexing) ||
      (s1->descriptorBindingUniformBufferUpdateAfterBind !=
       s2->descriptorBindingUniformBufferUpdateAfterBind) ||
      (s1->descriptorBindingSampledImageUpdateAfterBind !=
       s2->descriptorBindingSampledImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageImageUpdateAfterBind !=
       s2->descriptorBindingStorageImageUpdateAfterBind) ||
      (s1->descriptorBindingStorageBufferUpdateAfterBind !=
       s2->descriptorBindingStorageBufferUpdateAfterBind) ||
      (s1->descriptorBindingUniformTexelBufferUpdateAfterBind !=
       s2->descriptorBindingUniformTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingStorageTexelBufferUpdateAfterBind !=
       s2->descriptorBindingStorageTexelBufferUpdateAfterBind) ||
      (s1->descriptorBindingUpdateUnusedWhilePending !=
       s2->descriptorBindingUpdateUnusedWhilePending) ||
      (s1->descriptorBindingPartiallyBound != s2->descriptorBindingPartiallyBound) ||
      (s1->descriptorBindingVariableDescriptorCount !=
       s2->descriptorBindingVariableDescriptorCount) ||
      (s1->runtimeDescriptorArray != s2->runtimeDescriptorArray) ||
      (s1->samplerFilterMinmax != s2->samplerFilterMinmax) ||
      (s1->scalarBlockLayout != s2->scalarBlockLayout) ||
      (s1->imagelessFramebuffer != s2->imagelessFramebuffer) ||
      (s1->uniformBufferStandardLayout != s2->uniformBufferStandardLayout) ||
      (s1->shaderSubgroupExtendedTypes != s2->shaderSubgroupExtendedTypes) ||
      (s1->separateDepthStencilLayouts != s2->separateDepthStencilLayouts) ||
      (s1->hostQueryReset != s2->hostQueryReset) ||
      (s1->timelineSemaphore != s2->timelineSemaphore) ||
      (s1->bufferDeviceAddress != s2->bufferDeviceAddress) ||
      (s1->bufferDeviceAddressCaptureReplay != s2->bufferDeviceAddressCaptureReplay) ||
      (s1->bufferDeviceAddressMultiDevice != s2->bufferDeviceAddressMultiDevice) ||
      (s1->vulkanMemoryModel != s2->vulkanMemoryModel) ||
      (s1->vulkanMemoryModelDeviceScope != s2->vulkanMemoryModelDeviceScope) ||
      (s1->vulkanMemoryModelAvailabilityVisibilityChains !=
       s2->vulkanMemoryModelAvailabilityVisibilityChains) ||
      (s1->shaderOutputViewportIndex != s2->shaderOutputViewportIndex) ||
      (s1->shaderOutputLayer != s2->shaderOutputLayer) ||
      (s1->subgroupBroadcastDynamicId != s2->subgroupBroadcastDynamicId) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
bool compare_VkPhysicalDeviceVulkan12Properties(VkPhysicalDeviceVulkan12Properties const *s1,
                                                VkPhysicalDeviceVulkan12Properties const *s2) {
  if ((s1->driverID != s2->driverID) ||
      !compare_VkConformanceVersion(&s1->conformanceVersion, &s2->conformanceVersion) ||
      (s1->denormBehaviorIndependence != s2->denormBehaviorIndependence) ||
      (s1->roundingModeIndependence != s2->roundingModeIndependence) ||
      (s1->shaderSignedZeroInfNanPreserveFloat16 != s2->shaderSignedZeroInfNanPreserveFloat16) ||
      (s1->shaderSignedZeroInfNanPreserveFloat32 != s2->shaderSignedZeroInfNanPreserveFloat32) ||
      (s1->shaderSignedZeroInfNanPreserveFloat64 != s2->shaderSignedZeroInfNanPreserveFloat64) ||
      (s1->shaderDenormPreserveFloat16 != s2->shaderDenormPreserveFloat16) ||
      (s1->shaderDenormPreserveFloat32 != s2->shaderDenormPreserveFloat32) ||
      (s1->shaderDenormPreserveFloat64 != s2->shaderDenormPreserveFloat64) ||
      (s1->shaderDenormFlushToZeroFloat16 != s2->shaderDenormFlushToZeroFloat16) ||
      (s1->shaderDenormFlushToZeroFloat32 != s2->shaderDenormFlushToZeroFloat32) ||
      (s1->shaderDenormFlushToZeroFloat64 != s2->shaderDenormFlushToZeroFloat64) ||
      (s1->shaderRoundingModeRTEFloat16 != s2->shaderRoundingModeRTEFloat16) ||
      (s1->shaderRoundingModeRTEFloat32 != s2->shaderRoundingModeRTEFloat32) ||
      (s1->shaderRoundingModeRTEFloat64 != s2->shaderRoundingModeRTEFloat64) ||
      (s1->shaderRoundingModeRTZFloat16 != s2->shaderRoundingModeRTZFloat16) ||
      (s1->shaderRoundingModeRTZFloat32 != s2->shaderRoundingModeRTZFloat32) ||
      (s1->shaderRoundingModeRTZFloat64 != s2->shaderRoundingModeRTZFloat64) ||
      (s1->maxUpdateAfterBindDescriptorsInAllPools !=
       s2->maxUpdateAfterBindDescriptorsInAllPools) ||
      (s1->shaderUniformBufferArrayNonUniformIndexingNative !=
       s2->shaderUniformBufferArrayNonUniformIndexingNative) ||
      (s1->shaderSampledImageArrayNonUniformIndexingNative !=
       s2->shaderSampledImageArrayNonUniformIndexingNative) ||
      (s1->shaderStorageBufferArrayNonUniformIndexingNative !=
       s2->shaderStorageBufferArrayNonUniformIndexingNative) ||
      (s1->shaderStorageImageArrayNonUniformIndexingNative !=
       s2->shaderStorageImageArrayNonUniformIndexingNative) ||
      (s1->shaderInputAttachmentArrayNonUniformIndexingNative !=
       s2->shaderInputAttachmentArrayNonUniformIndexingNative) ||
      (s1->robustBufferAccessUpdateAfterBind != s2->robustBufferAccessUpdateAfterBind) ||
      (s1->quadDivergentImplicitLod != s2->quadDivergentImplicitLod) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSamplers !=
       s2->maxPerStageDescriptorUpdateAfterBindSamplers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindUniformBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindUniformBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageBuffers !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageBuffers) ||
      (s1->maxPerStageDescriptorUpdateAfterBindSampledImages !=
       s2->maxPerStageDescriptorUpdateAfterBindSampledImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindStorageImages !=
       s2->maxPerStageDescriptorUpdateAfterBindStorageImages) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInputAttachments !=
       s2->maxPerStageDescriptorUpdateAfterBindInputAttachments) ||
      (s1->maxPerStageUpdateAfterBindResources != s2->maxPerStageUpdateAfterBindResources) ||
      (s1->maxDescriptorSetUpdateAfterBindSamplers !=
       s2->maxDescriptorSetUpdateAfterBindSamplers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffers !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffers !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffers) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic !=
       s2->maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) ||
      (s1->maxDescriptorSetUpdateAfterBindSampledImages !=
       s2->maxDescriptorSetUpdateAfterBindSampledImages) ||
      (s1->maxDescriptorSetUpdateAfterBindStorageImages !=
       s2->maxDescriptorSetUpdateAfterBindStorageImages) ||
      (s1->maxDescriptorSetUpdateAfterBindInputAttachments !=
       s2->maxDescriptorSetUpdateAfterBindInputAttachments) ||
      (s1->supportedDepthResolveModes != s2->supportedDepthResolveModes) ||
      (s1->supportedStencilResolveModes != s2->supportedStencilResolveModes) ||
      (s1->independentResolveNone != s2->independentResolveNone) ||
      (s1->independentResolve != s2->independentResolve) ||
      (s1->filterMinmaxSingleComponentFormats != s2->filterMinmaxSingleComponentFormats) ||
      (s1->filterMinmaxImageComponentMapping != s2->filterMinmaxImageComponentMapping) ||
      (s1->maxTimelineSemaphoreValueDifference != s2->maxTimelineSemaphoreValueDifference) ||
      (s1->framebufferIntegerColorSampleCounts != s2->framebufferIntegerColorSampleCounts) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_DRIVER_NAME_SIZE; ++i) {
    if (s1->driverName[i] != s2->driverName[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_DRIVER_INFO_SIZE; ++i) {
    if (s1->driverInfo[i] != s2->driverInfo[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceVulkan13Features(VkPhysicalDeviceVulkan13Features const *s1,
                                              VkPhysicalDeviceVulkan13Features const *s2) {
  if ((s1->robustImageAccess != s2->robustImageAccess) ||
      (s1->inlineUniformBlock != s2->inlineUniformBlock) ||
      (s1->descriptorBindingInlineUniformBlockUpdateAfterBind !=
       s2->descriptorBindingInlineUniformBlockUpdateAfterBind) ||
      (s1->pipelineCreationCacheControl != s2->pipelineCreationCacheControl) ||
      (s1->privateData != s2->privateData) ||
      (s1->shaderDemoteToHelperInvocation != s2->shaderDemoteToHelperInvocation) ||
      (s1->shaderTerminateInvocation != s2->shaderTerminateInvocation) ||
      (s1->subgroupSizeControl != s2->subgroupSizeControl) ||
      (s1->computeFullSubgroups != s2->computeFullSubgroups) ||
      (s1->synchronization2 != s2->synchronization2) ||
      (s1->textureCompressionASTC_HDR != s2->textureCompressionASTC_HDR) ||
      (s1->shaderZeroInitializeWorkgroupMemory != s2->shaderZeroInitializeWorkgroupMemory) ||
      (s1->dynamicRendering != s2->dynamicRendering) ||
      (s1->shaderIntegerDotProduct != s2->shaderIntegerDotProduct) ||
      (s1->maintenance4 != s2->maintenance4) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceVulkan13Properties(VkPhysicalDeviceVulkan13Properties const *s1,
                                                VkPhysicalDeviceVulkan13Properties const *s2) {
  if ((s1->minSubgroupSize != s2->minSubgroupSize) ||
      (s1->maxSubgroupSize != s2->maxSubgroupSize) ||
      (s1->maxComputeWorkgroupSubgroups != s2->maxComputeWorkgroupSubgroups) ||
      (s1->requiredSubgroupSizeStages != s2->requiredSubgroupSizeStages) ||
      (s1->maxInlineUniformBlockSize != s2->maxInlineUniformBlockSize) ||
      (s1->maxPerStageDescriptorInlineUniformBlocks !=
       s2->maxPerStageDescriptorInlineUniformBlocks) ||
      (s1->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks !=
       s2->maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks) ||
      (s1->maxDescriptorSetInlineUniformBlocks != s2->maxDescriptorSetInlineUniformBlocks) ||
      (s1->maxDescriptorSetUpdateAfterBindInlineUniformBlocks !=
       s2->maxDescriptorSetUpdateAfterBindInlineUniformBlocks) ||
      (s1->maxInlineUniformTotalSize != s2->maxInlineUniformTotalSize) ||
      (s1->integerDotProduct8BitUnsignedAccelerated !=
       s2->integerDotProduct8BitUnsignedAccelerated) ||
      (s1->integerDotProduct8BitSignedAccelerated != s2->integerDotProduct8BitSignedAccelerated) ||
      (s1->integerDotProduct8BitMixedSignednessAccelerated !=
       s2->integerDotProduct8BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProduct4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedSignedAccelerated !=
       s2->integerDotProduct4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProduct4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProduct16BitUnsignedAccelerated !=
       s2->integerDotProduct16BitUnsignedAccelerated) ||
      (s1->integerDotProduct16BitSignedAccelerated !=
       s2->integerDotProduct16BitSignedAccelerated) ||
      (s1->integerDotProduct16BitMixedSignednessAccelerated !=
       s2->integerDotProduct16BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct32BitUnsignedAccelerated !=
       s2->integerDotProduct32BitUnsignedAccelerated) ||
      (s1->integerDotProduct32BitSignedAccelerated !=
       s2->integerDotProduct32BitSignedAccelerated) ||
      (s1->integerDotProduct32BitMixedSignednessAccelerated !=
       s2->integerDotProduct32BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct64BitUnsignedAccelerated !=
       s2->integerDotProduct64BitUnsignedAccelerated) ||
      (s1->integerDotProduct64BitSignedAccelerated !=
       s2->integerDotProduct64BitSignedAccelerated) ||
      (s1->integerDotProduct64BitMixedSignednessAccelerated !=
       s2->integerDotProduct64BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated) ||
      (s1->storageTexelBufferOffsetAlignmentBytes != s2->storageTexelBufferOffsetAlignmentBytes) ||
      (s1->storageTexelBufferOffsetSingleTexelAlignment !=
       s2->storageTexelBufferOffsetSingleTexelAlignment) ||
      (s1->uniformTexelBufferOffsetAlignmentBytes != s2->uniformTexelBufferOffsetAlignmentBytes) ||
      (s1->uniformTexelBufferOffsetSingleTexelAlignment !=
       s2->uniformTexelBufferOffsetSingleTexelAlignment) ||
      (s1->maxBufferSize != s2->maxBufferSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control
bool compare_VkPipelineCompilerControlCreateInfoAMD(
    VkPipelineCompilerControlCreateInfoAMD const *s1,
    VkPipelineCompilerControlCreateInfoAMD const *s2) {
  if ((s1->compilerControlFlags != s2->compilerControlFlags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 121 && VK_AMD_device_coherent_memory
bool compare_VkPhysicalDeviceCoherentMemoryFeaturesAMD(
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *s1,
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *s2) {
  if ((s1->deviceCoherentMemory != s2->deviceCoherentMemory) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceToolProperties(VkPhysicalDeviceToolProperties const *s1,
                                            VkPhysicalDeviceToolProperties const *s2) {
  if ((s1->purposes != s2->purposes) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_EXTENSION_NAME_SIZE; ++i) {
    if (s1->name[i] != s2->name[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_EXTENSION_NAME_SIZE; ++i) {
    if (s1->version[i] != s2->version[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->description[i] != s2->description[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_EXTENSION_NAME_SIZE; ++i) {
    if (s1->layer[i] != s2->layer[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 130 && VK_EXT_tooling_info
bool compare_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *s1,
                                               VkPhysicalDeviceToolPropertiesEXT const *s2) {
  if ((s1->purposes != s2->purposes) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_EXTENSION_NAME_SIZE; ++i) {
    if (s1->name[i] != s2->name[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_EXTENSION_NAME_SIZE; ++i) {
    if (s1->version[i] != s2->version[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->description[i] != s2->description[i])
      return false;
  }
  for (uint32_t i = 0; i < VK_MAX_EXTENSION_NAME_SIZE; ++i) {
    if (s1->layer[i] != s2->layer[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
bool compare_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *s1,
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *s2) {
  if ((s1->maxCustomBorderColorSamplers != s2->maxCustomBorderColorSamplers) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
bool compare_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *s1,
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *s2) {
  if ((s1->customBorderColors != s2->customBorderColors) ||
      (s1->customBorderColorWithoutFormat != s2->customBorderColorWithoutFormat) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
bool compare_VkSamplerBorderColorComponentMappingCreateInfoEXT(
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *s1,
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *s2) {
  if (!compare_VkComponentMapping(&s1->components, &s2->components) || (s1->srgb != s2->srgb) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
bool compare_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *s1,
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *s2) {
  if ((s1->borderColorSwizzle != s2->borderColorSwizzle) ||
      (s1->borderColorSwizzleFromImage != s2->borderColorSwizzleFromImage) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureBuildRangeInfoKHR(
    VkAccelerationStructureBuildRangeInfoKHR const *s1,
    VkAccelerationStructureBuildRangeInfoKHR const *s2) {
  if ((s1->primitiveCount != s2->primitiveCount) || (s1->primitiveOffset != s2->primitiveOffset) ||
      (s1->firstVertex != s2->firstVertex) || (s1->transformOffset != s2->transformOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkAccelerationStructureCreateInfoKHR(VkAccelerationStructureCreateInfoKHR const *s1,
                                                  VkAccelerationStructureCreateInfoKHR const *s2) {
  if (
#if VK_HEADER_VERSION >= 162
      (s1->createFlags != s2->createFlags) ||
#endif
#if VK_HEADER_VERSION >= 162
      (s1->buffer != s2->buffer) ||
#endif
#if VK_HEADER_VERSION >= 162
      (s1->offset != s2->offset) ||
#endif
#if VK_HEADER_VERSION >= 162
      (s1->size != s2->size) ||
#endif
      (s1->type != s2->type) || (s1->deviceAddress != s2->deviceAddress) ||
#if VK_HEADER_VERSION <= 161
      (s1->compactedSize != s2->compactedSize) ||
#endif
#if VK_HEADER_VERSION <= 161
      (s1->flags != s2->flags) ||
#endif
#if VK_HEADER_VERSION <= 161
      (s1->maxGeometryCount != s2->maxGeometryCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkAabbPositionsKHR(VkAabbPositionsKHR const *s1, VkAabbPositionsKHR const *s2) {
  if ((s1->minX != s2->minX) || (s1->minY != s2->minY) || (s1->minZ != s2->minZ) ||
      (s1->maxX != s2->maxX) || (s1->maxY != s2->maxY) || (s1->maxZ != s2->maxZ) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkAabbPositionsNV(VkAabbPositionsNV const *s1, VkAabbPositionsNV const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkTransformMatrixKHR(VkTransformMatrixKHR const *s1, VkTransformMatrixKHR const *s2) {
  for (uint32_t i = 0; i < 3 * 4; ++i) {
    if (s1->matrix[i] != s2->matrix[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkTransformMatrixNV(VkTransformMatrixNV const *s1, VkTransformMatrixNV const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkAccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR const *s1,
                                                VkAccelerationStructureInstanceKHR const *s2) {
  if (!compare_VkTransformMatrixKHR(&s1->transform, &s2->transform) ||
      (s1->instanceCustomIndex != s2->instanceCustomIndex) || (s1->mask != s2->mask) ||
      (s1->instanceShaderBindingTableRecordOffset != s2->instanceShaderBindingTableRecordOffset) ||
      (s1->flags != s2->flags) ||
      (s1->accelerationStructureReference != s2->accelerationStructureReference) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
bool compare_VkAccelerationStructureInstanceNV(VkAccelerationStructureInstanceNV const *s1,
                                               VkAccelerationStructureInstanceNV const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkAccelerationStructureDeviceAddressInfoKHR(
    VkAccelerationStructureDeviceAddressInfoKHR const *s1,
    VkAccelerationStructureDeviceAddressInfoKHR const *s2) {
  if ((s1->accelerationStructure != s2->accelerationStructure) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureVersionInfoKHR(
    VkAccelerationStructureVersionInfoKHR const *s1,
    VkAccelerationStructureVersionInfoKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_acceleration_structure || VK_KHR_ray_tracing)
bool compare_VkCopyAccelerationStructureInfoKHR(VkCopyAccelerationStructureInfoKHR const *s1,
                                                VkCopyAccelerationStructureInfoKHR const *s2) {
  if ((s1->src != s2->src) || (s1->dst != s2->dst) || (s1->mode != s2->mode) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && (VK_KHR_ray_tracing_pipeline || VK_KHR_ray_tracing)
bool compare_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s1,
    VkRayTracingPipelineInterfaceCreateInfoKHR const *s2) {
  if (
#if VK_HEADER_VERSION >= 162
      (s1->maxPipelineRayPayloadSize != s2->maxPipelineRayPayloadSize) ||
#endif
#if VK_HEADER_VERSION >= 162
      (s1->maxPipelineRayHitAttributeSize != s2->maxPipelineRayHitAttributeSize) ||
#endif
#if VK_HEADER_VERSION <= 161
      (s1->maxPayloadSize != s2->maxPayloadSize) ||
#endif
#if VK_HEADER_VERSION <= 161
      (s1->maxAttributeSize != s2->maxAttributeSize) ||
#endif
#if VK_HEADER_VERSION <= 161
      (s1->maxCallableSize != s2->maxCallableSize) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_pipeline_library
bool compare_VkPipelineLibraryCreateInfoKHR(VkPipelineLibraryCreateInfoKHR const *s1,
                                            VkPipelineLibraryCreateInfoKHR const *s2) {
  if ((s1->libraryCount != s2->libraryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 145 && VK_EXT_extended_dynamic_state
bool compare_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *s2) {
  if ((s1->extendedDynamicState != s2->extendedDynamicState) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 176 && VK_EXT_extended_dynamic_state2
bool compare_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *s2) {
  if ((s1->extendedDynamicState2 != s2->extendedDynamicState2) ||
      (s1->extendedDynamicState2LogicOp != s2->extendedDynamicState2LogicOp) ||
      (s1->extendedDynamicState2PatchControlPoints !=
       s2->extendedDynamicState2PatchControlPoints) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT const *s2) {
  if ((s1->extendedDynamicState3TessellationDomainOrigin !=
       s2->extendedDynamicState3TessellationDomainOrigin) ||
      (s1->extendedDynamicState3DepthClampEnable != s2->extendedDynamicState3DepthClampEnable) ||
      (s1->extendedDynamicState3PolygonMode != s2->extendedDynamicState3PolygonMode) ||
      (s1->extendedDynamicState3RasterizationSamples !=
       s2->extendedDynamicState3RasterizationSamples) ||
      (s1->extendedDynamicState3SampleMask != s2->extendedDynamicState3SampleMask) ||
      (s1->extendedDynamicState3AlphaToCoverageEnable !=
       s2->extendedDynamicState3AlphaToCoverageEnable) ||
      (s1->extendedDynamicState3AlphaToOneEnable != s2->extendedDynamicState3AlphaToOneEnable) ||
      (s1->extendedDynamicState3LogicOpEnable != s2->extendedDynamicState3LogicOpEnable) ||
      (s1->extendedDynamicState3ColorBlendEnable != s2->extendedDynamicState3ColorBlendEnable) ||
      (s1->extendedDynamicState3ColorBlendEquation !=
       s2->extendedDynamicState3ColorBlendEquation) ||
      (s1->extendedDynamicState3ColorWriteMask != s2->extendedDynamicState3ColorWriteMask) ||
      (s1->extendedDynamicState3RasterizationStream !=
       s2->extendedDynamicState3RasterizationStream) ||
      (s1->extendedDynamicState3ConservativeRasterizationMode !=
       s2->extendedDynamicState3ConservativeRasterizationMode) ||
      (s1->extendedDynamicState3ExtraPrimitiveOverestimationSize !=
       s2->extendedDynamicState3ExtraPrimitiveOverestimationSize) ||
      (s1->extendedDynamicState3DepthClipEnable != s2->extendedDynamicState3DepthClipEnable) ||
      (s1->extendedDynamicState3SampleLocationsEnable !=
       s2->extendedDynamicState3SampleLocationsEnable) ||
      (s1->extendedDynamicState3ColorBlendAdvanced !=
       s2->extendedDynamicState3ColorBlendAdvanced) ||
      (s1->extendedDynamicState3ProvokingVertexMode !=
       s2->extendedDynamicState3ProvokingVertexMode) ||
      (s1->extendedDynamicState3LineRasterizationMode !=
       s2->extendedDynamicState3LineRasterizationMode) ||
      (s1->extendedDynamicState3LineStippleEnable != s2->extendedDynamicState3LineStippleEnable) ||
      (s1->extendedDynamicState3DepthClipNegativeOneToOne !=
       s2->extendedDynamicState3DepthClipNegativeOneToOne) ||
      (s1->extendedDynamicState3ViewportWScalingEnable !=
       s2->extendedDynamicState3ViewportWScalingEnable) ||
      (s1->extendedDynamicState3ViewportSwizzle != s2->extendedDynamicState3ViewportSwizzle) ||
      (s1->extendedDynamicState3CoverageToColorEnable !=
       s2->extendedDynamicState3CoverageToColorEnable) ||
      (s1->extendedDynamicState3CoverageToColorLocation !=
       s2->extendedDynamicState3CoverageToColorLocation) ||
      (s1->extendedDynamicState3CoverageModulationMode !=
       s2->extendedDynamicState3CoverageModulationMode) ||
      (s1->extendedDynamicState3CoverageModulationTableEnable !=
       s2->extendedDynamicState3CoverageModulationTableEnable) ||
      (s1->extendedDynamicState3CoverageModulationTable !=
       s2->extendedDynamicState3CoverageModulationTable) ||
      (s1->extendedDynamicState3CoverageReductionMode !=
       s2->extendedDynamicState3CoverageReductionMode) ||
      (s1->extendedDynamicState3RepresentativeFragmentTestEnable !=
       s2->extendedDynamicState3RepresentativeFragmentTestEnable) ||
      (s1->extendedDynamicState3ShadingRateImageEnable !=
       s2->extendedDynamicState3ShadingRateImageEnable) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(
    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT const *s1,
    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT const *s2) {
  if ((s1->dynamicPrimitiveTopologyUnrestricted != s2->dynamicPrimitiveTopologyUnrestricted) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkColorBlendEquationEXT(VkColorBlendEquationEXT const *s1,
                                     VkColorBlendEquationEXT const *s2) {
  if ((s1->srcColorBlendFactor != s2->srcColorBlendFactor) ||
      (s1->dstColorBlendFactor != s2->dstColorBlendFactor) ||
      (s1->colorBlendOp != s2->colorBlendOp) ||
      (s1->srcAlphaBlendFactor != s2->srcAlphaBlendFactor) ||
      (s1->dstAlphaBlendFactor != s2->dstAlphaBlendFactor) ||
      (s1->alphaBlendOp != s2->alphaBlendOp) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3
bool compare_VkColorBlendAdvancedEXT(VkColorBlendAdvancedEXT const *s1,
                                     VkColorBlendAdvancedEXT const *s2) {
  if ((s1->advancedBlendOp != s2->advancedBlendOp) ||
      (s1->srcPremultiplied != s2->srcPremultiplied) ||
      (s1->dstPremultiplied != s2->dstPremultiplied) || (s1->blendOverlap != s2->blendOverlap) ||
      (s1->clampResults != s2->clampResults) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
bool compare_VkRenderPassTransformBeginInfoQCOM(VkRenderPassTransformBeginInfoQCOM const *s1,
                                                VkRenderPassTransformBeginInfoQCOM const *s2) {
  if ((s1->transform != s2->transform) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 159 && VK_QCOM_rotated_copy_commands
bool compare_VkCopyCommandTransformInfoQCOM(VkCopyCommandTransformInfoQCOM const *s1,
                                            VkCopyCommandTransformInfoQCOM const *s2) {
  if ((s1->transform != s2->transform) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
bool compare_VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *s1,
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *s2) {
  if ((s1->transform != s2->transform) || !compare_VkRect2D(&s1->renderArea, &s2->renderArea) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
bool compare_VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *s1,
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *s2) {
  if ((s1->diagnosticsConfig != s2->diagnosticsConfig) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
bool compare_VkDeviceDiagnosticsConfigCreateInfoNV(
    VkDeviceDiagnosticsConfigCreateInfoNV const *s1,
    VkDeviceDiagnosticsConfigCreateInfoNV const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures const *s1,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures const *s2) {
  if ((s1->shaderZeroInitializeWorkgroupMemory != s2->shaderZeroInitializeWorkgroupMemory) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_zero_initialize_workgroup_memory
bool compare_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s1,
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *s2) {
  if ((s1->shaderZeroInitializeWorkgroupMemory != s2->shaderZeroInitializeWorkgroupMemory) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 180 && VK_KHR_shader_subgroup_uniform_control_flow
bool compare_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *s1,
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *s2) {
  if ((s1->shaderSubgroupUniformControlFlow != s2->shaderSubgroupUniformControlFlow) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 139 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *s1,
    VkPhysicalDeviceRobustness2FeaturesEXT const *s2) {
  if ((s1->robustBufferAccess2 != s2->robustBufferAccess2) ||
      (s1->robustImageAccess2 != s2->robustImageAccess2) ||
      (s1->nullDescriptor != s2->nullDescriptor) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 139 && VK_EXT_robustness2
bool compare_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *s1,
    VkPhysicalDeviceRobustness2PropertiesEXT const *s2) {
  if ((s1->robustStorageBufferAccessSizeAlignment != s2->robustStorageBufferAccessSizeAlignment) ||
      (s1->robustUniformBufferAccessSizeAlignment != s2->robustUniformBufferAccessSizeAlignment) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceImageRobustnessFeatures(
    VkPhysicalDeviceImageRobustnessFeatures const *s1,
    VkPhysicalDeviceImageRobustnessFeatures const *s2) {
  if ((s1->robustImageAccess != s2->robustImageAccess) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_image_robustness
bool compare_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s1,
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *s2) {
  if ((s1->robustImageAccess != s2->robustImageAccess) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_workgroup_memory_explicit_layout
bool compare_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *s1,
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *s2) {
  if ((s1->workgroupMemoryExplicitLayout != s2->workgroupMemoryExplicitLayout) ||
      (s1->workgroupMemoryExplicitLayoutScalarBlockLayout !=
       s2->workgroupMemoryExplicitLayoutScalarBlockLayout) ||
      (s1->workgroupMemoryExplicitLayout8BitAccess !=
       s2->workgroupMemoryExplicitLayout8BitAccess) ||
      (s1->workgroupMemoryExplicitLayout16BitAccess !=
       s2->workgroupMemoryExplicitLayout16BitAccess) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset
bool compare_VkPhysicalDevicePortabilitySubsetFeaturesKHR(
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *s1,
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *s2) {
  if ((s1->constantAlphaColorBlendFactors != s2->constantAlphaColorBlendFactors) ||
      (s1->events != s2->events) ||
      (s1->imageViewFormatReinterpretation != s2->imageViewFormatReinterpretation) ||
      (s1->imageViewFormatSwizzle != s2->imageViewFormatSwizzle) ||
      (s1->imageView2DOn3DImage != s2->imageView2DOn3DImage) ||
      (s1->multisampleArrayImage != s2->multisampleArrayImage) ||
      (s1->mutableComparisonSamplers != s2->mutableComparisonSamplers) ||
      (s1->pointPolygons != s2->pointPolygons) ||
      (s1->samplerMipLodBias != s2->samplerMipLodBias) ||
      (s1->separateStencilMaskRef != s2->separateStencilMaskRef) ||
      (s1->shaderSampleRateInterpolationFunctions != s2->shaderSampleRateInterpolationFunctions) ||
      (s1->tessellationIsolines != s2->tessellationIsolines) ||
      (s1->tessellationPointMode != s2->tessellationPointMode) ||
      (s1->triangleFans != s2->triangleFans) ||
      (s1->vertexAttributeAccessBeyondStride != s2->vertexAttributeAccessBeyondStride) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset
bool compare_VkPhysicalDevicePortabilitySubsetPropertiesKHR(
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *s1,
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *s2) {
  if ((s1->minVertexInputBindingStrideAlignment != s2->minVertexInputBindingStrideAlignment) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 149 && VK_EXT_4444_formats
bool compare_VkPhysicalDevice4444FormatsFeaturesEXT(
    VkPhysicalDevice4444FormatsFeaturesEXT const *s1,
    VkPhysicalDevice4444FormatsFeaturesEXT const *s2) {
  if ((s1->formatA4R4G4B4 != s2->formatA4R4G4B4) || (s1->formatA4B4G4R4 != s2->formatA4B4G4R4) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
bool compare_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *s1,
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *s2) {
  if ((s1->subpassShading != s2->subpassShading) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 239 && VK_HUAWEI_cluster_culling_shader
bool compare_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI const *s1,
    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI const *s2) {
  if ((s1->clustercullingShader != s2->clustercullingShader) ||
      (s1->multiviewClusterCullingShader != s2->multiviewClusterCullingShader) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferCopy2(VkBufferCopy2 const *s1, VkBufferCopy2 const *s2) {
  if ((s1->srcOffset != s2->srcOffset) || (s1->dstOffset != s2->dstOffset) ||
      (s1->size != s2->size) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkBufferCopy2KHR(VkBufferCopy2KHR const *s1, VkBufferCopy2KHR const *s2) {
  if ((s1->srcOffset != s2->srcOffset) || (s1->dstOffset != s2->dstOffset) ||
      (s1->size != s2->size) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageCopy2(VkImageCopy2 const *s1, VkImageCopy2 const *s2) {
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkImageCopy2KHR(VkImageCopy2KHR const *s1, VkImageCopy2KHR const *s2) {
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageBlit2(VkImageBlit2 const *s1, VkImageBlit2 const *s2) {
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) || false)
    return false;

  for (uint32_t i = 0; i < 2; ++i) {
    if (compare_VkOffset3D(&s1->srcOffsets[i], &s2->srcOffsets[i]))
      return false;
  }
  for (uint32_t i = 0; i < 2; ++i) {
    if (compare_VkOffset3D(&s1->dstOffsets[i], &s2->dstOffsets[i]))
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkImageBlit2KHR(VkImageBlit2KHR const *s1, VkImageBlit2KHR const *s2) {
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) || false)
    return false;

  for (uint32_t i = 0; i < 2; ++i) {
    if (compare_VkOffset3D(&s1->srcOffsets[i], &s2->srcOffsets[i]))
      return false;
  }
  for (uint32_t i = 0; i < 2; ++i) {
    if (compare_VkOffset3D(&s1->dstOffsets[i], &s2->dstOffsets[i]))
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferImageCopy2(VkBufferImageCopy2 const *s1, VkBufferImageCopy2 const *s2) {
  if ((s1->bufferOffset != s2->bufferOffset) || (s1->bufferRowLength != s2->bufferRowLength) ||
      (s1->bufferImageHeight != s2->bufferImageHeight) ||
      !compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *s1,
                                   VkBufferImageCopy2KHR const *s2) {
  if ((s1->bufferOffset != s2->bufferOffset) || (s1->bufferRowLength != s2->bufferRowLength) ||
      (s1->bufferImageHeight != s2->bufferImageHeight) ||
      !compare_VkImageSubresourceLayers(&s1->imageSubresource, &s2->imageSubresource) ||
      !compare_VkOffset3D(&s1->imageOffset, &s2->imageOffset) ||
      !compare_VkExtent3D(&s1->imageExtent, &s2->imageExtent) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageResolve2(VkImageResolve2 const *s1, VkImageResolve2 const *s2) {
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkImageResolve2KHR(VkImageResolve2KHR const *s1, VkImageResolve2KHR const *s2) {
  if (!compare_VkImageSubresourceLayers(&s1->srcSubresource, &s2->srcSubresource) ||
      !compare_VkOffset3D(&s1->srcOffset, &s2->srcOffset) ||
      !compare_VkImageSubresourceLayers(&s1->dstSubresource, &s2->dstSubresource) ||
      !compare_VkOffset3D(&s1->dstOffset, &s2->dstOffset) ||
      !compare_VkExtent3D(&s1->extent, &s2->extent) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyBufferInfo2(VkCopyBufferInfo2 const *s1, VkCopyBufferInfo2 const *s2) {
  if ((s1->srcBuffer != s2->srcBuffer) || (s1->dstBuffer != s2->dstBuffer) ||
      (s1->regionCount != s2->regionCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *s1, VkCopyBufferInfo2KHR const *s2) {
  if ((s1->srcBuffer != s2->srcBuffer) || (s1->dstBuffer != s2->dstBuffer) ||
      (s1->regionCount != s2->regionCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyImageInfo2(VkCopyImageInfo2 const *s1, VkCopyImageInfo2 const *s2) {
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *s1, VkCopyImageInfo2KHR const *s2) {
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBlitImageInfo2(VkBlitImageInfo2 const *s1, VkBlitImageInfo2 const *s2) {
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount) || (s1->filter != s2->filter) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *s1, VkBlitImageInfo2KHR const *s2) {
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount) || (s1->filter != s2->filter) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyBufferToImageInfo2(VkCopyBufferToImageInfo2 const *s1,
                                      VkCopyBufferToImageInfo2 const *s2) {
  if ((s1->srcBuffer != s2->srcBuffer) || (s1->dstImage != s2->dstImage) ||
      (s1->dstImageLayout != s2->dstImageLayout) || (s1->regionCount != s2->regionCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *s1,
                                         VkCopyBufferToImageInfo2KHR const *s2) {
  if ((s1->srcBuffer != s2->srcBuffer) || (s1->dstImage != s2->dstImage) ||
      (s1->dstImageLayout != s2->dstImageLayout) || (s1->regionCount != s2->regionCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCopyImageToBufferInfo2(VkCopyImageToBufferInfo2 const *s1,
                                      VkCopyImageToBufferInfo2 const *s2) {
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstBuffer != s2->dstBuffer) || (s1->regionCount != s2->regionCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *s1,
                                         VkCopyImageToBufferInfo2KHR const *s2) {
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstBuffer != s2->dstBuffer) || (s1->regionCount != s2->regionCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkResolveImageInfo2(VkResolveImageInfo2 const *s1, VkResolveImageInfo2 const *s2) {
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
bool compare_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *s1,
                                    VkResolveImageInfo2KHR const *s2) {
  if ((s1->srcImage != s2->srcImage) || (s1->srcImageLayout != s2->srcImageLayout) ||
      (s1->dstImage != s2->dstImage) || (s1->dstImageLayout != s2->dstImageLayout) ||
      (s1->regionCount != s2->regionCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 155 && VK_EXT_shader_image_atomic_int64
bool compare_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *s1,
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *s2) {
  if ((s1->shaderImageInt64Atomics != s2->shaderImageInt64Atomics) ||
      (s1->sparseImageInt64Atomics != s2->sparseImageInt64Atomics) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkFragmentShadingRateAttachmentInfoKHR(
    VkFragmentShadingRateAttachmentInfoKHR const *s1,
    VkFragmentShadingRateAttachmentInfoKHR const *s2) {
  if (!compare_VkExtent2D(&s1->shadingRateAttachmentTexelSize,
                          &s2->shadingRateAttachmentTexelSize) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPipelineFragmentShadingRateStateCreateInfoKHR(
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *s1,
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *s2) {
  if (!compare_VkExtent2D(&s1->fragmentSize, &s2->fragmentSize) || false)
    return false;

  for (uint32_t i = 0; i < 2; ++i) {
    if (s1->combinerOps[i] != s2->combinerOps[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRateFeaturesKHR(
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *s1,
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *s2) {
  if ((s1->pipelineFragmentShadingRate != s2->pipelineFragmentShadingRate) ||
      (s1->primitiveFragmentShadingRate != s2->primitiveFragmentShadingRate) ||
      (s1->attachmentFragmentShadingRate != s2->attachmentFragmentShadingRate) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRatePropertiesKHR(
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *s1,
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *s2) {
  if (!compare_VkExtent2D(&s1->minFragmentShadingRateAttachmentTexelSize,
                          &s2->minFragmentShadingRateAttachmentTexelSize) ||
      !compare_VkExtent2D(&s1->maxFragmentShadingRateAttachmentTexelSize,
                          &s2->maxFragmentShadingRateAttachmentTexelSize) ||
      (s1->maxFragmentShadingRateAttachmentTexelSizeAspectRatio !=
       s2->maxFragmentShadingRateAttachmentTexelSizeAspectRatio) ||
      (s1->primitiveFragmentShadingRateWithMultipleViewports !=
       s2->primitiveFragmentShadingRateWithMultipleViewports) ||
      (s1->layeredShadingRateAttachments != s2->layeredShadingRateAttachments) ||
      (s1->fragmentShadingRateNonTrivialCombinerOps !=
       s2->fragmentShadingRateNonTrivialCombinerOps) ||
      !compare_VkExtent2D(&s1->maxFragmentSize, &s2->maxFragmentSize) ||
      (s1->maxFragmentSizeAspectRatio != s2->maxFragmentSizeAspectRatio) ||
      (s1->maxFragmentShadingRateCoverageSamples != s2->maxFragmentShadingRateCoverageSamples) ||
      (s1->maxFragmentShadingRateRasterizationSamples !=
       s2->maxFragmentShadingRateRasterizationSamples) ||
      (s1->fragmentShadingRateWithShaderDepthStencilWrites !=
       s2->fragmentShadingRateWithShaderDepthStencilWrites) ||
      (s1->fragmentShadingRateWithSampleMask != s2->fragmentShadingRateWithSampleMask) ||
      (s1->fragmentShadingRateWithShaderSampleMask !=
       s2->fragmentShadingRateWithShaderSampleMask) ||
      (s1->fragmentShadingRateWithConservativeRasterization !=
       s2->fragmentShadingRateWithConservativeRasterization) ||
      (s1->fragmentShadingRateWithFragmentShaderInterlock !=
       s2->fragmentShadingRateWithFragmentShaderInterlock) ||
      (s1->fragmentShadingRateWithCustomSampleLocations !=
       s2->fragmentShadingRateWithCustomSampleLocations) ||
      (s1->fragmentShadingRateStrictMultiplyCombiner !=
       s2->fragmentShadingRateStrictMultiplyCombiner) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
bool compare_VkPhysicalDeviceFragmentShadingRateKHR(
    VkPhysicalDeviceFragmentShadingRateKHR const *s1,
    VkPhysicalDeviceFragmentShadingRateKHR const *s2) {
  if ((s1->sampleCounts != s2->sampleCounts) ||
      !compare_VkExtent2D(&s1->fragmentSize, &s2->fragmentSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderTerminateInvocationFeatures(
    VkPhysicalDeviceShaderTerminateInvocationFeatures const *s1,
    VkPhysicalDeviceShaderTerminateInvocationFeatures const *s2) {
  if ((s1->shaderTerminateInvocation != s2->shaderTerminateInvocation) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_shader_terminate_invocation
bool compare_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s1,
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *s2) {
  if ((s1->shaderTerminateInvocation != s2->shaderTerminateInvocation) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *s1,
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *s2) {
  if ((s1->fragmentShadingRateEnums != s2->fragmentShadingRateEnums) ||
      (s1->supersampleFragmentShadingRates != s2->supersampleFragmentShadingRates) ||
      (s1->noInvocationFragmentShadingRates != s2->noInvocationFragmentShadingRates) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *s1,
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *s2) {
  if ((s1->maxFragmentShadingRateInvocationCount != s2->maxFragmentShadingRateInvocationCount) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
bool compare_VkPipelineFragmentShadingRateEnumStateCreateInfoNV(
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *s1,
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *s2) {
  if ((s1->shadingRateType != s2->shadingRateType) || (s1->shadingRate != s2->shadingRate) || false)
    return false;

  for (uint32_t i = 0; i < 2; ++i) {
    if (s1->combinerOps[i] != s2->combinerOps[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
bool compare_VkAccelerationStructureBuildSizesInfoKHR(
    VkAccelerationStructureBuildSizesInfoKHR const *s1,
    VkAccelerationStructureBuildSizesInfoKHR const *s2) {
  if ((s1->accelerationStructureSize != s2->accelerationStructureSize) ||
      (s1->updateScratchSize != s2->updateScratchSize) ||
      (s1->buildScratchSize != s2->buildScratchSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 211 && VK_EXT_image_2d_view_of_3d
bool compare_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(
    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT const *s1,
    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT const *s2) {
  if ((s1->image2DViewOf3D != s2->image2DViewOf3D) ||
      (s1->sampler2DViewOf3D != s2->sampler2DViewOf3D) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT const *s1,
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT const *s2) {
  if ((s1->mutableDescriptorType != s2->mutableDescriptorType) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
bool compare_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s1,
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *s2) {
  if ((s1->mutableDescriptorType != s2->mutableDescriptorType) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeListEXT(VkMutableDescriptorTypeListEXT const *s1,
                                            VkMutableDescriptorTypeListEXT const *s2) {
  if ((s1->descriptorTypeCount != s2->descriptorTypeCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *s1,
                                              VkMutableDescriptorTypeListVALVE const *s2) {
  if ((s1->descriptorTypeCount != s2->descriptorTypeCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeCreateInfoEXT(VkMutableDescriptorTypeCreateInfoEXT const *s1,
                                                  VkMutableDescriptorTypeCreateInfoEXT const *s2) {
  if ((s1->mutableDescriptorTypeListCount != s2->mutableDescriptorTypeListCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
bool compare_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *s1,
    VkMutableDescriptorTypeCreateInfoVALVE const *s2) {
  if ((s1->mutableDescriptorTypeListCount != s2->mutableDescriptorTypeListCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control
bool compare_VkPhysicalDeviceDepthClipControlFeaturesEXT(
    VkPhysicalDeviceDepthClipControlFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClipControlFeaturesEXT const *s2) {
  if ((s1->depthClipControl != s2->depthClipControl) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control
bool compare_VkPipelineViewportDepthClipControlCreateInfoEXT(
    VkPipelineViewportDepthClipControlCreateInfoEXT const *s1,
    VkPipelineViewportDepthClipControlCreateInfoEXT const *s2) {
  if ((s1->negativeOneToOne != s2->negativeOneToOne) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
bool compare_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *s1,
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *s2) {
  if ((s1->vertexInputDynamicState != s2->vertexInputDynamicState) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
bool compare_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *s1,
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *s2) {
  if ((s1->externalMemoryRDMA != s2->externalMemoryRDMA) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
bool compare_VkVertexInputBindingDescription2EXT(VkVertexInputBindingDescription2EXT const *s1,
                                                 VkVertexInputBindingDescription2EXT const *s2) {
  if ((s1->binding != s2->binding) || (s1->stride != s2->stride) ||
      (s1->inputRate != s2->inputRate) || (s1->divisor != s2->divisor) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
bool compare_VkVertexInputAttributeDescription2EXT(
    VkVertexInputAttributeDescription2EXT const *s1,
    VkVertexInputAttributeDescription2EXT const *s2) {
  if ((s1->location != s2->location) || (s1->binding != s2->binding) ||
      (s1->format != s2->format) || (s1->offset != s2->offset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
bool compare_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *s1,
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *s2) {
  if ((s1->colorWriteEnable != s2->colorWriteEnable) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
bool compare_VkPipelineColorWriteCreateInfoEXT(VkPipelineColorWriteCreateInfoEXT const *s1,
                                               VkPipelineColorWriteCreateInfoEXT const *s2) {
  if ((s1->attachmentCount != s2->attachmentCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkMemoryBarrier2(VkMemoryBarrier2 const *s1, VkMemoryBarrier2 const *s2) {
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *s1, VkMemoryBarrier2KHR const *s2) {
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkImageMemoryBarrier2(VkImageMemoryBarrier2 const *s1,
                                   VkImageMemoryBarrier2 const *s2) {
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->oldLayout != s2->oldLayout) || (s1->newLayout != s2->newLayout) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->image != s2->image) ||
      !compare_VkImageSubresourceRange(&s1->subresourceRange, &s2->subresourceRange) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *s1,
                                      VkImageMemoryBarrier2KHR const *s2) {
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->oldLayout != s2->oldLayout) || (s1->newLayout != s2->newLayout) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->image != s2->image) ||
      !compare_VkImageSubresourceRange(&s1->subresourceRange, &s2->subresourceRange) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkBufferMemoryBarrier2(VkBufferMemoryBarrier2 const *s1,
                                    VkBufferMemoryBarrier2 const *s2) {
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->buffer != s2->buffer) ||
      (s1->offset != s2->offset) || (s1->size != s2->size) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *s1,
                                       VkBufferMemoryBarrier2KHR const *s2) {
  if ((s1->srcStageMask != s2->srcStageMask) || (s1->srcAccessMask != s2->srcAccessMask) ||
      (s1->dstStageMask != s2->dstStageMask) || (s1->dstAccessMask != s2->dstAccessMask) ||
      (s1->srcQueueFamilyIndex != s2->srcQueueFamilyIndex) ||
      (s1->dstQueueFamilyIndex != s2->dstQueueFamilyIndex) || (s1->buffer != s2->buffer) ||
      (s1->offset != s2->offset) || (s1->size != s2->size) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkDependencyInfo(VkDependencyInfo const *s1, VkDependencyInfo const *s2) {
  if ((s1->dependencyFlags != s2->dependencyFlags) ||
      (s1->memoryBarrierCount != s2->memoryBarrierCount) ||
      (s1->bufferMemoryBarrierCount != s2->bufferMemoryBarrierCount) ||
      (s1->imageMemoryBarrierCount != s2->imageMemoryBarrierCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkDependencyInfoKHR(VkDependencyInfoKHR const *s1, VkDependencyInfoKHR const *s2) {
  if ((s1->dependencyFlags != s2->dependencyFlags) ||
      (s1->memoryBarrierCount != s2->memoryBarrierCount) ||
      (s1->bufferMemoryBarrierCount != s2->bufferMemoryBarrierCount) ||
      (s1->imageMemoryBarrierCount != s2->imageMemoryBarrierCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkSemaphoreSubmitInfo(VkSemaphoreSubmitInfo const *s1,
                                   VkSemaphoreSubmitInfo const *s2) {
  if ((s1->semaphore != s2->semaphore) || (s1->value != s2->value) ||
      (s1->stageMask != s2->stageMask) || (s1->deviceIndex != s2->deviceIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *s1,
                                      VkSemaphoreSubmitInfoKHR const *s2) {
  if ((s1->semaphore != s2->semaphore) || (s1->value != s2->value) ||
      (s1->stageMask != s2->stageMask) || (s1->deviceIndex != s2->deviceIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCommandBufferSubmitInfo(VkCommandBufferSubmitInfo const *s1,
                                       VkCommandBufferSubmitInfo const *s2) {
  if ((s1->commandBuffer != s2->commandBuffer) || (s1->deviceMask != s2->deviceMask) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *s1,
                                          VkCommandBufferSubmitInfoKHR const *s2) {
  if ((s1->commandBuffer != s2->commandBuffer) || (s1->deviceMask != s2->deviceMask) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkSubmitInfo2(VkSubmitInfo2 const *s1, VkSubmitInfo2 const *s2) {
  if ((s1->flags != s2->flags) || (s1->waitSemaphoreInfoCount != s2->waitSemaphoreInfoCount) ||
      (s1->commandBufferInfoCount != s2->commandBufferInfoCount) ||
      (s1->signalSemaphoreInfoCount != s2->signalSemaphoreInfoCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *s1, VkSubmitInfo2KHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->waitSemaphoreInfoCount != s2->waitSemaphoreInfoCount) ||
      (s1->commandBufferInfoCount != s2->commandBufferInfoCount) ||
      (s1->signalSemaphoreInfoCount != s2->signalSemaphoreInfoCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkQueueFamilyCheckpointProperties2NV(VkQueueFamilyCheckpointProperties2NV const *s1,
                                                  VkQueueFamilyCheckpointProperties2NV const *s2) {
  if ((s1->checkpointExecutionStageMask != s2->checkpointExecutionStageMask) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkCheckpointData2NV(VkCheckpointData2NV const *s1, VkCheckpointData2NV const *s2) {
  if ((s1->stage != s2->stage) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceSynchronization2Features(
    VkPhysicalDeviceSynchronization2Features const *s1,
    VkPhysicalDeviceSynchronization2Features const *s2) {
  if ((s1->synchronization2 != s2->synchronization2) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
bool compare_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s1,
    VkPhysicalDeviceSynchronization2FeaturesKHR const *s2) {
  if ((s1->synchronization2 != s2->synchronization2) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_primitives_generated_query
bool compare_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(
    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT const *s1,
    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT const *s2) {
  if ((s1->primitivesGeneratedQuery != s2->primitivesGeneratedQuery) ||
      (s1->primitivesGeneratedQueryWithRasterizerDiscard !=
       s2->primitivesGeneratedQueryWithRasterizerDiscard) ||
      (s1->primitivesGeneratedQueryWithNonZeroStreams !=
       s2->primitivesGeneratedQueryWithNonZeroStreams) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 227 && VK_EXT_legacy_dithering
bool compare_VkPhysicalDeviceLegacyDitheringFeaturesEXT(
    VkPhysicalDeviceLegacyDitheringFeaturesEXT const *s1,
    VkPhysicalDeviceLegacyDitheringFeaturesEXT const *s2) {
  if ((s1->legacyDithering != s2->legacyDithering) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(
    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT const *s1,
    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT const *s2) {
  if ((s1->multisampledRenderToSingleSampled != s2->multisampledRenderToSingleSampled) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkSubpassResolvePerformanceQueryEXT(VkSubpassResolvePerformanceQueryEXT const *s1,
                                                 VkSubpassResolvePerformanceQueryEXT const *s2) {
  if ((s1->optimal != s2->optimal) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled
bool compare_VkMultisampledRenderToSingleSampledInfoEXT(
    VkMultisampledRenderToSingleSampledInfoEXT const *s1,
    VkMultisampledRenderToSingleSampledInfoEXT const *s2) {
  if ((s1->multisampledRenderToSingleSampledEnable !=
       s2->multisampledRenderToSingleSampledEnable) ||
      (s1->rasterizationSamples != s2->rasterizationSamples) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_pipeline_protected_access
bool compare_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *s2) {
  if ((s1->pipelineProtectedAccess != s2->pipelineProtectedAccess) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkQueueFamilyVideoPropertiesKHR(VkQueueFamilyVideoPropertiesKHR const *s1,
                                             VkQueueFamilyVideoPropertiesKHR const *s2) {
  if ((s1->videoCodecOperations != s2->videoCodecOperations) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkQueueFamilyQueryResultStatusPropertiesKHR(
    VkQueueFamilyQueryResultStatusPropertiesKHR const *s1,
    VkQueueFamilyQueryResultStatusPropertiesKHR const *s2) {
  if ((s1->queryResultStatusSupport != s2->queryResultStatusSupport) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkVideoProfileListInfoKHR(VkVideoProfileListInfoKHR const *s1,
                                       VkVideoProfileListInfoKHR const *s2) {
  if ((s1->profileCount != s2->profileCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *s1,
                                                VkPhysicalDeviceVideoFormatInfoKHR const *s2) {
  if ((s1->imageUsage != s2->imageUsage) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *s1,
                                        VkVideoFormatPropertiesKHR const *s2) {
  if ((s1->format != s2->format) ||
#if VK_HEADER_VERSION >= 218
      !compare_VkComponentMapping(&s1->componentMapping, &s2->componentMapping) ||
#endif
#if VK_HEADER_VERSION >= 218
      (s1->imageCreateFlags != s2->imageCreateFlags) ||
#endif
#if VK_HEADER_VERSION >= 218
      (s1->imageType != s2->imageType) ||
#endif
#if VK_HEADER_VERSION >= 218
      (s1->imageTiling != s2->imageTiling) ||
#endif
#if VK_HEADER_VERSION >= 218
      (s1->imageUsageFlags != s2->imageUsageFlags) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkVideoProfileInfoKHR(VkVideoProfileInfoKHR const *s1,
                                   VkVideoProfileInfoKHR const *s2) {
  if ((s1->videoCodecOperation != s2->videoCodecOperation) ||
      (s1->chromaSubsampling != s2->chromaSubsampling) || (s1->lumaBitDepth != s2->lumaBitDepth) ||
      (s1->chromaBitDepth != s2->chromaBitDepth) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *s1,
                                    VkVideoCapabilitiesKHR const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->flags != s2->flags) ||
#endif
      (s1->minBitstreamBufferOffsetAlignment != s2->minBitstreamBufferOffsetAlignment) ||
      (s1->minBitstreamBufferSizeAlignment != s2->minBitstreamBufferSizeAlignment) ||
#if VK_HEADER_VERSION >= 229
      !compare_VkExtent2D(&s1->pictureAccessGranularity, &s2->pictureAccessGranularity) ||
#endif
#if VK_HEADER_VERSION >= 229
      !compare_VkExtent2D(&s1->minCodedExtent, &s2->minCodedExtent) ||
#endif
#if VK_HEADER_VERSION >= 229
      !compare_VkExtent2D(&s1->maxCodedExtent, &s2->maxCodedExtent) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->maxDpbSlots != s2->maxDpbSlots) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->maxActiveReferencePictures != s2->maxActiveReferencePictures) ||
#endif
#if VK_HEADER_VERSION >= 209
      !compare_VkExtensionProperties(&s1->stdHeaderVersion, &s2->stdHeaderVersion) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->capabilityFlags != s2->capabilityFlags) ||
#endif
#if VK_HEADER_VERSION <= 228
      !compare_VkExtent2D(&s1->videoPictureExtentGranularity, &s2->videoPictureExtentGranularity) ||
#endif
#if VK_HEADER_VERSION <= 228
      !compare_VkExtent2D(&s1->minExtent, &s2->minExtent) ||
#endif
#if VK_HEADER_VERSION <= 228
      !compare_VkExtent2D(&s1->maxExtent, &s2->maxExtent) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxReferencePicturesSlotsCount != s2->maxReferencePicturesSlotsCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxReferencePicturesActiveCount != s2->maxReferencePicturesActiveCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkVideoSessionMemoryRequirementsKHR(VkVideoSessionMemoryRequirementsKHR const *s1,
                                                 VkVideoSessionMemoryRequirementsKHR const *s2) {
  if ((s1->memoryBindIndex != s2->memoryBindIndex) ||
      !compare_VkMemoryRequirements(&s1->memoryRequirements, &s2->memoryRequirements) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkBindVideoSessionMemoryInfoKHR(VkBindVideoSessionMemoryInfoKHR const *s1,
                                             VkBindVideoSessionMemoryInfoKHR const *s2) {
  if ((s1->memoryBindIndex != s2->memoryBindIndex) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->memorySize != s2->memorySize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkVideoPictureResourceInfoKHR(VkVideoPictureResourceInfoKHR const *s1,
                                           VkVideoPictureResourceInfoKHR const *s2) {
  if (!compare_VkOffset2D(&s1->codedOffset, &s2->codedOffset) ||
      !compare_VkExtent2D(&s1->codedExtent, &s2->codedExtent) ||
      (s1->baseArrayLayer != s2->baseArrayLayer) ||
      (s1->imageViewBinding != s2->imageViewBinding) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_KHR_video_queue
bool compare_VkVideoReferenceSlotInfoKHR(VkVideoReferenceSlotInfoKHR const *s1,
                                         VkVideoReferenceSlotInfoKHR const *s2) {
  if ((s1->slotIndex != s2->slotIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 207 && VK_KHR_video_decode_queue
bool compare_VkVideoDecodeCapabilitiesKHR(VkVideoDecodeCapabilitiesKHR const *s1,
                                          VkVideoDecodeCapabilitiesKHR const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 226 && VK_KHR_video_decode_queue
bool compare_VkVideoDecodeUsageInfoKHR(VkVideoDecodeUsageInfoKHR const *s1,
                                       VkVideoDecodeUsageInfoKHR const *s2) {
  if ((s1->videoUsageHints != s2->videoUsageHints) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_decode_queue
bool compare_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *s1, VkVideoDecodeInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->srcBuffer != s2->srcBuffer) ||
      (s1->srcBufferOffset != s2->srcBufferOffset) || (s1->srcBufferRange != s2->srcBufferRange) ||
      !compare_VkVideoPictureResourceInfoKHR(&s1->dstPictureResource, &s2->dstPictureResource) ||
      (s1->referenceSlotCount != s2->referenceSlotCount) ||
#if VK_HEADER_VERSION <= 210
      !compare_VkOffset2D(&s1->codedOffset, &s2->codedOffset) ||
#endif
#if VK_HEADER_VERSION <= 210
      !compare_VkExtent2D(&s1->codedExtent, &s2->codedExtent) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264ProfileInfoKHR(VkVideoDecodeH264ProfileInfoKHR const *s1,
                                             VkVideoDecodeH264ProfileInfoKHR const *s2) {
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || (s1->pictureLayout != s2->pictureLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264CapabilitiesKHR(VkVideoDecodeH264CapabilitiesKHR const *s1,
                                              VkVideoDecodeH264CapabilitiesKHR const *s2) {
  if ((s1->maxLevelIdc != s2->maxLevelIdc) ||
      !compare_VkOffset2D(&s1->fieldOffsetGranularity, &s2->fieldOffsetGranularity) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersAddInfoKHR(
    VkVideoDecodeH264SessionParametersAddInfoKHR const *s1,
    VkVideoDecodeH264SessionParametersAddInfoKHR const *s2) {
  if ((s1->stdSPSCount != s2->stdSPSCount) || (s1->stdPPSCount != s2->stdPPSCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersCreateInfoKHR(
    VkVideoDecodeH264SessionParametersCreateInfoKHR const *s1,
    VkVideoDecodeH264SessionParametersCreateInfoKHR const *s2) {
  if ((s1->maxStdSPSCount != s2->maxStdSPSCount) || (s1->maxStdPPSCount != s2->maxStdPPSCount) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264PictureInfoKHR(VkVideoDecodeH264PictureInfoKHR const *s1,
                                             VkVideoDecodeH264PictureInfoKHR const *s2) {
  if ((s1->sliceCount != s2->sliceCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264
bool compare_VkVideoDecodeH264DpbSlotInfoKHR(VkVideoDecodeH264DpbSlotInfoKHR const *s1,
                                             VkVideoDecodeH264DpbSlotInfoKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265ProfileInfoKHR(VkVideoDecodeH265ProfileInfoKHR const *s1,
                                             VkVideoDecodeH265ProfileInfoKHR const *s2) {
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265CapabilitiesKHR(VkVideoDecodeH265CapabilitiesKHR const *s1,
                                              VkVideoDecodeH265CapabilitiesKHR const *s2) {
  if ((s1->maxLevelIdc != s2->maxLevelIdc) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersAddInfoKHR(
    VkVideoDecodeH265SessionParametersAddInfoKHR const *s1,
    VkVideoDecodeH265SessionParametersAddInfoKHR const *s2) {
  if ((s1->stdVPSCount != s2->stdVPSCount) || (s1->stdSPSCount != s2->stdSPSCount) ||
      (s1->stdPPSCount != s2->stdPPSCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersCreateInfoKHR(
    VkVideoDecodeH265SessionParametersCreateInfoKHR const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoKHR const *s2) {
  if ((s1->maxStdVPSCount != s2->maxStdVPSCount) || (s1->maxStdSPSCount != s2->maxStdSPSCount) ||
      (s1->maxStdPPSCount != s2->maxStdPPSCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265PictureInfoKHR(VkVideoDecodeH265PictureInfoKHR const *s1,
                                             VkVideoDecodeH265PictureInfoKHR const *s2) {
  if ((s1->sliceSegmentCount != s2->sliceSegmentCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265
bool compare_VkVideoDecodeH265DpbSlotInfoKHR(VkVideoDecodeH265DpbSlotInfoKHR const *s1,
                                             VkVideoDecodeH265DpbSlotInfoKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *s1,
                                         VkVideoSessionCreateInfoKHR const *s2) {
  if ((s1->queueFamilyIndex != s2->queueFamilyIndex) || (s1->flags != s2->flags) ||
      (s1->pictureFormat != s2->pictureFormat) ||
      !compare_VkExtent2D(&s1->maxCodedExtent, &s2->maxCodedExtent) ||
#if VK_HEADER_VERSION >= 229
      (s1->referencePictureFormat != s2->referencePictureFormat) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->maxDpbSlots != s2->maxDpbSlots) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->maxActiveReferencePictures != s2->maxActiveReferencePictures) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->referencePicturesFormat != s2->referencePicturesFormat) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxReferencePicturesSlotsCount != s2->maxReferencePicturesSlotsCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxReferencePicturesActiveCount != s2->maxReferencePicturesActiveCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoSessionParametersCreateInfoKHR(
    VkVideoSessionParametersCreateInfoKHR const *s1,
    VkVideoSessionParametersCreateInfoKHR const *s2) {
  if (
#if VK_HEADER_VERSION >= 225
      (s1->flags != s2->flags) ||
#endif
      (s1->videoSessionParametersTemplate != s2->videoSessionParametersTemplate) ||
      (s1->videoSession != s2->videoSession) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoSessionParametersUpdateInfoKHR(
    VkVideoSessionParametersUpdateInfoKHR const *s1,
    VkVideoSessionParametersUpdateInfoKHR const *s2) {
  if ((s1->updateSequenceCount != s2->updateSequenceCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *s1,
                                       VkVideoBeginCodingInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->videoSession != s2->videoSession) ||
      (s1->videoSessionParameters != s2->videoSessionParameters) ||
      (s1->referenceSlotCount != s2->referenceSlotCount) ||
#if VK_HEADER_VERSION <= 224
      (s1->codecQualityPreset != s2->codecQualityPreset) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoEndCodingInfoKHR(VkVideoEndCodingInfoKHR const *s1,
                                     VkVideoEndCodingInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
bool compare_VkVideoCodingControlInfoKHR(VkVideoCodingControlInfoKHR const *s1,
                                         VkVideoCodingControlInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 226 && VK_KHR_video_encode_queue
bool compare_VkVideoEncodeUsageInfoKHR(VkVideoEncodeUsageInfoKHR const *s1,
                                       VkVideoEncodeUsageInfoKHR const *s2) {
  if ((s1->videoUsageHints != s2->videoUsageHints) ||
      (s1->videoContentHints != s2->videoContentHints) || (s1->tuningMode != s2->tuningMode) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
bool compare_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *s1, VkVideoEncodeInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->qualityLevel != s2->qualityLevel) ||
      (s1->dstBitstreamBuffer != s2->dstBitstreamBuffer) ||
      (s1->dstBitstreamBufferOffset != s2->dstBitstreamBufferOffset) ||
      (s1->dstBitstreamBufferMaxRange != s2->dstBitstreamBufferMaxRange) ||
      !compare_VkVideoPictureResourceInfoKHR(&s1->srcPictureResource, &s2->srcPictureResource) ||
      (s1->referenceSlotCount != s2->referenceSlotCount) ||
#if VK_HEADER_VERSION >= 201
      (s1->precedingExternallyEncodedBytes != s2->precedingExternallyEncodedBytes) ||
#endif
#if VK_HEADER_VERSION <= 210
      !compare_VkExtent2D(&s1->codedExtent, &s2->codedExtent) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
bool compare_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *s1,
                                             VkVideoEncodeRateControlInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->rateControlMode != s2->rateControlMode) ||
#if VK_HEADER_VERSION >= 201
      (s1->layerCount != s2->layerCount) ||
#endif
#if VK_HEADER_VERSION <= 200
      (s1->averageBitrate != s2->averageBitrate) ||
#endif
#if VK_HEADER_VERSION <= 200
      (s1->peakToAverageBitrateRatio != s2->peakToAverageBitrateRatio) ||
#endif
#if VK_HEADER_VERSION <= 200
      (s1->frameRateNumerator != s2->frameRateNumerator) ||
#endif
#if VK_HEADER_VERSION <= 200
      (s1->frameRateDenominator != s2->frameRateDenominator) ||
#endif
#if VK_HEADER_VERSION <= 200
      (s1->virtualBufferSizeInMs != s2->virtualBufferSizeInMs) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_KHR_video_encode_queue
bool compare_VkVideoEncodeRateControlLayerInfoKHR(VkVideoEncodeRateControlLayerInfoKHR const *s1,
                                                  VkVideoEncodeRateControlLayerInfoKHR const *s2) {
  if ((s1->averageBitrate != s2->averageBitrate) || (s1->maxBitrate != s2->maxBitrate) ||
      (s1->frameRateNumerator != s2->frameRateNumerator) ||
      (s1->frameRateDenominator != s2->frameRateDenominator) ||
      (s1->virtualBufferSizeInMs != s2->virtualBufferSizeInMs) ||
      (s1->initialVirtualBufferSizeInMs != s2->initialVirtualBufferSizeInMs) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 206 && VK_KHR_video_encode_queue
bool compare_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *s1,
                                          VkVideoEncodeCapabilitiesKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->rateControlModes != s2->rateControlModes) ||
      (s1->rateControlLayerCount != s2->rateControlLayerCount) ||
      (s1->qualityLevelCount != s2->qualityLevelCount) ||
      !compare_VkExtent2D(&s1->inputImageDataFillAlignment, &s2->inputImageDataFillAlignment) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *s1,
                                              VkVideoEncodeH264CapabilitiesEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->inputModeFlags != s2->inputModeFlags) ||
      (s1->outputModeFlags != s2->outputModeFlags) ||
#if VK_HEADER_VERSION >= 206
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->motionVectorsOverPicBoundariesFlag != s2->motionVectorsOverPicBoundariesFlag) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxBytesPerPicDenom != s2->maxBytesPerPicDenom) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxBitsPerMbDenom != s2->maxBitsPerMbDenom) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->log2MaxMvLengthHorizontal != s2->log2MaxMvLengthHorizontal) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->log2MaxMvLengthVertical != s2->log2MaxMvLengthVertical) ||
#endif
#if VK_HEADER_VERSION <= 208
      !compare_VkExtensionProperties(&s1->stdExtensionVersion, &s2->stdExtensionVersion) ||
#endif
#if VK_HEADER_VERSION <= 205
      !compare_VkExtent2D(&s1->minPictureSizeInMbs, &s2->minPictureSizeInMbs) ||
#endif
#if VK_HEADER_VERSION <= 205
      !compare_VkExtent2D(&s1->maxPictureSizeInMbs, &s2->maxPictureSizeInMbs) ||
#endif
#if VK_HEADER_VERSION <= 205
      !compare_VkExtent2D(&s1->inputImageDataAlignment, &s2->inputImageDataAlignment) ||
#endif
#if VK_HEADER_VERSION <= 205
      (s1->maxNumL0ReferenceForP != s2->maxNumL0ReferenceForP) ||
#endif
#if VK_HEADER_VERSION <= 205
      (s1->maxNumL0ReferenceForB != s2->maxNumL0ReferenceForB) ||
#endif
#if VK_HEADER_VERSION <= 205
      (s1->maxNumL1Reference != s2->maxNumL1Reference) ||
#endif
#if VK_HEADER_VERSION <= 205
      (s1->qualityLevelCount != s2->qualityLevelCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersAddInfoEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->stdSPSCount != s2->stdSPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->stdPPSCount != s2->stdPPSCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->spsStdCount != s2->spsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->ppsStdCount != s2->ppsStdCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->maxStdSPSCount != s2->maxStdSPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->maxStdPPSCount != s2->maxStdPPSCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxSpsStdCount != s2->maxSpsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxPpsStdCount != s2->maxPpsStdCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH264DpbSlotInfoEXT const *s2) {
  if ((s1->slotIndex != s2->slotIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH264VclFrameInfoEXT const *s2) {
  if ((s1->naluSliceEntryCount != s2->naluSliceEntryCount) ||
#if VK_HEADER_VERSION <= 205
      (s1->refDefaultFinalList0EntryCount != s2->refDefaultFinalList0EntryCount) ||
#endif
#if VK_HEADER_VERSION <= 205
      (s1->refDefaultFinalList1EntryCount != s2->refDefaultFinalList1EntryCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264ReferenceListsInfoEXT(
    VkVideoEncodeH264ReferenceListsInfoEXT const *s1,
    VkVideoEncodeH264ReferenceListsInfoEXT const *s2) {
  if ((s1->referenceList0EntryCount != s2->referenceList0EntryCount) ||
      (s1->referenceList1EntryCount != s2->referenceList1EntryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264EmitPictureParametersInfoEXT(
    VkVideoEncodeH264EmitPictureParametersInfoEXT const *s1,
    VkVideoEncodeH264EmitPictureParametersInfoEXT const *s2) {
  if ((s1->spsId != s2->spsId) || (s1->emitSpsEnable != s2->emitSpsEnable) ||
      (s1->ppsIdEntryCount != s2->ppsIdEntryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264ProfileInfoEXT(VkVideoEncodeH264ProfileInfoEXT const *s1,
                                             VkVideoEncodeH264ProfileInfoEXT const *s2) {
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *s1,
                                               VkVideoEncodeH264NaluSliceInfoEXT const *s2) {
  if ((s1->mbCount != s2->mbCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH264RateControlInfoEXT const *s2) {
  if ((s1->gopFrameCount != s2->gopFrameCount) || (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->rateControlStructure != s2->rateControlStructure) ||
#if VK_HEADER_VERSION >= 203
      (s1->temporalLayerCount != s2->temporalLayerCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264QpEXT(VkVideoEncodeH264QpEXT const *s1,
                                    VkVideoEncodeH264QpEXT const *s2) {
  if ((s1->qpI != s2->qpI) || (s1->qpP != s2->qpP) || (s1->qpB != s2->qpB) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264FrameSizeEXT(VkVideoEncodeH264FrameSizeEXT const *s1,
                                           VkVideoEncodeH264FrameSizeEXT const *s2) {
  if ((s1->frameISize != s2->frameISize) || (s1->framePSize != s2->framePSize) ||
      (s1->frameBSize != s2->frameBSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH264RateControlLayerInfoEXT const *s2) {
  if ((s1->temporalLayerId != s2->temporalLayerId) || (s1->useInitialRcQp != s2->useInitialRcQp) ||
      !compare_VkVideoEncodeH264QpEXT(&s1->initialRcQp, &s2->initialRcQp) ||
      (s1->useMinQp != s2->useMinQp) || !compare_VkVideoEncodeH264QpEXT(&s1->minQp, &s2->minQp) ||
      (s1->useMaxQp != s2->useMaxQp) || !compare_VkVideoEncodeH264QpEXT(&s1->maxQp, &s2->maxQp) ||
      (s1->useMaxFrameSize != s2->useMaxFrameSize) ||
      !compare_VkVideoEncodeH264FrameSizeEXT(&s1->maxFrameSize, &s2->maxFrameSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *s1,
                                              VkVideoEncodeH265CapabilitiesEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->inputModeFlags != s2->inputModeFlags) ||
      (s1->outputModeFlags != s2->outputModeFlags) || (s1->ctbSizes != s2->ctbSizes) ||
#if VK_HEADER_VERSION >= 206
      (s1->transformBlockSizes != s2->transformBlockSizes) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxPPictureL0ReferenceCount != s2->maxPPictureL0ReferenceCount) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxBPictureL0ReferenceCount != s2->maxBPictureL0ReferenceCount) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxL1ReferenceCount != s2->maxL1ReferenceCount) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxSubLayersCount != s2->maxSubLayersCount) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->minLog2MinLumaCodingBlockSizeMinus3 != s2->minLog2MinLumaCodingBlockSizeMinus3) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxLog2MinLumaCodingBlockSizeMinus3 != s2->maxLog2MinLumaCodingBlockSizeMinus3) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->minLog2MinLumaTransformBlockSizeMinus2 != s2->minLog2MinLumaTransformBlockSizeMinus2) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxLog2MinLumaTransformBlockSizeMinus2 != s2->maxLog2MinLumaTransformBlockSizeMinus2) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->minMaxTransformHierarchyDepthInter != s2->minMaxTransformHierarchyDepthInter) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxMaxTransformHierarchyDepthInter != s2->maxMaxTransformHierarchyDepthInter) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->minMaxTransformHierarchyDepthIntra != s2->minMaxTransformHierarchyDepthIntra) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxMaxTransformHierarchyDepthIntra != s2->maxMaxTransformHierarchyDepthIntra) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxDiffCuQpDeltaDepth != s2->maxDiffCuQpDeltaDepth) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->minMaxNumMergeCand != s2->minMaxNumMergeCand) ||
#endif
#if VK_HEADER_VERSION >= 206
      (s1->maxMaxNumMergeCand != s2->maxMaxNumMergeCand) ||
#endif
#if VK_HEADER_VERSION <= 208
      !compare_VkExtensionProperties(&s1->stdExtensionVersion, &s2->stdExtensionVersion) ||
#endif
#if VK_HEADER_VERSION <= 205
      !compare_VkExtent2D(&s1->inputImageDataAlignment, &s2->inputImageDataAlignment) ||
#endif
#if VK_HEADER_VERSION <= 205
      (s1->maxNumL0ReferenceForP != s2->maxNumL0ReferenceForP) ||
#endif
#if VK_HEADER_VERSION <= 205
      (s1->maxNumL0ReferenceForB != s2->maxNumL0ReferenceForB) ||
#endif
#if VK_HEADER_VERSION <= 205
      (s1->maxNumL1Reference != s2->maxNumL1Reference) ||
#endif
#if VK_HEADER_VERSION <= 205
      (s1->maxNumSubLayers != s2->maxNumSubLayers) ||
#endif
#if VK_HEADER_VERSION <= 205
      (s1->qualityLevelCount != s2->qualityLevelCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersAddInfoEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->stdVPSCount != s2->stdVPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->stdSPSCount != s2->stdSPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->stdPPSCount != s2->stdPPSCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->vpsStdCount != s2->vpsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->spsStdCount != s2->spsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->ppsStdCount != s2->ppsStdCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->maxStdVPSCount != s2->maxStdVPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->maxStdSPSCount != s2->maxStdSPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->maxStdPPSCount != s2->maxStdPPSCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxVpsStdCount != s2->maxVpsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxSpsStdCount != s2->maxSpsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxPpsStdCount != s2->maxPpsStdCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *s1,
                                              VkVideoEncodeH265VclFrameInfoEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 205
      (s1->naluSliceSegmentEntryCount != s2->naluSliceSegmentEntryCount) ||
#endif
#if VK_HEADER_VERSION <= 204
      (s1->naluSliceEntryCount != s2->naluSliceEntryCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265EmitPictureParametersInfoEXT(
    VkVideoEncodeH265EmitPictureParametersInfoEXT const *s1,
    VkVideoEncodeH265EmitPictureParametersInfoEXT const *s2) {
  if ((s1->vpsId != s2->vpsId) || (s1->spsId != s2->spsId) ||
      (s1->emitVpsEnable != s2->emitVpsEnable) || (s1->emitSpsEnable != s2->emitSpsEnable) ||
      (s1->ppsIdEntryCount != s2->ppsIdEntryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s1,
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *s2) {
  if ((s1->ctbCount != s2->ctbCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *s1,
                                                 VkVideoEncodeH265RateControlInfoEXT const *s2) {
  if ((s1->gopFrameCount != s2->gopFrameCount) || (s1->idrPeriod != s2->idrPeriod) ||
      (s1->consecutiveBFrameCount != s2->consecutiveBFrameCount) ||
      (s1->rateControlStructure != s2->rateControlStructure) ||
#if VK_HEADER_VERSION >= 203
      (s1->subLayerCount != s2->subLayerCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265QpEXT(VkVideoEncodeH265QpEXT const *s1,
                                    VkVideoEncodeH265QpEXT const *s2) {
  if ((s1->qpI != s2->qpI) || (s1->qpP != s2->qpP) || (s1->qpB != s2->qpB) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265FrameSizeEXT(VkVideoEncodeH265FrameSizeEXT const *s1,
                                           VkVideoEncodeH265FrameSizeEXT const *s2) {
  if ((s1->frameISize != s2->frameISize) || (s1->framePSize != s2->framePSize) ||
      (s1->frameBSize != s2->frameBSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 201 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *s1,
    VkVideoEncodeH265RateControlLayerInfoEXT const *s2) {
  if ((s1->temporalId != s2->temporalId) || (s1->useInitialRcQp != s2->useInitialRcQp) ||
      !compare_VkVideoEncodeH265QpEXT(&s1->initialRcQp, &s2->initialRcQp) ||
      (s1->useMinQp != s2->useMinQp) || !compare_VkVideoEncodeH265QpEXT(&s1->minQp, &s2->minQp) ||
      (s1->useMaxQp != s2->useMaxQp) || !compare_VkVideoEncodeH265QpEXT(&s1->maxQp, &s2->maxQp) ||
      (s1->useMaxFrameSize != s2->useMaxFrameSize) ||
      !compare_VkVideoEncodeH265FrameSizeEXT(&s1->maxFrameSize, &s2->maxFrameSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265ProfileInfoEXT(VkVideoEncodeH265ProfileInfoEXT const *s1,
                                             VkVideoEncodeH265ProfileInfoEXT const *s2) {
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *s1,
                                             VkVideoEncodeH265DpbSlotInfoEXT const *s2) {
  if ((s1->slotIndex != s2->slotIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265ReferenceListsInfoEXT(
    VkVideoEncodeH265ReferenceListsInfoEXT const *s1,
    VkVideoEncodeH265ReferenceListsInfoEXT const *s2) {
  if ((s1->referenceList0EntryCount != s2->referenceList0EntryCount) ||
      (s1->referenceList1EntryCount != s2->referenceList1EntryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
bool compare_VkPhysicalDeviceInheritedViewportScissorFeaturesNV(
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *s1,
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *s2) {
  if ((s1->inheritedViewportScissor2D != s2->inheritedViewportScissor2D) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
bool compare_VkCommandBufferInheritanceViewportScissorInfoNV(
    VkCommandBufferInheritanceViewportScissorInfoNV const *s1,
    VkCommandBufferInheritanceViewportScissorInfoNV const *s2) {
  if ((s1->viewportScissor2D != s2->viewportScissor2D) ||
      (s1->viewportDepthCount != s2->viewportDepthCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_ycbcr_2plane_444_formats
bool compare_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *s1,
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *s2) {
  if ((s1->ycbcr2plane444Formats != s2->ycbcr2plane444Formats) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPhysicalDeviceProvokingVertexFeaturesEXT(
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *s1,
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *s2) {
  if ((s1->provokingVertexLast != s2->provokingVertexLast) ||
      (s1->transformFeedbackPreservesProvokingVertex !=
       s2->transformFeedbackPreservesProvokingVertex) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPhysicalDeviceProvokingVertexPropertiesEXT(
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *s1,
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *s2) {
  if ((s1->provokingVertexModePerPipeline != s2->provokingVertexModePerPipeline) ||
      (s1->transformFeedbackPreservesTriangleFanProvokingVertex !=
       s2->transformFeedbackPreservesTriangleFanProvokingVertex) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
bool compare_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *s1,
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *s2) {
  if ((s1->provokingVertexMode != s2->provokingVertexMode) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuModuleCreateInfoNVX(VkCuModuleCreateInfoNVX const *s1,
                                     VkCuModuleCreateInfoNVX const *s2) {
  if ((s1->dataSize != s2->dataSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuFunctionCreateInfoNVX(VkCuFunctionCreateInfoNVX const *s1,
                                       VkCuFunctionCreateInfoNVX const *s2) {
  if ((s1->module != s2->module) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
bool compare_VkCuLaunchInfoNVX(VkCuLaunchInfoNVX const *s1, VkCuLaunchInfoNVX const *s2) {
  if ((s1->function != s2->function) || (s1->gridDimX != s2->gridDimX) ||
      (s1->gridDimY != s2->gridDimY) || (s1->gridDimZ != s2->gridDimZ) ||
      (s1->blockDimX != s2->blockDimX) || (s1->blockDimY != s2->blockDimY) ||
      (s1->blockDimZ != s2->blockDimZ) || (s1->sharedMemBytes != s2->sharedMemBytes) ||
      (s1->paramCount != s2->paramCount) || (s1->extraCount != s2->extraCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferFeaturesEXT(
    VkPhysicalDeviceDescriptorBufferFeaturesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferFeaturesEXT const *s2) {
  if ((s1->descriptorBuffer != s2->descriptorBuffer) ||
      (s1->descriptorBufferCaptureReplay != s2->descriptorBufferCaptureReplay) ||
      (s1->descriptorBufferImageLayoutIgnored != s2->descriptorBufferImageLayoutIgnored) ||
      (s1->descriptorBufferPushDescriptors != s2->descriptorBufferPushDescriptors) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferPropertiesEXT const *s2) {
  if ((s1->combinedImageSamplerDescriptorSingleArray !=
       s2->combinedImageSamplerDescriptorSingleArray) ||
      (s1->bufferlessPushDescriptors != s2->bufferlessPushDescriptors) ||
      (s1->allowSamplerImageViewPostSubmitCreation !=
       s2->allowSamplerImageViewPostSubmitCreation) ||
      (s1->descriptorBufferOffsetAlignment != s2->descriptorBufferOffsetAlignment) ||
      (s1->maxDescriptorBufferBindings != s2->maxDescriptorBufferBindings) ||
      (s1->maxResourceDescriptorBufferBindings != s2->maxResourceDescriptorBufferBindings) ||
      (s1->maxSamplerDescriptorBufferBindings != s2->maxSamplerDescriptorBufferBindings) ||
      (s1->maxEmbeddedImmutableSamplerBindings != s2->maxEmbeddedImmutableSamplerBindings) ||
      (s1->maxEmbeddedImmutableSamplers != s2->maxEmbeddedImmutableSamplers) ||
      (s1->bufferCaptureReplayDescriptorDataSize != s2->bufferCaptureReplayDescriptorDataSize) ||
      (s1->imageCaptureReplayDescriptorDataSize != s2->imageCaptureReplayDescriptorDataSize) ||
      (s1->imageViewCaptureReplayDescriptorDataSize !=
       s2->imageViewCaptureReplayDescriptorDataSize) ||
      (s1->samplerCaptureReplayDescriptorDataSize != s2->samplerCaptureReplayDescriptorDataSize) ||
      (s1->accelerationStructureCaptureReplayDescriptorDataSize !=
       s2->accelerationStructureCaptureReplayDescriptorDataSize) ||
      (s1->samplerDescriptorSize != s2->samplerDescriptorSize) ||
      (s1->combinedImageSamplerDescriptorSize != s2->combinedImageSamplerDescriptorSize) ||
      (s1->sampledImageDescriptorSize != s2->sampledImageDescriptorSize) ||
      (s1->storageImageDescriptorSize != s2->storageImageDescriptorSize) ||
      (s1->uniformTexelBufferDescriptorSize != s2->uniformTexelBufferDescriptorSize) ||
      (s1->robustUniformTexelBufferDescriptorSize != s2->robustUniformTexelBufferDescriptorSize) ||
      (s1->storageTexelBufferDescriptorSize != s2->storageTexelBufferDescriptorSize) ||
      (s1->robustStorageTexelBufferDescriptorSize != s2->robustStorageTexelBufferDescriptorSize) ||
      (s1->uniformBufferDescriptorSize != s2->uniformBufferDescriptorSize) ||
      (s1->robustUniformBufferDescriptorSize != s2->robustUniformBufferDescriptorSize) ||
      (s1->storageBufferDescriptorSize != s2->storageBufferDescriptorSize) ||
      (s1->robustStorageBufferDescriptorSize != s2->robustStorageBufferDescriptorSize) ||
      (s1->inputAttachmentDescriptorSize != s2->inputAttachmentDescriptorSize) ||
      (s1->accelerationStructureDescriptorSize != s2->accelerationStructureDescriptorSize) ||
      (s1->maxSamplerDescriptorBufferRange != s2->maxSamplerDescriptorBufferRange) ||
      (s1->maxResourceDescriptorBufferRange != s2->maxResourceDescriptorBufferRange) ||
      (s1->samplerDescriptorBufferAddressSpaceSize !=
       s2->samplerDescriptorBufferAddressSpaceSize) ||
      (s1->resourceDescriptorBufferAddressSpaceSize !=
       s2->resourceDescriptorBufferAddressSpaceSize) ||
      (s1->descriptorBufferAddressSpaceSize != s2->descriptorBufferAddressSpaceSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT const *s1,
    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT const *s2) {
  if ((s1->combinedImageSamplerDensityMapDescriptorSize !=
       s2->combinedImageSamplerDensityMapDescriptorSize) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorAddressInfoEXT(VkDescriptorAddressInfoEXT const *s1,
                                        VkDescriptorAddressInfoEXT const *s2) {
  if ((s1->address != s2->address) || (s1->range != s2->range) || (s1->format != s2->format) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorBufferBindingInfoEXT(VkDescriptorBufferBindingInfoEXT const *s1,
                                              VkDescriptorBufferBindingInfoEXT const *s2) {
  if ((s1->address != s2->address) || (s1->usage != s2->usage) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(
    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT const *s1,
    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT const *s2) {
  if ((s1->buffer != s2->buffer) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkBufferCaptureDescriptorDataInfoEXT(VkBufferCaptureDescriptorDataInfoEXT const *s1,
                                                  VkBufferCaptureDescriptorDataInfoEXT const *s2) {
  if ((s1->buffer != s2->buffer) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkImageCaptureDescriptorDataInfoEXT(VkImageCaptureDescriptorDataInfoEXT const *s1,
                                                 VkImageCaptureDescriptorDataInfoEXT const *s2) {
  if ((s1->image != s2->image) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkImageViewCaptureDescriptorDataInfoEXT(
    VkImageViewCaptureDescriptorDataInfoEXT const *s1,
    VkImageViewCaptureDescriptorDataInfoEXT const *s2) {
  if ((s1->imageView != s2->imageView) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkSamplerCaptureDescriptorDataInfoEXT(
    VkSamplerCaptureDescriptorDataInfoEXT const *s1,
    VkSamplerCaptureDescriptorDataInfoEXT const *s2) {
  if ((s1->sampler != s2->sampler) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkAccelerationStructureCaptureDescriptorDataInfoEXT(
    VkAccelerationStructureCaptureDescriptorDataInfoEXT const *s1,
    VkAccelerationStructureCaptureDescriptorDataInfoEXT const *s2) {
  if ((s1->accelerationStructure != s2->accelerationStructure) ||
      (s1->accelerationStructureNV != s2->accelerationStructureNV) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer
bool compare_VkOpaqueCaptureDescriptorDataCreateInfoEXT(
    VkOpaqueCaptureDescriptorDataCreateInfoEXT const *s1,
    VkOpaqueCaptureDescriptorDataCreateInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderIntegerDotProductFeatures(
    VkPhysicalDeviceShaderIntegerDotProductFeatures const *s1,
    VkPhysicalDeviceShaderIntegerDotProductFeatures const *s2) {
  if ((s1->shaderIntegerDotProduct != s2->shaderIntegerDotProduct) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 190 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *s2) {
  if ((s1->shaderIntegerDotProduct != s2->shaderIntegerDotProduct) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceShaderIntegerDotProductProperties(
    VkPhysicalDeviceShaderIntegerDotProductProperties const *s1,
    VkPhysicalDeviceShaderIntegerDotProductProperties const *s2) {
  if ((s1->integerDotProduct8BitUnsignedAccelerated !=
       s2->integerDotProduct8BitUnsignedAccelerated) ||
      (s1->integerDotProduct8BitSignedAccelerated != s2->integerDotProduct8BitSignedAccelerated) ||
      (s1->integerDotProduct8BitMixedSignednessAccelerated !=
       s2->integerDotProduct8BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProduct4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedSignedAccelerated !=
       s2->integerDotProduct4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProduct4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProduct16BitUnsignedAccelerated !=
       s2->integerDotProduct16BitUnsignedAccelerated) ||
      (s1->integerDotProduct16BitSignedAccelerated !=
       s2->integerDotProduct16BitSignedAccelerated) ||
      (s1->integerDotProduct16BitMixedSignednessAccelerated !=
       s2->integerDotProduct16BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct32BitUnsignedAccelerated !=
       s2->integerDotProduct32BitUnsignedAccelerated) ||
      (s1->integerDotProduct32BitSignedAccelerated !=
       s2->integerDotProduct32BitSignedAccelerated) ||
      (s1->integerDotProduct32BitMixedSignednessAccelerated !=
       s2->integerDotProduct32BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct64BitUnsignedAccelerated !=
       s2->integerDotProduct64BitUnsignedAccelerated) ||
      (s1->integerDotProduct64BitSignedAccelerated !=
       s2->integerDotProduct64BitSignedAccelerated) ||
      (s1->integerDotProduct64BitMixedSignednessAccelerated !=
       s2->integerDotProduct64BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 190 && VK_KHR_shader_integer_dot_product
bool compare_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s1,
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *s2) {
  if ((s1->integerDotProduct8BitUnsignedAccelerated !=
       s2->integerDotProduct8BitUnsignedAccelerated) ||
      (s1->integerDotProduct8BitSignedAccelerated != s2->integerDotProduct8BitSignedAccelerated) ||
      (s1->integerDotProduct8BitMixedSignednessAccelerated !=
       s2->integerDotProduct8BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProduct4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedSignedAccelerated !=
       s2->integerDotProduct4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProduct4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProduct4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProduct16BitUnsignedAccelerated !=
       s2->integerDotProduct16BitUnsignedAccelerated) ||
      (s1->integerDotProduct16BitSignedAccelerated !=
       s2->integerDotProduct16BitSignedAccelerated) ||
      (s1->integerDotProduct16BitMixedSignednessAccelerated !=
       s2->integerDotProduct16BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct32BitUnsignedAccelerated !=
       s2->integerDotProduct32BitUnsignedAccelerated) ||
      (s1->integerDotProduct32BitSignedAccelerated !=
       s2->integerDotProduct32BitSignedAccelerated) ||
      (s1->integerDotProduct32BitMixedSignednessAccelerated !=
       s2->integerDotProduct32BitMixedSignednessAccelerated) ||
      (s1->integerDotProduct64BitUnsignedAccelerated !=
       s2->integerDotProduct64BitUnsignedAccelerated) ||
      (s1->integerDotProduct64BitSignedAccelerated !=
       s2->integerDotProduct64BitSignedAccelerated) ||
      (s1->integerDotProduct64BitMixedSignednessAccelerated !=
       s2->integerDotProduct64BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitSignedAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitSignedAccelerated) ||
      (s1->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated !=
       s2->integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_physical_device_drm
bool compare_VkPhysicalDeviceDrmPropertiesEXT(VkPhysicalDeviceDrmPropertiesEXT const *s1,
                                              VkPhysicalDeviceDrmPropertiesEXT const *s2) {
  if ((s1->hasPrimary != s2->hasPrimary) || (s1->hasRender != s2->hasRender) ||
      (s1->primaryMajor != s2->primaryMajor) || (s1->primaryMinor != s2->primaryMinor) ||
      (s1->renderMajor != s2->renderMajor) || (s1->renderMinor != s2->renderMinor) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR const *s2) {
  if ((s1->fragmentShaderBarycentric != s2->fragmentShaderBarycentric) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric
bool compare_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR const *s1,
    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR const *s2) {
  if ((s1->triStripVertexOrderIndependentOfProvokingVertex !=
       s2->triStripVertexOrderIndependentOfProvokingVertex) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *s2) {
  if ((s1->rayTracingMotionBlur != s2->rayTracingMotionBlur) ||
      (s1->rayTracingMotionBlurPipelineTraceRaysIndirect !=
       s2->rayTracingMotionBlurPipelineTraceRaysIndirect) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureMotionInfoNV(VkAccelerationStructureMotionInfoNV const *s1,
                                                 VkAccelerationStructureMotionInfoNV const *s2) {
  if ((s1->maxInstances != s2->maxInstances) || (s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkSRTDataNV(VkSRTDataNV const *s1, VkSRTDataNV const *s2) {
  if ((s1->sx != s2->sx) || (s1->a != s2->a) || (s1->b != s2->b) || (s1->pvx != s2->pvx) ||
      (s1->sy != s2->sy) || (s1->c != s2->c) || (s1->pvy != s2->pvy) || (s1->sz != s2->sz) ||
      (s1->pvz != s2->pvz) || (s1->qx != s2->qx) || (s1->qy != s2->qy) || (s1->qz != s2->qz) ||
      (s1->qw != s2->qw) || (s1->tx != s2->tx) || (s1->ty != s2->ty) || (s1->tz != s2->tz) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureSRTMotionInstanceNV(
    VkAccelerationStructureSRTMotionInstanceNV const *s1,
    VkAccelerationStructureSRTMotionInstanceNV const *s2) {
  if (!compare_VkSRTDataNV(&s1->transformT0, &s2->transformT0) ||
      !compare_VkSRTDataNV(&s1->transformT1, &s2->transformT1) ||
      (s1->instanceCustomIndex != s2->instanceCustomIndex) || (s1->mask != s2->mask) ||
      (s1->instanceShaderBindingTableRecordOffset != s2->instanceShaderBindingTableRecordOffset) ||
      (s1->flags != s2->flags) ||
      (s1->accelerationStructureReference != s2->accelerationStructureReference) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
bool compare_VkAccelerationStructureMatrixMotionInstanceNV(
    VkAccelerationStructureMatrixMotionInstanceNV const *s1,
    VkAccelerationStructureMatrixMotionInstanceNV const *s2) {
  if (!compare_VkTransformMatrixKHR(&s1->transformT0, &s2->transformT0) ||
      !compare_VkTransformMatrixKHR(&s1->transformT1, &s2->transformT1) ||
      (s1->instanceCustomIndex != s2->instanceCustomIndex) || (s1->mask != s2->mask) ||
      (s1->instanceShaderBindingTableRecordOffset != s2->instanceShaderBindingTableRecordOffset) ||
      (s1->flags != s2->flags) ||
      (s1->accelerationStructureReference != s2->accelerationStructureReference) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
bool compare_VkMemoryGetRemoteAddressInfoNV(VkMemoryGetRemoteAddressInfoNV const *s1,
                                            VkMemoryGetRemoteAddressInfoNV const *s2) {
  if ((s1->memory != s2->memory) || (s1->handleType != s2->handleType) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImportMemoryBufferCollectionFUCHSIA(
    VkImportMemoryBufferCollectionFUCHSIA const *s1,
    VkImportMemoryBufferCollectionFUCHSIA const *s2) {
  if ((s1->collection != s2->collection) || (s1->index != s2->index) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionImageCreateInfoFUCHSIA(
    VkBufferCollectionImageCreateInfoFUCHSIA const *s1,
    VkBufferCollectionImageCreateInfoFUCHSIA const *s2) {
  if ((s1->collection != s2->collection) || (s1->index != s2->index) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionBufferCreateInfoFUCHSIA(
    VkBufferCollectionBufferCreateInfoFUCHSIA const *s1,
    VkBufferCollectionBufferCreateInfoFUCHSIA const *s2) {
  if ((s1->collection != s2->collection) || (s1->index != s2->index) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionCreateInfoFUCHSIA(VkBufferCollectionCreateInfoFUCHSIA const *s1,
                                                 VkBufferCollectionCreateInfoFUCHSIA const *s2) {
  if ((s1->collectionToken != s2->collectionToken) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionPropertiesFUCHSIA(VkBufferCollectionPropertiesFUCHSIA const *s1,
                                                 VkBufferCollectionPropertiesFUCHSIA const *s2) {
  if ((s1->memoryTypeBits != s2->memoryTypeBits) || (s1->bufferCount != s2->bufferCount) ||
      (s1->createInfoIndex != s2->createInfoIndex) ||
      (s1->sysmemPixelFormat != s2->sysmemPixelFormat) ||
      (s1->formatFeatures != s2->formatFeatures) ||
      !compare_VkSysmemColorSpaceFUCHSIA(&s1->sysmemColorSpaceIndex, &s2->sysmemColorSpaceIndex) ||
      !compare_VkComponentMapping(&s1->samplerYcbcrConversionComponents,
                                  &s2->samplerYcbcrConversionComponents) ||
      (s1->suggestedYcbcrModel != s2->suggestedYcbcrModel) ||
      (s1->suggestedYcbcrRange != s2->suggestedYcbcrRange) ||
      (s1->suggestedXChromaOffset != s2->suggestedXChromaOffset) ||
      (s1->suggestedYChromaOffset != s2->suggestedYChromaOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferConstraintsInfoFUCHSIA(VkBufferConstraintsInfoFUCHSIA const *s1,
                                            VkBufferConstraintsInfoFUCHSIA const *s2) {
  if (!compare_VkBufferCreateInfo(&s1->createInfo, &s2->createInfo) ||
      (s1->requiredFormatFeatures != s2->requiredFormatFeatures) ||
      !compare_VkBufferCollectionConstraintsInfoFUCHSIA(&s1->bufferCollectionConstraints,
                                                        &s2->bufferCollectionConstraints) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkSysmemColorSpaceFUCHSIA(VkSysmemColorSpaceFUCHSIA const *s1,
                                       VkSysmemColorSpaceFUCHSIA const *s2) {
  if ((s1->colorSpace != s2->colorSpace) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImageFormatConstraintsInfoFUCHSIA(VkImageFormatConstraintsInfoFUCHSIA const *s1,
                                                 VkImageFormatConstraintsInfoFUCHSIA const *s2) {
  if (!compare_VkImageCreateInfo(&s1->imageCreateInfo, &s2->imageCreateInfo) ||
      (s1->requiredFormatFeatures != s2->requiredFormatFeatures) || (s1->flags != s2->flags) ||
      (s1->sysmemPixelFormat != s2->sysmemPixelFormat) ||
      (s1->colorSpaceCount != s2->colorSpaceCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkImageConstraintsInfoFUCHSIA(VkImageConstraintsInfoFUCHSIA const *s1,
                                           VkImageConstraintsInfoFUCHSIA const *s2) {
  if ((s1->formatConstraintsCount != s2->formatConstraintsCount) ||
      !compare_VkBufferCollectionConstraintsInfoFUCHSIA(&s1->bufferCollectionConstraints,
                                                        &s2->bufferCollectionConstraints) ||
      (s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
bool compare_VkBufferCollectionConstraintsInfoFUCHSIA(
    VkBufferCollectionConstraintsInfoFUCHSIA const *s1,
    VkBufferCollectionConstraintsInfoFUCHSIA const *s2) {
  if ((s1->minBufferCount != s2->minBufferCount) || (s1->maxBufferCount != s2->maxBufferCount) ||
      (s1->minBufferCountForCamping != s2->minBufferCountForCamping) ||
      (s1->minBufferCountForDedicatedSlack != s2->minBufferCountForDedicatedSlack) ||
      (s1->minBufferCountForSharedSlack != s2->minBufferCountForSharedSlack) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_rgba10x6_formats
bool compare_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *s1,
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *s2) {
  if ((s1->formatRgba10x6WithoutYCbCrSampler != s2->formatRgba10x6WithoutYCbCrSampler) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkFormatProperties3(VkFormatProperties3 const *s1, VkFormatProperties3 const *s2) {
  if ((s1->linearTilingFeatures != s2->linearTilingFeatures) ||
      (s1->optimalTilingFeatures != s2->optimalTilingFeatures) ||
      (s1->bufferFeatures != s2->bufferFeatures) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_format_feature_flags2
bool compare_VkFormatProperties3KHR(VkFormatProperties3KHR const *s1,
                                    VkFormatProperties3KHR const *s2) {
  if ((s1->linearTilingFeatures != s2->linearTilingFeatures) ||
      (s1->optimalTilingFeatures != s2->optimalTilingFeatures) ||
      (s1->bufferFeatures != s2->bufferFeatures) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierPropertiesList2EXT(
    VkDrmFormatModifierPropertiesList2EXT const *s1,
    VkDrmFormatModifierPropertiesList2EXT const *s2) {
  if ((s1->drmFormatModifierCount != s2->drmFormatModifierCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_image_drm_format_modifier
bool compare_VkDrmFormatModifierProperties2EXT(VkDrmFormatModifierProperties2EXT const *s1,
                                               VkDrmFormatModifierProperties2EXT const *s2) {
  if ((s1->drmFormatModifier != s2->drmFormatModifier) ||
      (s1->drmFormatModifierPlaneCount != s2->drmFormatModifierPlaneCount) ||
      (s1->drmFormatModifierTilingFeatures != s2->drmFormatModifierTilingFeatures) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_ANDROID_external_memory_android_hardware_buffer
bool compare_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s1,
    VkAndroidHardwareBufferFormatProperties2ANDROID const *s2) {
  if ((s1->format != s2->format) || (s1->externalFormat != s2->externalFormat) ||
      (s1->formatFeatures != s2->formatFeatures) ||
      !compare_VkComponentMapping(&s1->samplerYcbcrConversionComponents,
                                  &s2->samplerYcbcrConversionComponents) ||
      (s1->suggestedYcbcrModel != s2->suggestedYcbcrModel) ||
      (s1->suggestedYcbcrRange != s2->suggestedYcbcrRange) ||
      (s1->suggestedXChromaOffset != s2->suggestedXChromaOffset) ||
      (s1->suggestedYChromaOffset != s2->suggestedYChromaOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPipelineRenderingCreateInfo(VkPipelineRenderingCreateInfo const *s1,
                                           VkPipelineRenderingCreateInfo const *s2) {
  if ((s1->viewMask != s2->viewMask) || (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkPipelineRenderingCreateInfoKHR(VkPipelineRenderingCreateInfoKHR const *s1,
                                              VkPipelineRenderingCreateInfoKHR const *s2) {
  if ((s1->viewMask != s2->viewMask) || (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkRenderingInfo(VkRenderingInfo const *s1, VkRenderingInfo const *s2) {
  if ((s1->flags != s2->flags) || !compare_VkRect2D(&s1->renderArea, &s2->renderArea) ||
      (s1->layerCount != s2->layerCount) || (s1->viewMask != s2->viewMask) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && (VK_KHR_dynamic_rendering || VK_QCOM_tile_properties)
bool compare_VkRenderingInfoKHR(VkRenderingInfoKHR const *s1, VkRenderingInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || !compare_VkRect2D(&s1->renderArea, &s2->renderArea) ||
      (s1->layerCount != s2->layerCount) || (s1->viewMask != s2->viewMask) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkRenderingFragmentShadingRateAttachmentInfoKHR(
    VkRenderingFragmentShadingRateAttachmentInfoKHR const *s1,
    VkRenderingFragmentShadingRateAttachmentInfoKHR const *s2) {
  if ((s1->imageView != s2->imageView) || (s1->imageLayout != s2->imageLayout) ||
      !compare_VkExtent2D(&s1->shadingRateAttachmentTexelSize,
                          &s2->shadingRateAttachmentTexelSize) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkRenderingFragmentDensityMapAttachmentInfoEXT(
    VkRenderingFragmentDensityMapAttachmentInfoEXT const *s1,
    VkRenderingFragmentDensityMapAttachmentInfoEXT const *s2) {
  if ((s1->imageView != s2->imageView) || (s1->imageLayout != s2->imageLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkPhysicalDeviceDynamicRenderingFeatures(
    VkPhysicalDeviceDynamicRenderingFeatures const *s1,
    VkPhysicalDeviceDynamicRenderingFeatures const *s2) {
  if ((s1->dynamicRendering != s2->dynamicRendering) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkPhysicalDeviceDynamicRenderingFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s1,
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *s2) {
  if ((s1->dynamicRendering != s2->dynamicRendering) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 204 && VK_VERSION_1_3
bool compare_VkCommandBufferInheritanceRenderingInfo(
    VkCommandBufferInheritanceRenderingInfo const *s1,
    VkCommandBufferInheritanceRenderingInfo const *s2) {
  if ((s1->flags != s2->flags) || (s1->viewMask != s2->viewMask) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat) ||
      (s1->rasterizationSamples != s2->rasterizationSamples) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkCommandBufferInheritanceRenderingInfoKHR(
    VkCommandBufferInheritanceRenderingInfoKHR const *s1,
    VkCommandBufferInheritanceRenderingInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || (s1->viewMask != s2->viewMask) ||
      (s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthAttachmentFormat != s2->depthAttachmentFormat) ||
      (s1->stencilAttachmentFormat != s2->stencilAttachmentFormat) ||
      (s1->rasterizationSamples != s2->rasterizationSamples) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkAttachmentSampleCountInfoAMD(VkAttachmentSampleCountInfoAMD const *s1,
                                            VkAttachmentSampleCountInfoAMD const *s2) {
  if ((s1->colorAttachmentCount != s2->colorAttachmentCount) ||
      (s1->depthStencilAttachmentSamples != s2->depthStencilAttachmentSamples) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkAttachmentSampleCountInfoNV(VkAttachmentSampleCountInfoNV const *s1,
                                           VkAttachmentSampleCountInfoNV const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 197 && VK_KHR_dynamic_rendering
bool compare_VkMultiviewPerViewAttributesInfoNVX(VkMultiviewPerViewAttributesInfoNVX const *s1,
                                                 VkMultiviewPerViewAttributesInfoNVX const *s2) {
  if ((s1->perViewAttributes != s2->perViewAttributes) ||
      (s1->perViewAttributesPositionXOnly != s2->perViewAttributesPositionXOnly) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod
bool compare_VkPhysicalDeviceImageViewMinLodFeaturesEXT(
    VkPhysicalDeviceImageViewMinLodFeaturesEXT const *s1,
    VkPhysicalDeviceImageViewMinLodFeaturesEXT const *s2) {
  if ((s1->minLod != s2->minLod) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod
bool compare_VkImageViewMinLodCreateInfoEXT(VkImageViewMinLodCreateInfoEXT const *s1,
                                            VkImageViewMinLodCreateInfoEXT const *s2) {
  if ((s1->minLod != s2->minLod) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_EXT_rasterization_order_attachment_access
bool compare_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT const *s1,
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT const *s2) {
  if ((s1->rasterizationOrderColorAttachmentAccess !=
       s2->rasterizationOrderColorAttachmentAccess) ||
      (s1->rasterizationOrderDepthAttachmentAccess !=
       s2->rasterizationOrderDepthAttachmentAccess) ||
      (s1->rasterizationOrderStencilAttachmentAccess !=
       s2->rasterizationOrderStencilAttachmentAccess) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 200 && VK_ARM_rasterization_order_attachment_access
bool compare_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s1,
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *s2) {
  if ((s1->rasterizationOrderColorAttachmentAccess !=
       s2->rasterizationOrderColorAttachmentAccess) ||
      (s1->rasterizationOrderDepthAttachmentAccess !=
       s2->rasterizationOrderDepthAttachmentAccess) ||
      (s1->rasterizationOrderStencilAttachmentAccess !=
       s2->rasterizationOrderStencilAttachmentAccess) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_NV_linear_color_attachment
bool compare_VkPhysicalDeviceLinearColorAttachmentFeaturesNV(
    VkPhysicalDeviceLinearColorAttachmentFeaturesNV const *s1,
    VkPhysicalDeviceLinearColorAttachmentFeaturesNV const *s2) {
  if ((s1->linearColorAttachment != s2->linearColorAttachment) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT const *s1,
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT const *s2) {
  if ((s1->graphicsPipelineLibrary != s2->graphicsPipelineLibrary) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT const *s1,
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT const *s2) {
  if ((s1->graphicsPipelineLibraryFastLinking != s2->graphicsPipelineLibraryFastLinking) ||
      (s1->graphicsPipelineLibraryIndependentInterpolationDecoration !=
       s2->graphicsPipelineLibraryIndependentInterpolationDecoration) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library
bool compare_VkGraphicsPipelineLibraryCreateInfoEXT(
    VkGraphicsPipelineLibraryCreateInfoEXT const *s1,
    VkGraphicsPipelineLibraryCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(
    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE const *s1,
    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE const *s2) {
  if ((s1->descriptorSetHostMapping != s2->descriptorSetHostMapping) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkDescriptorSetBindingReferenceVALVE(VkDescriptorSetBindingReferenceVALVE const *s1,
                                                  VkDescriptorSetBindingReferenceVALVE const *s2) {
  if ((s1->descriptorSetLayout != s2->descriptorSetLayout) || (s1->binding != s2->binding) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping
bool compare_VkDescriptorSetLayoutHostMappingInfoVALVE(
    VkDescriptorSetLayoutHostMappingInfoVALVE const *s1,
    VkDescriptorSetLayoutHostMappingInfoVALVE const *s2) {
  if ((s1->descriptorOffset != s2->descriptorOffset) ||
      (s1->descriptorSize != s2->descriptorSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(
    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT const *s1,
    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT const *s2) {
  if ((s1->shaderModuleIdentifier != s2->shaderModuleIdentifier) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(
    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT const *s1,
    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT const *s2) {
  for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
    if (s1->shaderModuleIdentifierAlgorithmUUID[i] != s2->shaderModuleIdentifierAlgorithmUUID[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkPipelineShaderStageModuleIdentifierCreateInfoEXT(
    VkPipelineShaderStageModuleIdentifierCreateInfoEXT const *s1,
    VkPipelineShaderStageModuleIdentifierCreateInfoEXT const *s2) {
  if ((s1->identifierSize != s2->identifierSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier
bool compare_VkShaderModuleIdentifierEXT(VkShaderModuleIdentifierEXT const *s1,
                                         VkShaderModuleIdentifierEXT const *s2) {
  if ((s1->identifierSize != s2->identifierSize) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT; ++i) {
    if (s1->identifier[i] != s2->identifier[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkImageCompressionControlEXT(VkImageCompressionControlEXT const *s1,
                                          VkImageCompressionControlEXT const *s2) {
  if ((s1->flags != s2->flags) ||
      (s1->compressionControlPlaneCount != s2->compressionControlPlaneCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkPhysicalDeviceImageCompressionControlFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlFeaturesEXT const *s1,
    VkPhysicalDeviceImageCompressionControlFeaturesEXT const *s2) {
  if ((s1->imageCompressionControl != s2->imageCompressionControl) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkImageCompressionPropertiesEXT(VkImageCompressionPropertiesEXT const *s1,
                                             VkImageCompressionPropertiesEXT const *s2) {
  if ((s1->imageCompressionFlags != s2->imageCompressionFlags) ||
      (s1->imageCompressionFixedRateFlags != s2->imageCompressionFixedRateFlags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control_swapchain
bool compare_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT const *s1,
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT const *s2) {
  if ((s1->imageCompressionControlSwapchain != s2->imageCompressionControlSwapchain) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkImageSubresource2EXT(VkImageSubresource2EXT const *s1,
                                    VkImageSubresource2EXT const *s2) {
  if (!compare_VkImageSubresource(&s1->imageSubresource, &s2->imageSubresource) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control
bool compare_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *s1,
                                     VkSubresourceLayout2EXT const *s2) {
  if (!compare_VkSubresourceLayout(&s1->subresourceLayout, &s2->subresourceLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationControlEXT(VkRenderPassCreationControlEXT const *s1,
                                            VkRenderPassCreationControlEXT const *s2) {
  if ((s1->disallowMerging != s2->disallowMerging) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationFeedbackInfoEXT(VkRenderPassCreationFeedbackInfoEXT const *s1,
                                                 VkRenderPassCreationFeedbackInfoEXT const *s2) {
  if ((s1->postMergeSubpassCount != s2->postMergeSubpassCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassCreationFeedbackCreateInfoEXT(
    VkRenderPassCreationFeedbackCreateInfoEXT const *s1,
    VkRenderPassCreationFeedbackCreateInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassSubpassFeedbackInfoEXT(VkRenderPassSubpassFeedbackInfoEXT const *s1,
                                                VkRenderPassSubpassFeedbackInfoEXT const *s2) {
  if ((s1->subpassMergeStatus != s2->subpassMergeStatus) ||
      (s1->postMergeIndex != s2->postMergeIndex) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->description[i] != s2->description[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback
bool compare_VkRenderPassSubpassFeedbackCreateInfoEXT(
    VkRenderPassSubpassFeedbackCreateInfoEXT const *s1,
    VkRenderPassSubpassFeedbackCreateInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback
bool compare_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(
    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT const *s1,
    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT const *s2) {
  if ((s1->subpassMergeFeedback != s2->subpassMergeFeedback) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapCreateInfoEXT(VkMicromapCreateInfoEXT const *s1,
                                     VkMicromapCreateInfoEXT const *s2) {
  if ((s1->createFlags != s2->createFlags) || (s1->buffer != s2->buffer) ||
      (s1->offset != s2->offset) || (s1->size != s2->size) || (s1->type != s2->type) ||
      (s1->deviceAddress != s2->deviceAddress) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapVersionInfoEXT(VkMicromapVersionInfoEXT const *s1,
                                      VkMicromapVersionInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkCopyMicromapInfoEXT(VkCopyMicromapInfoEXT const *s1,
                                   VkCopyMicromapInfoEXT const *s2) {
  if ((s1->src != s2->src) || (s1->dst != s2->dst) || (s1->mode != s2->mode) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapBuildSizesInfoEXT(VkMicromapBuildSizesInfoEXT const *s1,
                                         VkMicromapBuildSizesInfoEXT const *s2) {
  if ((s1->micromapSize != s2->micromapSize) || (s1->buildScratchSize != s2->buildScratchSize) ||
      (s1->discardable != s2->discardable) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapUsageEXT(VkMicromapUsageEXT const *s1, VkMicromapUsageEXT const *s2) {
  if ((s1->count != s2->count) || (s1->subdivisionLevel != s2->subdivisionLevel) ||
      (s1->format != s2->format) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkMicromapTriangleEXT(VkMicromapTriangleEXT const *s1,
                                   VkMicromapTriangleEXT const *s2) {
  if ((s1->dataOffset != s2->dataOffset) || (s1->subdivisionLevel != s2->subdivisionLevel) ||
      (s1->format != s2->format) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkPhysicalDeviceOpacityMicromapFeaturesEXT(
    VkPhysicalDeviceOpacityMicromapFeaturesEXT const *s1,
    VkPhysicalDeviceOpacityMicromapFeaturesEXT const *s2) {
  if ((s1->micromap != s2->micromap) || (s1->micromapCaptureReplay != s2->micromapCaptureReplay) ||
      (s1->micromapHostCommands != s2->micromapHostCommands) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap
bool compare_VkPhysicalDeviceOpacityMicromapPropertiesEXT(
    VkPhysicalDeviceOpacityMicromapPropertiesEXT const *s1,
    VkPhysicalDeviceOpacityMicromapPropertiesEXT const *s2) {
  if ((s1->maxOpacity2StateSubdivisionLevel != s2->maxOpacity2StateSubdivisionLevel) ||
      (s1->maxOpacity4StateSubdivisionLevel != s2->maxOpacity4StateSubdivisionLevel) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPipelinePropertiesIdentifierEXT(VkPipelinePropertiesIdentifierEXT const *s1,
                                               VkPipelinePropertiesIdentifierEXT const *s2) {
  for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
    if (s1->pipelineIdentifier[i] != s2->pipelineIdentifier[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties
bool compare_VkPhysicalDevicePipelinePropertiesFeaturesEXT(
    VkPhysicalDevicePipelinePropertiesFeaturesEXT const *s1,
    VkPhysicalDevicePipelinePropertiesFeaturesEXT const *s2) {
  if ((s1->pipelinePropertiesIdentifier != s2->pipelinePropertiesIdentifier) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 215 && VK_AMD_shader_early_and_late_fragment_tests
bool compare_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD const *s1,
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD const *s2) {
  if ((s1->shaderEarlyAndLateFragmentTests != s2->shaderEarlyAndLateFragmentTests) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalObjectCreateInfoEXT(VkExportMetalObjectCreateInfoEXT const *s1,
                                              VkExportMetalObjectCreateInfoEXT const *s2) {
  if ((s1->exportObjectType != s2->exportObjectType) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalObjectsInfoEXT(VkExportMetalObjectsInfoEXT const *s1,
                                         VkExportMetalObjectsInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalDeviceInfoEXT(VkExportMetalDeviceInfoEXT const *s1,
                                        VkExportMetalDeviceInfoEXT const *s2) {
  if ((s1->mtlDevice != s2->mtlDevice) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalCommandQueueInfoEXT(VkExportMetalCommandQueueInfoEXT const *s1,
                                              VkExportMetalCommandQueueInfoEXT const *s2) {
  if ((s1->queue != s2->queue) || (s1->mtlCommandQueue != s2->mtlCommandQueue) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalBufferInfoEXT(VkExportMetalBufferInfoEXT const *s1,
                                        VkExportMetalBufferInfoEXT const *s2) {
  if ((s1->memory != s2->memory) || (s1->mtlBuffer != s2->mtlBuffer) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalBufferInfoEXT(VkImportMetalBufferInfoEXT const *s1,
                                        VkImportMetalBufferInfoEXT const *s2) {
  if ((s1->mtlBuffer != s2->mtlBuffer) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalTextureInfoEXT(VkExportMetalTextureInfoEXT const *s1,
                                         VkExportMetalTextureInfoEXT const *s2) {
  if ((s1->image != s2->image) || (s1->imageView != s2->imageView) ||
      (s1->bufferView != s2->bufferView) || (s1->plane != s2->plane) ||
      (s1->mtlTexture != s2->mtlTexture) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalTextureInfoEXT(VkImportMetalTextureInfoEXT const *s1,
                                         VkImportMetalTextureInfoEXT const *s2) {
  if ((s1->plane != s2->plane) || (s1->mtlTexture != s2->mtlTexture) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalIOSurfaceInfoEXT(VkExportMetalIOSurfaceInfoEXT const *s1,
                                           VkExportMetalIOSurfaceInfoEXT const *s2) {
  if ((s1->image != s2->image) || (s1->ioSurface != s2->ioSurface) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalIOSurfaceInfoEXT(VkImportMetalIOSurfaceInfoEXT const *s1,
                                           VkImportMetalIOSurfaceInfoEXT const *s2) {
  if ((s1->ioSurface != s2->ioSurface) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkExportMetalSharedEventInfoEXT(VkExportMetalSharedEventInfoEXT const *s1,
                                             VkExportMetalSharedEventInfoEXT const *s2) {
  if ((s1->semaphore != s2->semaphore) || (s1->event != s2->event) ||
      (s1->mtlSharedEvent != s2->mtlSharedEvent) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects
bool compare_VkImportMetalSharedEventInfoEXT(VkImportMetalSharedEventInfoEXT const *s1,
                                             VkImportMetalSharedEventInfoEXT const *s2) {
  if ((s1->mtlSharedEvent != s2->mtlSharedEvent) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 217 && VK_EXT_non_seamless_cube_map
bool compare_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(
    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT const *s1,
    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT const *s2) {
  if ((s1->nonSeamlessCubeMap != s2->nonSeamlessCubeMap) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 221 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessFeaturesEXT(
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *s2) {
  if ((s1->pipelineRobustness != s2->pipelineRobustness) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 221 && VK_EXT_pipeline_robustness
bool compare_VkPipelineRobustnessCreateInfoEXT(VkPipelineRobustnessCreateInfoEXT const *s1,
                                               VkPipelineRobustnessCreateInfoEXT const *s2) {
  if ((s1->storageBuffers != s2->storageBuffers) || (s1->uniformBuffers != s2->uniformBuffers) ||
      (s1->vertexInputs != s2->vertexInputs) || (s1->images != s2->images) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 221 && VK_EXT_pipeline_robustness
bool compare_VkPhysicalDevicePipelineRobustnessPropertiesEXT(
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s1,
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *s2) {
  if ((s1->defaultRobustnessStorageBuffers != s2->defaultRobustnessStorageBuffers) ||
      (s1->defaultRobustnessUniformBuffers != s2->defaultRobustnessUniformBuffers) ||
      (s1->defaultRobustnessVertexInputs != s2->defaultRobustnessVertexInputs) ||
      (s1->defaultRobustnessImages != s2->defaultRobustnessImages) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkImageViewSampleWeightCreateInfoQCOM(
    VkImageViewSampleWeightCreateInfoQCOM const *s1,
    VkImageViewSampleWeightCreateInfoQCOM const *s2) {
  if (!compare_VkOffset2D(&s1->filterCenter, &s2->filterCenter) ||
      !compare_VkExtent2D(&s1->filterSize, &s2->filterSize) || (s1->numPhases != s2->numPhases) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkPhysicalDeviceImageProcessingFeaturesQCOM(
    VkPhysicalDeviceImageProcessingFeaturesQCOM const *s1,
    VkPhysicalDeviceImageProcessingFeaturesQCOM const *s2) {
  if ((s1->textureSampleWeighted != s2->textureSampleWeighted) ||
      (s1->textureBoxFilter != s2->textureBoxFilter) ||
      (s1->textureBlockMatch != s2->textureBlockMatch) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing
bool compare_VkPhysicalDeviceImageProcessingPropertiesQCOM(
    VkPhysicalDeviceImageProcessingPropertiesQCOM const *s1,
    VkPhysicalDeviceImageProcessingPropertiesQCOM const *s2) {
  if ((s1->maxWeightFilterPhases != s2->maxWeightFilterPhases) ||
      !compare_VkExtent2D(&s1->maxWeightFilterDimension, &s2->maxWeightFilterDimension) ||
      !compare_VkExtent2D(&s1->maxBlockMatchRegion, &s2->maxBlockMatchRegion) ||
      !compare_VkExtent2D(&s1->maxBoxFilterBlockSize, &s2->maxBoxFilterBlockSize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties
bool compare_VkPhysicalDeviceTilePropertiesFeaturesQCOM(
    VkPhysicalDeviceTilePropertiesFeaturesQCOM const *s1,
    VkPhysicalDeviceTilePropertiesFeaturesQCOM const *s2) {
  if ((s1->tileProperties != s2->tileProperties) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties
bool compare_VkTilePropertiesQCOM(VkTilePropertiesQCOM const *s1, VkTilePropertiesQCOM const *s2) {
  if (!compare_VkExtent3D(&s1->tileSize, &s2->tileSize) ||
      !compare_VkExtent2D(&s1->apronSize, &s2->apronSize) ||
      !compare_VkOffset2D(&s1->origin, &s2->origin) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling
bool compare_VkPhysicalDeviceAmigoProfilingFeaturesSEC(
    VkPhysicalDeviceAmigoProfilingFeaturesSEC const *s1,
    VkPhysicalDeviceAmigoProfilingFeaturesSEC const *s2) {
  if ((s1->amigoProfiling != s2->amigoProfiling) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling
bool compare_VkAmigoProfilingSubmitInfoSEC(VkAmigoProfilingSubmitInfoSEC const *s1,
                                           VkAmigoProfilingSubmitInfoSEC const *s2) {
  if ((s1->firstDrawTimestamp != s2->firstDrawTimestamp) ||
      (s1->swapBufferTimestamp != s2->swapBufferTimestamp) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 224 && VK_EXT_attachment_feedback_loop_layout
bool compare_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(
    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT const *s1,
    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT const *s2) {
  if ((s1->attachmentFeedbackLoopLayout != s2->attachmentFeedbackLoopLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 226 && VK_EXT_depth_clamp_zero_one
bool compare_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s1,
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *s2) {
  if ((s1->depthClampZeroOne != s2->depthClampZeroOne) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report
bool compare_VkPhysicalDeviceAddressBindingReportFeaturesEXT(
    VkPhysicalDeviceAddressBindingReportFeaturesEXT const *s1,
    VkPhysicalDeviceAddressBindingReportFeaturesEXT const *s2) {
  if ((s1->reportAddressBinding != s2->reportAddressBinding) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report
bool compare_VkDeviceAddressBindingCallbackDataEXT(
    VkDeviceAddressBindingCallbackDataEXT const *s1,
    VkDeviceAddressBindingCallbackDataEXT const *s2) {
  if ((s1->flags != s2->flags) || (s1->baseAddress != s2->baseAddress) || (s1->size != s2->size) ||
      (s1->bindingType != s2->bindingType) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkPhysicalDeviceOpticalFlowFeaturesNV(
    VkPhysicalDeviceOpticalFlowFeaturesNV const *s1,
    VkPhysicalDeviceOpticalFlowFeaturesNV const *s2) {
  if ((s1->opticalFlow != s2->opticalFlow) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkPhysicalDeviceOpticalFlowPropertiesNV(
    VkPhysicalDeviceOpticalFlowPropertiesNV const *s1,
    VkPhysicalDeviceOpticalFlowPropertiesNV const *s2) {
  if ((s1->supportedOutputGridSizes != s2->supportedOutputGridSizes) ||
      (s1->supportedHintGridSizes != s2->supportedHintGridSizes) ||
      (s1->hintSupported != s2->hintSupported) || (s1->costSupported != s2->costSupported) ||
      (s1->bidirectionalFlowSupported != s2->bidirectionalFlowSupported) ||
      (s1->globalFlowSupported != s2->globalFlowSupported) || (s1->minWidth != s2->minWidth) ||
      (s1->minHeight != s2->minHeight) || (s1->maxWidth != s2->maxWidth) ||
      (s1->maxHeight != s2->maxHeight) ||
      (s1->maxNumRegionsOfInterest != s2->maxNumRegionsOfInterest) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowImageFormatInfoNV(VkOpticalFlowImageFormatInfoNV const *s1,
                                            VkOpticalFlowImageFormatInfoNV const *s2) {
  if ((s1->usage != s2->usage) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowImageFormatPropertiesNV(VkOpticalFlowImageFormatPropertiesNV const *s1,
                                                  VkOpticalFlowImageFormatPropertiesNV const *s2) {
  if ((s1->format != s2->format) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowSessionCreateInfoNV(VkOpticalFlowSessionCreateInfoNV const *s1,
                                              VkOpticalFlowSessionCreateInfoNV const *s2) {
  if ((s1->width != s2->width) || (s1->height != s2->height) ||
      (s1->imageFormat != s2->imageFormat) || (s1->flowVectorFormat != s2->flowVectorFormat) ||
      (s1->costFormat != s2->costFormat) || (s1->outputGridSize != s2->outputGridSize) ||
      (s1->hintGridSize != s2->hintGridSize) || (s1->performanceLevel != s2->performanceLevel) ||
      (s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowSessionCreatePrivateDataInfoNV(
    VkOpticalFlowSessionCreatePrivateDataInfoNV const *s1,
    VkOpticalFlowSessionCreatePrivateDataInfoNV const *s2) {
  if ((s1->id != s2->id) || (s1->size != s2->size) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_NV_optical_flow
bool compare_VkOpticalFlowExecuteInfoNV(VkOpticalFlowExecuteInfoNV const *s1,
                                        VkOpticalFlowExecuteInfoNV const *s2) {
  if ((s1->flags != s2->flags) || (s1->regionCount != s2->regionCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkPhysicalDeviceFaultFeaturesEXT(VkPhysicalDeviceFaultFeaturesEXT const *s1,
                                              VkPhysicalDeviceFaultFeaturesEXT const *s2) {
  if ((s1->deviceFault != s2->deviceFault) ||
      (s1->deviceFaultVendorBinary != s2->deviceFaultVendorBinary) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultAddressInfoEXT(VkDeviceFaultAddressInfoEXT const *s1,
                                         VkDeviceFaultAddressInfoEXT const *s2) {
  if ((s1->addressType != s2->addressType) || (s1->reportedAddress != s2->reportedAddress) ||
      (s1->addressPrecision != s2->addressPrecision) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultVendorInfoEXT(VkDeviceFaultVendorInfoEXT const *s1,
                                        VkDeviceFaultVendorInfoEXT const *s2) {
  if ((s1->vendorFaultCode != s2->vendorFaultCode) ||
      (s1->vendorFaultData != s2->vendorFaultData) || false)
    return false;

  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->description[i] != s2->description[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultCountsEXT(VkDeviceFaultCountsEXT const *s1,
                                    VkDeviceFaultCountsEXT const *s2) {
  if ((s1->addressInfoCount != s2->addressInfoCount) ||
      (s1->vendorInfoCount != s2->vendorInfoCount) ||
      (s1->vendorBinarySize != s2->vendorBinarySize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultInfoEXT(VkDeviceFaultInfoEXT const *s1, VkDeviceFaultInfoEXT const *s2) {
  for (uint32_t i = 0; i < VK_MAX_DESCRIPTION_SIZE; ++i) {
    if (s1->description[i] != s2->description[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 230 && VK_EXT_device_fault
bool compare_VkDeviceFaultVendorBinaryHeaderVersionOneEXT(
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s1,
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *s2) {
  if ((s1->headerSize != s2->headerSize) || (s1->headerVersion != s2->headerVersion) ||
      (s1->vendorID != s2->vendorID) || (s1->deviceID != s2->deviceID) ||
      (s1->driverVersion != s2->driverVersion) ||
      (s1->applicationNameOffset != s2->applicationNameOffset) ||
      (s1->applicationVersion != s2->applicationVersion) ||
      (s1->engineNameOffset != s2->engineNameOffset) || false)
    return false;

  for (uint32_t i = 0; i < VK_UUID_SIZE; ++i) {
    if (s1->pipelineCacheUUID[i] != s2->pipelineCacheUUID[i])
      return false;
  }

  return true;
}
#endif

#if VK_HEADER_VERSION >= 240 && VK_EXT_pipeline_library_group_handles
bool compare_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(
    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT const *s1,
    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT const *s2) {
  if ((s1->pipelineLibraryGroupHandles != s2->pipelineLibraryGroupHandles) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression
bool compare_VkDecompressMemoryRegionNV(VkDecompressMemoryRegionNV const *s1,
                                        VkDecompressMemoryRegionNV const *s2) {
  if ((s1->srcAddress != s2->srcAddress) || (s1->dstAddress != s2->dstAddress) ||
      (s1->compressedSize != s2->compressedSize) ||
      (s1->decompressedSize != s2->decompressedSize) ||
      (s1->decompressionMethod != s2->decompressionMethod) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 231 && VK_ARM_shader_core_builtins
bool compare_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s1,
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *s2) {
  if (
#if VK_HEADER_VERSION >= 232
      (s1->shaderCoreMask != s2->shaderCoreMask) ||
#endif
      (s1->shaderCoreCount != s2->shaderCoreCount) ||
      (s1->shaderWarpsPerCore != s2->shaderWarpsPerCore) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 231 && VK_ARM_shader_core_builtins
bool compare_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(
    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM const *s1,
    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM const *s2) {
  if ((s1->shaderCoreBuiltins != s2->shaderCoreBuiltins) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentModeEXT(VkSurfacePresentModeEXT const *s1,
                                     VkSurfacePresentModeEXT const *s2) {
  if ((s1->presentMode != s2->presentMode) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentScalingCapabilitiesEXT(
    VkSurfacePresentScalingCapabilitiesEXT const *s1,
    VkSurfacePresentScalingCapabilitiesEXT const *s2) {
  if ((s1->supportedPresentScaling != s2->supportedPresentScaling) ||
      (s1->supportedPresentGravityX != s2->supportedPresentGravityX) ||
      (s1->supportedPresentGravityY != s2->supportedPresentGravityY) ||
      !compare_VkExtent2D(&s1->minScaledImageExtent, &s2->minScaledImageExtent) ||
      !compare_VkExtent2D(&s1->maxScaledImageExtent, &s2->maxScaledImageExtent) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1
bool compare_VkSurfacePresentModeCompatibilityEXT(VkSurfacePresentModeCompatibilityEXT const *s1,
                                                  VkSurfacePresentModeCompatibilityEXT const *s2) {
  if ((s1->presentModeCount != s2->presentModeCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT const *s1,
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT const *s2) {
  if ((s1->swapchainMaintenance1 != s2->swapchainMaintenance1) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentFenceInfoEXT(VkSwapchainPresentFenceInfoEXT const *s1,
                                            VkSwapchainPresentFenceInfoEXT const *s2) {
  if ((s1->swapchainCount != s2->swapchainCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentModesCreateInfoEXT(VkSwapchainPresentModesCreateInfoEXT const *s1,
                                                  VkSwapchainPresentModesCreateInfoEXT const *s2) {
  if ((s1->presentModeCount != s2->presentModeCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentModeInfoEXT(VkSwapchainPresentModeInfoEXT const *s1,
                                           VkSwapchainPresentModeInfoEXT const *s2) {
  if ((s1->swapchainCount != s2->swapchainCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkSwapchainPresentScalingCreateInfoEXT(
    VkSwapchainPresentScalingCreateInfoEXT const *s1,
    VkSwapchainPresentScalingCreateInfoEXT const *s2) {
  if ((s1->scalingBehavior != s2->scalingBehavior) ||
      (s1->presentGravityX != s2->presentGravityX) ||
      (s1->presentGravityY != s2->presentGravityY) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1
bool compare_VkReleaseSwapchainImagesInfoEXT(VkReleaseSwapchainImagesInfoEXT const *s1,
                                             VkReleaseSwapchainImagesInfoEXT const *s2) {
  if ((s1->swapchain != s2->swapchain) || (s1->imageIndexCount != s2->imageIndexCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder
bool compare_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(
    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV const *s1,
    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV const *s2) {
  if ((s1->rayTracingInvocationReorder != s2->rayTracingInvocationReorder) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder
bool compare_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(
    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV const *s1,
    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV const *s2) {
  if ((s1->rayTracingInvocationReorderReorderingHint !=
       s2->rayTracingInvocationReorderReorderingHint) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 236 && VK_LUNARG_direct_driver_loading
bool compare_VkDirectDriverLoadingInfoLUNARG(VkDirectDriverLoadingInfoLUNARG const *s1,
                                             VkDirectDriverLoadingInfoLUNARG const *s2) {
  if ((s1->flags != s2->flags) || (s1->pfnGetInstanceProcAddr != s2->pfnGetInstanceProcAddr) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 236 && VK_LUNARG_direct_driver_loading
bool compare_VkDirectDriverLoadingListLUNARG(VkDirectDriverLoadingListLUNARG const *s1,
                                             VkDirectDriverLoadingListLUNARG const *s2) {
  if ((s1->mode != s2->mode) || (s1->driverCount != s2->driverCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 236 && VK_QCOM_multiview_per_view_viewports
bool compare_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(
    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM const *s1,
    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM const *s2) {
  if ((s1->multiviewPerViewViewports != s2->multiviewPerViewViewports) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264ProfileInfoEXT(VkVideoDecodeH264ProfileInfoEXT const *s1,
                                             VkVideoDecodeH264ProfileInfoEXT const *s2) {
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || (s1->pictureLayout != s2->pictureLayout) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *s1,
                                              VkVideoDecodeH264CapabilitiesEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->maxLevelIdc != s2->maxLevelIdc) ||
#endif
      !compare_VkOffset2D(&s1->fieldOffsetGranularity, &s2->fieldOffsetGranularity) ||
#if VK_HEADER_VERSION <= 228
      (s1->maxLevel != s2->maxLevel) ||
#endif
#if VK_HEADER_VERSION <= 208
      !compare_VkExtensionProperties(&s1->stdExtensionVersion, &s2->stdExtensionVersion) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersAddInfoEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->stdSPSCount != s2->stdSPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->stdPPSCount != s2->stdPPSCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->spsStdCount != s2->spsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->ppsStdCount != s2->ppsStdCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->maxStdSPSCount != s2->maxStdSPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->maxStdPPSCount != s2->maxStdPPSCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxSpsStdCount != s2->maxSpsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxPpsStdCount != s2->maxPpsStdCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *s1,
                                             VkVideoDecodeH264PictureInfoEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->sliceCount != s2->sliceCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->slicesCount != s2->slicesCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264DpbSlotInfoEXT(VkVideoDecodeH264DpbSlotInfoEXT const *s1,
                                             VkVideoDecodeH264DpbSlotInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265ProfileInfoEXT(VkVideoDecodeH265ProfileInfoEXT const *s1,
                                             VkVideoDecodeH265ProfileInfoEXT const *s2) {
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *s1,
                                              VkVideoDecodeH265CapabilitiesEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->maxLevelIdc != s2->maxLevelIdc) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxLevel != s2->maxLevel) ||
#endif
#if VK_HEADER_VERSION <= 208
      !compare_VkExtensionProperties(&s1->stdExtensionVersion, &s2->stdExtensionVersion) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersAddInfoEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->stdVPSCount != s2->stdVPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->stdSPSCount != s2->stdSPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->stdPPSCount != s2->stdPPSCount) ||
#endif
#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228
      (s1->vpsStdCount != s2->vpsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->spsStdCount != s2->spsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->ppsStdCount != s2->ppsStdCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s1,
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 229
      (s1->maxStdVPSCount != s2->maxStdVPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->maxStdSPSCount != s2->maxStdSPSCount) ||
#endif
#if VK_HEADER_VERSION >= 229
      (s1->maxStdPPSCount != s2->maxStdPPSCount) ||
#endif
#if VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228
      (s1->maxVpsStdCount != s2->maxVpsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxSpsStdCount != s2->maxSpsStdCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->maxPpsStdCount != s2->maxPpsStdCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *s1,
                                             VkVideoDecodeH265PictureInfoEXT const *s2) {
  if (
#if VK_HEADER_VERSION >= 236
      (s1->sliceSegmentCount != s2->sliceSegmentCount) ||
#endif
#if VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 235
      (s1->sliceCount != s2->sliceCount) ||
#endif
#if VK_HEADER_VERSION <= 228
      (s1->slicesCount != s2->slicesCount) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265DpbSlotInfoEXT(VkVideoDecodeH265DpbSlotInfoEXT const *s1,
                                             VkVideoDecodeH265DpbSlotInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264MvcInfoEXT(VkVideoDecodeH264MvcInfoEXT const *s1,
                                         VkVideoDecodeH264MvcInfoEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoQueueFamilyProperties2KHR(VkVideoQueueFamilyProperties2KHR const *s1,
                                              VkVideoQueueFamilyProperties2KHR const *s2) {
  if ((s1->videoCodecOperations != s2->videoCodecOperations) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkQueueFamilyQueryResultStatusProperties2KHR(
    VkQueueFamilyQueryResultStatusProperties2KHR const *s1,
    VkQueueFamilyQueryResultStatusProperties2KHR const *s2) {
  if (
#if VK_HEADER_VERSION >= 218
      (s1->queryResultStatusSupport != s2->queryResultStatusSupport) ||
#endif
#if VK_HEADER_VERSION <= 217
      (s1->supported != s2->supported) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoProfilesKHR(VkVideoProfilesKHR const *s1, VkVideoProfilesKHR const *s2) {
  if ((s1->profileCount != s2->profileCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoProfileKHR(VkVideoProfileKHR const *s1, VkVideoProfileKHR const *s2) {
  if ((s1->videoCodecOperation != s2->videoCodecOperation) ||
      (s1->chromaSubsampling != s2->chromaSubsampling) || (s1->lumaBitDepth != s2->lumaBitDepth) ||
      (s1->chromaBitDepth != s2->chromaBitDepth) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoGetMemoryPropertiesKHR(VkVideoGetMemoryPropertiesKHR const *s1,
                                           VkVideoGetMemoryPropertiesKHR const *s2) {
  if ((s1->memoryBindIndex != s2->memoryBindIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoBindMemoryKHR(VkVideoBindMemoryKHR const *s1, VkVideoBindMemoryKHR const *s2) {
  if ((s1->memoryBindIndex != s2->memoryBindIndex) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->memorySize != s2->memorySize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoPictureResourceKHR(VkVideoPictureResourceKHR const *s1,
                                       VkVideoPictureResourceKHR const *s2) {
  if (!compare_VkOffset2D(&s1->codedOffset, &s2->codedOffset) ||
      !compare_VkExtent2D(&s1->codedExtent, &s2->codedExtent) ||
      (s1->baseArrayLayer != s2->baseArrayLayer) ||
      (s1->imageViewBinding != s2->imageViewBinding) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue
bool compare_VkVideoReferenceSlotKHR(VkVideoReferenceSlotKHR const *s1,
                                     VkVideoReferenceSlotKHR const *s2) {
  if ((s1->slotIndex != s2->slotIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *s1,
                                         VkVideoDecodeH264ProfileEXT const *s2) {
  if ((s1->stdProfileIdc != s2->stdProfileIdc) ||
#if VK_HEADER_VERSION >= 187
      (s1->pictureLayout != s2->pictureLayout) ||
#endif
#if VK_HEADER_VERSION <= 186
      (s1->fieldLayout != s2->fieldLayout) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264MvcEXT(VkVideoDecodeH264MvcEXT const *s1,
                                     VkVideoDecodeH264MvcEXT const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265ProfileEXT(VkVideoDecodeH265ProfileEXT const *s1,
                                         VkVideoDecodeH265ProfileEXT const *s2) {
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264ReferenceListsEXT(VkVideoEncodeH264ReferenceListsEXT const *s1,
                                                VkVideoEncodeH264ReferenceListsEXT const *s2) {
  if ((s1->referenceList0EntryCount != s2->referenceList0EntryCount) ||
      (s1->referenceList1EntryCount != s2->referenceList1EntryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264EmitPictureParametersEXT(
    VkVideoEncodeH264EmitPictureParametersEXT const *s1,
    VkVideoEncodeH264EmitPictureParametersEXT const *s2) {
  if ((s1->spsId != s2->spsId) || (s1->emitSpsEnable != s2->emitSpsEnable) ||
      (s1->ppsIdEntryCount != s2->ppsIdEntryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264ProfileEXT(VkVideoEncodeH264ProfileEXT const *s1,
                                         VkVideoEncodeH264ProfileEXT const *s2) {
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *s1,
                                           VkVideoEncodeH264NaluSliceEXT const *s2) {
  if ((s1->mbCount != s2->mbCount) ||
#if VK_HEADER_VERSION <= 205
      (s1->refFinalList0EntryCount != s2->refFinalList0EntryCount) ||
#endif
#if VK_HEADER_VERSION <= 205
      (s1->refFinalList1EntryCount != s2->refFinalList1EntryCount) ||
#endif
#if VK_HEADER_VERSION <= 200
      (s1->precedingNaluBytes != s2->precedingNaluBytes) ||
#endif
#if VK_HEADER_VERSION <= 200
      (s1->minQp != s2->minQp) ||
#endif
#if VK_HEADER_VERSION <= 200
      (s1->maxQp != s2->maxQp) ||
#endif
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265EmitPictureParametersEXT(
    VkVideoEncodeH265EmitPictureParametersEXT const *s1,
    VkVideoEncodeH265EmitPictureParametersEXT const *s2) {
  if ((s1->vpsId != s2->vpsId) || (s1->spsId != s2->spsId) ||
      (s1->emitVpsEnable != s2->emitVpsEnable) || (s1->emitSpsEnable != s2->emitSpsEnable) ||
      (s1->ppsIdEntryCount != s2->ppsIdEntryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265NaluSliceSegmentEXT(VkVideoEncodeH265NaluSliceSegmentEXT const *s1,
                                                  VkVideoEncodeH265NaluSliceSegmentEXT const *s2) {
  if ((s1->ctbCount != s2->ctbCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265ProfileEXT(VkVideoEncodeH265ProfileEXT const *s1,
                                         VkVideoEncodeH265ProfileEXT const *s2) {
  if ((s1->stdProfileIdc != s2->stdProfileIdc) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265ReferenceListsEXT(VkVideoEncodeH265ReferenceListsEXT const *s1,
                                                VkVideoEncodeH265ReferenceListsEXT const *s2) {
  if ((s1->referenceList0EntryCount != s2->referenceList0EntryCount) ||
      (s1->referenceList1EntryCount != s2->referenceList1EntryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 214 && VK_HEADER_VERSION <= 214 &&                                        \
    VK_AMD_shader_early_and_late_fragment_tests
bool compare_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT const *s1,
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT const *s2) {
  if ((s1->shaderEarlyAndLateFragmentTests != s2->shaderEarlyAndLateFragmentTests) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264
bool compare_VkVideoDecodeH264SessionCreateInfoEXT(
    VkVideoDecodeH264SessionCreateInfoEXT const *s1,
    VkVideoDecodeH264SessionCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265
bool compare_VkVideoDecodeH265SessionCreateInfoEXT(
    VkVideoDecodeH265SessionCreateInfoEXT const *s1,
    VkVideoDecodeH265SessionCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264
bool compare_VkVideoEncodeH264SessionCreateInfoEXT(
    VkVideoEncodeH264SessionCreateInfoEXT const *s1,
    VkVideoEncodeH264SessionCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) ||
      !compare_VkExtent2D(&s1->maxPictureSizeInMbs, &s2->maxPictureSizeInMbs) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265SessionCreateInfoEXT(
    VkVideoEncodeH265SessionCreateInfoEXT const *s1,
    VkVideoEncodeH265SessionCreateInfoEXT const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265
bool compare_VkVideoEncodeH265NaluSliceEXT(VkVideoEncodeH265NaluSliceEXT const *s1,
                                           VkVideoEncodeH265NaluSliceEXT const *s2) {
  if ((s1->ctbCount != s2->ctbCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkBindAccelerationStructureMemoryInfoKHR(
    VkBindAccelerationStructureMemoryInfoKHR const *s1,
    VkBindAccelerationStructureMemoryInfoKHR const *s2) {
  if ((s1->accelerationStructure != s2->accelerationStructure) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->deviceIndexCount != s2->deviceIndexCount) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkAccelerationStructureMemoryRequirementsInfoKHR(
    VkAccelerationStructureMemoryRequirementsInfoKHR const *s1,
    VkAccelerationStructureMemoryRequirementsInfoKHR const *s2) {
  if ((s1->type != s2->type) || (s1->buildType != s2->buildType) ||
      (s1->accelerationStructure != s2->accelerationStructure) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkPhysicalDeviceRayTracingFeaturesKHR(
    VkPhysicalDeviceRayTracingFeaturesKHR const *s1,
    VkPhysicalDeviceRayTracingFeaturesKHR const *s2) {
  if ((s1->rayTracing != s2->rayTracing) ||
      (s1->rayTracingShaderGroupHandleCaptureReplay !=
       s2->rayTracingShaderGroupHandleCaptureReplay) ||
      (s1->rayTracingShaderGroupHandleCaptureReplayMixed !=
       s2->rayTracingShaderGroupHandleCaptureReplayMixed) ||
      (s1->rayTracingAccelerationStructureCaptureReplay !=
       s2->rayTracingAccelerationStructureCaptureReplay) ||
      (s1->rayTracingIndirectTraceRays != s2->rayTracingIndirectTraceRays) ||
      (s1->rayTracingIndirectAccelerationStructureBuild !=
       s2->rayTracingIndirectAccelerationStructureBuild) ||
      (s1->rayTracingHostAccelerationStructureCommands !=
       s2->rayTracingHostAccelerationStructureCommands) ||
      (s1->rayQuery != s2->rayQuery) ||
      (s1->rayTracingPrimitiveCulling != s2->rayTracingPrimitiveCulling) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkPhysicalDeviceRayTracingPropertiesKHR(
    VkPhysicalDeviceRayTracingPropertiesKHR const *s1,
    VkPhysicalDeviceRayTracingPropertiesKHR const *s2) {
  if ((s1->shaderGroupHandleSize != s2->shaderGroupHandleSize) ||
      (s1->maxRecursionDepth != s2->maxRecursionDepth) ||
      (s1->maxShaderGroupStride != s2->maxShaderGroupStride) ||
      (s1->shaderGroupBaseAlignment != s2->shaderGroupBaseAlignment) ||
      (s1->maxGeometryCount != s2->maxGeometryCount) ||
      (s1->maxInstanceCount != s2->maxInstanceCount) ||
      (s1->maxPrimitiveCount != s2->maxPrimitiveCount) ||
      (s1->maxDescriptorSetAccelerationStructures != s2->maxDescriptorSetAccelerationStructures) ||
      (s1->shaderGroupHandleCaptureReplaySize != s2->shaderGroupHandleCaptureReplaySize) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkStridedBufferRegionKHR(VkStridedBufferRegionKHR const *s1,
                                      VkStridedBufferRegionKHR const *s2) {
  if ((s1->buffer != s2->buffer) || (s1->offset != s2->offset) || (s1->stride != s2->stride) ||
      (s1->size != s2->size) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkAccelerationStructureBuildOffsetInfoKHR(
    VkAccelerationStructureBuildOffsetInfoKHR const *s1,
    VkAccelerationStructureBuildOffsetInfoKHR const *s2) {
  if ((s1->primitiveCount != s2->primitiveCount) || (s1->primitiveOffset != s2->primitiveOffset) ||
      (s1->firstVertex != s2->firstVertex) || (s1->transformOffset != s2->transformOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkAccelerationStructureCreateGeometryTypeInfoKHR(
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *s1,
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *s2) {
  if ((s1->geometryType != s2->geometryType) || (s1->maxPrimitiveCount != s2->maxPrimitiveCount) ||
      (s1->indexType != s2->indexType) || (s1->maxVertexCount != s2->maxVertexCount) ||
      (s1->vertexFormat != s2->vertexFormat) || (s1->allowsTransforms != s2->allowsTransforms) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
bool compare_VkAccelerationStructureVersionKHR(VkAccelerationStructureVersionKHR const *s1,
                                               VkAccelerationStructureVersionKHR const *s2) {
  return true;
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_deferred_host_operations
bool compare_VkDeferredOperationInfoKHR(VkDeferredOperationInfoKHR const *s1,
                                        VkDeferredOperationInfoKHR const *s2) {
  if ((s1->operationHandle != s2->operationHandle) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkDeviceGeneratedCommandsFeaturesNVX(VkDeviceGeneratedCommandsFeaturesNVX const *s1,
                                                  VkDeviceGeneratedCommandsFeaturesNVX const *s2) {
  if ((s1->computeBindingPointSupport != s2->computeBindingPointSupport) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkDeviceGeneratedCommandsLimitsNVX(VkDeviceGeneratedCommandsLimitsNVX const *s1,
                                                VkDeviceGeneratedCommandsLimitsNVX const *s2) {
  if ((s1->maxIndirectCommandsLayoutTokenCount != s2->maxIndirectCommandsLayoutTokenCount) ||
      (s1->maxObjectEntryCounts != s2->maxObjectEntryCounts) ||
      (s1->minSequenceCountBufferOffsetAlignment != s2->minSequenceCountBufferOffsetAlignment) ||
      (s1->minSequenceIndexBufferOffsetAlignment != s2->minSequenceIndexBufferOffsetAlignment) ||
      (s1->minCommandsTokenBufferOffsetAlignment != s2->minCommandsTokenBufferOffsetAlignment) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsTokenNVX(VkIndirectCommandsTokenNVX const *s1,
                                        VkIndirectCommandsTokenNVX const *s2) {
  if ((s1->tokenType != s2->tokenType) || (s1->buffer != s2->buffer) ||
      (s1->offset != s2->offset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsLayoutTokenNVX(VkIndirectCommandsLayoutTokenNVX const *s1,
                                              VkIndirectCommandsLayoutTokenNVX const *s2) {
  if ((s1->tokenType != s2->tokenType) || (s1->bindingUnit != s2->bindingUnit) ||
      (s1->dynamicCount != s2->dynamicCount) || (s1->divisor != s2->divisor) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkIndirectCommandsLayoutCreateInfoNVX(
    VkIndirectCommandsLayoutCreateInfoNVX const *s1,
    VkIndirectCommandsLayoutCreateInfoNVX const *s2) {
  if ((s1->pipelineBindPoint != s2->pipelineBindPoint) || (s1->flags != s2->flags) ||
      (s1->tokenCount != s2->tokenCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkCmdProcessCommandsInfoNVX(VkCmdProcessCommandsInfoNVX const *s1,
                                         VkCmdProcessCommandsInfoNVX const *s2) {
  if ((s1->objectTable != s2->objectTable) ||
      (s1->indirectCommandsLayout != s2->indirectCommandsLayout) ||
      (s1->indirectCommandsTokenCount != s2->indirectCommandsTokenCount) ||
      (s1->maxSequencesCount != s2->maxSequencesCount) ||
      (s1->targetCommandBuffer != s2->targetCommandBuffer) ||
      (s1->sequencesCountBuffer != s2->sequencesCountBuffer) ||
      (s1->sequencesCountOffset != s2->sequencesCountOffset) ||
      (s1->sequencesIndexBuffer != s2->sequencesIndexBuffer) ||
      (s1->sequencesIndexOffset != s2->sequencesIndexOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkCmdReserveSpaceForCommandsInfoNVX(VkCmdReserveSpaceForCommandsInfoNVX const *s1,
                                                 VkCmdReserveSpaceForCommandsInfoNVX const *s2) {
  if ((s1->objectTable != s2->objectTable) ||
      (s1->indirectCommandsLayout != s2->indirectCommandsLayout) ||
      (s1->maxSequencesCount != s2->maxSequencesCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableCreateInfoNVX(VkObjectTableCreateInfoNVX const *s1,
                                        VkObjectTableCreateInfoNVX const *s2) {
  if ((s1->objectCount != s2->objectCount) ||
      (s1->maxUniformBuffersPerDescriptor != s2->maxUniformBuffersPerDescriptor) ||
      (s1->maxStorageBuffersPerDescriptor != s2->maxStorageBuffersPerDescriptor) ||
      (s1->maxStorageImagesPerDescriptor != s2->maxStorageImagesPerDescriptor) ||
      (s1->maxSampledImagesPerDescriptor != s2->maxSampledImagesPerDescriptor) ||
      (s1->maxPipelineLayouts != s2->maxPipelineLayouts) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableEntryNVX(VkObjectTableEntryNVX const *s1,
                                   VkObjectTableEntryNVX const *s2) {
  if ((s1->type != s2->type) || (s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTablePipelineEntryNVX(VkObjectTablePipelineEntryNVX const *s1,
                                           VkObjectTablePipelineEntryNVX const *s2) {
  if ((s1->type != s2->type) || (s1->flags != s2->flags) || (s1->pipeline != s2->pipeline) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableDescriptorSetEntryNVX(VkObjectTableDescriptorSetEntryNVX const *s1,
                                                VkObjectTableDescriptorSetEntryNVX const *s2) {
  if ((s1->type != s2->type) || (s1->flags != s2->flags) ||
      (s1->pipelineLayout != s2->pipelineLayout) || (s1->descriptorSet != s2->descriptorSet) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableVertexBufferEntryNVX(VkObjectTableVertexBufferEntryNVX const *s1,
                                               VkObjectTableVertexBufferEntryNVX const *s2) {
  if ((s1->type != s2->type) || (s1->flags != s2->flags) || (s1->buffer != s2->buffer) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTableIndexBufferEntryNVX(VkObjectTableIndexBufferEntryNVX const *s1,
                                              VkObjectTableIndexBufferEntryNVX const *s2) {
  if ((s1->type != s2->type) || (s1->flags != s2->flags) || (s1->buffer != s2->buffer) ||
      (s1->indexType != s2->indexType) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
bool compare_VkObjectTablePushConstantEntryNVX(VkObjectTablePushConstantEntryNVX const *s1,
                                               VkObjectTablePushConstantEntryNVX const *s2) {
  if ((s1->type != s2->type) || (s1->flags != s2->flags) ||
      (s1->pipelineLayout != s2->pipelineLayout) || (s1->stageFlags != s2->stageFlags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 114 && VK_INTEL_shader_integer_functions2
bool compare_VkPhysicalDeviceShaderIntegerFunctions2INTEL(
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *s1,
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *s2) {
  if ((s1->shaderIntegerFunctions2 != s2->shaderIntegerFunctions2) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface
bool compare_VkMirSurfaceCreateInfoKHR(VkMirSurfaceCreateInfoKHR const *s1,
                                       VkMirSurfaceCreateInfoKHR const *s2) {
  if ((s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkRaytracingPipelineCreateInfoNVX(VkRaytracingPipelineCreateInfoNVX const *s1,
                                               VkRaytracingPipelineCreateInfoNVX const *s2) {
  if ((s1->flags != s2->flags) || (s1->stageCount != s2->stageCount) ||
      (s1->maxRecursionDepth != s2->maxRecursionDepth) || (s1->layout != s2->layout) ||
      (s1->basePipelineHandle != s2->basePipelineHandle) ||
      (s1->basePipelineIndex != s2->basePipelineIndex) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryTrianglesNVX(VkGeometryTrianglesNVX const *s1,
                                    VkGeometryTrianglesNVX const *s2) {
  if ((s1->vertexData != s2->vertexData) || (s1->vertexOffset != s2->vertexOffset) ||
      (s1->vertexCount != s2->vertexCount) || (s1->vertexStride != s2->vertexStride) ||
      (s1->vertexFormat != s2->vertexFormat) || (s1->indexData != s2->indexData) ||
      (s1->indexOffset != s2->indexOffset) || (s1->indexCount != s2->indexCount) ||
      (s1->indexType != s2->indexType) || (s1->transformData != s2->transformData) ||
      (s1->transformOffset != s2->transformOffset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryAABBNVX(VkGeometryAABBNVX const *s1, VkGeometryAABBNVX const *s2) {
  if ((s1->aabbData != s2->aabbData) || (s1->numAABBs != s2->numAABBs) ||
      (s1->stride != s2->stride) || (s1->offset != s2->offset) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryDataNVX(VkGeometryDataNVX const *s1, VkGeometryDataNVX const *s2) {
  if (!compare_VkGeometryTrianglesNVX(&s1->triangles, &s2->triangles) ||
      !compare_VkGeometryAABBNVX(&s1->aabbs, &s2->aabbs) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkGeometryNVX(VkGeometryNVX const *s1, VkGeometryNVX const *s2) {
  if ((s1->geometryType != s2->geometryType) ||
      !compare_VkGeometryDataNVX(&s1->geometry, &s2->geometry) || (s1->flags != s2->flags) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkAccelerationStructureCreateInfoNVX(VkAccelerationStructureCreateInfoNVX const *s1,
                                                  VkAccelerationStructureCreateInfoNVX const *s2) {
  if ((s1->type != s2->type) || (s1->flags != s2->flags) ||
      (s1->compactedSize != s2->compactedSize) || (s1->instanceCount != s2->instanceCount) ||
      (s1->geometryCount != s2->geometryCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkBindAccelerationStructureMemoryInfoNVX(
    VkBindAccelerationStructureMemoryInfoNVX const *s1,
    VkBindAccelerationStructureMemoryInfoNVX const *s2) {
  if ((s1->accelerationStructure != s2->accelerationStructure) || (s1->memory != s2->memory) ||
      (s1->memoryOffset != s2->memoryOffset) || (s1->deviceIndexCount != s2->deviceIndexCount) ||
      false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkDescriptorAccelerationStructureInfoNVX(
    VkDescriptorAccelerationStructureInfoNVX const *s1,
    VkDescriptorAccelerationStructureInfoNVX const *s2) {
  if ((s1->accelerationStructureCount != s2->accelerationStructureCount) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkAccelerationStructureMemoryRequirementsInfoNVX(
    VkAccelerationStructureMemoryRequirementsInfoNVX const *s1,
    VkAccelerationStructureMemoryRequirementsInfoNVX const *s2) {
  if ((s1->accelerationStructure != s2->accelerationStructure) || false)
    return false;

  return true;
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
bool compare_VkPhysicalDeviceRaytracingPropertiesNVX(
    VkPhysicalDeviceRaytracingPropertiesNVX const *s1,
    VkPhysicalDeviceRaytracingPropertiesNVX const *s2) {
  if ((s1->shaderHeaderSize != s2->shaderHeaderSize) ||
      (s1->maxRecursionDepth != s2->maxRecursionDepth) ||
      (s1->maxGeometryCount != s2->maxGeometryCount) || false)
    return false;

  return true;
}
#endif

#endif // VK_STRUCT_COMPARE_CONFIG_MAIN
#ifdef __cplusplus
}
#endif

#endif // VK_STRUCT_COMPARE_H
