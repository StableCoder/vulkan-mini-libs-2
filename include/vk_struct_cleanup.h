/*
    Copyright (C) 2021-2025 George Cave - gcave@stablecoder.ca

    SPDX-License-Identifier: Apache-2.0

    This file was auto-generated by the Vulkan Mini Libs 2 utility:
    https://github.com/stablecoder/vulkan-mini-libs-2.git
    or
    https://git.stabletec.com/utilities/vulkan-mini-libs-2.git

    Check for an updated version anytime, or state concerns/bugs.
*/

#ifndef VK_STRUCT_CLEANUP_H
#define VK_STRUCT_CLEANUP_H

/*  USAGE:
    To use, include this header where the declarations for the boolean checks are required.

    On *ONE* compilation unit, include the definition of:
    #define VK_STRUCT_CLEANUP_CONFIG_MAIN

    so that the definitions are compiled somewhere following the one definition rule.
*/

#ifdef __cplusplus
extern "C" {
#endif

#include <vulkan/vulkan.h>

#ifdef __cplusplus
static_assert(VK_HEADER_VERSION >= 72,
              "VK_HEADER_VERSION is lower than the minimum supported version (v72)");
#else
_Static_assert(VK_HEADER_VERSION >= 72,
               "VK_HEADER_VERSION  is lower than the minimum supported version (v72)");
#endif

#if VK_HEADER_VERSION > 319
#if _MSC_VER
#pragma message(                                                                                   \
    __FILE__ ": warning: VK_HEADER_VERSION is higher than what the header fully supports (v319)")
#else
#warning "VK_HEADER_VERSION is higher than what the header fully supports (v319)"
#endif
#endif

void cleanup_vk_struct(void const *pData);

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAabbPositionsKHR(VkAabbPositionsKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
void cleanup_VkAabbPositionsNV(VkAabbPositionsNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureBuildGeometryInfoKHR(
    VkAccelerationStructureBuildGeometryInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureBuildGeometryInfoKHR(
    VkAccelerationStructureBuildGeometryInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureBuildOffsetInfoKHR(
    VkAccelerationStructureBuildOffsetInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureBuildRangeInfoKHR(
    VkAccelerationStructureBuildRangeInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureBuildSizesInfoKHR(
    VkAccelerationStructureBuildSizesInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_descriptor_buffer &&                                       \
     (VK_KHR_acceleration_structure || VK_NV_ray_tracing)) ||                                      \
    (VK_HEADER_VERSION >= 235 && VK_HEADER_VERSION <= 240 && VK_EXT_descriptor_buffer)
void cleanup_VkAccelerationStructureCaptureDescriptorDataInfoEXT(
    VkAccelerationStructureCaptureDescriptorDataInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureCreateGeometryTypeInfoKHR(
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureCreateInfoKHR(
    VkAccelerationStructureCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureCreateInfoKHR(
    VkAccelerationStructureCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkAccelerationStructureCreateInfoNV(VkAccelerationStructureCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkAccelerationStructureCreateInfoNVX(
    VkAccelerationStructureCreateInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureDeviceAddressInfoKHR(
    VkAccelerationStructureDeviceAddressInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureGeometryAabbsDataKHR(
    VkAccelerationStructureGeometryAabbsDataKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureGeometryInstancesDataKHR(
    VkAccelerationStructureGeometryInstancesDataKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureGeometryKHR(VkAccelerationStructureGeometryKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres)
void cleanup_VkAccelerationStructureGeometryLinearSweptSpheresDataNV(
    VkAccelerationStructureGeometryLinearSweptSpheresDataNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkAccelerationStructureGeometryMotionTrianglesDataNV(
    VkAccelerationStructureGeometryMotionTrianglesDataNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres)
void cleanup_VkAccelerationStructureGeometrySpheresDataNV(
    VkAccelerationStructureGeometrySpheresDataNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureGeometryTrianglesDataKHR(
    VkAccelerationStructureGeometryTrianglesDataKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureGeometryTrianglesDataKHR(
    VkAccelerationStructureGeometryTrianglesDataKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkAccelerationStructureInfoNV(VkAccelerationStructureInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 138 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
void cleanup_VkAccelerationStructureInstanceNV(VkAccelerationStructureInstanceNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkAccelerationStructureMatrixMotionInstanceNV(
    VkAccelerationStructureMatrixMotionInstanceNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureMemoryRequirementsInfoKHR(
    VkAccelerationStructureMemoryRequirementsInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkAccelerationStructureMemoryRequirementsInfoNV(
    VkAccelerationStructureMemoryRequirementsInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkAccelerationStructureMemoryRequirementsInfoNVX(
    VkAccelerationStructureMemoryRequirementsInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkAccelerationStructureMotionInfoNV(VkAccelerationStructureMotionInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkAccelerationStructureMotionInstanceNV(
    VkAccelerationStructureMotionInstanceNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkAccelerationStructureSRTMotionInstanceNV(
    VkAccelerationStructureSRTMotionInstanceNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureTrianglesDisplacementMicromapNV(
    VkAccelerationStructureTrianglesDisplacementMicromapNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkAccelerationStructureTrianglesOpacityMicromapEXT(
    VkAccelerationStructureTrianglesOpacityMicromapEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureVersionInfoKHR(
    VkAccelerationStructureVersionInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureVersionKHR(VkAccelerationStructureVersionKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkAcquireNextImageInfoKHR(VkAcquireNextImageInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkAcquireProfilingLockInfoKHR(VkAcquireProfilingLockInfoKHR const *pData);
#endif

void cleanup_VkAllocationCallbacks(VkAllocationCallbacks const *pData);

#if (VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling)
void cleanup_VkAmigoProfilingSubmitInfoSEC(VkAmigoProfilingSubmitInfoSEC const *pData);
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *pData);
#endif

#if (VK_HEADER_VERSION >= 281 && VK_ANDROID_external_memory_android_hardware_buffer &&             \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer && VK_KHR_format_feature_flags2) ||        \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *pData);
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkAndroidHardwareBufferFormatPropertiesANDROID(
    VkAndroidHardwareBufferFormatPropertiesANDROID const *pData);
#endif

#if (VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve)
void cleanup_VkAndroidHardwareBufferFormatResolvePropertiesANDROID(
    VkAndroidHardwareBufferFormatResolvePropertiesANDROID const *pData);
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkAndroidHardwareBufferPropertiesANDROID(
    VkAndroidHardwareBufferPropertiesANDROID const *pData);
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkAndroidHardwareBufferUsageANDROID(VkAndroidHardwareBufferUsageANDROID const *pData);
#endif

#if (VK_KHR_android_surface)
void cleanup_VkAndroidSurfaceCreateInfoKHR(VkAndroidSurfaceCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag)
void cleanup_VkAntiLagDataAMD(VkAntiLagDataAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag)
void cleanup_VkAntiLagPresentationInfoAMD(VkAntiLagPresentationInfoAMD const *pData);
#endif

void cleanup_VkApplicationInfo(VkApplicationInfo const *pData);

#if (VK_HEADER_VERSION >= 241 && VK_EXT_application_parameters)
void cleanup_VkApplicationParametersEXT(VkApplicationParametersEXT const *pData);
#endif

void cleanup_VkAttachmentDescription(VkAttachmentDescription const *pData);

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkAttachmentDescription2(VkAttachmentDescription2 const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkAttachmentDescriptionStencilLayout(
    VkAttachmentDescriptionStencilLayout const *pData);
#endif

#if (VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_unified_image_layouts &&                                   \
     VK_EXT_attachment_feedback_loop_layout && ((VK_VERSION_1_3 || VK_KHR_dynamic_rendering)))
void cleanup_VkAttachmentFeedbackLoopInfoEXT(VkAttachmentFeedbackLoopInfoEXT const *pData);
#endif

void cleanup_VkAttachmentReference(VkAttachmentReference const *pData);

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkAttachmentReference2(VkAttachmentReference2 const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkAttachmentReferenceStencilLayout(VkAttachmentReferenceStencilLayout const *pData);
#endif

#if (VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkAttachmentReferenceStencilLayoutKHR(
    VkAttachmentReferenceStencilLayoutKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkAttachmentReferenceStencilLayoutKHR(
    VkAttachmentReferenceStencilLayoutKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_AMD_mixed_attachment_samples &&                                \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_AMD_mixed_attachment_samples) ||                                                           \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
void cleanup_VkAttachmentSampleCountInfoAMD(VkAttachmentSampleCountInfoAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_framebuffer_mixed_samples &&                                \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_NV_framebuffer_mixed_samples) ||                                                           \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
void cleanup_VkAttachmentSampleCountInfoNV(VkAttachmentSampleCountInfoNV const *pData);
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkAttachmentSampleLocationsEXT(VkAttachmentSampleLocationsEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkBindAccelerationStructureMemoryInfoKHR(
    VkBindAccelerationStructureMemoryInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_NV_ray_tracing)
void cleanup_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkBindAccelerationStructureMemoryInfoNVX(
    VkBindAccelerationStructureMemoryInfoNVX const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBindBufferMemoryDeviceGroupInfo(VkBindBufferMemoryDeviceGroupInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_device_group && VK_KHR_bind_memory2) ||                    \
    (VK_HEADER_VERSION <= 240 && VK_KHR_device_group)
void cleanup_VkBindBufferMemoryDeviceGroupInfoKHR(
    VkBindBufferMemoryDeviceGroupInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBindBufferMemoryInfo(VkBindBufferMemoryInfo const *pData);
#endif

#if (VK_KHR_bind_memory2)
void cleanup_VkBindBufferMemoryInfoKHR(VkBindBufferMemoryInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkBindDataGraphPipelineSessionMemoryInfoARM(
    VkBindDataGraphPipelineSessionMemoryInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_maintenance6 && VK_EXT_descriptor_buffer)
void cleanup_VkBindDescriptorBufferEmbeddedSamplersInfoEXT(
    VkBindDescriptorBufferEmbeddedSamplersInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkBindDescriptorSetsInfo(VkBindDescriptorSetsInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
void cleanup_VkBindDescriptorSetsInfoKHR(VkBindDescriptorSetsInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6)
void cleanup_VkBindDescriptorSetsInfoKHR(VkBindDescriptorSetsInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBindImageMemoryDeviceGroupInfo(VkBindImageMemoryDeviceGroupInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_device_group && VK_KHR_bind_memory2) ||                    \
    (VK_HEADER_VERSION <= 240 && VK_KHR_device_group)
void cleanup_VkBindImageMemoryDeviceGroupInfoKHR(VkBindImageMemoryDeviceGroupInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBindImageMemoryInfo(VkBindImageMemoryInfo const *pData);
#endif

#if (VK_KHR_bind_memory2)
void cleanup_VkBindImageMemoryInfoKHR(VkBindImageMemoryInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkBindImageMemorySwapchainInfoKHR(VkBindImageMemorySwapchainInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBindImagePlaneMemoryInfo(VkBindImagePlaneMemoryInfo const *pData);
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkBindImagePlaneMemoryInfoKHR(VkBindImagePlaneMemoryInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkBindIndexBufferIndirectCommandEXT(VkBindIndexBufferIndirectCommandEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkBindIndexBufferIndirectCommandNV(VkBindIndexBufferIndirectCommandNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkBindMemoryStatus(VkBindMemoryStatus const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
void cleanup_VkBindMemoryStatusKHR(VkBindMemoryStatusKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6)
void cleanup_VkBindMemoryStatusKHR(VkBindMemoryStatusKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute)
void cleanup_VkBindPipelineIndirectCommandNV(VkBindPipelineIndirectCommandNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkBindShaderGroupIndirectCommandNV(VkBindShaderGroupIndirectCommandNV const *pData);
#endif

void cleanup_VkBindSparseInfo(VkBindSparseInfo const *pData);

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkBindTensorMemoryInfoARM(VkBindTensorMemoryInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkBindVertexBufferIndirectCommandEXT(
    VkBindVertexBufferIndirectCommandEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkBindVertexBufferIndirectCommandNV(VkBindVertexBufferIndirectCommandNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkBindVideoSessionMemoryInfoKHR(VkBindVideoSessionMemoryInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights)
void cleanup_VkBlitImageCubicWeightsInfoQCOM(VkBlitImageCubicWeightsInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkBlitImageInfo2(VkBlitImageInfo2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkBufferCaptureDescriptorDataInfoEXT(
    VkBufferCaptureDescriptorDataInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferCollectionBufferCreateInfoFUCHSIA(
    VkBufferCollectionBufferCreateInfoFUCHSIA const *pData);
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferCollectionConstraintsInfoFUCHSIA(
    VkBufferCollectionConstraintsInfoFUCHSIA const *pData);
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferCollectionCreateInfoFUCHSIA(VkBufferCollectionCreateInfoFUCHSIA const *pData);
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferCollectionImageCreateInfoFUCHSIA(
    VkBufferCollectionImageCreateInfoFUCHSIA const *pData);
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferCollectionPropertiesFUCHSIA(VkBufferCollectionPropertiesFUCHSIA const *pData);
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferConstraintsInfoFUCHSIA(VkBufferConstraintsInfoFUCHSIA const *pData);
#endif

void cleanup_VkBufferCopy(VkBufferCopy const *pData);

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkBufferCopy2(VkBufferCopy2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkBufferCopy2KHR(VkBufferCopy2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkBufferCopy2KHR(VkBufferCopy2KHR const *pData);
#endif

void cleanup_VkBufferCreateInfo(VkBufferCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 103 && VK_EXT_buffer_device_address)
void cleanup_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 104 && VK_EXT_buffer_device_address)
void cleanup_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkBufferDeviceAddressInfo(VkBufferDeviceAddressInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 128 && VK_EXT_buffer_device_address)
void cleanup_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_EXT_buffer_device_address)
void cleanup_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_buffer_device_address)
void cleanup_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
void cleanup_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address)
void cleanup_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *pData);
#endif

void cleanup_VkBufferImageCopy(VkBufferImageCopy const *pData);

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkBufferImageCopy2(VkBufferImageCopy2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *pData);
#endif

void cleanup_VkBufferMemoryBarrier(VkBufferMemoryBarrier const *pData);

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkBufferMemoryBarrier2(VkBufferMemoryBarrier2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBufferMemoryRequirementsInfo2(VkBufferMemoryRequirementsInfo2 const *pData);
#endif

#if (VK_KHR_get_memory_requirements2)
void cleanup_VkBufferMemoryRequirementsInfo2KHR(VkBufferMemoryRequirementsInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkBufferOpaqueCaptureAddressCreateInfo(
    VkBufferOpaqueCaptureAddressCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
void cleanup_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address)
void cleanup_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkBufferUsageFlags2CreateInfo(VkBufferUsageFlags2CreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkBufferUsageFlags2CreateInfoKHR(VkBufferUsageFlags2CreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkBufferUsageFlags2CreateInfoKHR(VkBufferUsageFlags2CreateInfoKHR const *pData);
#endif

void cleanup_VkBufferViewCreateInfo(VkBufferViewCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkBuildPartitionedAccelerationStructureIndirectCommandNV(
    VkBuildPartitionedAccelerationStructureIndirectCommandNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkBuildPartitionedAccelerationStructureInfoNV(
    VkBuildPartitionedAccelerationStructureInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 272 && VK_EXT_calibrated_timestamps)
void cleanup_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 273 && VK_EXT_calibrated_timestamps)
void cleanup_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 273 && VK_KHR_calibrated_timestamps)
void cleanup_VkCalibratedTimestampInfoKHR(VkCalibratedTimestampInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkCheckpointData2NV(VkCheckpointData2NV const *pData);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_device_diagnostic_checkpoints &&                            \
     (VK_VERSION_1_3 || VK_KHR_synchronization2)) ||                                               \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_synchronization2 &&            \
     VK_NV_device_diagnostic_checkpoints) ||                                                       \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_KHR_synchronization2)
void cleanup_VkCheckpointData2NV(VkCheckpointData2NV const *pData);
#endif

#if (VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints)
void cleanup_VkCheckpointDataNV(VkCheckpointDataNV const *pData);
#endif

void cleanup_VkClearAttachment(VkClearAttachment const *pData);

void cleanup_VkClearDepthStencilValue(VkClearDepthStencilValue const *pData);

void cleanup_VkClearRect(VkClearRect const *pData);

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV(
    VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureBuildTriangleClusterInfoNV(
    VkClusterAccelerationStructureBuildTriangleClusterInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV(
    VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureClustersBottomLevelInputNV(
    VkClusterAccelerationStructureClustersBottomLevelInputNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureCommandsInfoNV(
    VkClusterAccelerationStructureCommandsInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV(
    VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureGetTemplateIndicesInfoNV(
    VkClusterAccelerationStructureGetTemplateIndicesInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureInputInfoNV(
    VkClusterAccelerationStructureInputInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureInstantiateClusterInfoNV(
    VkClusterAccelerationStructureInstantiateClusterInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureMoveObjectsInfoNV(
    VkClusterAccelerationStructureMoveObjectsInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureMoveObjectsInputNV(
    VkClusterAccelerationStructureMoveObjectsInputNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureTriangleClusterInputNV(
    VkClusterAccelerationStructureTriangleClusterInputNV const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkCmdProcessCommandsInfoNVX(VkCmdProcessCommandsInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkCmdReserveSpaceForCommandsInfoNVX(VkCmdReserveSpaceForCommandsInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkCoarseSampleLocationNV(VkCoarseSampleLocationNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkCoarseSampleOrderCustomNV(VkCoarseSampleOrderCustomNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_extended_dynamic_state3 && VK_EXT_shader_object) ||        \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 245 && VK_EXT_extended_dynamic_state3)
void cleanup_VkColorBlendAdvancedEXT(VkColorBlendAdvancedEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_extended_dynamic_state3 && VK_EXT_shader_object) ||        \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 245 && VK_EXT_extended_dynamic_state3)
void cleanup_VkColorBlendEquationEXT(VkColorBlendEquationEXT const *pData);
#endif

void cleanup_VkCommandBufferAllocateInfo(VkCommandBufferAllocateInfo const *pData);

void cleanup_VkCommandBufferBeginInfo(VkCommandBufferBeginInfo const *pData);

#if (VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering)
void cleanup_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *pData);
#endif

void cleanup_VkCommandBufferInheritanceInfo(VkCommandBufferInheritanceInfo const *pData);

#if (VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform)
void cleanup_VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_VERSION_1_3)
void cleanup_VkCommandBufferInheritanceRenderingInfo(
    VkCommandBufferInheritanceRenderingInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_VERSION_1_3)
void cleanup_VkCommandBufferInheritanceRenderingInfo(
    VkCommandBufferInheritanceRenderingInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
void cleanup_VkCommandBufferInheritanceRenderingInfoKHR(
    VkCommandBufferInheritanceRenderingInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering)
void cleanup_VkCommandBufferInheritanceRenderingInfoKHR(
    VkCommandBufferInheritanceRenderingInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor)
void cleanup_VkCommandBufferInheritanceViewportScissorInfoNV(
    VkCommandBufferInheritanceViewportScissorInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkCommandBufferSubmitInfo(VkCommandBufferSubmitInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *pData);
#endif

void cleanup_VkCommandPoolCreateInfo(VkCommandPoolCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkCommandPoolMemoryConsumption(VkCommandPoolMemoryConsumption const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkCommandPoolMemoryReservationCreateInfo(
    VkCommandPoolMemoryReservationCreateInfo const *pData);
#endif

void cleanup_VkComponentMapping(VkComponentMapping const *pData);

void cleanup_VkComputePipelineCreateInfo(VkComputePipelineCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute)
void cleanup_VkComputePipelineIndirectBufferInfoNV(
    VkComputePipelineIndirectBufferInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering)
void cleanup_VkConditionalRenderingBeginInfoEXT(VkConditionalRenderingBeginInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkConformanceVersion(VkConformanceVersion const *pData);
#endif

#if (VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 130 && VK_KHR_driver_properties)
void cleanup_VkConformanceVersionKHR(VkConformanceVersionKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_driver_properties)
void cleanup_VkConformanceVersionKHR(VkConformanceVersionKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
void cleanup_VkConvertCooperativeVectorMatrixInfoNV(
    VkConvertCooperativeVectorMatrixInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2)
void cleanup_VkCooperativeMatrixFlexibleDimensionsPropertiesNV(
    VkCooperativeMatrixFlexibleDimensionsPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix)
void cleanup_VkCooperativeMatrixPropertiesKHR(VkCooperativeMatrixPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix)
void cleanup_VkCooperativeMatrixPropertiesNV(VkCooperativeMatrixPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
void cleanup_VkCooperativeVectorPropertiesNV(VkCooperativeVectorPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCopyAccelerationStructureInfoKHR(VkCopyAccelerationStructureInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCopyAccelerationStructureToMemoryInfoKHR(
    VkCopyAccelerationStructureToMemoryInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkCopyBufferInfo2(VkCopyBufferInfo2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkCopyBufferToImageInfo2(VkCopyBufferToImageInfo2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 159 && VK_QCOM_rotated_copy_commands)
void cleanup_VkCopyCommandTransformInfoQCOM(VkCopyCommandTransformInfoQCOM const *pData);
#endif

void cleanup_VkCopyDescriptorSet(VkCopyDescriptorSet const *pData);

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkCopyImageInfo2(VkCopyImageInfo2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkCopyImageToBufferInfo2(VkCopyImageToBufferInfo2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkCopyImageToImageInfo(VkCopyImageToImageInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkCopyImageToImageInfoEXT(VkCopyImageToImageInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkCopyImageToImageInfoEXT(VkCopyImageToImageInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkCopyImageToMemoryInfo(VkCopyImageToMemoryInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkCopyImageToMemoryInfoEXT(VkCopyImageToMemoryInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkCopyImageToMemoryInfoEXT(VkCopyImageToMemoryInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect)
void cleanup_VkCopyMemoryIndirectCommandNV(VkCopyMemoryIndirectCommandNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCopyMemoryToAccelerationStructureInfoKHR(
    VkCopyMemoryToAccelerationStructureInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect)
void cleanup_VkCopyMemoryToImageIndirectCommandNV(
    VkCopyMemoryToImageIndirectCommandNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkCopyMemoryToImageInfo(VkCopyMemoryToImageInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkCopyMemoryToImageInfoEXT(VkCopyMemoryToImageInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkCopyMemoryToImageInfoEXT(VkCopyMemoryToImageInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkCopyMemoryToMicromapInfoEXT(VkCopyMemoryToMicromapInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkCopyMicromapInfoEXT(VkCopyMicromapInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkCopyMicromapToMemoryInfoEXT(VkCopyMicromapToMemoryInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkCopyTensorInfoARM(VkCopyTensorInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 178 && VK_NVX_binary_import)
void cleanup_VkCuFunctionCreateInfoNVX(VkCuFunctionCreateInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 178 && VK_NVX_binary_import)
void cleanup_VkCuLaunchInfoNVX(VkCuLaunchInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 178 && VK_NVX_binary_import)
void cleanup_VkCuModuleCreateInfoNVX(VkCuModuleCreateInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_NVX_binary_import)
void cleanup_VkCuModuleTexturingModeCreateInfoNVX(
    VkCuModuleTexturingModeCreateInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCudaFunctionCreateInfoNV(VkCudaFunctionCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCudaLaunchInfoNV(VkCudaLaunchInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCudaModuleCreateInfoNV(VkCudaModuleCreateInfoNV const *pData);
#endif

#if (VK_KHR_external_semaphore_win32)
void cleanup_VkD3D12FenceSubmitInfoKHR(VkD3D12FenceSubmitInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineCompilerControlCreateInfoARM(
    VkDataGraphPipelineCompilerControlCreateInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineConstantARM(VkDataGraphPipelineConstantARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph && VK_ARM_tensors)
void cleanup_VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM(
    VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineCreateInfoARM(VkDataGraphPipelineCreateInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineDispatchInfoARM(VkDataGraphPipelineDispatchInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineIdentifierCreateInfoARM(
    VkDataGraphPipelineIdentifierCreateInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineInfoARM(VkDataGraphPipelineInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelinePropertyQueryResultARM(
    VkDataGraphPipelinePropertyQueryResultARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineResourceInfoARM(VkDataGraphPipelineResourceInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineSessionBindPointRequirementARM(
    VkDataGraphPipelineSessionBindPointRequirementARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineSessionBindPointRequirementsInfoARM(
    VkDataGraphPipelineSessionBindPointRequirementsInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineSessionCreateInfoARM(
    VkDataGraphPipelineSessionCreateInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineSessionMemoryRequirementsInfoARM(
    VkDataGraphPipelineSessionMemoryRequirementsInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineShaderModuleCreateInfoARM(
    VkDataGraphPipelineShaderModuleCreateInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphProcessingEngineCreateInfoARM(
    VkDataGraphProcessingEngineCreateInfoARM const *pData);
#endif

#if (VK_EXT_debug_marker)
void cleanup_VkDebugMarkerMarkerInfoEXT(VkDebugMarkerMarkerInfoEXT const *pData);
#endif

#if (VK_EXT_debug_marker)
void cleanup_VkDebugMarkerObjectNameInfoEXT(VkDebugMarkerObjectNameInfoEXT const *pData);
#endif

#if (VK_EXT_debug_marker)
void cleanup_VkDebugMarkerObjectTagInfoEXT(VkDebugMarkerObjectTagInfoEXT const *pData);
#endif

#if (VK_EXT_debug_report)
void cleanup_VkDebugReportCallbackCreateInfoEXT(VkDebugReportCallbackCreateInfoEXT const *pData);
#endif

#if (VK_EXT_debug_utils)
void cleanup_VkDebugUtilsLabelEXT(VkDebugUtilsLabelEXT const *pData);
#endif

#if (VK_EXT_debug_utils)
void cleanup_VkDebugUtilsMessengerCallbackDataEXT(
    VkDebugUtilsMessengerCallbackDataEXT const *pData);
#endif

#if (VK_EXT_debug_utils)
void cleanup_VkDebugUtilsMessengerCreateInfoEXT(VkDebugUtilsMessengerCreateInfoEXT const *pData);
#endif

#if (VK_EXT_debug_utils)
void cleanup_VkDebugUtilsObjectNameInfoEXT(VkDebugUtilsObjectNameInfoEXT const *pData);
#endif

#if (VK_EXT_debug_utils)
void cleanup_VkDebugUtilsObjectTagInfoEXT(VkDebugUtilsObjectTagInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression)
void cleanup_VkDecompressMemoryRegionNV(VkDecompressMemoryRegionNV const *pData);
#endif

#if (VK_NV_dedicated_allocation)
void cleanup_VkDedicatedAllocationBufferCreateInfoNV(
    VkDedicatedAllocationBufferCreateInfoNV const *pData);
#endif

#if (VK_NV_dedicated_allocation)
void cleanup_VkDedicatedAllocationImageCreateInfoNV(
    VkDedicatedAllocationImageCreateInfoNV const *pData);
#endif

#if (VK_NV_dedicated_allocation)
void cleanup_VkDedicatedAllocationMemoryAllocateInfoNV(
    VkDedicatedAllocationMemoryAllocateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_deferred_host_operations &&    \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkDeferredOperationInfoKHR(VkDeferredOperationInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkDependencyInfo(VkDependencyInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkDependencyInfoKHR(VkDependencyInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkDependencyInfoKHR(VkDependencyInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control)
void cleanup_VkDepthBiasInfoEXT(VkDepthBiasInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control)
void cleanup_VkDepthBiasRepresentationInfoEXT(VkDepthBiasRepresentationInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control)
void cleanup_VkDepthClampRangeEXT(VkDepthClampRangeEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkDescriptorAccelerationStructureInfoNVX(
    VkDescriptorAccelerationStructureInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkDescriptorAddressInfoEXT(VkDescriptorAddressInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkDescriptorBufferBindingInfoEXT(VkDescriptorBufferBindingInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(
    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT const *pData);
#endif

void cleanup_VkDescriptorBufferInfo(VkDescriptorBufferInfo const *pData);

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkDescriptorGetInfoEXT(VkDescriptorGetInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
void cleanup_VkDescriptorGetTensorInfoARM(VkDescriptorGetTensorInfoARM const *pData);
#endif

void cleanup_VkDescriptorImageInfo(VkDescriptorImageInfo const *pData);

void cleanup_VkDescriptorPoolCreateInfo(VkDescriptorPoolCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkDescriptorPoolInlineUniformBlockCreateInfo(
    VkDescriptorPoolInlineUniformBlockCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
void cleanup_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block)
void cleanup_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *pData);
#endif

void cleanup_VkDescriptorPoolSize(VkDescriptorPoolSize const *pData);

void cleanup_VkDescriptorSetAllocateInfo(VkDescriptorSetAllocateInfo const *pData);

#if (VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping)
void cleanup_VkDescriptorSetBindingReferenceVALVE(
    VkDescriptorSetBindingReferenceVALVE const *pData);
#endif

void cleanup_VkDescriptorSetLayoutBinding(VkDescriptorSetLayoutBinding const *pData);

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfo(
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *pData);
#endif

void cleanup_VkDescriptorSetLayoutCreateInfo(VkDescriptorSetLayoutCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping)
void cleanup_VkDescriptorSetLayoutHostMappingInfoVALVE(
    VkDescriptorSetLayoutHostMappingInfoVALVE const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDescriptorSetLayoutSupport(VkDescriptorSetLayoutSupport const *pData);
#endif

#if (VK_KHR_maintenance3)
void cleanup_VkDescriptorSetLayoutSupportKHR(VkDescriptorSetLayoutSupportKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfo(
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *pData);
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupport(
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *pData);
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDescriptorUpdateTemplateCreateInfo(
    VkDescriptorUpdateTemplateCreateInfo const *pData);
#endif

#if (VK_KHR_descriptor_update_template)
void cleanup_VkDescriptorUpdateTemplateCreateInfoKHR(
    VkDescriptorUpdateTemplateCreateInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDescriptorUpdateTemplateEntry(VkDescriptorUpdateTemplateEntry const *pData);
#endif

#if (VK_KHR_descriptor_update_template)
void cleanup_VkDescriptorUpdateTemplateEntryKHR(VkDescriptorUpdateTemplateEntryKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report)
void cleanup_VkDeviceAddressBindingCallbackDataEXT(
    VkDeviceAddressBindingCallbackDataEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkDeviceBufferMemoryRequirements(VkDeviceBufferMemoryRequirements const *pData);
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
void cleanup_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4)
void cleanup_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *pData);
#endif

void cleanup_VkDeviceCreateInfo(VkDeviceCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report)
void cleanup_VkDeviceDeviceMemoryReportCreateInfoEXT(
    VkDeviceDeviceMemoryReportCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config)
void cleanup_VkDeviceDiagnosticsConfigCreateInfoNV(
    VkDeviceDiagnosticsConfigCreateInfoNV const *pData);
#endif

#if (VK_EXT_display_control)
void cleanup_VkDeviceEventInfoEXT(VkDeviceEventInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultAddressInfoEXT(VkDeviceFaultAddressInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultCountsEXT(VkDeviceFaultCountsEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultInfoEXT(VkDeviceFaultInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 246 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultVendorBinaryHeaderVersionOneEXT(
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 247 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultVendorBinaryHeaderVersionOneEXT(
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultVendorInfoEXT(VkDeviceFaultVendorInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkDeviceGeneratedCommandsFeaturesNVX(
    VkDeviceGeneratedCommandsFeaturesNVX const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkDeviceGeneratedCommandsLimitsNVX(VkDeviceGeneratedCommandsLimitsNVX const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceGroupBindSparseInfo(VkDeviceGroupBindSparseInfo const *pData);
#endif

#if (VK_KHR_device_group)
void cleanup_VkDeviceGroupBindSparseInfoKHR(VkDeviceGroupBindSparseInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceGroupCommandBufferBeginInfo(VkDeviceGroupCommandBufferBeginInfo const *pData);
#endif

#if (VK_KHR_device_group)
void cleanup_VkDeviceGroupCommandBufferBeginInfoKHR(
    VkDeviceGroupCommandBufferBeginInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceGroupDeviceCreateInfo(VkDeviceGroupDeviceCreateInfo const *pData);
#endif

#if (VK_KHR_device_group_creation)
void cleanup_VkDeviceGroupDeviceCreateInfoKHR(VkDeviceGroupDeviceCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group &&      \
     VK_KHR_surface) ||                                                                            \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkDeviceGroupPresentCapabilitiesKHR(VkDeviceGroupPresentCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkDeviceGroupPresentInfoKHR(VkDeviceGroupPresentInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceGroupRenderPassBeginInfo(VkDeviceGroupRenderPassBeginInfo const *pData);
#endif

#if (VK_KHR_device_group)
void cleanup_VkDeviceGroupRenderPassBeginInfoKHR(VkDeviceGroupRenderPassBeginInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceGroupSubmitInfo(VkDeviceGroupSubmitInfo const *pData);
#endif

#if (VK_KHR_device_group)
void cleanup_VkDeviceGroupSubmitInfoKHR(VkDeviceGroupSubmitInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkDeviceGroupSwapchainCreateInfoKHR(VkDeviceGroupSwapchainCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkDeviceImageMemoryRequirements(VkDeviceImageMemoryRequirements const *pData);
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
void cleanup_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4)
void cleanup_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkDeviceImageSubresourceInfo(VkDeviceImageSubresourceInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkDeviceImageSubresourceInfoKHR(VkDeviceImageSubresourceInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkDeviceImageSubresourceInfoKHR(VkDeviceImageSubresourceInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkDeviceMemoryOpaqueCaptureAddressInfo(
    VkDeviceMemoryOpaqueCaptureAddressInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
void cleanup_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address)
void cleanup_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior)
void cleanup_VkDeviceMemoryOverallocationCreateInfoAMD(
    VkDeviceMemoryOverallocationCreateInfoAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report)
void cleanup_VkDeviceMemoryReportCallbackDataEXT(VkDeviceMemoryReportCallbackDataEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkDeviceObjectReservationCreateInfo(VkDeviceObjectReservationCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkDevicePipelineBinaryInternalCacheControlKHR(
    VkDevicePipelineBinaryInternalCacheControlKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkDevicePrivateDataCreateInfo(VkDevicePrivateDataCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data)
void cleanup_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_private_data)
void cleanup_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *pData);
#endif

void cleanup_VkDeviceQueueCreateInfo(VkDeviceQueueCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfo(
    VkDeviceQueueGlobalPriorityCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION <= 203 && VK_EXT_global_priority)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_global_priority)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoKHR(
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_global_priority)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoKHR(
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceQueueInfo2(VkDeviceQueueInfo2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls)
void cleanup_VkDeviceQueueShaderCoreControlCreateInfoARM(
    VkDeviceQueueShaderCoreControlCreateInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2 && VKSC_VERSION_1_0)
void cleanup_VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV(
    VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkDeviceTensorMemoryRequirementsARM(VkDeviceTensorMemoryRequirementsARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 236 && VK_HEADER_VERSION <= 236 && VK_LUNARG_direct_driver_loading)
void cleanup_VkDirectDriverLoadingInfoLUNARG(VkDirectDriverLoadingInfoLUNARG const *pData);
#endif

#if (VK_HEADER_VERSION >= 237 && VK_LUNARG_direct_driver_loading)
void cleanup_VkDirectDriverLoadingInfoLUNARG(VkDirectDriverLoadingInfoLUNARG const *pData);
#endif

#if (VK_HEADER_VERSION >= 236 && VK_LUNARG_direct_driver_loading)
void cleanup_VkDirectDriverLoadingListLUNARG(VkDirectDriverLoadingListLUNARG const *pData);
#endif

#if (VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface)
void cleanup_VkDirectFBSurfaceCreateInfoEXT(VkDirectFBSurfaceCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkDispatchGraphCountInfoAMDX(VkDispatchGraphCountInfoAMDX const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkDispatchGraphInfoAMDX(VkDispatchGraphInfoAMDX const *pData);
#endif

void cleanup_VkDispatchIndirectCommand(VkDispatchIndirectCommand const *pData);

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkDispatchTileInfoQCOM(VkDispatchTileInfoQCOM const *pData);
#endif

#if (VK_EXT_display_control)
void cleanup_VkDisplayEventInfoEXT(VkDisplayEventInfoEXT const *pData);
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayModeCreateInfoKHR(VkDisplayModeCreateInfoKHR const *pData);
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayModeParametersKHR(VkDisplayModeParametersKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
void cleanup_VkDisplayModeProperties2KHR(VkDisplayModeProperties2KHR const *pData);
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayModePropertiesKHR(VkDisplayModePropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_NV_display_stereo)
void cleanup_VkDisplayModeStereoPropertiesNV(VkDisplayModeStereoPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr)
void cleanup_VkDisplayNativeHdrSurfaceCapabilitiesAMD(
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
void cleanup_VkDisplayPlaneCapabilities2KHR(VkDisplayPlaneCapabilities2KHR const *pData);
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayPlaneCapabilitiesKHR(VkDisplayPlaneCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
void cleanup_VkDisplayPlaneInfo2KHR(VkDisplayPlaneInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
void cleanup_VkDisplayPlaneProperties2KHR(VkDisplayPlaneProperties2KHR const *pData);
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayPlanePropertiesKHR(VkDisplayPlanePropertiesKHR const *pData);
#endif

#if (VK_EXT_display_control)
void cleanup_VkDisplayPowerInfoEXT(VkDisplayPowerInfoEXT const *pData);
#endif

#if (VK_KHR_display_swapchain)
void cleanup_VkDisplayPresentInfoKHR(VkDisplayPresentInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
void cleanup_VkDisplayProperties2KHR(VkDisplayProperties2KHR const *pData);
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayPropertiesKHR(VkDisplayPropertiesKHR const *pData);
#endif

#if (VK_KHR_display)
void cleanup_VkDisplaySurfaceCreateInfoKHR(VkDisplaySurfaceCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_NV_display_stereo)
void cleanup_VkDisplaySurfaceStereoCreateInfoNV(VkDisplaySurfaceStereoCreateInfoNV const *pData);
#endif

void cleanup_VkDrawIndexedIndirectCommand(VkDrawIndexedIndirectCommand const *pData);

void cleanup_VkDrawIndirectCommand(VkDrawIndirectCommand const *pData);

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkDrawIndirectCountIndirectCommandEXT(
    VkDrawIndirectCountIndirectCommandEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader)
void cleanup_VkDrawMeshTasksIndirectCommandEXT(VkDrawMeshTasksIndirectCommandEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader)
void cleanup_VkDrawMeshTasksIndirectCommandNV(VkDrawMeshTasksIndirectCommandNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_EXT_image_drm_format_modifier)
void cleanup_VkDrmFormatModifierProperties2EXT(VkDrmFormatModifierProperties2EXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 281 && VK_EXT_image_drm_format_modifier &&                               \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 && VK_EXT_image_drm_format_modifier &&   \
     VK_KHR_format_feature_flags2) ||                                                              \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_EXT_image_drm_format_modifier)
void cleanup_VkDrmFormatModifierProperties2EXT(VkDrmFormatModifierProperties2EXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
void cleanup_VkDrmFormatModifierPropertiesEXT(VkDrmFormatModifierPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 281 && VK_EXT_image_drm_format_modifier &&                               \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 && VK_EXT_image_drm_format_modifier &&   \
     VK_KHR_format_feature_flags2) ||                                                              \
    (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 240 && VK_EXT_image_drm_format_modifier)
void cleanup_VkDrmFormatModifierPropertiesList2EXT(
    VkDrmFormatModifierPropertiesList2EXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
void cleanup_VkDrmFormatModifierPropertiesListEXT(
    VkDrmFormatModifierPropertiesListEXT const *pData);
#endif

void cleanup_VkEventCreateInfo(VkEventCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkExecutionGraphPipelineCreateInfoAMDX(
    VkExecutionGraphPipelineCreateInfoAMDX const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&             \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkExecutionGraphPipelineScratchSizeAMDX(
    VkExecutionGraphPipelineScratchSizeAMDX const *pData);
#endif

#if (VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkExecutionGraphPipelineScratchSizeAMDX(
    VkExecutionGraphPipelineScratchSizeAMDX const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExportFenceCreateInfo(VkExportFenceCreateInfo const *pData);
#endif

#if (VK_KHR_external_fence)
void cleanup_VkExportFenceCreateInfoKHR(VkExportFenceCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
void cleanup_VkExportFenceSciSyncInfoNV(VkExportFenceSciSyncInfoNV const *pData);
#endif

#if (VK_KHR_external_fence_win32)
void cleanup_VkExportFenceWin32HandleInfoKHR(VkExportFenceWin32HandleInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExportMemoryAllocateInfo(VkExportMemoryAllocateInfo const *pData);
#endif

#if (VK_KHR_external_memory)
void cleanup_VkExportMemoryAllocateInfoKHR(VkExportMemoryAllocateInfoKHR const *pData);
#endif

#if (VK_NV_external_memory)
void cleanup_VkExportMemoryAllocateInfoNV(VkExportMemoryAllocateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkExportMemorySciBufInfoNV(VkExportMemorySciBufInfoNV const *pData);
#endif

#if (VK_KHR_external_memory_win32)
void cleanup_VkExportMemoryWin32HandleInfoKHR(VkExportMemoryWin32HandleInfoKHR const *pData);
#endif

#if (VK_NV_external_memory_win32)
void cleanup_VkExportMemoryWin32HandleInfoNV(VkExportMemoryWin32HandleInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalBufferInfoEXT(VkExportMetalBufferInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalCommandQueueInfoEXT(VkExportMetalCommandQueueInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalDeviceInfoEXT(VkExportMetalDeviceInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalIOSurfaceInfoEXT(VkExportMetalIOSurfaceInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalObjectCreateInfoEXT(VkExportMetalObjectCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalObjectsInfoEXT(VkExportMetalObjectsInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalSharedEventInfoEXT(VkExportMetalSharedEventInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalTextureInfoEXT(VkExportMetalTextureInfoEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExportSemaphoreCreateInfo(VkExportSemaphoreCreateInfo const *pData);
#endif

#if (VK_KHR_external_semaphore)
void cleanup_VkExportSemaphoreCreateInfoKHR(VkExportSemaphoreCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
void cleanup_VkExportSemaphoreSciSyncInfoNV(VkExportSemaphoreSciSyncInfoNV const *pData);
#endif

#if (VK_KHR_external_semaphore_win32)
void cleanup_VkExportSemaphoreWin32HandleInfoKHR(VkExportSemaphoreWin32HandleInfoKHR const *pData);
#endif

void cleanup_VkExtensionProperties(VkExtensionProperties const *pData);

void cleanup_VkExtent2D(VkExtent2D const *pData);

void cleanup_VkExtent3D(VkExtent3D const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkExternalBufferProperties(VkExternalBufferProperties const *pData);
#endif

#if (VK_KHR_external_memory_capabilities)
void cleanup_VkExternalBufferPropertiesKHR(VkExternalBufferPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
void cleanup_VkExternalComputeQueueCreateInfoNV(VkExternalComputeQueueCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
void cleanup_VkExternalComputeQueueDataParamsNV(VkExternalComputeQueueDataParamsNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
void cleanup_VkExternalComputeQueueDeviceCreateInfoNV(
    VkExternalComputeQueueDeviceCreateInfoNV const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalFenceProperties(VkExternalFenceProperties const *pData);
#endif

#if (VK_KHR_external_fence_capabilities)
void cleanup_VkExternalFencePropertiesKHR(VkExternalFencePropertiesKHR const *pData);
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkExternalFormatANDROID(VkExternalFormatANDROID const *pData);
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
void cleanup_VkExternalFormatQNX(VkExternalFormatQNX const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalImageFormatProperties(VkExternalImageFormatProperties const *pData);
#endif

#if (VK_KHR_external_memory_capabilities)
void cleanup_VkExternalImageFormatPropertiesKHR(VkExternalImageFormatPropertiesKHR const *pData);
#endif

#if (VK_NV_external_memory_capabilities)
void cleanup_VkExternalImageFormatPropertiesNV(VkExternalImageFormatPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 252 && VK_EXT_external_memory_acquire_unmodified)
void cleanup_VkExternalMemoryAcquireUnmodifiedEXT(
    VkExternalMemoryAcquireUnmodifiedEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalMemoryBufferCreateInfo(VkExternalMemoryBufferCreateInfo const *pData);
#endif

#if (VK_KHR_external_memory)
void cleanup_VkExternalMemoryBufferCreateInfoKHR(VkExternalMemoryBufferCreateInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalMemoryImageCreateInfo(VkExternalMemoryImageCreateInfo const *pData);
#endif

#if (VK_KHR_external_memory)
void cleanup_VkExternalMemoryImageCreateInfoKHR(VkExternalMemoryImageCreateInfoKHR const *pData);
#endif

#if (VK_NV_external_memory)
void cleanup_VkExternalMemoryImageCreateInfoNV(VkExternalMemoryImageCreateInfoNV const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalMemoryProperties(VkExternalMemoryProperties const *pData);
#endif

#if (VK_KHR_external_memory_capabilities)
void cleanup_VkExternalMemoryPropertiesKHR(VkExternalMemoryPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkExternalMemoryTensorCreateInfoARM(VkExternalMemoryTensorCreateInfoARM const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalSemaphoreProperties(VkExternalSemaphoreProperties const *pData);
#endif

#if (VK_KHR_external_semaphore_capabilities)
void cleanup_VkExternalSemaphorePropertiesKHR(VkExternalSemaphorePropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkExternalTensorPropertiesARM(VkExternalTensorPropertiesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkFaultCallbackInfo(VkFaultCallbackInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkFaultData(VkFaultData const *pData);
#endif

void cleanup_VkFenceCreateInfo(VkFenceCreateInfo const *pData);

#if (VK_KHR_external_fence_fd)
void cleanup_VkFenceGetFdInfoKHR(VkFenceGetFdInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
void cleanup_VkFenceGetSciSyncInfoNV(VkFenceGetSciSyncInfoNV const *pData);
#endif

#if (VK_KHR_external_fence_win32)
void cleanup_VkFenceGetWin32HandleInfoKHR(VkFenceGetWin32HandleInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic)
void cleanup_VkFilterCubicImageViewImageFormatPropertiesEXT(
    VkFilterCubicImageViewImageFormatPropertiesEXT const *pData);
#endif

void cleanup_VkFormatProperties(VkFormatProperties const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkFormatProperties2(VkFormatProperties2 const *pData);
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkFormatProperties2KHR(VkFormatProperties2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkFormatProperties3(VkFormatProperties3 const *pData);
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_format_feature_flags2)
void cleanup_VkFormatProperties3KHR(VkFormatProperties3KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_format_feature_flags2)
void cleanup_VkFormatProperties3KHR(VkFormatProperties3KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
void cleanup_VkFragmentShadingRateAttachmentInfoKHR(
    VkFragmentShadingRateAttachmentInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 264 && VK_EXT_frame_boundary)
void cleanup_VkFrameBoundaryEXT(VkFrameBoundaryEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_frame_boundary)
void cleanup_VkFrameBoundaryTensorsARM(VkFrameBoundaryTensorsARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 142 && VK_VERSION_1_2)
void cleanup_VkFramebufferAttachmentImageInfo(VkFramebufferAttachmentImageInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130
void cleanup_VkFramebufferAttachmentImageInfoKHR(VkFramebufferAttachmentImageInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer)
void cleanup_VkFramebufferAttachmentImageInfoKHR(VkFramebufferAttachmentImageInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkFramebufferAttachmentsCreateInfo(VkFramebufferAttachmentsCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer)
void cleanup_VkFramebufferAttachmentsCreateInfoKHR(
    VkFramebufferAttachmentsCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer)
void cleanup_VkFramebufferAttachmentsCreateInfoKHR(
    VkFramebufferAttachmentsCreateInfoKHR const *pData);
#endif

void cleanup_VkFramebufferCreateInfo(VkFramebufferCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode)
void cleanup_VkFramebufferMixedSamplesCombinationNV(
    VkFramebufferMixedSamplesCombinationNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkGeneratedCommandsInfoEXT(VkGeneratedCommandsInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkGeneratedCommandsInfoNV(VkGeneratedCommandsInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkGeneratedCommandsMemoryRequirementsInfoEXT(
    VkGeneratedCommandsMemoryRequirementsInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkGeneratedCommandsMemoryRequirementsInfoNV(
    VkGeneratedCommandsMemoryRequirementsInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkGeneratedCommandsPipelineInfoEXT(VkGeneratedCommandsPipelineInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkGeneratedCommandsShaderInfoEXT(VkGeneratedCommandsShaderInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkGeometryAABBNV(VkGeometryAABBNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkGeometryAABBNVX(VkGeometryAABBNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkGeometryDataNV(VkGeometryDataNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkGeometryDataNVX(VkGeometryDataNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 134 && VK_NV_ray_tracing)
void cleanup_VkGeometryNV(VkGeometryNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
void cleanup_VkGeometryNV(VkGeometryNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkGeometryNVX(VkGeometryNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkGeometryTrianglesNV(VkGeometryTrianglesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkGeometryTrianglesNVX(VkGeometryTrianglesNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 266 && VK_HEADER_VERSION <= 270 && VK_NV_low_latency2)
void cleanup_VkGetLatencyMarkerInfoNV(VkGetLatencyMarkerInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 271 && VK_NV_low_latency2)
void cleanup_VkGetLatencyMarkerInfoNV(VkGetLatencyMarkerInfoNV const *pData);
#endif

#if VK_HEADER_VERSION <= 240
void cleanup_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 241
void cleanup_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library)
void cleanup_VkGraphicsPipelineLibraryCreateInfoEXT(
    VkGraphicsPipelineLibraryCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkGraphicsPipelineShaderGroupsCreateInfoNV(
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkGraphicsShaderGroupCreateInfoNV(VkGraphicsShaderGroupCreateInfoNV const *pData);
#endif

#if (VK_EXT_hdr_metadata)
void cleanup_VkHdrMetadataEXT(VkHdrMetadataEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 301 && VK_HUAWEI_hdr_vivid)
void cleanup_VkHdrVividDynamicMetadataHUAWEI(VkHdrVividDynamicMetadataHUAWEI const *pData);
#endif

#if (VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface)
void cleanup_VkHeadlessSurfaceCreateInfoEXT(VkHeadlessSurfaceCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkHostImageCopyDevicePerformanceQuery(
    VkHostImageCopyDevicePerformanceQuery const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkHostImageCopyDevicePerformanceQueryEXT(
    VkHostImageCopyDevicePerformanceQueryEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkHostImageCopyDevicePerformanceQueryEXT(
    VkHostImageCopyDevicePerformanceQueryEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkHostImageLayoutTransitionInfo(VkHostImageLayoutTransitionInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkHostImageLayoutTransitionInfoEXT(VkHostImageLayoutTransitionInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkHostImageLayoutTransitionInfoEXT(VkHostImageLayoutTransitionInfoEXT const *pData);
#endif

#if (VK_MVK_ios_surface)
void cleanup_VkIOSSurfaceCreateInfoMVK(VkIOSSurfaceCreateInfoMVK const *pData);
#endif

#if (VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control)
void cleanup_VkImageAlignmentControlCreateInfoMESA(
    VkImageAlignmentControlCreateInfoMESA const *pData);
#endif

void cleanup_VkImageBlit(VkImageBlit const *pData);

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkImageBlit2(VkImageBlit2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkImageBlit2KHR(VkImageBlit2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkImageBlit2KHR(VkImageBlit2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkImageCaptureDescriptorDataInfoEXT(VkImageCaptureDescriptorDataInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control)
void cleanup_VkImageCompressionControlEXT(VkImageCompressionControlEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control)
void cleanup_VkImageCompressionPropertiesEXT(VkImageCompressionPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkImageConstraintsInfoFUCHSIA(VkImageConstraintsInfoFUCHSIA const *pData);
#endif

void cleanup_VkImageCopy(VkImageCopy const *pData);

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkImageCopy2(VkImageCopy2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkImageCopy2KHR(VkImageCopy2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkImageCopy2KHR(VkImageCopy2KHR const *pData);
#endif

void cleanup_VkImageCreateInfo(VkImageCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
void cleanup_VkImageDrmFormatModifierExplicitCreateInfoEXT(
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
void cleanup_VkImageDrmFormatModifierListCreateInfoEXT(
    VkImageDrmFormatModifierListCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
void cleanup_VkImageDrmFormatModifierPropertiesEXT(
    VkImageDrmFormatModifierPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkImageFormatConstraintsInfoFUCHSIA(VkImageFormatConstraintsInfoFUCHSIA const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkImageFormatListCreateInfo(VkImageFormatListCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION <= 130 && VK_KHR_image_format_list)
void cleanup_VkImageFormatListCreateInfoKHR(VkImageFormatListCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_image_format_list)
void cleanup_VkImageFormatListCreateInfoKHR(VkImageFormatListCreateInfoKHR const *pData);
#endif

void cleanup_VkImageFormatProperties(VkImageFormatProperties const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkImageFormatProperties2(VkImageFormatProperties2 const *pData);
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkImageFormatProperties2KHR(VkImageFormatProperties2KHR const *pData);
#endif

void cleanup_VkImageMemoryBarrier(VkImageMemoryBarrier const *pData);

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkImageMemoryBarrier2(VkImageMemoryBarrier2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkImageMemoryRequirementsInfo2(VkImageMemoryRequirementsInfo2 const *pData);
#endif

#if (VK_KHR_get_memory_requirements2)
void cleanup_VkImageMemoryRequirementsInfo2KHR(VkImageMemoryRequirementsInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface)
void cleanup_VkImagePipeSurfaceCreateInfoFUCHSIA(VkImagePipeSurfaceCreateInfoFUCHSIA const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkImagePlaneMemoryRequirementsInfo(VkImagePlaneMemoryRequirementsInfo const *pData);
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkImagePlaneMemoryRequirementsInfoKHR(
    VkImagePlaneMemoryRequirementsInfoKHR const *pData);
#endif

void cleanup_VkImageResolve(VkImageResolve const *pData);

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkImageResolve2(VkImageResolve2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkImageResolve2KHR(VkImageResolve2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkImageResolve2KHR(VkImageResolve2KHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkImageSparseMemoryRequirementsInfo2(
    VkImageSparseMemoryRequirementsInfo2 const *pData);
#endif

#if (VK_KHR_get_memory_requirements2)
void cleanup_VkImageSparseMemoryRequirementsInfo2KHR(
    VkImageSparseMemoryRequirementsInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkImageStencilUsageCreateInfo(VkImageStencilUsageCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 93 && VK_HEADER_VERSION <= 130 && VK_EXT_separate_stencil_usage)
void cleanup_VkImageStencilUsageCreateInfoEXT(VkImageStencilUsageCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_separate_stencil_usage)
void cleanup_VkImageStencilUsageCreateInfoEXT(VkImageStencilUsageCreateInfoEXT const *pData);
#endif

void cleanup_VkImageSubresource(VkImageSubresource const *pData);

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkImageSubresource2(VkImageSubresource2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 259 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control) ||                                                          \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 257 && VK_EXT_image_compression_control)
void cleanup_VkImageSubresource2EXT(VkImageSubresource2EXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control)
void cleanup_VkImageSubresource2EXT(VkImageSubresource2EXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy && VK_EXT_image_compression_control)
void cleanup_VkImageSubresource2EXT(VkImageSubresource2EXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkImageSubresource2KHR(VkImageSubresource2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkImageSubresource2KHR(VkImageSubresource2KHR const *pData);
#endif

void cleanup_VkImageSubresourceLayers(VkImageSubresourceLayers const *pData);

void cleanup_VkImageSubresourceRange(VkImageSubresourceRange const *pData);

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkImageSwapchainCreateInfoKHR(VkImageSwapchainCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkImageToMemoryCopy(VkImageToMemoryCopy const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkImageToMemoryCopyEXT(VkImageToMemoryCopyEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkImageToMemoryCopyEXT(VkImageToMemoryCopyEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode)
void cleanup_VkImageViewASTCDecodeModeEXT(VkImageViewASTCDecodeModeEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 137 && VK_NVX_image_view_handle)
void cleanup_VkImageViewAddressPropertiesNVX(VkImageViewAddressPropertiesNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkImageViewCaptureDescriptorDataInfoEXT(
    VkImageViewCaptureDescriptorDataInfoEXT const *pData);
#endif

void cleanup_VkImageViewCreateInfo(VkImageViewCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 102 && VK_NVX_image_view_handle)
void cleanup_VkImageViewHandleInfoNVX(VkImageViewHandleInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod)
void cleanup_VkImageViewMinLodCreateInfoEXT(VkImageViewMinLodCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing)
void cleanup_VkImageViewSampleWeightCreateInfoQCOM(
    VkImageViewSampleWeightCreateInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_image_sliced_view_of_3d)
void cleanup_VkImageViewSlicedCreateInfoEXT(VkImageViewSlicedCreateInfoEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkImageViewUsageCreateInfo(VkImageViewUsageCreateInfo const *pData);
#endif

#if (VK_KHR_maintenance2)
void cleanup_VkImageViewUsageCreateInfoKHR(VkImageViewUsageCreateInfoKHR const *pData);
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkImportAndroidHardwareBufferInfoANDROID(
    VkImportAndroidHardwareBufferInfoANDROID const *pData);
#endif

#if (VK_KHR_external_fence_fd)
void cleanup_VkImportFenceFdInfoKHR(VkImportFenceFdInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
void cleanup_VkImportFenceSciSyncInfoNV(VkImportFenceSciSyncInfoNV const *pData);
#endif

#if (VK_KHR_external_fence_win32)
void cleanup_VkImportFenceWin32HandleInfoKHR(VkImportFenceWin32HandleInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkImportMemoryBufferCollectionFUCHSIA(
    VkImportMemoryBufferCollectionFUCHSIA const *pData);
#endif

#if (VK_KHR_external_memory_fd)
void cleanup_VkImportMemoryFdInfoKHR(VkImportMemoryFdInfoKHR const *pData);
#endif

#if (VK_EXT_external_memory_host)
void cleanup_VkImportMemoryHostPointerInfoEXT(VkImportMemoryHostPointerInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal)
void cleanup_VkImportMemoryMetalHandleInfoEXT(VkImportMemoryMetalHandleInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkImportMemorySciBufInfoNV(VkImportMemorySciBufInfoNV const *pData);
#endif

#if (VK_KHR_external_memory_win32)
void cleanup_VkImportMemoryWin32HandleInfoKHR(VkImportMemoryWin32HandleInfoKHR const *pData);
#endif

#if (VK_NV_external_memory_win32)
void cleanup_VkImportMemoryWin32HandleInfoNV(VkImportMemoryWin32HandleInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory)
void cleanup_VkImportMemoryZirconHandleInfoFUCHSIA(
    VkImportMemoryZirconHandleInfoFUCHSIA const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkImportMetalBufferInfoEXT(VkImportMetalBufferInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkImportMetalIOSurfaceInfoEXT(VkImportMetalIOSurfaceInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkImportMetalSharedEventInfoEXT(VkImportMetalSharedEventInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkImportMetalTextureInfoEXT(VkImportMetalTextureInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
void cleanup_VkImportScreenBufferInfoQNX(VkImportScreenBufferInfoQNX const *pData);
#endif

#if (VK_KHR_external_semaphore_fd)
void cleanup_VkImportSemaphoreFdInfoKHR(VkImportSemaphoreFdInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
void cleanup_VkImportSemaphoreSciSyncInfoNV(VkImportSemaphoreSciSyncInfoNV const *pData);
#endif

#if (VK_KHR_external_semaphore_win32)
void cleanup_VkImportSemaphoreWin32HandleInfoKHR(VkImportSemaphoreWin32HandleInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore)
void cleanup_VkImportSemaphoreZirconHandleInfoFUCHSIA(
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsExecutionSetTokenEXT(
    VkIndirectCommandsExecutionSetTokenEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsIndexBufferTokenEXT(
    VkIndirectCommandsIndexBufferTokenEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutCreateInfoEXT(
    VkIndirectCommandsLayoutCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutCreateInfoNV(
    VkIndirectCommandsLayoutCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutCreateInfoNVX(
    VkIndirectCommandsLayoutCreateInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutTokenEXT(VkIndirectCommandsLayoutTokenEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutTokenNV(VkIndirectCommandsLayoutTokenNV const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutTokenNVX(VkIndirectCommandsLayoutTokenNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsPushConstantTokenEXT(
    VkIndirectCommandsPushConstantTokenEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkIndirectCommandsStreamNV(VkIndirectCommandsStreamNV const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkIndirectCommandsTokenNVX(VkIndirectCommandsTokenNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsVertexBufferTokenEXT(
    VkIndirectCommandsVertexBufferTokenEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectExecutionSetCreateInfoEXT(VkIndirectExecutionSetCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectExecutionSetPipelineInfoEXT(
    VkIndirectExecutionSetPipelineInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectExecutionSetShaderInfoEXT(VkIndirectExecutionSetShaderInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectExecutionSetShaderLayoutInfoEXT(
    VkIndirectExecutionSetShaderLayoutInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkInitializePerformanceApiInfoINTEL(VkInitializePerformanceApiInfoINTEL const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkInputAttachmentAspectReference(VkInputAttachmentAspectReference const *pData);
#endif

#if (VK_KHR_maintenance2)
void cleanup_VkInputAttachmentAspectReferenceKHR(VkInputAttachmentAspectReferenceKHR const *pData);
#endif

void cleanup_VkInstanceCreateInfo(VkInstanceCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkLatencySleepInfoNV(VkLatencySleepInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkLatencySleepModeInfoNV(VkLatencySleepModeInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkLatencySubmissionPresentIdNV(VkLatencySubmissionPresentIdNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkLatencySurfaceCapabilitiesNV(VkLatencySurfaceCapabilitiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkLatencyTimingsFrameReportNV(VkLatencyTimingsFrameReportNV const *pData);
#endif

void cleanup_VkLayerProperties(VkLayerProperties const *pData);

#if (VK_HEADER_VERSION >= 272 && VK_EXT_layer_settings)
void cleanup_VkLayerSettingEXT(VkLayerSettingEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 272 && VK_EXT_layer_settings)
void cleanup_VkLayerSettingsCreateInfoEXT(VkLayerSettingsCreateInfoEXT const *pData);
#endif

#if (VK_MVK_macos_surface)
void cleanup_VkMacOSSurfaceCreateInfoMVK(VkMacOSSurfaceCreateInfoMVK const *pData);
#endif

void cleanup_VkMappedMemoryRange(VkMappedMemoryRange const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkMemoryAllocateFlagsInfo(VkMemoryAllocateFlagsInfo const *pData);
#endif

#if (VK_KHR_device_group)
void cleanup_VkMemoryAllocateFlagsInfoKHR(VkMemoryAllocateFlagsInfoKHR const *pData);
#endif

void cleanup_VkMemoryAllocateInfo(VkMemoryAllocateInfo const *pData);

void cleanup_VkMemoryBarrier(VkMemoryBarrier const *pData);

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkMemoryBarrier2(VkMemoryBarrier2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 305 && VK_KHR_maintenance8)
void cleanup_VkMemoryBarrierAccessFlags3KHR(VkMemoryBarrierAccessFlags3KHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkMemoryDedicatedAllocateInfo(VkMemoryDedicatedAllocateInfo const *pData);
#endif

#if (VK_KHR_dedicated_allocation)
void cleanup_VkMemoryDedicatedAllocateInfoKHR(VkMemoryDedicatedAllocateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkMemoryDedicatedAllocateInfoTensorARM(
    VkMemoryDedicatedAllocateInfoTensorARM const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkMemoryDedicatedRequirements(VkMemoryDedicatedRequirements const *pData);
#endif

#if (VK_KHR_dedicated_allocation)
void cleanup_VkMemoryDedicatedRequirementsKHR(VkMemoryDedicatedRequirementsKHR const *pData);
#endif

#if (VK_KHR_external_memory_fd)
void cleanup_VkMemoryFdPropertiesKHR(VkMemoryFdPropertiesKHR const *pData);
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *pData);
#endif

#if (VK_KHR_external_memory_fd)
void cleanup_VkMemoryGetFdInfoKHR(VkMemoryGetFdInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal)
void cleanup_VkMemoryGetMetalHandleInfoEXT(VkMemoryGetMetalHandleInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma)
void cleanup_VkMemoryGetRemoteAddressInfoNV(VkMemoryGetRemoteAddressInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkMemoryGetSciBufInfoNV(VkMemoryGetSciBufInfoNV const *pData);
#endif

#if (VK_KHR_external_memory_win32)
void cleanup_VkMemoryGetWin32HandleInfoKHR(VkMemoryGetWin32HandleInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory)
void cleanup_VkMemoryGetZirconHandleInfoFUCHSIA(VkMemoryGetZirconHandleInfoFUCHSIA const *pData);
#endif

void cleanup_VkMemoryHeap(VkMemoryHeap const *pData);

#if (VK_EXT_external_memory_host)
void cleanup_VkMemoryHostPointerPropertiesEXT(VkMemoryHostPointerPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkMemoryMapInfo(VkMemoryMapInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 244 && VK_HEADER_VERSION <= 302 && VK_KHR_map_memory2)
void cleanup_VkMemoryMapInfoKHR(VkMemoryMapInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_map_memory2)
void cleanup_VkMemoryMapInfoKHR(VkMemoryMapInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed)
void cleanup_VkMemoryMapPlacedInfoEXT(VkMemoryMapPlacedInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal)
void cleanup_VkMemoryMetalHandlePropertiesEXT(VkMemoryMetalHandlePropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkMemoryOpaqueCaptureAddressAllocateInfo(
    VkMemoryOpaqueCaptureAddressAllocateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
void cleanup_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address)
void cleanup_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority)
void cleanup_VkMemoryPriorityAllocateInfoEXT(VkMemoryPriorityAllocateInfoEXT const *pData);
#endif

void cleanup_VkMemoryRequirements(VkMemoryRequirements const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkMemoryRequirements2(VkMemoryRequirements2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 281 && VK_KHR_get_memory_requirements2 && VK_NV_ray_tracing &&           \
     (VK_KHR_get_memory_requirements2 || VK_VERSION_1_1)) ||                                       \
    (VK_HEADER_VERSION >= 142 && VK_HEADER_VERSION <= 280 && VK_KHR_get_memory_requirements2 &&    \
     VK_NV_ray_tracing) ||                                                                         \
    (VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 141 && VK_VERSION_1_1 &&                      \
     VK_KHR_get_memory_requirements2 && VK_NV_ray_tracing) ||                                      \
    (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_VERSION_1_1 &&                       \
     VK_KHR_get_memory_requirements2 && VK_NVX_raytracing) ||                                      \
    (VK_HEADER_VERSION <= 84 && VK_KHR_get_memory_requirements2)
void cleanup_VkMemoryRequirements2KHR(VkMemoryRequirements2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkMemorySciBufPropertiesNV(VkMemorySciBufPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkMemoryToImageCopy(VkMemoryToImageCopy const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkMemoryToImageCopyEXT(VkMemoryToImageCopyEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkMemoryToImageCopyEXT(VkMemoryToImageCopyEXT const *pData);
#endif

void cleanup_VkMemoryType(VkMemoryType const *pData);

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkMemoryUnmapInfo(VkMemoryUnmapInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 244 && VK_HEADER_VERSION <= 302 && VK_KHR_map_memory2)
void cleanup_VkMemoryUnmapInfoKHR(VkMemoryUnmapInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_map_memory2)
void cleanup_VkMemoryUnmapInfoKHR(VkMemoryUnmapInfoKHR const *pData);
#endif

#if (VK_KHR_external_memory_win32)
void cleanup_VkMemoryWin32HandlePropertiesKHR(VkMemoryWin32HandlePropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory)
void cleanup_VkMemoryZirconHandlePropertiesFUCHSIA(
    VkMemoryZirconHandlePropertiesFUCHSIA const *pData);
#endif

#if (VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface)
void cleanup_VkMetalSurfaceCreateInfoEXT(VkMetalSurfaceCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapBuildInfoEXT(VkMicromapBuildInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapBuildSizesInfoEXT(VkMicromapBuildSizesInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapCreateInfoEXT(VkMicromapCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapTriangleEXT(VkMicromapTriangleEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapUsageEXT(VkMicromapUsageEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapVersionInfoEXT(VkMicromapVersionInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface)
void cleanup_VkMirSurfaceCreateInfoKHR(VkMirSurfaceCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw)
void cleanup_VkMultiDrawIndexedInfoEXT(VkMultiDrawIndexedInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw)
void cleanup_VkMultiDrawInfoEXT(VkMultiDrawInfoEXT const *pData);
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkMultisamplePropertiesEXT(VkMultisamplePropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled)
void cleanup_VkMultisampledRenderToSingleSampledInfoEXT(
    VkMultisampledRenderToSingleSampledInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NVX_multiview_per_view_attributes &&                           \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_NVX_multiview_per_view_attributes) ||                                                      \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
void cleanup_VkMultiviewPerViewAttributesInfoNVX(VkMultiviewPerViewAttributesInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_QCOM_multiview_per_view_render_areas)
void cleanup_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(
    VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeCreateInfoEXT(
    VkMutableDescriptorTypeCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *pData);
#endif

#if (VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *pData);
#endif

#if (VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeListEXT(VkMutableDescriptorTypeListEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *pData);
#endif

#if (VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *pData);
#endif

#if (VK_HEADER_VERSION <= 116 && VK_ANDROID_native_buffer)
void cleanup_VkNativeBufferANDROID(VkNativeBufferANDROID const *pData);
#endif

#if (VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer)
void cleanup_VkNativeBufferANDROID(VkNativeBufferANDROID const *pData);
#endif

#if (VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer)
void cleanup_VkNativeBufferUsage2ANDROID(VkNativeBufferUsage2ANDROID const *pData);
#endif

#if (VK_HEADER_VERSION >= 318 && VK_OHOS_surface)
void cleanup_VkOHSurfaceCreateInfoOHOS(VkOHSurfaceCreateInfoOHOS const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTableCreateInfoNVX(VkObjectTableCreateInfoNVX const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTableDescriptorSetEntryNVX(VkObjectTableDescriptorSetEntryNVX const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTableEntryNVX(VkObjectTableEntryNVX const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTableIndexBufferEntryNVX(VkObjectTableIndexBufferEntryNVX const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTablePipelineEntryNVX(VkObjectTablePipelineEntryNVX const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTablePushConstantEntryNVX(VkObjectTablePushConstantEntryNVX const *pData);
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTableVertexBufferEntryNVX(VkObjectTableVertexBufferEntryNVX const *pData);
#endif

void cleanup_VkOffset2D(VkOffset2D const *pData);

void cleanup_VkOffset3D(VkOffset3D const *pData);

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkOpaqueCaptureDescriptorDataCreateInfoEXT(
    VkOpaqueCaptureDescriptorDataCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkOpticalFlowExecuteInfoNV(VkOpticalFlowExecuteInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkOpticalFlowImageFormatInfoNV(VkOpticalFlowImageFormatInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkOpticalFlowImageFormatPropertiesNV(
    VkOpticalFlowImageFormatPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkOpticalFlowSessionCreateInfoNV(VkOpticalFlowSessionCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkOpticalFlowSessionCreatePrivateDataInfoNV(
    VkOpticalFlowSessionCreatePrivateDataInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkOutOfBandQueueTypeInfoNV(VkOutOfBandQueueTypeInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPartitionedAccelerationStructureFlagsNV(
    VkPartitionedAccelerationStructureFlagsNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPartitionedAccelerationStructureInstancesInputNV(
    VkPartitionedAccelerationStructureInstancesInputNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPartitionedAccelerationStructureUpdateInstanceDataNV(
    VkPartitionedAccelerationStructureUpdateInstanceDataNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPartitionedAccelerationStructureWriteInstanceDataNV(
    VkPartitionedAccelerationStructureWriteInstanceDataNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPartitionedAccelerationStructureWritePartitionTranslationDataNV(
    VkPartitionedAccelerationStructureWritePartitionTranslationDataNV const *pData);
#endif

#if (VK_GOOGLE_display_timing)
void cleanup_VkPastPresentationTimingGOOGLE(VkPastPresentationTimingGOOGLE const *pData);
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkPerTileBeginInfoQCOM(VkPerTileBeginInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkPerTileEndInfoQCOM(VkPerTileEndInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkPerformanceConfigurationAcquireInfoINTEL(
    VkPerformanceConfigurationAcquireInfoINTEL const *pData);
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkPerformanceCounterDescriptionKHR(VkPerformanceCounterDescriptionKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkPerformanceCounterKHR(VkPerformanceCounterKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkPerformanceMarkerInfoINTEL(VkPerformanceMarkerInfoINTEL const *pData);
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkPerformanceOverrideInfoINTEL(VkPerformanceOverrideInfoINTEL const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_performance_query && VKSC_VERSION_1_0)
void cleanup_VkPerformanceQueryReservationInfoKHR(
    VkPerformanceQueryReservationInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkPerformanceQuerySubmitInfoKHR(VkPerformanceQuerySubmitInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkPerformanceStreamMarkerInfoINTEL(VkPerformanceStreamMarkerInfoINTEL const *pData);
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkPerformanceValueINTEL(VkPerformanceValueINTEL const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDevice16BitStorageFeatures(
    VkPhysicalDevice16BitStorageFeatures const *pData);
#endif

#if (VK_KHR_16bit_storage)
void cleanup_VkPhysicalDevice16BitStorageFeaturesKHR(
    VkPhysicalDevice16BitStorageFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 149 && VK_EXT_4444_formats)
void cleanup_VkPhysicalDevice4444FormatsFeaturesEXT(
    VkPhysicalDevice4444FormatsFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDevice8BitStorageFeatures(VkPhysicalDevice8BitStorageFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130 && VK_KHR_8bit_storage)
void cleanup_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_8bit_storage)
void cleanup_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode)
void cleanup_VkPhysicalDeviceASTCDecodeFeaturesEXT(
    VkPhysicalDeviceASTCDecodeFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkPhysicalDeviceAccelerationStructureFeaturesKHR(
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkPhysicalDeviceAccelerationStructurePropertiesKHR(
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report)
void cleanup_VkPhysicalDeviceAddressBindingReportFeaturesEXT(
    VkPhysicalDeviceAddressBindingReportFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling)
void cleanup_VkPhysicalDeviceAmigoProfilingFeaturesSEC(
    VkPhysicalDeviceAmigoProfilingFeaturesSEC const *pData);
#endif

#if (VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag)
void cleanup_VkPhysicalDeviceAntiLagFeaturesAMD(VkPhysicalDeviceAntiLagFeaturesAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 250 && VK_EXT_attachment_feedback_loop_dynamic_state)
void cleanup_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(
    VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 224 && VK_EXT_attachment_feedback_loop_layout)
void cleanup_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(
    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT const *pData);
#endif

#if (VK_EXT_blend_operation_advanced)
void cleanup_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *pData);
#endif

#if (VK_EXT_blend_operation_advanced)
void cleanup_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle)
void cleanup_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 105 && VK_EXT_buffer_device_address)
void cleanup_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address)
void cleanup_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeatures(
    VkPhysicalDeviceBufferDeviceAddressFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address)
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address)
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkPhysicalDeviceClusterAccelerationStructureFeaturesNV(
    VkPhysicalDeviceClusterAccelerationStructureFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkPhysicalDeviceClusterAccelerationStructurePropertiesNV(
    VkPhysicalDeviceClusterAccelerationStructurePropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 239 && VK_HUAWEI_cluster_culling_shader)
void cleanup_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI const *pData);
#endif

#if (VK_HEADER_VERSION >= 239 && VK_HEADER_VERSION <= 242 && VK_HUAWEI_cluster_culling_shader)
void cleanup_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HUAWEI_cluster_culling_shader)
void cleanup_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *pData);
#endif

#if (VK_HEADER_VERSION >= 272 && VK_HUAWEI_cluster_culling_shader)
void cleanup_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI const *pData);
#endif

#if (VK_HEADER_VERSION >= 121 && VK_AMD_device_coherent_memory)
void cleanup_VkPhysicalDeviceCoherentMemoryFeaturesAMD(
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable)
void cleanup_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 293 && VK_NV_command_buffer_inheritance)
void cleanup_VkPhysicalDeviceCommandBufferInheritanceFeaturesNV(
    VkPhysicalDeviceCommandBufferInheritanceFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 295 && VK_KHR_compute_shader_derivatives)
void cleanup_VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 294 && VK_NV_compute_shader_derivatives)
void cleanup_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 295 && VK_NV_compute_shader_derivatives)
void cleanup_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 295 && VK_KHR_compute_shader_derivatives)
void cleanup_VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR(
    VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering)
void cleanup_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *pData);
#endif

#if (VK_EXT_conservative_rasterization)
void cleanup_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2)
void cleanup_VkPhysicalDeviceCooperativeMatrix2FeaturesNV(
    VkPhysicalDeviceCooperativeMatrix2FeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2)
void cleanup_VkPhysicalDeviceCooperativeMatrix2PropertiesNV(
    VkPhysicalDeviceCooperativeMatrix2PropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix)
void cleanup_VkPhysicalDeviceCooperativeMatrixFeaturesKHR(
    VkPhysicalDeviceCooperativeMatrixFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix)
void cleanup_VkPhysicalDeviceCooperativeMatrixFeaturesNV(
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix)
void cleanup_VkPhysicalDeviceCooperativeMatrixPropertiesKHR(
    VkPhysicalDeviceCooperativeMatrixPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix)
void cleanup_VkPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
void cleanup_VkPhysicalDeviceCooperativeVectorFeaturesNV(
    VkPhysicalDeviceCooperativeVectorFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
void cleanup_VkPhysicalDeviceCooperativeVectorPropertiesNV(
    VkPhysicalDeviceCooperativeVectorPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect)
void cleanup_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(
    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect)
void cleanup_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(
    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_corner_sampled_image)
void cleanup_VkPhysicalDeviceCornerSampledImageFeaturesNV(
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode)
void cleanup_VkPhysicalDeviceCoverageReductionModeFeaturesNV(
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_clamp)
void cleanup_VkPhysicalDeviceCubicClampFeaturesQCOM(
    VkPhysicalDeviceCubicClampFeaturesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights)
void cleanup_VkPhysicalDeviceCubicWeightsFeaturesQCOM(
    VkPhysicalDeviceCubicWeightsFeaturesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceCudaKernelLaunchFeaturesNV(
    VkPhysicalDeviceCudaKernelLaunchFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceCudaKernelLaunchPropertiesNV(
    VkPhysicalDeviceCudaKernelLaunchPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color)
void cleanup_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color)
void cleanup_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkPhysicalDeviceDataGraphFeaturesARM(
    VkPhysicalDeviceDataGraphFeaturesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkPhysicalDeviceDataGraphOperationSupportARM(
    VkPhysicalDeviceDataGraphOperationSupportARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkPhysicalDeviceDataGraphProcessingEngineARM(
    VkPhysicalDeviceDataGraphProcessingEngineARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 99 && VK_NV_dedicated_allocation_image_aliasing)
void cleanup_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control)
void cleanup_VkPhysicalDeviceDepthBiasControlFeaturesEXT(
    VkPhysicalDeviceDepthBiasControlFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control)
void cleanup_VkPhysicalDeviceDepthClampControlFeaturesEXT(
    VkPhysicalDeviceDepthClampControlFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 304 && VK_EXT_depth_clamp_zero_one)
void cleanup_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 305 && VK_EXT_depth_clamp_zero_one)
void cleanup_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 305 && VK_KHR_depth_clamp_zero_one)
void cleanup_VkPhysicalDeviceDepthClampZeroOneFeaturesKHR(
    VkPhysicalDeviceDepthClampZeroOneFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control)
void cleanup_VkPhysicalDeviceDepthClipControlFeaturesEXT(
    VkPhysicalDeviceDepthClipControlFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable)
void cleanup_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceDepthStencilResolveProperties(
    VkPhysicalDeviceDepthStencilResolveProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 130 && VK_KHR_depth_stencil_resolve)
void cleanup_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_depth_stencil_resolve)
void cleanup_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkPhysicalDeviceDescriptorBufferFeaturesEXT(
    VkPhysicalDeviceDescriptorBufferFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkPhysicalDeviceDescriptorBufferPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
void cleanup_VkPhysicalDeviceDescriptorBufferTensorFeaturesARM(
    VkPhysicalDeviceDescriptorBufferTensorFeaturesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
void cleanup_VkPhysicalDeviceDescriptorBufferTensorPropertiesARM(
    VkPhysicalDeviceDescriptorBufferTensorPropertiesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceDescriptorIndexingFeatures(
    VkPhysicalDeviceDescriptorIndexingFeatures const *pData);
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
void cleanup_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing)
void cleanup_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceDescriptorIndexingProperties(
    VkPhysicalDeviceDescriptorIndexingProperties const *pData);
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
void cleanup_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing)
void cleanup_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 263 && VK_NV_descriptor_pool_overallocation)
void cleanup_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV(
    VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping)
void cleanup_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(
    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute)
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report)
void cleanup_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config)
void cleanup_VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *pData);
#endif

#if (VK_EXT_discard_rectangles)
void cleanup_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceDisplacementMicromapFeaturesNV(
    VkPhysicalDeviceDisplacementMicromapFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceDisplacementMicromapPropertiesNV(
    VkPhysicalDeviceDisplacementMicromapPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceDriverProperties(VkPhysicalDeviceDriverProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 87 && VK_KHR_driver_properties)
void cleanup_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 130 && VK_KHR_driver_properties)
void cleanup_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_driver_properties)
void cleanup_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_physical_device_drm)
void cleanup_VkPhysicalDeviceDrmPropertiesEXT(VkPhysicalDeviceDrmPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceDynamicRenderingFeatures(
    VkPhysicalDeviceDynamicRenderingFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
void cleanup_VkPhysicalDeviceDynamicRenderingFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering)
void cleanup_VkPhysicalDeviceDynamicRenderingFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceDynamicRenderingLocalReadFeatures(
    VkPhysicalDeviceDynamicRenderingLocalReadFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 251 && VK_EXT_dynamic_rendering_unused_attachments)
void cleanup_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(
    VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive)
void cleanup_VkPhysicalDeviceExclusiveScissorFeaturesNV(
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 176 && VK_EXT_extended_dynamic_state2)
void cleanup_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3)
void cleanup_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3)
void cleanup_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(
    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 145 && VK_EXT_extended_dynamic_state)
void cleanup_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 267 && VK_NV_extended_sparse_address_space)
void cleanup_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(
    VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 267 && VK_NV_extended_sparse_address_space)
void cleanup_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV(
    VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceExternalBufferInfo(VkPhysicalDeviceExternalBufferInfo const *pData);
#endif

#if (VK_KHR_external_memory_capabilities)
void cleanup_VkPhysicalDeviceExternalBufferInfoKHR(
    VkPhysicalDeviceExternalBufferInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
void cleanup_VkPhysicalDeviceExternalComputeQueuePropertiesNV(
    VkPhysicalDeviceExternalComputeQueuePropertiesNV const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceExternalFenceInfo(VkPhysicalDeviceExternalFenceInfo const *pData);
#endif

#if (VK_KHR_external_fence_capabilities)
void cleanup_VkPhysicalDeviceExternalFenceInfoKHR(
    VkPhysicalDeviceExternalFenceInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve)
void cleanup_VkPhysicalDeviceExternalFormatResolveFeaturesANDROID(
    VkPhysicalDeviceExternalFormatResolveFeaturesANDROID const *pData);
#endif

#if (VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve)
void cleanup_VkPhysicalDeviceExternalFormatResolvePropertiesANDROID(
    VkPhysicalDeviceExternalFormatResolvePropertiesANDROID const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceExternalImageFormatInfo(
    VkPhysicalDeviceExternalImageFormatInfo const *pData);
#endif

#if (VK_KHR_external_memory_capabilities)
void cleanup_VkPhysicalDeviceExternalImageFormatInfoKHR(
    VkPhysicalDeviceExternalImageFormatInfoKHR const *pData);
#endif

#if (VK_EXT_external_memory_host)
void cleanup_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma)
void cleanup_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkPhysicalDeviceExternalMemorySciBufFeaturesNV(
    VkPhysicalDeviceExternalMemorySciBufFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
void cleanup_VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX(
    VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkPhysicalDeviceExternalSciBufFeaturesNV(
    VkPhysicalDeviceExternalSciBufFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2)
void cleanup_VkPhysicalDeviceExternalSciSync2FeaturesNV(
    VkPhysicalDeviceExternalSciSync2FeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
void cleanup_VkPhysicalDeviceExternalSciSyncFeaturesNV(
    VkPhysicalDeviceExternalSciSyncFeaturesNV const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceExternalSemaphoreInfo(
    VkPhysicalDeviceExternalSemaphoreInfo const *pData);
#endif

#if (VK_KHR_external_semaphore_capabilities)
void cleanup_VkPhysicalDeviceExternalSemaphoreInfoKHR(
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkPhysicalDeviceExternalTensorInfoARM(
    VkPhysicalDeviceExternalTensorInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
void cleanup_VkPhysicalDeviceFaultFeaturesEXT(VkPhysicalDeviceFaultFeaturesEXT const *pData);
#endif

void cleanup_VkPhysicalDeviceFeatures(VkPhysicalDeviceFeatures const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceFeatures2(VkPhysicalDeviceFeatures2 const *pData);
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkPhysicalDeviceFeatures2KHR(VkPhysicalDeviceFeatures2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 95 && VK_HEADER_VERSION <= 114 && VK_KHR_shader_float16_int8)
void cleanup_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 115 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float16_int8)
void cleanup_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_shader_float16_int8)
void cleanup_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceFloatControlsProperties(
    VkPhysicalDeviceFloatControlsProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 95 && VK_HEADER_VERSION <= 115 && VK_KHR_shader_float_controls)
void cleanup_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float_controls)
void cleanup_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_shader_float_controls)
void cleanup_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 316 && VK_ARM_format_pack)
void cleanup_VkPhysicalDeviceFormatPackFeaturesARM(
    VkPhysicalDeviceFormatPackFeaturesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2)
void cleanup_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2)
void cleanup_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map)
void cleanup_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered)
void cleanup_VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE(
    VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE const *pData);
#endif

#if (VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered)
void cleanup_VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE(
    VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE const *pData);
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map)
void cleanup_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric)
void cleanup_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 214 && VK_NV_fragment_shader_barycentric)
void cleanup_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 215 && VK_NV_fragment_shader_barycentric)
void cleanup_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric)
void cleanup_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 110 && VK_EXT_fragment_shader_interlock)
void cleanup_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums)
void cleanup_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums)
void cleanup_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
void cleanup_VkPhysicalDeviceFragmentShadingRateFeaturesKHR(
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
void cleanup_VkPhysicalDeviceFragmentShadingRateKHR(
    VkPhysicalDeviceFragmentShadingRateKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
void cleanup_VkPhysicalDeviceFragmentShadingRatePropertiesKHR(
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 264 && VK_EXT_frame_boundary)
void cleanup_VkPhysicalDeviceFrameBoundaryFeaturesEXT(
    VkPhysicalDeviceFrameBoundaryFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeatures(
    VkPhysicalDeviceGlobalPriorityQueryFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 180 && VK_HEADER_VERSION <= 203 && VK_EXT_global_priority_query)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority_query)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_global_priority_query)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_global_priority)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library)
void cleanup_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library)
void cleanup_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceGroupProperties(VkPhysicalDeviceGroupProperties const *pData);
#endif

#if (VK_KHR_device_group_creation)
void cleanup_VkPhysicalDeviceGroupPropertiesKHR(VkPhysicalDeviceGroupPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 301 && VK_HUAWEI_hdr_vivid)
void cleanup_VkPhysicalDeviceHdrVividFeaturesHUAWEI(
    VkPhysicalDeviceHdrVividFeaturesHUAWEI const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceHostImageCopyFeatures(
    VkPhysicalDeviceHostImageCopyFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkPhysicalDeviceHostImageCopyFeaturesEXT(
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkPhysicalDeviceHostImageCopyFeaturesEXT(
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceHostImageCopyProperties(
    VkPhysicalDeviceHostImageCopyProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkPhysicalDeviceHostImageCopyPropertiesEXT(
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkPhysicalDeviceHostImageCopyPropertiesEXT(
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceHostQueryResetFeatures(
    VkPhysicalDeviceHostQueryResetFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 130 && VK_EXT_host_query_reset)
void cleanup_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_host_query_reset)
void cleanup_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceIDProperties(VkPhysicalDeviceIDProperties const *pData);
#endif

#if (VK_KHR_external_memory_capabilities && VK_KHR_external_semaphore_capabilities &&              \
     VK_KHR_external_fence_capabilities)
void cleanup_VkPhysicalDeviceIDPropertiesKHR(VkPhysicalDeviceIDPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 211 && VK_EXT_image_2d_view_of_3d)
void cleanup_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(
    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control)
void cleanup_VkPhysicalDeviceImageAlignmentControlFeaturesMESA(
    VkPhysicalDeviceImageAlignmentControlFeaturesMESA const *pData);
#endif

#if (VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control)
void cleanup_VkPhysicalDeviceImageAlignmentControlPropertiesMESA(
    VkPhysicalDeviceImageAlignmentControlPropertiesMESA const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control)
void cleanup_VkPhysicalDeviceImageCompressionControlFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control_swapchain)
void cleanup_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 87 && VK_EXT_image_drm_format_modifier)
void cleanup_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_image_drm_format_modifier)
void cleanup_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceImageFormatInfo2(VkPhysicalDeviceImageFormatInfo2 const *pData);
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkPhysicalDeviceImageFormatInfo2KHR(VkPhysicalDeviceImageFormatInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2)
void cleanup_VkPhysicalDeviceImageProcessing2FeaturesQCOM(
    VkPhysicalDeviceImageProcessing2FeaturesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2)
void cleanup_VkPhysicalDeviceImageProcessing2PropertiesQCOM(
    VkPhysicalDeviceImageProcessing2PropertiesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing)
void cleanup_VkPhysicalDeviceImageProcessingFeaturesQCOM(
    VkPhysicalDeviceImageProcessingFeaturesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing)
void cleanup_VkPhysicalDeviceImageProcessingPropertiesQCOM(
    VkPhysicalDeviceImageProcessingPropertiesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceImageRobustnessFeatures(
    VkPhysicalDeviceImageRobustnessFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 148 && VK_HEADER_VERSION <= 203 && VK_EXT_image_robustness)
void cleanup_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_image_robustness)
void cleanup_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_image_sliced_view_of_3d)
void cleanup_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(
    VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic)
void cleanup_VkPhysicalDeviceImageViewImageFormatInfoEXT(
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod)
void cleanup_VkPhysicalDeviceImageViewMinLodFeaturesEXT(
    VkPhysicalDeviceImageViewMinLodFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceImagelessFramebufferFeatures(
    VkPhysicalDeviceImagelessFramebufferFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer)
void cleanup_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer)
void cleanup_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceIndexTypeUint8Features(
    VkPhysicalDeviceIndexTypeUint8Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_index_type_uint8)
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_index_type_uint8)
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_index_type_uint8)
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_index_type_uint8)
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesKHR(
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_index_type_uint8)
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesKHR(
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor)
void cleanup_VkPhysicalDeviceInheritedViewportScissorFeaturesNV(
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceInlineUniformBlockFeatures(
    VkPhysicalDeviceInlineUniformBlockFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
void cleanup_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block)
void cleanup_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceInlineUniformBlockProperties(
    VkPhysicalDeviceInlineUniformBlockProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
void cleanup_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block)
void cleanup_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 185 && VK_HUAWEI_invocation_mask)
void cleanup_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *pData);
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
void cleanup_VkPhysicalDeviceLayeredApiPropertiesKHR(
    VkPhysicalDeviceLayeredApiPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
void cleanup_VkPhysicalDeviceLayeredApiPropertiesListKHR(
    VkPhysicalDeviceLayeredApiPropertiesListKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
void cleanup_VkPhysicalDeviceLayeredApiVulkanPropertiesKHR(
    VkPhysicalDeviceLayeredApiVulkanPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 264 && VK_MSFT_layered_driver)
void cleanup_VkPhysicalDeviceLayeredDriverPropertiesMSFT(
    VkPhysicalDeviceLayeredDriverPropertiesMSFT const *pData);
#endif

#if (VK_HEADER_VERSION >= 227 && VK_EXT_legacy_dithering)
void cleanup_VkPhysicalDeviceLegacyDitheringFeaturesEXT(
    VkPhysicalDeviceLegacyDitheringFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 284 && VK_EXT_legacy_vertex_attributes)
void cleanup_VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT(
    VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 284 && VK_EXT_legacy_vertex_attributes)
void cleanup_VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT(
    VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT const *pData);
#endif

void cleanup_VkPhysicalDeviceLimits(VkPhysicalDeviceLimits const *pData);

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceLineRasterizationFeatures(
    VkPhysicalDeviceLineRasterizationFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesKHR(
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesKHR(
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceLineRasterizationProperties(
    VkPhysicalDeviceLineRasterizationProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesKHR(
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesKHR(
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 203 && VK_NV_linear_color_attachment)
void cleanup_VkPhysicalDeviceLinearColorAttachmentFeaturesNV(
    VkPhysicalDeviceLinearColorAttachmentFeaturesNV const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceMaintenance3Properties(
    VkPhysicalDeviceMaintenance3Properties const *pData);
#endif

#if (VK_KHR_maintenance3)
void cleanup_VkPhysicalDeviceMaintenance3PropertiesKHR(
    VkPhysicalDeviceMaintenance3PropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceMaintenance4Features(
    VkPhysicalDeviceMaintenance4Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
void cleanup_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4)
void cleanup_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceMaintenance4Properties(
    VkPhysicalDeviceMaintenance4Properties const *pData);
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
void cleanup_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4)
void cleanup_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceMaintenance5Features(
    VkPhysicalDeviceMaintenance5Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkPhysicalDeviceMaintenance5FeaturesKHR(
    VkPhysicalDeviceMaintenance5FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkPhysicalDeviceMaintenance5FeaturesKHR(
    VkPhysicalDeviceMaintenance5FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceMaintenance5Properties(
    VkPhysicalDeviceMaintenance5Properties const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkPhysicalDeviceMaintenance5PropertiesKHR(
    VkPhysicalDeviceMaintenance5PropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkPhysicalDeviceMaintenance5PropertiesKHR(
    VkPhysicalDeviceMaintenance5PropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceMaintenance6Features(
    VkPhysicalDeviceMaintenance6Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
void cleanup_VkPhysicalDeviceMaintenance6FeaturesKHR(
    VkPhysicalDeviceMaintenance6FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6)
void cleanup_VkPhysicalDeviceMaintenance6FeaturesKHR(
    VkPhysicalDeviceMaintenance6FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceMaintenance6Properties(
    VkPhysicalDeviceMaintenance6Properties const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
void cleanup_VkPhysicalDeviceMaintenance6PropertiesKHR(
    VkPhysicalDeviceMaintenance6PropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6)
void cleanup_VkPhysicalDeviceMaintenance6PropertiesKHR(
    VkPhysicalDeviceMaintenance6PropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
void cleanup_VkPhysicalDeviceMaintenance7FeaturesKHR(
    VkPhysicalDeviceMaintenance7FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
void cleanup_VkPhysicalDeviceMaintenance7PropertiesKHR(
    VkPhysicalDeviceMaintenance7PropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 305 && VK_KHR_maintenance8)
void cleanup_VkPhysicalDeviceMaintenance8FeaturesKHR(
    VkPhysicalDeviceMaintenance8FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9)
void cleanup_VkPhysicalDeviceMaintenance9FeaturesKHR(
    VkPhysicalDeviceMaintenance9FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9)
void cleanup_VkPhysicalDeviceMaintenance9PropertiesKHR(
    VkPhysicalDeviceMaintenance9PropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed)
void cleanup_VkPhysicalDeviceMapMemoryPlacedFeaturesEXT(
    VkPhysicalDeviceMapMemoryPlacedFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed)
void cleanup_VkPhysicalDeviceMapMemoryPlacedPropertiesEXT(
    VkPhysicalDeviceMapMemoryPlacedPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_memory_budget)
void cleanup_VkPhysicalDeviceMemoryBudgetPropertiesEXT(
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression)
void cleanup_VkPhysicalDeviceMemoryDecompressionFeaturesNV(
    VkPhysicalDeviceMemoryDecompressionFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression)
void cleanup_VkPhysicalDeviceMemoryDecompressionPropertiesNV(
    VkPhysicalDeviceMemoryDecompressionPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority)
void cleanup_VkPhysicalDeviceMemoryPriorityFeaturesEXT(
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *pData);
#endif

void cleanup_VkPhysicalDeviceMemoryProperties(VkPhysicalDeviceMemoryProperties const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceMemoryProperties2(VkPhysicalDeviceMemoryProperties2 const *pData);
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkPhysicalDeviceMemoryProperties2KHR(
    VkPhysicalDeviceMemoryProperties2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader)
void cleanup_VkPhysicalDeviceMeshShaderFeaturesEXT(
    VkPhysicalDeviceMeshShaderFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader)
void cleanup_VkPhysicalDeviceMeshShaderFeaturesNV(
    VkPhysicalDeviceMeshShaderFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader)
void cleanup_VkPhysicalDeviceMeshShaderPropertiesEXT(
    VkPhysicalDeviceMeshShaderPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader)
void cleanup_VkPhysicalDeviceMeshShaderPropertiesNV(
    VkPhysicalDeviceMeshShaderPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw)
void cleanup_VkPhysicalDeviceMultiDrawFeaturesEXT(
    VkPhysicalDeviceMultiDrawFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw)
void cleanup_VkPhysicalDeviceMultiDrawPropertiesEXT(
    VkPhysicalDeviceMultiDrawPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled)
void cleanup_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(
    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceMultiviewFeatures(VkPhysicalDeviceMultiviewFeatures const *pData);
#endif

#if (VK_KHR_multiview)
void cleanup_VkPhysicalDeviceMultiviewFeaturesKHR(
    VkPhysicalDeviceMultiviewFeaturesKHR const *pData);
#endif

#if (VK_NVX_multiview_per_view_attributes)
void cleanup_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_QCOM_multiview_per_view_render_areas)
void cleanup_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(
    VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 236 && VK_QCOM_multiview_per_view_viewports)
void cleanup_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(
    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceMultiviewProperties(VkPhysicalDeviceMultiviewProperties const *pData);
#endif

#if (VK_KHR_multiview)
void cleanup_VkPhysicalDeviceMultiviewPropertiesKHR(
    VkPhysicalDeviceMultiviewPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type)
void cleanup_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *pData);
#endif

#if (VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *pData);
#endif

#if (VK_HEADER_VERSION >= 267 && VK_EXT_nested_command_buffer)
void cleanup_VkPhysicalDeviceNestedCommandBufferFeaturesEXT(
    VkPhysicalDeviceNestedCommandBufferFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 267 && VK_EXT_nested_command_buffer)
void cleanup_VkPhysicalDeviceNestedCommandBufferPropertiesEXT(
    VkPhysicalDeviceNestedCommandBufferPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_non_seamless_cube_map)
void cleanup_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(
    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkPhysicalDeviceOpacityMicromapFeaturesEXT(
    VkPhysicalDeviceOpacityMicromapFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkPhysicalDeviceOpacityMicromapPropertiesEXT(
    VkPhysicalDeviceOpacityMicromapPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkPhysicalDeviceOpticalFlowFeaturesNV(
    VkPhysicalDeviceOpticalFlowFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkPhysicalDeviceOpticalFlowPropertiesNV(
    VkPhysicalDeviceOpticalFlowPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 95 && VK_EXT_pci_bus_info)
void cleanup_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 96 && VK_EXT_pci_bus_info)
void cleanup_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 191 && VK_EXT_pageable_device_local_memory)
void cleanup_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV(
    VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV(
    VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_NV_per_stage_descriptor_set)
void cleanup_VkPhysicalDevicePerStageDescriptorSetFeaturesNV(
    VkPhysicalDevicePerStageDescriptorSetFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkPhysicalDevicePerformanceQueryFeaturesKHR(
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkPhysicalDevicePerformanceQueryPropertiesKHR(
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPhysicalDevicePipelineBinaryFeaturesKHR(
    VkPhysicalDevicePipelineBinaryFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPhysicalDevicePipelineBinaryPropertiesKHR(
    VkPhysicalDevicePipelineBinaryPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDevicePipelineCreationCacheControlFeatures(
    VkPhysicalDevicePipelineCreationCacheControlFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_cache_control)
void cleanup_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_cache_control)
void cleanup_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 240 && VK_EXT_pipeline_library_group_handles)
void cleanup_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(
    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 305 && VK_ARM_pipeline_opacity_micromap)
void cleanup_VkPhysicalDevicePipelineOpacityMicromapFeaturesARM(
    VkPhysicalDevicePipelineOpacityMicromapFeaturesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties)
void cleanup_VkPhysicalDevicePipelinePropertiesFeaturesEXT(
    VkPhysicalDevicePipelinePropertiesFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDevicePipelineProtectedAccessFeatures(
    VkPhysicalDevicePipelineProtectedAccessFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_protected_access)
void cleanup_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_protected_access)
void cleanup_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDevicePipelineRobustnessFeatures(
    VkPhysicalDevicePipelineRobustnessFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness)
void cleanup_VkPhysicalDevicePipelineRobustnessFeaturesEXT(
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness)
void cleanup_VkPhysicalDevicePipelineRobustnessFeaturesEXT(
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDevicePipelineRobustnessProperties(
    VkPhysicalDevicePipelineRobustnessProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness)
void cleanup_VkPhysicalDevicePipelineRobustnessPropertiesEXT(
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness)
void cleanup_VkPhysicalDevicePipelineRobustnessPropertiesEXT(
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDevicePointClippingProperties(
    VkPhysicalDevicePointClippingProperties const *pData);
#endif

#if (VK_KHR_maintenance2)
void cleanup_VkPhysicalDevicePointClippingPropertiesKHR(
    VkPhysicalDevicePointClippingPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDevicePortabilitySubsetFeaturesKHR(
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDevicePortabilitySubsetPropertiesKHR(
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_present_barrier)
void cleanup_VkPhysicalDevicePresentBarrierFeaturesNV(
    VkPhysicalDevicePresentBarrierFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_id2)
void cleanup_VkPhysicalDevicePresentId2FeaturesKHR(
    VkPhysicalDevicePresentId2FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 185 && VK_KHR_present_id)
void cleanup_VkPhysicalDevicePresentIdFeaturesKHR(
    VkPhysicalDevicePresentIdFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 308 && VK_NV_present_metering && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDevicePresentMeteringFeaturesNV(
    VkPhysicalDevicePresentMeteringFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 297 && VK_EXT_present_mode_fifo_latest_ready)
void cleanup_VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT(
    VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2)
void cleanup_VkPhysicalDevicePresentWait2FeaturesKHR(
    VkPhysicalDevicePresentWait2FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 185 && VK_KHR_present_wait)
void cleanup_VkPhysicalDevicePresentWaitFeaturesKHR(
    VkPhysicalDevicePresentWaitFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer)
void cleanup_VkPhysicalDevicePresentationPropertiesANDROID(
    VkPhysicalDevicePresentationPropertiesANDROID const *pData);
#endif

#if (VK_HEADER_VERSION >= 190 && VK_EXT_primitive_topology_list_restart)
void cleanup_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_primitives_generated_query)
void cleanup_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(
    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDevicePrivateDataFeatures(VkPhysicalDevicePrivateDataFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data)
void cleanup_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_private_data)
void cleanup_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *pData);
#endif

void cleanup_VkPhysicalDeviceProperties(VkPhysicalDeviceProperties const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceProperties2(VkPhysicalDeviceProperties2 const *pData);
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkPhysicalDeviceProperties2KHR(VkPhysicalDeviceProperties2KHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceProtectedMemoryFeatures(
    VkPhysicalDeviceProtectedMemoryFeatures const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceProtectedMemoryProperties(
    VkPhysicalDeviceProtectedMemoryProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex)
void cleanup_VkPhysicalDeviceProvokingVertexFeaturesEXT(
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex)
void cleanup_VkPhysicalDeviceProvokingVertexPropertiesEXT(
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDevicePushDescriptorProperties(
    VkPhysicalDevicePushDescriptorProperties const *pData);
#endif

#if (VK_HEADER_VERSION <= 302 && VK_KHR_push_descriptor)
void cleanup_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_push_descriptor)
void cleanup_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM(
    VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 195 && VK_EXT_rgba10x6_formats)
void cleanup_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 200 && VK_HEADER_VERSION <= 224 &&                                       \
     VK_ARM_rasterization_order_attachment_access)
void cleanup_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_ARM_rasterization_order_attachment_access)
void cleanup_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_EXT_rasterization_order_attachment_access)
void cleanup_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 279 && VK_NV_raw_access_chains)
void cleanup_VkPhysicalDeviceRawAccessChainsFeaturesNV(
    VkPhysicalDeviceRawAccessChainsFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_query)
void cleanup_VkPhysicalDeviceRayQueryFeaturesKHR(VkPhysicalDeviceRayQueryFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceRayTracingFeaturesKHR(
    VkPhysicalDeviceRayTracingFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder)
void cleanup_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(
    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder)
void cleanup_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(
    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres)
void cleanup_VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV(
    VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_KHR_ray_tracing_maintenance1)
void cleanup_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(
    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
void cleanup_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
void cleanup_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 249 && VK_KHR_ray_tracing_position_fetch)
void cleanup_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(
    VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceRayTracingPropertiesKHR(
    VkPhysicalDeviceRayTracingPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkPhysicalDeviceRayTracingPropertiesNV(
    VkPhysicalDeviceRayTracingPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 280 && VK_NV_ray_tracing_validation)
void cleanup_VkPhysicalDeviceRayTracingValidationFeaturesNV(
    VkPhysicalDeviceRayTracingValidationFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkPhysicalDeviceRaytracingPropertiesNVX(
    VkPhysicalDeviceRaytracingPropertiesNVX const *pData);
#endif

#if (VK_HEADER_VERSION >= 270 && VK_IMG_relaxed_line_rasterization)
void cleanup_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG(
    VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG const *pData);
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
void cleanup_VkPhysicalDeviceRenderPassStripedFeaturesARM(
    VkPhysicalDeviceRenderPassStripedFeaturesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
void cleanup_VkPhysicalDeviceRenderPassStripedPropertiesARM(
    VkPhysicalDeviceRenderPassStripedPropertiesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test)
void cleanup_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 313 && VK_EXT_robustness2)
void cleanup_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 314 && VK_EXT_robustness2)
void cleanup_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 314 && VK_KHR_robustness2)
void cleanup_VkPhysicalDeviceRobustness2FeaturesKHR(
    VkPhysicalDeviceRobustness2FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 313 && VK_EXT_robustness2)
void cleanup_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 314 && VK_EXT_robustness2)
void cleanup_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 314 && VK_KHR_robustness2)
void cleanup_VkPhysicalDeviceRobustness2PropertiesKHR(
    VkPhysicalDeviceRobustness2PropertiesKHR const *pData);
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceSamplerFilterMinmaxProperties(
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *pData);
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_sampler_filter_minmax)
void cleanup_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_sampler_filter_minmax)
void cleanup_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *pData);
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceScalarBlockLayoutFeatures(
    VkPhysicalDeviceScalarBlockLayoutFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 93 && VK_HEADER_VERSION <= 130 && VK_EXT_scalar_block_layout)
void cleanup_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_scalar_block_layout)
void cleanup_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls)
void cleanup_VkPhysicalDeviceSchedulingControlsFeaturesARM(
    VkPhysicalDeviceSchedulingControlsFeaturesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls)
void cleanup_VkPhysicalDeviceSchedulingControlsPropertiesARM(
    VkPhysicalDeviceSchedulingControlsPropertiesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 278 && VK_NV_shader_atomic_float16_vector)
void cleanup_VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(
    VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 185 && VK_EXT_shader_atomic_float2)
void cleanup_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 148 && VK_EXT_shader_atomic_float)
void cleanup_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceShaderAtomicInt64Features(
    VkPhysicalDeviceShaderAtomicInt64Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_atomic_int64)
void cleanup_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_shader_atomic_int64)
void cleanup_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 311 && VK_KHR_shader_bfloat16)
void cleanup_VkPhysicalDeviceShaderBfloat16FeaturesKHR(
    VkPhysicalDeviceShaderBfloat16FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 124 && VK_KHR_shader_clock)
void cleanup_VkPhysicalDeviceShaderClockFeaturesKHR(
    VkPhysicalDeviceShaderClockFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 231 && VK_ARM_shader_core_builtins)
void cleanup_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(
    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 231 && VK_HEADER_VERSION <= 231 && VK_ARM_shader_core_builtins)
void cleanup_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 232 && VK_ARM_shader_core_builtins)
void cleanup_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2)
void cleanup_VkPhysicalDeviceShaderCoreProperties2AMD(
    VkPhysicalDeviceShaderCoreProperties2AMD const *pData);
#endif

#if (VK_AMD_shader_core_properties)
void cleanup_VkPhysicalDeviceShaderCorePropertiesAMD(
    VkPhysicalDeviceShaderCorePropertiesAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_ARM_shader_core_properties)
void cleanup_VkPhysicalDeviceShaderCorePropertiesARM(
    VkPhysicalDeviceShaderCorePropertiesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 113 && VK_HEADER_VERSION <= 203 &&                                       \
     VK_EXT_shader_demote_to_helper_invocation)
void cleanup_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_shader_demote_to_helper_invocation)
void cleanup_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION <= 105 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 106 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 106 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceShaderDrawParametersFeatures(
    VkPhysicalDeviceShaderDrawParametersFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 215 && VK_AMD_shader_early_and_late_fragment_tests)
void cleanup_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 214 && VK_HEADER_VERSION <= 214 &&                                       \
     VK_AMD_shader_early_and_late_fragment_tests)
void cleanup_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&             \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceShaderEnqueueFeaturesAMDX(
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *pData);
#endif

#if (VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceShaderEnqueueFeaturesAMDX(
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&             \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceShaderEnqueuePropertiesAMDX(
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *pData);
#endif

#if (VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceShaderEnqueuePropertiesAMDX(
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceShaderExpectAssumeFeatures(
    VkPhysicalDeviceShaderExpectAssumeFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_expect_assume)
void cleanup_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR(
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_shader_expect_assume)
void cleanup_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR(
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceShaderFloat16Int8Features(
    VkPhysicalDeviceShaderFloat16Int8Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 115 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float16_int8)
void cleanup_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_shader_float16_int8)
void cleanup_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_EXT_shader_float8)
void cleanup_VkPhysicalDeviceShaderFloat8FeaturesEXT(
    VkPhysicalDeviceShaderFloat8FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceShaderFloatControls2Features(
    VkPhysicalDeviceShaderFloatControls2Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_float_controls2)
void cleanup_VkPhysicalDeviceShaderFloatControls2FeaturesKHR(
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_shader_float_controls2)
void cleanup_VkPhysicalDeviceShaderFloatControls2FeaturesKHR(
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 155 && VK_EXT_shader_image_atomic_int64)
void cleanup_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shader_image_footprint)
void cleanup_VkPhysicalDeviceShaderImageFootprintFeaturesNV(
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductFeatures(
    VkPhysicalDeviceShaderIntegerDotProductFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 190 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_integer_dot_product)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_shader_integer_dot_product)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductProperties(
    VkPhysicalDeviceShaderIntegerDotProductProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 190 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_integer_dot_product)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_shader_integer_dot_product)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 115 && VK_INTEL_shader_integer_functions2)
void cleanup_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *pData);
#endif

#if (VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 114 && VK_INTEL_shader_integer_functions2)
void cleanup_VkPhysicalDeviceShaderIntegerFunctions2INTEL(
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_KHR_shader_maximal_reconvergence)
void cleanup_VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(
    VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
void cleanup_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(
    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
void cleanup_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(
    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_object)
void cleanup_VkPhysicalDeviceShaderObjectFeaturesEXT(
    VkPhysicalDeviceShaderObjectFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_object)
void cleanup_VkPhysicalDeviceShaderObjectPropertiesEXT(
    VkPhysicalDeviceShaderObjectPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_KHR_shader_quad_control)
void cleanup_VkPhysicalDeviceShaderQuadControlFeaturesKHR(
    VkPhysicalDeviceShaderQuadControlFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 288 && VK_KHR_shader_relaxed_extended_instruction)
void cleanup_VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(
    VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 286 && VK_EXT_shader_replicated_composites)
void cleanup_VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT(
    VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins)
void cleanup_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins)
void cleanup_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 123 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_subgroup_extended_types)
void cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_shader_subgroup_extended_types)
void cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceShaderSubgroupRotateFeatures(
    VkPhysicalDeviceShaderSubgroupRotateFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_subgroup_rotate)
void cleanup_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_shader_subgroup_rotate)
void cleanup_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 180 && VK_KHR_shader_subgroup_uniform_control_flow)
void cleanup_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceShaderTerminateInvocationFeatures(
    VkPhysicalDeviceShaderTerminateInvocationFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 158 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_terminate_invocation)
void cleanup_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_shader_terminate_invocation)
void cleanup_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_tile_image)
void cleanup_VkPhysicalDeviceShaderTileImageFeaturesEXT(
    VkPhysicalDeviceShaderTileImageFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_tile_image)
void cleanup_VkPhysicalDeviceShaderTileImagePropertiesEXT(
    VkPhysicalDeviceShaderTileImagePropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkPhysicalDeviceShadingRateImageFeaturesNV(
    VkPhysicalDeviceShadingRateImageFeaturesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkPhysicalDeviceShadingRateImagePropertiesNV(
    VkPhysicalDeviceShadingRateImagePropertiesNV const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceSparseImageFormatInfo2(
    VkPhysicalDeviceSparseImageFormatInfo2 const *pData);
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkPhysicalDeviceSparseImageFormatInfo2KHR(
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *pData);
#endif

void cleanup_VkPhysicalDeviceSparseProperties(VkPhysicalDeviceSparseProperties const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceSubgroupProperties(VkPhysicalDeviceSubgroupProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceSubgroupSizeControlFeatures(
    VkPhysicalDeviceSubgroupSizeControlFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 118 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control)
void cleanup_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control)
void cleanup_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceSubgroupSizeControlProperties(
    VkPhysicalDeviceSubgroupSizeControlProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control)
void cleanup_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control)
void cleanup_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback)
void cleanup_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(
    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading)
void cleanup_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading)
void cleanup_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *pData);
#endif

#if (VK_KHR_get_surface_capabilities2)
void cleanup_VkPhysicalDeviceSurfaceInfo2KHR(VkPhysicalDeviceSurfaceInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceSynchronization2Features(
    VkPhysicalDeviceSynchronization2Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkPhysicalDeviceTensorFeaturesARM(VkPhysicalDeviceTensorFeaturesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkPhysicalDeviceTensorPropertiesARM(VkPhysicalDeviceTensorPropertiesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment)
void cleanup_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceTexelBufferAlignmentProperties(
    VkPhysicalDeviceTexelBufferAlignmentProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 113 && VK_HEADER_VERSION <= 203 && VK_EXT_texel_buffer_alignment)
void cleanup_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_texel_buffer_alignment)
void cleanup_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceTextureCompressionASTCHDRFeatures(
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 203 && VK_EXT_texture_compression_astc_hdr)
void cleanup_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_texture_compression_astc_hdr)
void cleanup_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
void cleanup_VkPhysicalDeviceTileMemoryHeapFeaturesQCOM(
    VkPhysicalDeviceTileMemoryHeapFeaturesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
void cleanup_VkPhysicalDeviceTileMemoryHeapPropertiesQCOM(
    VkPhysicalDeviceTileMemoryHeapPropertiesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties)
void cleanup_VkPhysicalDeviceTilePropertiesFeaturesQCOM(
    VkPhysicalDeviceTilePropertiesFeaturesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkPhysicalDeviceTileShadingFeaturesQCOM(
    VkPhysicalDeviceTileShadingFeaturesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkPhysicalDeviceTileShadingPropertiesQCOM(
    VkPhysicalDeviceTileShadingPropertiesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceTimelineSemaphoreFeatures(
    VkPhysicalDeviceTimelineSemaphoreFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceTimelineSemaphoreProperties(
    VkPhysicalDeviceTimelineSemaphoreProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceToolProperties(VkPhysicalDeviceToolProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 130 && VK_HEADER_VERSION <= 203 && VK_EXT_tooling_info)
void cleanup_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_tooling_info)
void cleanup_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback)
void cleanup_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback)
void cleanup_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_unified_image_layouts)
void cleanup_VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR(
    VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 108 && VK_HEADER_VERSION <= 130 && VK_KHR_uniform_buffer_standard_layout)
void cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_uniform_buffer_standard_layout)
void cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION <= 105 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 106 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *pData);
#endif

#if (VK_HEADER_VERSION <= 105 && VK_KHR_variable_pointers)
void cleanup_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers)
void cleanup_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 106 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceVariablePointersFeatures(
    VkPhysicalDeviceVariablePointersFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers)
void cleanup_VkPhysicalDeviceVariablePointersFeaturesKHR(
    VkPhysicalDeviceVariablePointersFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeatures(
    VkPhysicalDeviceVertexAttributeDivisorFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorProperties(
    VkPhysicalDeviceVertexAttributeDivisorProperties const *pData);
#endif

#if (VK_EXT_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_EXT_vertex_attribute_robustness)
void cleanup_VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT(
    VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state)
void cleanup_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
void cleanup_VkPhysicalDeviceVideoDecodeVP9FeaturesKHR(
    VkPhysicalDeviceVideoDecodeVP9FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkPhysicalDeviceVideoEncodeAV1FeaturesKHR(
    VkPhysicalDeviceVideoEncodeAV1FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR(
    VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
void cleanup_VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR(
    VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_maintenance1)
void cleanup_VkPhysicalDeviceVideoMaintenance1FeaturesKHR(
    VkPhysicalDeviceVideoMaintenance1FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2)
void cleanup_VkPhysicalDeviceVideoMaintenance2FeaturesKHR(
    VkPhysicalDeviceVideoMaintenance2FeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceVulkan11Features(VkPhysicalDeviceVulkan11Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceVulkan11Properties(VkPhysicalDeviceVulkan11Properties const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceVulkan12Features(VkPhysicalDeviceVulkan12Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceVulkan12Properties(VkPhysicalDeviceVulkan12Properties const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceVulkan13Features(VkPhysicalDeviceVulkan13Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceVulkan13Properties(VkPhysicalDeviceVulkan13Properties const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceVulkan14Features(VkPhysicalDeviceVulkan14Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceVulkan14Properties(VkPhysicalDeviceVulkan14Properties const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceVulkanMemoryModelFeatures(
    VkPhysicalDeviceVulkanMemoryModelFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 97 && VK_KHR_vulkan_memory_model &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 118 && VK_HEADER_VERSION <= 130 && VK_KHR_vulkan_memory_model) ||        \
    (VK_HEADER_VERSION >= 98 && VK_HEADER_VERSION <= 117 && VK_KHR_vulkan_memory_model &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_vulkan_memory_model)
void cleanup_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPhysicalDeviceVulkanSC10Features(VkPhysicalDeviceVulkanSC10Features const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPhysicalDeviceVulkanSC10Properties(
    VkPhysicalDeviceVulkanSC10Properties const *pData);
#endif

#if (VK_HEADER_VERSION >= 168 && VK_KHR_workgroup_memory_explicit_layout)
void cleanup_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_EXT_ycbcr_2plane_444_formats)
void cleanup_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_ycbcr_degamma)
void cleanup_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM(
    VkPhysicalDeviceYcbcrDegammaFeaturesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 102 && VK_EXT_ycbcr_image_arrays)
void cleanup_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 315 && VK_EXT_zero_initialize_device_memory)
void cleanup_VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT(
    VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures const *pData);
#endif

#if (VK_HEADER_VERSION >= 168 && VK_HEADER_VERSION <= 203 &&                                       \
     VK_KHR_zero_initialize_workgroup_memory)
void cleanup_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_zero_initialize_workgroup_memory)
void cleanup_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryCreateInfoKHR(VkPipelineBinaryCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryDataInfoKHR(VkPipelineBinaryDataInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryDataKHR(VkPipelineBinaryDataKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryHandlesInfoKHR(VkPipelineBinaryHandlesInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryInfoKHR(VkPipelineBinaryInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryKeyKHR(VkPipelineBinaryKeyKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryKeysAndDataKHR(VkPipelineBinaryKeysAndDataKHR const *pData);
#endif

#if VK_HEADER_VERSION <= 240
void cleanup_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 241
void cleanup_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 184
void cleanup_VkPipelineCacheHeaderVersionOne(VkPipelineCacheHeaderVersionOne const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPipelineCacheHeaderVersionSafetyCriticalOne(
    VkPipelineCacheHeaderVersionSafetyCriticalOne const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPipelineCacheSafetyCriticalIndexEntry(
    VkPipelineCacheSafetyCriticalIndexEntry const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPipelineCacheStageValidationIndexEntry(
    VkPipelineCacheStageValidationIndexEntry const *pData);
#endif

#if (VK_EXT_blend_operation_advanced)
void cleanup_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *pData);
#endif

void cleanup_VkPipelineColorBlendAttachmentState(VkPipelineColorBlendAttachmentState const *pData);

void cleanup_VkPipelineColorBlendStateCreateInfo(VkPipelineColorBlendStateCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable)
void cleanup_VkPipelineColorWriteCreateInfoEXT(VkPipelineColorWriteCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control)
void cleanup_VkPipelineCompilerControlCreateInfoAMD(
    VkPipelineCompilerControlCreateInfoAMD const *pData);
#endif

#if (VK_NV_framebuffer_mixed_samples)
void cleanup_VkPipelineCoverageModulationStateCreateInfoNV(
    VkPipelineCoverageModulationStateCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode)
void cleanup_VkPipelineCoverageReductionStateCreateInfoNV(
    VkPipelineCoverageReductionStateCreateInfoNV const *pData);
#endif

#if (VK_NV_fragment_coverage_to_color)
void cleanup_VkPipelineCoverageToColorStateCreateInfoNV(
    VkPipelineCoverageToColorStateCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPipelineCreateFlags2CreateInfo(VkPipelineCreateFlags2CreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkPipelineCreateFlags2CreateInfoKHR(VkPipelineCreateFlags2CreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkPipelineCreateFlags2CreateInfoKHR(VkPipelineCreateFlags2CreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineCreateInfoKHR(VkPipelineCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPipelineCreationFeedback(VkPipelineCreationFeedback const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPipelineCreationFeedbackCreateInfo(
    VkPipelineCreationFeedbackCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_feedback)
void cleanup_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_feedback)
void cleanup_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_feedback)
void cleanup_VkPipelineCreationFeedbackEXT(VkPipelineCreationFeedbackEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_feedback)
void cleanup_VkPipelineCreationFeedbackEXT(VkPipelineCreationFeedbackEXT const *pData);
#endif

void cleanup_VkPipelineDepthStencilStateCreateInfo(
    VkPipelineDepthStencilStateCreateInfo const *pData);

#if (VK_EXT_discard_rectangles)
void cleanup_VkPipelineDiscardRectangleStateCreateInfoEXT(
    VkPipelineDiscardRectangleStateCreateInfoEXT const *pData);
#endif

void cleanup_VkPipelineDynamicStateCreateInfo(VkPipelineDynamicStateCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPipelineExecutableInfoKHR(VkPipelineExecutableInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPipelineExecutableInternalRepresentationKHR(
    VkPipelineExecutableInternalRepresentationKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPipelineExecutablePropertiesKHR(VkPipelineExecutablePropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPipelineExecutableStatisticKHR(VkPipelineExecutableStatisticKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered)
void cleanup_VkPipelineFragmentDensityMapLayeredCreateInfoVALVE(
    VkPipelineFragmentDensityMapLayeredCreateInfoVALVE const *pData);
#endif

#if (VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums)
void cleanup_VkPipelineFragmentShadingRateEnumStateCreateInfoNV(
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
void cleanup_VkPipelineFragmentShadingRateStateCreateInfoKHR(
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute)
void cleanup_VkPipelineIndirectDeviceAddressInfoNV(
    VkPipelineIndirectDeviceAddressInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties)
void cleanup_VkPipelineInfoEXT(VkPipelineInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPipelineInfoKHR(VkPipelineInfoKHR const *pData);
#endif

void cleanup_VkPipelineInputAssemblyStateCreateInfo(
    VkPipelineInputAssemblyStateCreateInfo const *pData);

void cleanup_VkPipelineLayoutCreateInfo(VkPipelineLayoutCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 162 && VK_KHR_pipeline_library) ||                                       \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_pipeline_library &&            \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPipelineLibraryCreateInfoKHR(VkPipelineLibraryCreateInfoKHR const *pData);
#endif

void cleanup_VkPipelineMultisampleStateCreateInfo(
    VkPipelineMultisampleStateCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPipelineOfflineCreateInfo(VkPipelineOfflineCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPipelinePoolSize(VkPipelinePoolSize const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties)
void cleanup_VkPipelinePropertiesIdentifierEXT(VkPipelinePropertiesIdentifierEXT const *pData);
#endif

#if (VK_EXT_conservative_rasterization)
void cleanup_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable)
void cleanup_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPipelineRasterizationLineStateCreateInfo(
    VkPipelineRasterizationLineStateCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization)
void cleanup_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization)
void cleanup_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization)
void cleanup_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization)
void cleanup_VkPipelineRasterizationLineStateCreateInfoKHR(
    VkPipelineRasterizationLineStateCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization)
void cleanup_VkPipelineRasterizationLineStateCreateInfoKHR(
    VkPipelineRasterizationLineStateCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex)
void cleanup_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *pData);
#endif

void cleanup_VkPipelineRasterizationStateCreateInfo(
    VkPipelineRasterizationStateCreateInfo const *pData);

#if (VK_AMD_rasterization_order)
void cleanup_VkPipelineRasterizationStateRasterizationOrderAMD(
    VkPipelineRasterizationStateRasterizationOrderAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback)
void cleanup_VkPipelineRasterizationStateStreamCreateInfoEXT(
    VkPipelineRasterizationStateStreamCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPipelineRenderingCreateInfo(VkPipelineRenderingCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
void cleanup_VkPipelineRenderingCreateInfoKHR(VkPipelineRenderingCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering)
void cleanup_VkPipelineRenderingCreateInfoKHR(VkPipelineRenderingCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test)
void cleanup_VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPipelineRobustnessCreateInfo(VkPipelineRobustnessCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness)
void cleanup_VkPipelineRobustnessCreateInfoEXT(VkPipelineRobustnessCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness)
void cleanup_VkPipelineRobustnessCreateInfoEXT(VkPipelineRobustnessCreateInfoEXT const *pData);
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkPipelineSampleLocationsStateCreateInfoEXT(
    VkPipelineSampleLocationsStateCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION <= 240
void cleanup_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 241
void cleanup_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
void cleanup_VkPipelineShaderStageModuleIdentifierCreateInfoEXT(
    VkPipelineShaderStageModuleIdentifierCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPipelineShaderStageNodeCreateInfoAMDX(
    VkPipelineShaderStageNodeCreateInfoAMDX const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control)
void cleanup_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control)
void cleanup_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPipelineTessellationDomainOriginStateCreateInfo(
    VkPipelineTessellationDomainOriginStateCreateInfo const *pData);
#endif

#if (VK_KHR_maintenance2)
void cleanup_VkPipelineTessellationDomainOriginStateCreateInfoKHR(
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *pData);
#endif

void cleanup_VkPipelineTessellationStateCreateInfo(
    VkPipelineTessellationStateCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfo(
    VkPipelineVertexInputDivisorStateCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoKHR(
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoKHR(
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *pData);
#endif

void cleanup_VkPipelineVertexInputStateCreateInfo(
    VkPipelineVertexInputStateCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control)
void cleanup_VkPipelineViewportDepthClampControlCreateInfoEXT(
    VkPipelineViewportDepthClampControlCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control)
void cleanup_VkPipelineViewportDepthClipControlCreateInfoEXT(
    VkPipelineViewportDepthClipControlCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive)
void cleanup_VkPipelineViewportExclusiveScissorStateCreateInfoNV(
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkPipelineViewportShadingRateImageStateCreateInfoNV(
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *pData);
#endif

void cleanup_VkPipelineViewportStateCreateInfo(VkPipelineViewportStateCreateInfo const *pData);

#if (VK_NV_viewport_swizzle)
void cleanup_VkPipelineViewportSwizzleStateCreateInfoNV(
    VkPipelineViewportSwizzleStateCreateInfoNV const *pData);
#endif

#if (VK_NV_clip_space_w_scaling)
void cleanup_VkPipelineViewportWScalingStateCreateInfoNV(
    VkPipelineViewportWScalingStateCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 105 && VK_GGP_frame_token)
void cleanup_VkPresentFrameTokenGGP(VkPresentFrameTokenGGP const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_id2)
void cleanup_VkPresentId2KHR(VkPresentId2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 185 && VK_KHR_present_id)
void cleanup_VkPresentIdKHR(VkPresentIdKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 140 && VK_KHR_swapchain)
void cleanup_VkPresentInfoKHR(VkPresentInfoKHR const *pData);
#endif

#if (VK_KHR_incremental_present)
void cleanup_VkPresentRegionKHR(VkPresentRegionKHR const *pData);
#endif

#if (VK_KHR_incremental_present)
void cleanup_VkPresentRegionsKHR(VkPresentRegionsKHR const *pData);
#endif

#if (VK_GOOGLE_display_timing)
void cleanup_VkPresentTimeGOOGLE(VkPresentTimeGOOGLE const *pData);
#endif

#if (VK_GOOGLE_display_timing)
void cleanup_VkPresentTimesInfoGOOGLE(VkPresentTimesInfoGOOGLE const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2)
void cleanup_VkPresentWait2InfoKHR(VkPresentWait2InfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPrivateDataSlotCreateInfo(VkPrivateDataSlotCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data)
void cleanup_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_private_data)
void cleanup_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkProtectedSubmitInfo(VkProtectedSubmitInfo const *pData);
#endif

void cleanup_VkPushConstantRange(VkPushConstantRange const *pData);

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPushConstantsInfo(VkPushConstantsInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
void cleanup_VkPushConstantsInfoKHR(VkPushConstantsInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6)
void cleanup_VkPushConstantsInfoKHR(VkPushConstantsInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPushDescriptorSetInfo(VkPushDescriptorSetInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor)
void cleanup_VkPushDescriptorSetInfoKHR(VkPushDescriptorSetInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6 && VK_KHR_push_descriptor)
void cleanup_VkPushDescriptorSetInfoKHR(VkPushDescriptorSetInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPushDescriptorSetWithTemplateInfo(VkPushDescriptorSetWithTemplateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 275 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor) ||                                                                    \
    (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 274 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor && VK_VERSION_1_1)
void cleanup_VkPushDescriptorSetWithTemplateInfoKHR(
    VkPushDescriptorSetWithTemplateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6 && VK_KHR_push_descriptor)
void cleanup_VkPushDescriptorSetWithTemplateInfoKHR(
    VkPushDescriptorSetWithTemplateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 242 && VK_NV_low_latency)
void cleanup_VkQueryLowLatencySupportNV(VkQueryLowLatencySupportNV const *pData);
#endif

void cleanup_VkQueryPoolCreateInfo(VkQueryPoolCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 134 && VK_INTEL_performance_query)
void cleanup_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query)
void cleanup_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *pData);
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkQueryPoolPerformanceCreateInfoKHR(VkQueryPoolPerformanceCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query)
void cleanup_VkQueryPoolPerformanceQueryCreateInfoINTEL(
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR(
    VkQueryPoolVideoEncodeFeedbackCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkQueueFamilyCheckpointProperties2NV(
    VkQueueFamilyCheckpointProperties2NV const *pData);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_device_diagnostic_checkpoints &&                            \
     (VK_VERSION_1_3 || VK_KHR_synchronization2)) ||                                               \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_synchronization2 &&            \
     VK_NV_device_diagnostic_checkpoints) ||                                                       \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_KHR_synchronization2)
void cleanup_VkQueueFamilyCheckpointProperties2NV(
    VkQueueFamilyCheckpointProperties2NV const *pData);
#endif

#if (VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints)
void cleanup_VkQueueFamilyCheckpointPropertiesNV(VkQueueFamilyCheckpointPropertiesNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkQueueFamilyDataGraphProcessingEnginePropertiesARM(
    VkQueueFamilyDataGraphProcessingEnginePropertiesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkQueueFamilyDataGraphPropertiesARM(VkQueueFamilyDataGraphPropertiesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkQueueFamilyGlobalPriorityProperties(
    VkQueueFamilyGlobalPriorityProperties const *pData);
#endif

#if (VK_HEADER_VERSION >= 180 && VK_HEADER_VERSION <= 203 && VK_EXT_global_priority_query)
void cleanup_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority_query)
void cleanup_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_global_priority_query)
void cleanup_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority)
void cleanup_VkQueueFamilyGlobalPriorityPropertiesKHR(
    VkQueueFamilyGlobalPriorityPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_global_priority)
void cleanup_VkQueueFamilyGlobalPriorityPropertiesKHR(
    VkQueueFamilyGlobalPriorityPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9)
void cleanup_VkQueueFamilyOwnershipTransferPropertiesKHR(
    VkQueueFamilyOwnershipTransferPropertiesKHR const *pData);
#endif

void cleanup_VkQueueFamilyProperties(VkQueueFamilyProperties const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkQueueFamilyProperties2(VkQueueFamilyProperties2 const *pData);
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkQueueFamilyProperties2KHR(VkQueueFamilyProperties2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkQueueFamilyQueryResultStatusProperties2KHR(
    VkQueueFamilyQueryResultStatusProperties2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkQueueFamilyQueryResultStatusProperties2KHR(
    VkQueueFamilyQueryResultStatusProperties2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkQueueFamilyQueryResultStatusPropertiesKHR(
    VkQueueFamilyQueryResultStatusPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkQueueFamilyVideoPropertiesKHR(VkQueueFamilyVideoPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure &&                           \
     VK_KHR_ray_tracing_pipeline)
void cleanup_VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV(
    VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
void cleanup_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkRayTracingPipelineCreateInfoNV(VkRayTracingPipelineCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
void cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline) ||                                   \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkRayTracingShaderGroupCreateInfoKHR(
    VkRayTracingShaderGroupCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 134 && VK_NV_ray_tracing)
void cleanup_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
void cleanup_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkRaytracingPipelineCreateInfoNVX(VkRaytracingPipelineCreateInfoNVX const *pData);
#endif

void cleanup_VkRect2D(VkRect2D const *pData);

#if (VK_KHR_incremental_present)
void cleanup_VkRectLayerKHR(VkRectLayerKHR const *pData);
#endif

#if (VK_GOOGLE_display_timing)
void cleanup_VkRefreshCycleDurationGOOGLE(VkRefreshCycleDurationGOOGLE const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_object_refresh)
void cleanup_VkRefreshObjectKHR(VkRefreshObjectKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_object_refresh)
void cleanup_VkRefreshObjectListKHR(VkRefreshObjectListKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkReleaseCapturedPipelineDataInfoKHR(
    VkReleaseCapturedPipelineDataInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkReleaseSwapchainImagesInfoEXT(VkReleaseSwapchainImagesInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkRenderPassAttachmentBeginInfo(VkRenderPassAttachmentBeginInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer)
void cleanup_VkRenderPassAttachmentBeginInfoKHR(VkRenderPassAttachmentBeginInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer)
void cleanup_VkRenderPassAttachmentBeginInfoKHR(VkRenderPassAttachmentBeginInfoKHR const *pData);
#endif

void cleanup_VkRenderPassBeginInfo(VkRenderPassBeginInfo const *pData);

void cleanup_VkRenderPassCreateInfo(VkRenderPassCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkRenderPassCreateInfo2(VkRenderPassCreateInfo2 const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassCreationControlEXT(VkRenderPassCreationControlEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassCreationFeedbackCreateInfoEXT(
    VkRenderPassCreationFeedbackCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 215 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassCreationFeedbackInfoEXT(VkRenderPassCreationFeedbackInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassCreationFeedbackInfoEXT(VkRenderPassCreationFeedbackInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map)
void cleanup_VkRenderPassFragmentDensityMapCreateInfoEXT(
    VkRenderPassFragmentDensityMapCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
void cleanup_VkRenderPassFragmentDensityMapOffsetEndInfoEXT(
    VkRenderPassFragmentDensityMapOffsetEndInfoEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkRenderPassInputAttachmentAspectCreateInfo(
    VkRenderPassInputAttachmentAspectCreateInfo const *pData);
#endif

#if (VK_KHR_maintenance2)
void cleanup_VkRenderPassInputAttachmentAspectCreateInfoKHR(
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkRenderPassMultiviewCreateInfo(VkRenderPassMultiviewCreateInfo const *pData);
#endif

#if (VK_KHR_multiview)
void cleanup_VkRenderPassMultiviewCreateInfoKHR(VkRenderPassMultiviewCreateInfoKHR const *pData);
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkRenderPassSampleLocationsBeginInfoEXT(
    VkRenderPassSampleLocationsBeginInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
void cleanup_VkRenderPassStripeBeginInfoARM(VkRenderPassStripeBeginInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
void cleanup_VkRenderPassStripeInfoARM(VkRenderPassStripeInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
void cleanup_VkRenderPassStripeSubmitInfoARM(VkRenderPassStripeSubmitInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassSubpassFeedbackCreateInfoEXT(
    VkRenderPassSubpassFeedbackCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 215 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassSubpassFeedbackInfoEXT(VkRenderPassSubpassFeedbackInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassSubpassFeedbackInfoEXT(VkRenderPassSubpassFeedbackInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkRenderPassTileShadingCreateInfoQCOM(
    VkRenderPassTileShadingCreateInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform)
void cleanup_VkRenderPassTransformBeginInfoQCOM(VkRenderPassTransformBeginInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkRenderingAreaInfo(VkRenderingAreaInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkRenderingAreaInfoKHR(VkRenderingAreaInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkRenderingAreaInfoKHR(VkRenderingAreaInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkRenderingAttachmentInfo(VkRenderingAttachmentInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingAttachmentInfoKHR(VkRenderingAttachmentInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingAttachmentInfoKHR(VkRenderingAttachmentInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkRenderingAttachmentLocationInfo(VkRenderingAttachmentLocationInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkRenderingAttachmentLocationInfoKHR(
    VkRenderingAttachmentLocationInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkRenderingAttachmentLocationInfoKHR(
    VkRenderingAttachmentLocationInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
void cleanup_VkRenderingEndInfoEXT(VkRenderingEndInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_EXT_fragment_density_map &&                                    \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_EXT_fragment_density_map) ||                                                               \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingFragmentDensityMapAttachmentInfoEXT(
    VkRenderingFragmentDensityMapAttachmentInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 299 && VK_KHR_fragment_shading_rate &&                                   \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_KHR_fragment_shading_rate) ||                                                              \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingFragmentShadingRateAttachmentInfoKHR(
    VkRenderingFragmentShadingRateAttachmentInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkRenderingInfo(VkRenderingInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingInfoKHR(VkRenderingInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 281 && VK_KHR_dynamic_rendering && VK_QCOM_tile_properties &&            \
     (VK_KHR_dynamic_rendering || VK_VERSION_1_3)) ||                                              \
    (VK_HEADER_VERSION >= 222 && VK_HEADER_VERSION <= 280 && VK_KHR_dynamic_rendering &&           \
     VK_QCOM_tile_properties) ||                                                                   \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 221 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingInfoKHR(VkRenderingInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkRenderingInputAttachmentIndexInfo(VkRenderingInputAttachmentIndexInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkRenderingInputAttachmentIndexInfoKHR(
    VkRenderingInputAttachmentIndexInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkRenderingInputAttachmentIndexInfoKHR(
    VkRenderingInputAttachmentIndexInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkResolveImageInfo2(VkResolveImageInfo2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkSRTDataNV(VkSRTDataNV const *pData);
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkSampleLocationEXT(VkSampleLocationEXT const *pData);
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkSampleLocationsInfoEXT(VkSampleLocationsInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2)
void cleanup_VkSamplerBlockMatchWindowCreateInfoQCOM(
    VkSamplerBlockMatchWindowCreateInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle)
void cleanup_VkSamplerBorderColorComponentMappingCreateInfoEXT(
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkSamplerCaptureDescriptorDataInfoEXT(
    VkSamplerCaptureDescriptorDataInfoEXT const *pData);
#endif

void cleanup_VkSamplerCreateInfo(VkSamplerCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights)
void cleanup_VkSamplerCubicWeightsCreateInfoQCOM(VkSamplerCubicWeightsCreateInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color)
void cleanup_VkSamplerCustomBorderColorCreateInfoEXT(
    VkSamplerCustomBorderColorCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSamplerReductionModeCreateInfo(VkSamplerReductionModeCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_sampler_filter_minmax)
void cleanup_VkSamplerReductionModeCreateInfoEXT(VkSamplerReductionModeCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_sampler_filter_minmax)
void cleanup_VkSamplerReductionModeCreateInfoEXT(VkSamplerReductionModeCreateInfoEXT const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkSamplerYcbcrConversionCreateInfo(VkSamplerYcbcrConversionCreateInfo const *pData);
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkSamplerYcbcrConversionCreateInfoKHR(
    VkSamplerYcbcrConversionCreateInfoKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkSamplerYcbcrConversionImageFormatProperties(
    VkSamplerYcbcrConversionImageFormatProperties const *pData);
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkSamplerYcbcrConversionImageFormatPropertiesKHR(
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *pData);
#endif

#if (VK_VERSION_1_1)
void cleanup_VkSamplerYcbcrConversionInfo(VkSamplerYcbcrConversionInfo const *pData);
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkSamplerYcbcrConversionInfoKHR(VkSamplerYcbcrConversionInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_ycbcr_degamma)
void cleanup_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(
    VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
void cleanup_VkSciSyncAttributesInfoNV(VkSciSyncAttributesInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
void cleanup_VkScreenBufferFormatPropertiesQNX(VkScreenBufferFormatPropertiesQNX const *pData);
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
void cleanup_VkScreenBufferPropertiesQNX(VkScreenBufferPropertiesQNX const *pData);
#endif

#if (VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface)
void cleanup_VkScreenSurfaceCreateInfoQNX(VkScreenSurfaceCreateInfoQNX const *pData);
#endif

void cleanup_VkSemaphoreCreateInfo(VkSemaphoreCreateInfo const *pData);

#if (VK_KHR_external_semaphore_fd)
void cleanup_VkSemaphoreGetFdInfoKHR(VkSemaphoreGetFdInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
void cleanup_VkSemaphoreGetSciSyncInfoNV(VkSemaphoreGetSciSyncInfoNV const *pData);
#endif

#if (VK_KHR_external_semaphore_win32)
void cleanup_VkSemaphoreGetWin32HandleInfoKHR(VkSemaphoreGetWin32HandleInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore)
void cleanup_VkSemaphoreGetZirconHandleInfoFUCHSIA(
    VkSemaphoreGetZirconHandleInfoFUCHSIA const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2)
void cleanup_VkSemaphoreSciSyncCreateInfoNV(VkSemaphoreSciSyncCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2)
void cleanup_VkSemaphoreSciSyncPoolCreateInfoNV(VkSemaphoreSciSyncPoolCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSemaphoreSignalInfo(VkSemaphoreSignalInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkSemaphoreSubmitInfo(VkSemaphoreSubmitInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSemaphoreTypeCreateInfo(VkSemaphoreTypeCreateInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSemaphoreWaitInfo(VkSemaphoreWaitInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_maintenance6 && VK_EXT_descriptor_buffer)
void cleanup_VkSetDescriptorBufferOffsetsInfoEXT(VkSetDescriptorBufferOffsetsInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkSetLatencyMarkerInfoNV(VkSetLatencyMarkerInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 308 && VK_NV_present_metering && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkSetPresentConfigNV(VkSetPresentConfigNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkSetStateFlagsIndirectCommandNV(VkSetStateFlagsIndirectCommandNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_object)
void cleanup_VkShaderCreateInfoEXT(VkShaderCreateInfoEXT const *pData);
#endif

void cleanup_VkShaderModuleCreateInfo(VkShaderModuleCreateInfo const *pData);

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
void cleanup_VkShaderModuleIdentifierEXT(VkShaderModuleIdentifierEXT const *pData);
#endif

#if (VK_EXT_validation_cache)
void cleanup_VkShaderModuleValidationCacheCreateInfoEXT(
    VkShaderModuleValidationCacheCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_object)
void cleanup_VkShaderRequiredSubgroupSizeCreateInfoEXT(
    VkShaderRequiredSubgroupSizeCreateInfoEXT const *pData);
#endif

#if (VK_AMD_shader_info)
void cleanup_VkShaderResourceUsageAMD(VkShaderResourceUsageAMD const *pData);
#endif

#if (VK_AMD_shader_info)
void cleanup_VkShaderStatisticsInfoAMD(VkShaderStatisticsInfoAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkShadingRatePaletteNV(VkShadingRatePaletteNV const *pData);
#endif

#if (VK_KHR_shared_presentable_image)
void cleanup_VkSharedPresentSurfaceCapabilitiesKHR(
    VkSharedPresentSurfaceCapabilitiesKHR const *pData);
#endif

void cleanup_VkSparseBufferMemoryBindInfo(VkSparseBufferMemoryBindInfo const *pData);

void cleanup_VkSparseImageFormatProperties(VkSparseImageFormatProperties const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkSparseImageFormatProperties2(VkSparseImageFormatProperties2 const *pData);
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkSparseImageFormatProperties2KHR(VkSparseImageFormatProperties2KHR const *pData);
#endif

void cleanup_VkSparseImageMemoryBind(VkSparseImageMemoryBind const *pData);

void cleanup_VkSparseImageMemoryBindInfo(VkSparseImageMemoryBindInfo const *pData);

void cleanup_VkSparseImageMemoryRequirements(VkSparseImageMemoryRequirements const *pData);

#if (VK_VERSION_1_1)
void cleanup_VkSparseImageMemoryRequirements2(VkSparseImageMemoryRequirements2 const *pData);
#endif

#if (VK_KHR_get_memory_requirements2)
void cleanup_VkSparseImageMemoryRequirements2KHR(VkSparseImageMemoryRequirements2KHR const *pData);
#endif

void cleanup_VkSparseImageOpaqueMemoryBindInfo(VkSparseImageOpaqueMemoryBindInfo const *pData);

void cleanup_VkSparseMemoryBind(VkSparseMemoryBind const *pData);

void cleanup_VkSpecializationInfo(VkSpecializationInfo const *pData);

void cleanup_VkSpecializationMapEntry(VkSpecializationMapEntry const *pData);

void cleanup_VkStencilOpState(VkStencilOpState const *pData);

#if (VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface)
void cleanup_VkStreamDescriptorSurfaceCreateInfoGGP(
    VkStreamDescriptorSurfaceCreateInfoGGP const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkStridedBufferRegionKHR(VkStridedBufferRegionKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkStridedDeviceAddressNV(VkStridedDeviceAddressNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
void cleanup_VkStridedDeviceAddressRegionKHR(VkStridedDeviceAddressRegionKHR const *pData);
#endif

void cleanup_VkSubmitInfo(VkSubmitInfo const *pData);

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkSubmitInfo2(VkSubmitInfo2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSubpassBeginInfo(VkSubpassBeginInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *pData);
#endif

void cleanup_VkSubpassDependency(VkSubpassDependency const *pData);

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSubpassDependency2(VkSubpassDependency2 const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *pData);
#endif

void cleanup_VkSubpassDescription(VkSubpassDescription const *pData);

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSubpassDescription2(VkSubpassDescription2 const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSubpassDescriptionDepthStencilResolve(
    VkSubpassDescriptionDepthStencilResolve const *pData);
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 130 && VK_KHR_depth_stencil_resolve)
void cleanup_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_depth_stencil_resolve)
void cleanup_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSubpassEndInfo(VkSubpassEndInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled)
void cleanup_VkSubpassResolvePerformanceQueryEXT(VkSubpassResolvePerformanceQueryEXT const *pData);
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkSubpassSampleLocationsEXT(VkSubpassSampleLocationsEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading)
void cleanup_VkSubpassShadingPipelineCreateInfoHUAWEI(
    VkSubpassShadingPipelineCreateInfoHUAWEI const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkSubresourceHostMemcpySize(VkSubresourceHostMemcpySize const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkSubresourceHostMemcpySizeEXT(VkSubresourceHostMemcpySizeEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkSubresourceHostMemcpySizeEXT(VkSubresourceHostMemcpySizeEXT const *pData);
#endif

void cleanup_VkSubresourceLayout(VkSubresourceLayout const *pData);

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkSubresourceLayout2(VkSubresourceLayout2 const *pData);
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 259 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control) ||                                                          \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 257 && VK_EXT_image_compression_control)
void cleanup_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control)
void cleanup_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy && VK_EXT_image_compression_control)
void cleanup_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkSubresourceLayout2KHR(VkSubresourceLayout2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkSubresourceLayout2KHR(VkSubresourceLayout2KHR const *pData);
#endif

#if (VK_EXT_display_surface_counter)
void cleanup_VkSurfaceCapabilities2EXT(VkSurfaceCapabilities2EXT const *pData);
#endif

#if (VK_KHR_get_surface_capabilities2)
void cleanup_VkSurfaceCapabilities2KHR(VkSurfaceCapabilities2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive)
void cleanup_VkSurfaceCapabilitiesFullScreenExclusiveEXT(
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 140 && VK_KHR_surface)
void cleanup_VkSurfaceCapabilitiesKHR(VkSurfaceCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_present_barrier)
void cleanup_VkSurfaceCapabilitiesPresentBarrierNV(
    VkSurfaceCapabilitiesPresentBarrierNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_id2)
void cleanup_VkSurfaceCapabilitiesPresentId2KHR(VkSurfaceCapabilitiesPresentId2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2)
void cleanup_VkSurfaceCapabilitiesPresentWait2KHR(
    VkSurfaceCapabilitiesPresentWait2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 318 && VK_OHOS_surface)
void cleanup_VkSurfaceCreateInfoOHOS(VkSurfaceCreateInfoOHOS const *pData);
#endif

#if (VK_KHR_get_surface_capabilities2)
void cleanup_VkSurfaceFormat2KHR(VkSurfaceFormat2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 140 && VK_KHR_surface)
void cleanup_VkSurfaceFormatKHR(VkSurfaceFormatKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive)
void cleanup_VkSurfaceFullScreenExclusiveInfoEXT(VkSurfaceFullScreenExclusiveInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_full_screen_exclusive && VK_KHR_win32_surface) ||          \
    (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 240 && VK_EXT_full_screen_exclusive)
void cleanup_VkSurfaceFullScreenExclusiveWin32InfoEXT(
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1)
void cleanup_VkSurfacePresentModeCompatibilityEXT(
    VkSurfacePresentModeCompatibilityEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1)
void cleanup_VkSurfacePresentModeEXT(VkSurfacePresentModeEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1)
void cleanup_VkSurfacePresentScalingCapabilitiesEXT(
    VkSurfacePresentScalingCapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 104 && VK_KHR_surface_protected_capabilities)
void cleanup_VkSurfaceProtectedCapabilitiesKHR(VkSurfaceProtectedCapabilitiesKHR const *pData);
#endif

#if (VK_EXT_display_control)
void cleanup_VkSwapchainCounterCreateInfoEXT(VkSwapchainCounterCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 240 && VK_KHR_swapchain)
void cleanup_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain)
void cleanup_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr)
void cleanup_VkSwapchainDisplayNativeHdrCreateInfoAMD(
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer)
void cleanup_VkSwapchainImageCreateInfoANDROID(VkSwapchainImageCreateInfoANDROID const *pData);
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkSwapchainLatencyCreateInfoNV(VkSwapchainLatencyCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_present_barrier)
void cleanup_VkSwapchainPresentBarrierCreateInfoNV(
    VkSwapchainPresentBarrierCreateInfoNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkSwapchainPresentFenceInfoEXT(VkSwapchainPresentFenceInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkSwapchainPresentModeInfoEXT(VkSwapchainPresentModeInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkSwapchainPresentModesCreateInfoEXT(
    VkSwapchainPresentModesCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkSwapchainPresentScalingCreateInfoEXT(
    VkSwapchainPresentScalingCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkSysmemColorSpaceFUCHSIA(VkSysmemColorSpaceFUCHSIA const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
void cleanup_VkTensorCaptureDescriptorDataInfoARM(
    VkTensorCaptureDescriptorDataInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorCopyARM(VkTensorCopyARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorCreateInfoARM(VkTensorCreateInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorDependencyInfoARM(VkTensorDependencyInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorDescriptionARM(VkTensorDescriptionARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorFormatPropertiesARM(VkTensorFormatPropertiesARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorMemoryBarrierARM(VkTensorMemoryBarrierARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorMemoryRequirementsInfoARM(VkTensorMemoryRequirementsInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
void cleanup_VkTensorViewCaptureDescriptorDataInfoARM(
    VkTensorViewCaptureDescriptorDataInfoARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorViewCreateInfoARM(VkTensorViewCreateInfoARM const *pData);
#endif

#if (VK_AMD_texture_gather_bias_lod)
void cleanup_VkTextureLODGatherFormatPropertiesAMD(
    VkTextureLODGatherFormatPropertiesAMD const *pData);
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
void cleanup_VkTileMemoryBindInfoQCOM(VkTileMemoryBindInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
void cleanup_VkTileMemoryRequirementsQCOM(VkTileMemoryRequirementsQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap && VK_QCOM_tile_properties)
void cleanup_VkTileMemorySizeInfoQCOM(VkTileMemorySizeInfoQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties)
void cleanup_VkTilePropertiesQCOM(VkTilePropertiesQCOM const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkTimelineSemaphoreSubmitInfo(VkTimelineSemaphoreSubmitInfo const *pData);
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkTimelineSemaphoreSubmitInfoKHR(VkTimelineSemaphoreSubmitInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkTimelineSemaphoreSubmitInfoKHR(VkTimelineSemaphoreSubmitInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_ray_tracing_maintenance1 &&                                \
     VK_KHR_ray_tracing_pipeline) ||                                                               \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 240 && VK_KHR_ray_tracing_maintenance1)
void cleanup_VkTraceRaysIndirectCommand2KHR(VkTraceRaysIndirectCommand2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline) ||                                   \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkTraceRaysIndirectCommandKHR(VkTraceRaysIndirectCommandKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkTransformMatrixKHR(VkTransformMatrixKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
void cleanup_VkTransformMatrixNV(VkTransformMatrixNV const *pData);
#endif

#if (VK_EXT_validation_cache)
void cleanup_VkValidationCacheCreateInfoEXT(VkValidationCacheCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_validation_features)
void cleanup_VkValidationFeaturesEXT(VkValidationFeaturesEXT const *pData);
#endif

#if (VK_EXT_validation_flags)
void cleanup_VkValidationFlagsEXT(VkValidationFlagsEXT const *pData);
#endif

void cleanup_VkVertexInputAttributeDescription(VkVertexInputAttributeDescription const *pData);

#if (VK_HEADER_VERSION >= 246 && VK_EXT_vertex_input_dynamic_state && VK_EXT_shader_object) ||     \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 245 && VK_EXT_vertex_input_dynamic_state)
void cleanup_VkVertexInputAttributeDescription2EXT(
    VkVertexInputAttributeDescription2EXT const *pData);
#endif

void cleanup_VkVertexInputBindingDescription(VkVertexInputBindingDescription const *pData);

#if (VK_HEADER_VERSION >= 246 && VK_EXT_vertex_input_dynamic_state && VK_EXT_shader_object) ||     \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 245 && VK_EXT_vertex_input_dynamic_state)
void cleanup_VkVertexInputBindingDescription2EXT(VkVertexInputBindingDescription2EXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkVertexInputBindingDivisorDescription(
    VkVertexInputBindingDivisorDescription const *pData);
#endif

#if (VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkVertexInputBindingDivisorDescriptionKHR(
    VkVertexInputBindingDivisorDescriptionKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkVertexInputBindingDivisorDescriptionKHR(
    VkVertexInputBindingDivisorDescriptionKHR const *pData);
#endif

#if (VK_NN_vi_surface)
void cleanup_VkViSurfaceCreateInfoNN(VkViSurfaceCreateInfoNN const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoBindMemoryKHR(VkVideoBindMemoryKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 208 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoCodingControlInfoKHR(VkVideoCodingControlInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1CapabilitiesKHR(VkVideoDecodeAV1CapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1DpbSlotInfoKHR(VkVideoDecodeAV1DpbSlotInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1InlineSessionParametersInfoKHR(
    VkVideoDecodeAV1InlineSessionParametersInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1PictureInfoKHR(VkVideoDecodeAV1PictureInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1ProfileInfoKHR(VkVideoDecodeAV1ProfileInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1SessionParametersCreateInfoKHR(
    VkVideoDecodeAV1SessionParametersCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 207 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeCapabilitiesKHR(VkVideoDecodeCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 210 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264CapabilitiesKHR(VkVideoDecodeH264CapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264DpbSlotInfoEXT(VkVideoDecodeH264DpbSlotInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264DpbSlotInfoKHR(VkVideoDecodeH264DpbSlotInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264InlineSessionParametersInfoKHR(
    VkVideoDecodeH264InlineSessionParametersInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264MvcEXT(VkVideoDecodeH264MvcEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264MvcInfoEXT(VkVideoDecodeH264MvcInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264PictureInfoKHR(VkVideoDecodeH264PictureInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264ProfileInfoEXT(VkVideoDecodeH264ProfileInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264ProfileInfoEXT(VkVideoDecodeH264ProfileInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264ProfileInfoKHR(VkVideoDecodeH264ProfileInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264SessionCreateInfoEXT(
    VkVideoDecodeH264SessionCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264SessionParametersAddInfoKHR(
    VkVideoDecodeH264SessionParametersAddInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264SessionParametersCreateInfoKHR(
    VkVideoDecodeH264SessionParametersCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 210 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265CapabilitiesKHR(VkVideoDecodeH265CapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265DpbSlotInfoEXT(VkVideoDecodeH265DpbSlotInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265DpbSlotInfoKHR(VkVideoDecodeH265DpbSlotInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265InlineSessionParametersInfoKHR(
    VkVideoDecodeH265InlineSessionParametersInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 235 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 236 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265PictureInfoKHR(VkVideoDecodeH265PictureInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265ProfileEXT(VkVideoDecodeH265ProfileEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265ProfileInfoEXT(VkVideoDecodeH265ProfileInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265ProfileInfoKHR(VkVideoDecodeH265ProfileInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionCreateInfoEXT(
    VkVideoDecodeH265SessionCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265SessionParametersAddInfoKHR(
    VkVideoDecodeH265SessionParametersAddInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265SessionParametersCreateInfoKHR(
    VkVideoDecodeH265SessionParametersCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 210 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 224 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeUsageInfoKHR(VkVideoDecodeUsageInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
void cleanup_VkVideoDecodeVP9CapabilitiesKHR(VkVideoDecodeVP9CapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
void cleanup_VkVideoDecodeVP9PictureInfoKHR(VkVideoDecodeVP9PictureInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
void cleanup_VkVideoDecodeVP9ProfileInfoKHR(VkVideoDecodeVP9ProfileInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1CapabilitiesKHR(VkVideoEncodeAV1CapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1DpbSlotInfoKHR(VkVideoEncodeAV1DpbSlotInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1FrameSizeKHR(VkVideoEncodeAV1FrameSizeKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1GopRemainingFrameInfoKHR(
    VkVideoEncodeAV1GopRemainingFrameInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1PictureInfoKHR(VkVideoEncodeAV1PictureInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1ProfileInfoKHR(VkVideoEncodeAV1ProfileInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1QIndexKHR(VkVideoEncodeAV1QIndexKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1QualityLevelPropertiesKHR(
    VkVideoEncodeAV1QualityLevelPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1QuantizationMapCapabilitiesKHR(
    VkVideoEncodeAV1QuantizationMapCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1RateControlInfoKHR(VkVideoEncodeAV1RateControlInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1RateControlLayerInfoKHR(
    VkVideoEncodeAV1RateControlLayerInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1SessionCreateInfoKHR(
    VkVideoEncodeAV1SessionCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1SessionParametersCreateInfoKHR(
    VkVideoEncodeAV1SessionParametersCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264CapabilitiesKHR(VkVideoEncodeH264CapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264DpbSlotInfoKHR(VkVideoEncodeH264DpbSlotInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264EmitPictureParametersEXT(
    VkVideoEncodeH264EmitPictureParametersEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264EmitPictureParametersInfoEXT(
    VkVideoEncodeH264EmitPictureParametersInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264FrameSizeEXT(VkVideoEncodeH264FrameSizeEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264FrameSizeKHR(VkVideoEncodeH264FrameSizeKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264GopRemainingFrameInfoEXT(
    VkVideoEncodeH264GopRemainingFrameInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264GopRemainingFrameInfoKHR(
    VkVideoEncodeH264GopRemainingFrameInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264NaluSliceInfoKHR(VkVideoEncodeH264NaluSliceInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264PictureInfoEXT(VkVideoEncodeH264PictureInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264PictureInfoKHR(VkVideoEncodeH264PictureInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264ProfileEXT(VkVideoEncodeH264ProfileEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264ProfileInfoEXT(VkVideoEncodeH264ProfileInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264ProfileInfoKHR(VkVideoEncodeH264ProfileInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264QpEXT(VkVideoEncodeH264QpEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264QpKHR(VkVideoEncodeH264QpKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264QualityLevelPropertiesEXT(
    VkVideoEncodeH264QualityLevelPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264QualityLevelPropertiesKHR(
    VkVideoEncodeH264QualityLevelPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264QuantizationMapCapabilitiesKHR(
    VkVideoEncodeH264QuantizationMapCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 202 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264RateControlInfoKHR(VkVideoEncodeH264RateControlInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264RateControlLayerInfoKHR(
    VkVideoEncodeH264RateControlLayerInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264ReferenceListsEXT(VkVideoEncodeH264ReferenceListsEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264ReferenceListsInfoEXT(
    VkVideoEncodeH264ReferenceListsInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionCreateInfoEXT(
    VkVideoEncodeH264SessionCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionCreateInfoEXT(
    VkVideoEncodeH264SessionCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264SessionCreateInfoKHR(
    VkVideoEncodeH264SessionCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264SessionParametersAddInfoKHR(
    VkVideoEncodeH264SessionParametersAddInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264SessionParametersCreateInfoKHR(
    VkVideoEncodeH264SessionParametersCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersFeedbackInfoEXT(
    VkVideoEncodeH264SessionParametersFeedbackInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264SessionParametersFeedbackInfoKHR(
    VkVideoEncodeH264SessionParametersFeedbackInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersGetInfoEXT(
    VkVideoEncodeH264SessionParametersGetInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264SessionParametersGetInfoKHR(
    VkVideoEncodeH264SessionParametersGetInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265CapabilitiesKHR(VkVideoEncodeH265CapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265DpbSlotInfoKHR(VkVideoEncodeH265DpbSlotInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265EmitPictureParametersEXT(
    VkVideoEncodeH265EmitPictureParametersEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265EmitPictureParametersInfoEXT(
    VkVideoEncodeH265EmitPictureParametersInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265FrameSizeEXT(VkVideoEncodeH265FrameSizeEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265FrameSizeKHR(VkVideoEncodeH265FrameSizeKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265GopRemainingFrameInfoEXT(
    VkVideoEncodeH265GopRemainingFrameInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265GopRemainingFrameInfoKHR(
    VkVideoEncodeH265GopRemainingFrameInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265NaluSliceEXT(VkVideoEncodeH265NaluSliceEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265NaluSliceSegmentEXT(
    VkVideoEncodeH265NaluSliceSegmentEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265NaluSliceSegmentInfoKHR(
    VkVideoEncodeH265NaluSliceSegmentInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265PictureInfoEXT(VkVideoEncodeH265PictureInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265PictureInfoKHR(VkVideoEncodeH265PictureInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265ProfileEXT(VkVideoEncodeH265ProfileEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265ProfileInfoEXT(VkVideoEncodeH265ProfileInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265ProfileInfoKHR(VkVideoEncodeH265ProfileInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265QpEXT(VkVideoEncodeH265QpEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265QpKHR(VkVideoEncodeH265QpKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265QualityLevelPropertiesEXT(
    VkVideoEncodeH265QualityLevelPropertiesEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265QualityLevelPropertiesKHR(
    VkVideoEncodeH265QualityLevelPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265QuantizationMapCapabilitiesKHR(
    VkVideoEncodeH265QuantizationMapCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 202 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265RateControlInfoKHR(VkVideoEncodeH265RateControlInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265RateControlLayerInfoKHR(
    VkVideoEncodeH265RateControlLayerInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265ReferenceListsEXT(VkVideoEncodeH265ReferenceListsEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265ReferenceListsInfoEXT(
    VkVideoEncodeH265ReferenceListsInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionCreateInfoEXT(
    VkVideoEncodeH265SessionCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionCreateInfoEXT(
    VkVideoEncodeH265SessionCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265SessionCreateInfoKHR(
    VkVideoEncodeH265SessionCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265SessionParametersAddInfoKHR(
    VkVideoEncodeH265SessionParametersAddInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265SessionParametersCreateInfoKHR(
    VkVideoEncodeH265SessionParametersCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersFeedbackInfoEXT(
    VkVideoEncodeH265SessionParametersFeedbackInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265SessionParametersFeedbackInfoKHR(
    VkVideoEncodeH265SessionParametersFeedbackInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersGetInfoEXT(
    VkVideoEncodeH265SessionParametersGetInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265SessionParametersGetInfoKHR(
    VkVideoEncodeH265SessionParametersGetInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 210 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 224 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeQualityLevelInfoKHR(VkVideoEncodeQualityLevelInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeQualityLevelPropertiesKHR(
    VkVideoEncodeQualityLevelPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
void cleanup_VkVideoEncodeQuantizationMapCapabilitiesKHR(
    VkVideoEncodeQuantizationMapCapabilitiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
void cleanup_VkVideoEncodeQuantizationMapInfoKHR(VkVideoEncodeQuantizationMapInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
void cleanup_VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR(
    VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlLayerInfoKHR(
    VkVideoEncodeRateControlLayerInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlLayerInfoKHR(
    VkVideoEncodeRateControlLayerInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlLayerInfoKHR(
    VkVideoEncodeRateControlLayerInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeSessionParametersFeedbackInfoKHR(
    VkVideoEncodeSessionParametersFeedbackInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeSessionParametersGetInfoKHR(
    VkVideoEncodeSessionParametersGetInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeUsageInfoKHR(VkVideoEncodeUsageInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEndCodingInfoKHR(VkVideoEndCodingInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_av1)
void cleanup_VkVideoFormatAV1QuantizationMapPropertiesKHR(
    VkVideoFormatAV1QuantizationMapPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h265)
void cleanup_VkVideoFormatH265QuantizationMapPropertiesKHR(
    VkVideoFormatH265QuantizationMapPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
void cleanup_VkVideoFormatQuantizationMapPropertiesKHR(
    VkVideoFormatQuantizationMapPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoGetMemoryPropertiesKHR(VkVideoGetMemoryPropertiesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_maintenance1)
void cleanup_VkVideoInlineQueryInfoKHR(VkVideoInlineQueryInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoPictureResourceInfoKHR(VkVideoPictureResourceInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoPictureResourceKHR(VkVideoPictureResourceKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoProfileInfoKHR(VkVideoProfileInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoProfileKHR(VkVideoProfileKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoProfileListInfoKHR(VkVideoProfileListInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoProfilesKHR(VkVideoProfilesKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoQueueFamilyProperties2KHR(VkVideoQueueFamilyProperties2KHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 229 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoReferenceSlotInfoKHR(VkVideoReferenceSlotInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoReferenceSlotInfoKHR(VkVideoReferenceSlotInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoReferenceSlotKHR(VkVideoReferenceSlotKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionMemoryRequirementsKHR(VkVideoSessionMemoryRequirementsKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionParametersCreateInfoKHR(
    VkVideoSessionParametersCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionParametersCreateInfoKHR(
    VkVideoSessionParametersCreateInfoKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionParametersUpdateInfoKHR(
    VkVideoSessionParametersUpdateInfoKHR const *pData);
#endif

void cleanup_VkViewport(VkViewport const *pData);

#if (VK_NV_viewport_swizzle)
void cleanup_VkViewportSwizzleNV(VkViewportSwizzleNV const *pData);
#endif

#if (VK_NV_clip_space_w_scaling)
void cleanup_VkViewportWScalingNV(VkViewportWScalingNV const *pData);
#endif

#if (VK_KHR_wayland_surface)
void cleanup_VkWaylandSurfaceCreateInfoKHR(VkWaylandSurfaceCreateInfoKHR const *pData);
#endif

#if (VK_KHR_win32_keyed_mutex)
void cleanup_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *pData);
#endif

#if (VK_NV_win32_keyed_mutex)
void cleanup_VkWin32KeyedMutexAcquireReleaseInfoNV(
    VkWin32KeyedMutexAcquireReleaseInfoNV const *pData);
#endif

#if (VK_KHR_win32_surface)
void cleanup_VkWin32SurfaceCreateInfoKHR(VkWin32SurfaceCreateInfoKHR const *pData);
#endif

void cleanup_VkWriteDescriptorSet(VkWriteDescriptorSet const *pData);

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkWriteDescriptorSetAccelerationStructureKHR(
    VkWriteDescriptorSetAccelerationStructureKHR const *pData);
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_NV_ray_tracing)
void cleanup_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkWriteDescriptorSetInlineUniformBlock(
    VkWriteDescriptorSetInlineUniformBlock const *pData);
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
void cleanup_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block)
void cleanup_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkWriteDescriptorSetPartitionedAccelerationStructureNV(
    VkWriteDescriptorSetPartitionedAccelerationStructureNV const *pData);
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkWriteDescriptorSetTensorARM(VkWriteDescriptorSetTensorARM const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkWriteIndirectExecutionSetPipelineEXT(
    VkWriteIndirectExecutionSetPipelineEXT const *pData);
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands && VK_EXT_shader_object)
void cleanup_VkWriteIndirectExecutionSetShaderEXT(
    VkWriteIndirectExecutionSetShaderEXT const *pData);
#endif

#if (VK_EXT_hdr_metadata)
void cleanup_VkXYColorEXT(VkXYColorEXT const *pData);
#endif

#if (VK_KHR_xcb_surface)
void cleanup_VkXcbSurfaceCreateInfoKHR(VkXcbSurfaceCreateInfoKHR const *pData);
#endif

#if (VK_KHR_xlib_surface)
void cleanup_VkXlibSurfaceCreateInfoKHR(VkXlibSurfaceCreateInfoKHR const *pData);
#endif

#ifdef VK_STRUCT_CLEANUP_CONFIG_MAIN

#include <stdlib.h>

void cleanup_vk_struct(void const *pData) {
  VkBaseInStructure const *pTemp = (VkBaseInStructure const *)pData;

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR) {
    cleanup_VkAccelerationStructureBuildGeometryInfoKHR(
        (VkAccelerationStructureBuildGeometryInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR) {
    cleanup_VkAccelerationStructureBuildGeometryInfoKHR(
        (VkAccelerationStructureBuildGeometryInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR) {
    cleanup_VkAccelerationStructureBuildSizesInfoKHR(
        (VkAccelerationStructureBuildSizesInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_descriptor_buffer &&                                       \
     (VK_KHR_acceleration_structure || VK_NV_ray_tracing)) ||                                      \
    (VK_HEADER_VERSION >= 235 && VK_HEADER_VERSION <= 240 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT) {
    cleanup_VkAccelerationStructureCaptureDescriptorDataInfoEXT(
        (VkAccelerationStructureCaptureDescriptorDataInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR) {
    cleanup_VkAccelerationStructureCreateGeometryTypeInfoKHR(
        (VkAccelerationStructureCreateGeometryTypeInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR) {
    cleanup_VkAccelerationStructureCreateInfoKHR(
        (VkAccelerationStructureCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR) {
    cleanup_VkAccelerationStructureCreateInfoKHR(
        (VkAccelerationStructureCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV) {
    cleanup_VkAccelerationStructureCreateInfoNV((VkAccelerationStructureCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NVX) {
    cleanup_VkAccelerationStructureCreateInfoNVX(
        (VkAccelerationStructureCreateInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR) {
    cleanup_VkAccelerationStructureDeviceAddressInfoKHR(
        (VkAccelerationStructureDeviceAddressInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR) {
    cleanup_VkAccelerationStructureGeometryAabbsDataKHR(
        (VkAccelerationStructureGeometryAabbsDataKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR) {
    cleanup_VkAccelerationStructureGeometryInstancesDataKHR(
        (VkAccelerationStructureGeometryInstancesDataKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR) {
    cleanup_VkAccelerationStructureGeometryKHR((VkAccelerationStructureGeometryKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_LINEAR_SWEPT_SPHERES_DATA_NV) {
    cleanup_VkAccelerationStructureGeometryLinearSweptSpheresDataNV(
        (VkAccelerationStructureGeometryLinearSweptSpheresDataNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV) {
    cleanup_VkAccelerationStructureGeometryMotionTrianglesDataNV(
        (VkAccelerationStructureGeometryMotionTrianglesDataNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_SPHERES_DATA_NV) {
    cleanup_VkAccelerationStructureGeometrySpheresDataNV(
        (VkAccelerationStructureGeometrySpheresDataNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR) {
    cleanup_VkAccelerationStructureGeometryTrianglesDataKHR(
        (VkAccelerationStructureGeometryTrianglesDataKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR) {
    cleanup_VkAccelerationStructureGeometryTrianglesDataKHR(
        (VkAccelerationStructureGeometryTrianglesDataKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV) {
    cleanup_VkAccelerationStructureInfoNV((VkAccelerationStructureInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR) {
    cleanup_VkAccelerationStructureMemoryRequirementsInfoKHR(
        (VkAccelerationStructureMemoryRequirementsInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV) {
    cleanup_VkAccelerationStructureMemoryRequirementsInfoNV(
        (VkAccelerationStructureMemoryRequirementsInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NVX) {
    cleanup_VkAccelerationStructureMemoryRequirementsInfoNVX(
        (VkAccelerationStructureMemoryRequirementsInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV) {
    cleanup_VkAccelerationStructureMotionInfoNV((VkAccelerationStructureMotionInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV) {
    cleanup_VkAccelerationStructureTrianglesDisplacementMicromapNV(
        (VkAccelerationStructureTrianglesDisplacementMicromapNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT) {
    cleanup_VkAccelerationStructureTrianglesOpacityMicromapEXT(
        (VkAccelerationStructureTrianglesOpacityMicromapEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR) {
    cleanup_VkAccelerationStructureVersionInfoKHR(
        (VkAccelerationStructureVersionInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR) {
    cleanup_VkAccelerationStructureVersionKHR((VkAccelerationStructureVersionKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR) {
    cleanup_VkAcquireNextImageInfoKHR((VkAcquireNextImageInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR) {
    cleanup_VkAcquireProfilingLockInfoKHR((VkAcquireProfilingLockInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling)
  if (pTemp->sType == VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC) {
    cleanup_VkAmigoProfilingSubmitInfoSEC((VkAmigoProfilingSubmitInfoSEC const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID) {
    cleanup_VkAndroidHardwareBufferFormatProperties2ANDROID(
        (VkAndroidHardwareBufferFormatProperties2ANDROID const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 281 && VK_ANDROID_external_memory_android_hardware_buffer &&             \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer && VK_KHR_format_feature_flags2) ||        \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID) {
    cleanup_VkAndroidHardwareBufferFormatProperties2ANDROID(
        (VkAndroidHardwareBufferFormatProperties2ANDROID const *)pData);
    return;
  }
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID) {
    cleanup_VkAndroidHardwareBufferFormatPropertiesANDROID(
        (VkAndroidHardwareBufferFormatPropertiesANDROID const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID) {
    cleanup_VkAndroidHardwareBufferFormatResolvePropertiesANDROID(
        (VkAndroidHardwareBufferFormatResolvePropertiesANDROID const *)pData);
    return;
  }
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID) {
    cleanup_VkAndroidHardwareBufferPropertiesANDROID(
        (VkAndroidHardwareBufferPropertiesANDROID const *)pData);
    return;
  }
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID) {
    cleanup_VkAndroidHardwareBufferUsageANDROID((VkAndroidHardwareBufferUsageANDROID const *)pData);
    return;
  }
#endif

#if (VK_KHR_android_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR) {
    cleanup_VkAndroidSurfaceCreateInfoKHR((VkAndroidSurfaceCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD) {
    cleanup_VkAntiLagDataAMD((VkAntiLagDataAMD const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD) {
    cleanup_VkAntiLagPresentationInfoAMD((VkAntiLagPresentationInfoAMD const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_APPLICATION_INFO) {
    cleanup_VkApplicationInfo((VkApplicationInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 241 && VK_EXT_application_parameters)
  if (pTemp->sType == VK_STRUCTURE_TYPE_APPLICATION_PARAMETERS_EXT) {
    cleanup_VkApplicationParametersEXT((VkApplicationParametersEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2) {
    cleanup_VkAttachmentDescription2((VkAttachmentDescription2 const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
  if (pTemp->sType == VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR) {
    cleanup_VkAttachmentDescription2KHR((VkAttachmentDescription2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT) {
    cleanup_VkAttachmentDescriptionStencilLayout(
        (VkAttachmentDescriptionStencilLayout const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR) {
    cleanup_VkAttachmentDescriptionStencilLayoutKHR(
        (VkAttachmentDescriptionStencilLayoutKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_unified_image_layouts &&                                   \
     VK_EXT_attachment_feedback_loop_layout && ((VK_VERSION_1_3 || VK_KHR_dynamic_rendering)))
  if (pTemp->sType == VK_STRUCTURE_TYPE_ATTACHMENT_FEEDBACK_LOOP_INFO_EXT) {
    cleanup_VkAttachmentFeedbackLoopInfoEXT((VkAttachmentFeedbackLoopInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2) {
    cleanup_VkAttachmentReference2((VkAttachmentReference2 const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
  if (pTemp->sType == VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR) {
    cleanup_VkAttachmentReference2KHR((VkAttachmentReference2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT) {
    cleanup_VkAttachmentReferenceStencilLayout((VkAttachmentReferenceStencilLayout const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR) {
    cleanup_VkAttachmentReferenceStencilLayoutKHR(
        (VkAttachmentReferenceStencilLayoutKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 299 && VK_AMD_mixed_attachment_samples &&                                \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_AMD_mixed_attachment_samples) ||                                                           \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD) {
    cleanup_VkAttachmentSampleCountInfoAMD((VkAttachmentSampleCountInfoAMD const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR) {
    cleanup_VkBindAccelerationStructureMemoryInfoKHR(
        (VkBindAccelerationStructureMemoryInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV) {
    cleanup_VkBindAccelerationStructureMemoryInfoNV(
        (VkBindAccelerationStructureMemoryInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NVX) {
    cleanup_VkBindAccelerationStructureMemoryInfoNVX(
        (VkBindAccelerationStructureMemoryInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO) {
    cleanup_VkBindBufferMemoryDeviceGroupInfo((VkBindBufferMemoryDeviceGroupInfo const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO) {
    cleanup_VkBindBufferMemoryInfo((VkBindBufferMemoryInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_DATA_GRAPH_PIPELINE_SESSION_MEMORY_INFO_ARM) {
    cleanup_VkBindDataGraphPipelineSessionMemoryInfoARM(
        (VkBindDataGraphPipelineSessionMemoryInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_maintenance6 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT) {
    cleanup_VkBindDescriptorBufferEmbeddedSamplersInfoEXT(
        (VkBindDescriptorBufferEmbeddedSamplersInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO) {
    cleanup_VkBindDescriptorSetsInfo((VkBindDescriptorSetsInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR) {
    cleanup_VkBindDescriptorSetsInfoKHR((VkBindDescriptorSetsInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO) {
    cleanup_VkBindImageMemoryDeviceGroupInfo((VkBindImageMemoryDeviceGroupInfo const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO) {
    cleanup_VkBindImageMemoryInfo((VkBindImageMemoryInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR) {
    cleanup_VkBindImageMemorySwapchainInfoKHR((VkBindImageMemorySwapchainInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO) {
    cleanup_VkBindImagePlaneMemoryInfo((VkBindImagePlaneMemoryInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS) {
    cleanup_VkBindMemoryStatus((VkBindMemoryStatus const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR) {
    cleanup_VkBindMemoryStatusKHR((VkBindMemoryStatusKHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_SPARSE_INFO) {
    cleanup_VkBindSparseInfo((VkBindSparseInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_TENSOR_MEMORY_INFO_ARM) {
    cleanup_VkBindTensorMemoryInfoARM((VkBindTensorMemoryInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR) {
    cleanup_VkBindVideoSessionMemoryInfoKHR((VkBindVideoSessionMemoryInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM) {
    cleanup_VkBlitImageCubicWeightsInfoQCOM((VkBlitImageCubicWeightsInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2) {
    cleanup_VkBlitImageInfo2((VkBlitImageInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR) {
    cleanup_VkBlitImageInfo2KHR((VkBlitImageInfo2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT) {
    cleanup_VkBufferCaptureDescriptorDataInfoEXT(
        (VkBufferCaptureDescriptorDataInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA) {
    cleanup_VkBufferCollectionBufferCreateInfoFUCHSIA(
        (VkBufferCollectionBufferCreateInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA) {
    cleanup_VkBufferCollectionConstraintsInfoFUCHSIA(
        (VkBufferCollectionConstraintsInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA) {
    cleanup_VkBufferCollectionCreateInfoFUCHSIA((VkBufferCollectionCreateInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA) {
    cleanup_VkBufferCollectionImageCreateInfoFUCHSIA(
        (VkBufferCollectionImageCreateInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA) {
    cleanup_VkBufferCollectionPropertiesFUCHSIA((VkBufferCollectionPropertiesFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA) {
    cleanup_VkBufferConstraintsInfoFUCHSIA((VkBufferConstraintsInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_COPY_2) {
    cleanup_VkBufferCopy2((VkBufferCopy2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR) {
    cleanup_VkBufferCopy2KHR((VkBufferCopy2KHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO) {
    cleanup_VkBufferCreateInfo((VkBufferCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 103 && VK_EXT_buffer_device_address)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT) {
    cleanup_VkBufferDeviceAddressCreateInfoEXT((VkBufferDeviceAddressCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 104 && VK_EXT_buffer_device_address)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT) {
    cleanup_VkBufferDeviceAddressCreateInfoEXT((VkBufferDeviceAddressCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO) {
    cleanup_VkBufferDeviceAddressInfo((VkBufferDeviceAddressInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 128 && VK_EXT_buffer_device_address)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT) {
    cleanup_VkBufferDeviceAddressInfoEXT((VkBufferDeviceAddressInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR) {
    cleanup_VkBufferDeviceAddressInfoKHR((VkBufferDeviceAddressInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2) {
    cleanup_VkBufferImageCopy2((VkBufferImageCopy2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR) {
    cleanup_VkBufferImageCopy2KHR((VkBufferImageCopy2KHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER) {
    cleanup_VkBufferMemoryBarrier((VkBufferMemoryBarrier const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2) {
    cleanup_VkBufferMemoryBarrier2((VkBufferMemoryBarrier2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR) {
    cleanup_VkBufferMemoryBarrier2KHR((VkBufferMemoryBarrier2KHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2) {
    cleanup_VkBufferMemoryRequirementsInfo2((VkBufferMemoryRequirementsInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO) {
    cleanup_VkBufferOpaqueCaptureAddressCreateInfo(
        (VkBufferOpaqueCaptureAddressCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR) {
    cleanup_VkBufferOpaqueCaptureAddressCreateInfoKHR(
        (VkBufferOpaqueCaptureAddressCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO) {
    cleanup_VkBufferUsageFlags2CreateInfo((VkBufferUsageFlags2CreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR) {
    cleanup_VkBufferUsageFlags2CreateInfoKHR((VkBufferUsageFlags2CreateInfoKHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO) {
    cleanup_VkBufferViewCreateInfo((VkBufferViewCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_BUILD_PARTITIONED_ACCELERATION_STRUCTURE_INFO_NV) {
    cleanup_VkBuildPartitionedAccelerationStructureInfoNV(
        (VkBuildPartitionedAccelerationStructureInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 272 && VK_EXT_calibrated_timestamps)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT) {
    cleanup_VkCalibratedTimestampInfoEXT((VkCalibratedTimestampInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 273 && VK_KHR_calibrated_timestamps)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR) {
    cleanup_VkCalibratedTimestampInfoKHR((VkCalibratedTimestampInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV) {
    cleanup_VkCheckpointData2NV((VkCheckpointData2NV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_device_diagnostic_checkpoints &&                            \
     (VK_VERSION_1_3 || VK_KHR_synchronization2)) ||                                               \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_synchronization2 &&            \
     VK_NV_device_diagnostic_checkpoints) ||                                                       \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV) {
    cleanup_VkCheckpointData2NV((VkCheckpointData2NV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV) {
    cleanup_VkCheckpointDataNV((VkCheckpointDataNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_CLUSTERS_BOTTOM_LEVEL_INPUT_NV) {
    cleanup_VkClusterAccelerationStructureClustersBottomLevelInputNV(
        (VkClusterAccelerationStructureClustersBottomLevelInputNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV) {
    cleanup_VkClusterAccelerationStructureCommandsInfoNV(
        (VkClusterAccelerationStructureCommandsInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_INPUT_INFO_NV) {
    cleanup_VkClusterAccelerationStructureInputInfoNV(
        (VkClusterAccelerationStructureInputInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_MOVE_OBJECTS_INPUT_NV) {
    cleanup_VkClusterAccelerationStructureMoveObjectsInputNV(
        (VkClusterAccelerationStructureMoveObjectsInputNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_TRIANGLE_CLUSTER_INPUT_NV) {
    cleanup_VkClusterAccelerationStructureTriangleClusterInputNV(
        (VkClusterAccelerationStructureTriangleClusterInputNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX) {
    cleanup_VkCmdProcessCommandsInfoNVX((VkCmdProcessCommandsInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX) {
    cleanup_VkCmdReserveSpaceForCommandsInfoNVX((VkCmdReserveSpaceForCommandsInfoNVX const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO) {
    cleanup_VkCommandBufferAllocateInfo((VkCommandBufferAllocateInfo const *)pData);
    return;
  }
  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO) {
    cleanup_VkCommandBufferBeginInfo((VkCommandBufferBeginInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT) {
    cleanup_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
        (VkCommandBufferInheritanceConditionalRenderingInfoEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO) {
    cleanup_VkCommandBufferInheritanceInfo((VkCommandBufferInheritanceInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM) {
    cleanup_VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
        (VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO) {
    cleanup_VkCommandBufferInheritanceRenderingInfo(
        (VkCommandBufferInheritanceRenderingInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO) {
    cleanup_VkCommandBufferInheritanceRenderingInfo(
        (VkCommandBufferInheritanceRenderingInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR) {
    cleanup_VkCommandBufferInheritanceRenderingInfoKHR(
        (VkCommandBufferInheritanceRenderingInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV) {
    cleanup_VkCommandBufferInheritanceViewportScissorInfoNV(
        (VkCommandBufferInheritanceViewportScissorInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO) {
    cleanup_VkCommandBufferSubmitInfo((VkCommandBufferSubmitInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR) {
    cleanup_VkCommandBufferSubmitInfoKHR((VkCommandBufferSubmitInfoKHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO) {
    cleanup_VkCommandPoolCreateInfo((VkCommandPoolCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_POOL_MEMORY_CONSUMPTION) {
    cleanup_VkCommandPoolMemoryConsumption((VkCommandPoolMemoryConsumption const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COMMAND_POOL_MEMORY_RESERVATION_CREATE_INFO) {
    cleanup_VkCommandPoolMemoryReservationCreateInfo(
        (VkCommandPoolMemoryReservationCreateInfo const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO) {
    cleanup_VkComputePipelineCreateInfo((VkComputePipelineCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV) {
    cleanup_VkComputePipelineIndirectBufferInfoNV(
        (VkComputePipelineIndirectBufferInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT) {
    cleanup_VkConditionalRenderingBeginInfoEXT((VkConditionalRenderingBeginInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV) {
    cleanup_VkConvertCooperativeVectorMatrixInfoNV(
        (VkConvertCooperativeVectorMatrixInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV) {
    cleanup_VkCooperativeMatrixFlexibleDimensionsPropertiesNV(
        (VkCooperativeMatrixFlexibleDimensionsPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR) {
    cleanup_VkCooperativeMatrixPropertiesKHR((VkCooperativeMatrixPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV) {
    cleanup_VkCooperativeMatrixPropertiesNV((VkCooperativeMatrixPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COOPERATIVE_VECTOR_PROPERTIES_NV) {
    cleanup_VkCooperativeVectorPropertiesNV((VkCooperativeVectorPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR) {
    cleanup_VkCopyAccelerationStructureInfoKHR((VkCopyAccelerationStructureInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR) {
    cleanup_VkCopyAccelerationStructureToMemoryInfoKHR(
        (VkCopyAccelerationStructureToMemoryInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2) {
    cleanup_VkCopyBufferInfo2((VkCopyBufferInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR) {
    cleanup_VkCopyBufferInfo2KHR((VkCopyBufferInfo2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2) {
    cleanup_VkCopyBufferToImageInfo2((VkCopyBufferToImageInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR) {
    cleanup_VkCopyBufferToImageInfo2KHR((VkCopyBufferToImageInfo2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 159 && VK_QCOM_rotated_copy_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM) {
    cleanup_VkCopyCommandTransformInfoQCOM((VkCopyCommandTransformInfoQCOM const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET) {
    cleanup_VkCopyDescriptorSet((VkCopyDescriptorSet const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2) {
    cleanup_VkCopyImageInfo2((VkCopyImageInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR) {
    cleanup_VkCopyImageInfo2KHR((VkCopyImageInfo2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2) {
    cleanup_VkCopyImageToBufferInfo2((VkCopyImageToBufferInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR) {
    cleanup_VkCopyImageToBufferInfo2KHR((VkCopyImageToBufferInfo2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO) {
    cleanup_VkCopyImageToImageInfo((VkCopyImageToImageInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT) {
    cleanup_VkCopyImageToImageInfoEXT((VkCopyImageToImageInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO) {
    cleanup_VkCopyImageToMemoryInfo((VkCopyImageToMemoryInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT) {
    cleanup_VkCopyImageToMemoryInfoEXT((VkCopyImageToMemoryInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR) {
    cleanup_VkCopyMemoryToAccelerationStructureInfoKHR(
        (VkCopyMemoryToAccelerationStructureInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO) {
    cleanup_VkCopyMemoryToImageInfo((VkCopyMemoryToImageInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT) {
    cleanup_VkCopyMemoryToImageInfoEXT((VkCopyMemoryToImageInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT) {
    cleanup_VkCopyMemoryToMicromapInfoEXT((VkCopyMemoryToMicromapInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT) {
    cleanup_VkCopyMicromapInfoEXT((VkCopyMicromapInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT) {
    cleanup_VkCopyMicromapToMemoryInfoEXT((VkCopyMicromapToMemoryInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_COPY_TENSOR_INFO_ARM) {
    cleanup_VkCopyTensorInfoARM((VkCopyTensorInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 178 && VK_NVX_binary_import)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX) {
    cleanup_VkCuFunctionCreateInfoNVX((VkCuFunctionCreateInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 178 && VK_NVX_binary_import)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX) {
    cleanup_VkCuLaunchInfoNVX((VkCuLaunchInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 178 && VK_NVX_binary_import)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX) {
    cleanup_VkCuModuleCreateInfoNVX((VkCuModuleCreateInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_NVX_binary_import)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX) {
    cleanup_VkCuModuleTexturingModeCreateInfoNVX(
        (VkCuModuleTexturingModeCreateInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV) {
    cleanup_VkCudaFunctionCreateInfoNV((VkCudaFunctionCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV) {
    cleanup_VkCudaLaunchInfoNV((VkCudaLaunchInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV) {
    cleanup_VkCudaModuleCreateInfoNV((VkCudaModuleCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_semaphore_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR) {
    cleanup_VkD3D12FenceSubmitInfoKHR((VkD3D12FenceSubmitInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_COMPILER_CONTROL_CREATE_INFO_ARM) {
    cleanup_VkDataGraphPipelineCompilerControlCreateInfoARM(
        (VkDataGraphPipelineCompilerControlCreateInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_CONSTANT_ARM) {
    cleanup_VkDataGraphPipelineConstantARM((VkDataGraphPipelineConstantARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph && VK_ARM_tensors)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_CONSTANT_TENSOR_SEMI_STRUCTURED_SPARSITY_INFO_ARM) {
    cleanup_VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM(
        (VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_CREATE_INFO_ARM) {
    cleanup_VkDataGraphPipelineCreateInfoARM((VkDataGraphPipelineCreateInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_DISPATCH_INFO_ARM) {
    cleanup_VkDataGraphPipelineDispatchInfoARM((VkDataGraphPipelineDispatchInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_IDENTIFIER_CREATE_INFO_ARM) {
    cleanup_VkDataGraphPipelineIdentifierCreateInfoARM(
        (VkDataGraphPipelineIdentifierCreateInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_INFO_ARM) {
    cleanup_VkDataGraphPipelineInfoARM((VkDataGraphPipelineInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_PROPERTY_QUERY_RESULT_ARM) {
    cleanup_VkDataGraphPipelinePropertyQueryResultARM(
        (VkDataGraphPipelinePropertyQueryResultARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_RESOURCE_INFO_ARM) {
    cleanup_VkDataGraphPipelineResourceInfoARM((VkDataGraphPipelineResourceInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_REQUIREMENT_ARM) {
    cleanup_VkDataGraphPipelineSessionBindPointRequirementARM(
        (VkDataGraphPipelineSessionBindPointRequirementARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_REQUIREMENTS_INFO_ARM) {
    cleanup_VkDataGraphPipelineSessionBindPointRequirementsInfoARM(
        (VkDataGraphPipelineSessionBindPointRequirementsInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_CREATE_INFO_ARM) {
    cleanup_VkDataGraphPipelineSessionCreateInfoARM(
        (VkDataGraphPipelineSessionCreateInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_MEMORY_REQUIREMENTS_INFO_ARM) {
    cleanup_VkDataGraphPipelineSessionMemoryRequirementsInfoARM(
        (VkDataGraphPipelineSessionMemoryRequirementsInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SHADER_MODULE_CREATE_INFO_ARM) {
    cleanup_VkDataGraphPipelineShaderModuleCreateInfoARM(
        (VkDataGraphPipelineShaderModuleCreateInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DATA_GRAPH_PROCESSING_ENGINE_CREATE_INFO_ARM) {
    cleanup_VkDataGraphProcessingEngineCreateInfoARM(
        (VkDataGraphProcessingEngineCreateInfoARM const *)pData);
    return;
  }
#endif

#if (VK_EXT_debug_marker)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT) {
    cleanup_VkDebugMarkerMarkerInfoEXT((VkDebugMarkerMarkerInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_debug_marker)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT) {
    cleanup_VkDebugMarkerObjectNameInfoEXT((VkDebugMarkerObjectNameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_debug_marker)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT) {
    cleanup_VkDebugMarkerObjectTagInfoEXT((VkDebugMarkerObjectTagInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_debug_report)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT) {
    cleanup_VkDebugReportCallbackCreateInfoEXT((VkDebugReportCallbackCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_debug_utils)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT) {
    cleanup_VkDebugUtilsLabelEXT((VkDebugUtilsLabelEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_debug_utils)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT) {
    cleanup_VkDebugUtilsMessengerCallbackDataEXT(
        (VkDebugUtilsMessengerCallbackDataEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_debug_utils)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT) {
    cleanup_VkDebugUtilsMessengerCreateInfoEXT((VkDebugUtilsMessengerCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_debug_utils)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT) {
    cleanup_VkDebugUtilsObjectNameInfoEXT((VkDebugUtilsObjectNameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_debug_utils)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT) {
    cleanup_VkDebugUtilsObjectTagInfoEXT((VkDebugUtilsObjectTagInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_NV_dedicated_allocation)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV) {
    cleanup_VkDedicatedAllocationBufferCreateInfoNV(
        (VkDedicatedAllocationBufferCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_NV_dedicated_allocation)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV) {
    cleanup_VkDedicatedAllocationImageCreateInfoNV(
        (VkDedicatedAllocationImageCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_NV_dedicated_allocation)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV) {
    cleanup_VkDedicatedAllocationMemoryAllocateInfoNV(
        (VkDedicatedAllocationMemoryAllocateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_deferred_host_operations &&    \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR) {
    cleanup_VkDeferredOperationInfoKHR((VkDeferredOperationInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEPENDENCY_INFO) {
    cleanup_VkDependencyInfo((VkDependencyInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR) {
    cleanup_VkDependencyInfoKHR((VkDependencyInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT) {
    cleanup_VkDepthBiasInfoEXT((VkDepthBiasInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT) {
    cleanup_VkDepthBiasRepresentationInfoEXT((VkDepthBiasRepresentationInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_ACCELERATION_STRUCTURE_INFO_NVX) {
    cleanup_VkDescriptorAccelerationStructureInfoNVX(
        (VkDescriptorAccelerationStructureInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT) {
    cleanup_VkDescriptorAddressInfoEXT((VkDescriptorAddressInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT) {
    cleanup_VkDescriptorBufferBindingInfoEXT((VkDescriptorBufferBindingInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT) {
    cleanup_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(
        (VkDescriptorBufferBindingPushDescriptorBufferHandleEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT) {
    cleanup_VkDescriptorGetInfoEXT((VkDescriptorGetInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_GET_TENSOR_INFO_ARM) {
    cleanup_VkDescriptorGetTensorInfoARM((VkDescriptorGetTensorInfoARM const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO) {
    cleanup_VkDescriptorPoolCreateInfo((VkDescriptorPoolCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO) {
    cleanup_VkDescriptorPoolInlineUniformBlockCreateInfo(
        (VkDescriptorPoolInlineUniformBlockCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT) {
    cleanup_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
        (VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO) {
    cleanup_VkDescriptorSetAllocateInfo((VkDescriptorSetAllocateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE) {
    cleanup_VkDescriptorSetBindingReferenceVALVE(
        (VkDescriptorSetBindingReferenceVALVE const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO) {
    cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfo(
        (VkDescriptorSetLayoutBindingFlagsCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT) {
    cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
        (VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO) {
    cleanup_VkDescriptorSetLayoutCreateInfo((VkDescriptorSetLayoutCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE) {
    cleanup_VkDescriptorSetLayoutHostMappingInfoVALVE(
        (VkDescriptorSetLayoutHostMappingInfoVALVE const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT) {
    cleanup_VkDescriptorSetLayoutSupport((VkDescriptorSetLayoutSupport const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO) {
    cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfo(
        (VkDescriptorSetVariableDescriptorCountAllocateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT) {
    cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
        (VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT) {
    cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupport(
        (VkDescriptorSetVariableDescriptorCountLayoutSupport const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT) {
    cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
        (VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO) {
    cleanup_VkDescriptorUpdateTemplateCreateInfo(
        (VkDescriptorUpdateTemplateCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT) {
    cleanup_VkDeviceAddressBindingCallbackDataEXT(
        (VkDeviceAddressBindingCallbackDataEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS) {
    cleanup_VkDeviceBufferMemoryRequirements((VkDeviceBufferMemoryRequirements const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR) {
    cleanup_VkDeviceBufferMemoryRequirementsKHR((VkDeviceBufferMemoryRequirementsKHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO) {
    cleanup_VkDeviceCreateInfo((VkDeviceCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT) {
    cleanup_VkDeviceDeviceMemoryReportCreateInfoEXT(
        (VkDeviceDeviceMemoryReportCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV) {
    cleanup_VkDeviceDiagnosticsConfigCreateInfoNV(
        (VkDeviceDiagnosticsConfigCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_EXT_display_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT) {
    cleanup_VkDeviceEventInfoEXT((VkDeviceEventInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT) {
    cleanup_VkDeviceFaultCountsEXT((VkDeviceFaultCountsEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT) {
    cleanup_VkDeviceFaultInfoEXT((VkDeviceFaultInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX) {
    cleanup_VkDeviceGeneratedCommandsFeaturesNVX(
        (VkDeviceGeneratedCommandsFeaturesNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX) {
    cleanup_VkDeviceGeneratedCommandsLimitsNVX((VkDeviceGeneratedCommandsLimitsNVX const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO) {
    cleanup_VkDeviceGroupBindSparseInfo((VkDeviceGroupBindSparseInfo const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO) {
    cleanup_VkDeviceGroupCommandBufferBeginInfo((VkDeviceGroupCommandBufferBeginInfo const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO) {
    cleanup_VkDeviceGroupDeviceCreateInfo((VkDeviceGroupDeviceCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group &&      \
     VK_KHR_surface) ||                                                                            \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR) {
    cleanup_VkDeviceGroupPresentCapabilitiesKHR((VkDeviceGroupPresentCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR) {
    cleanup_VkDeviceGroupPresentInfoKHR((VkDeviceGroupPresentInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO) {
    cleanup_VkDeviceGroupRenderPassBeginInfo((VkDeviceGroupRenderPassBeginInfo const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO) {
    cleanup_VkDeviceGroupSubmitInfo((VkDeviceGroupSubmitInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR) {
    cleanup_VkDeviceGroupSwapchainCreateInfoKHR((VkDeviceGroupSwapchainCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS) {
    cleanup_VkDeviceImageMemoryRequirements((VkDeviceImageMemoryRequirements const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR) {
    cleanup_VkDeviceImageMemoryRequirementsKHR((VkDeviceImageMemoryRequirementsKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO) {
    cleanup_VkDeviceImageSubresourceInfo((VkDeviceImageSubresourceInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR) {
    cleanup_VkDeviceImageSubresourceInfoKHR((VkDeviceImageSubresourceInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO) {
    cleanup_VkDeviceMemoryOpaqueCaptureAddressInfo(
        (VkDeviceMemoryOpaqueCaptureAddressInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR) {
    cleanup_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
        (VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD) {
    cleanup_VkDeviceMemoryOverallocationCreateInfoAMD(
        (VkDeviceMemoryOverallocationCreateInfoAMD const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT) {
    cleanup_VkDeviceMemoryReportCallbackDataEXT((VkDeviceMemoryReportCallbackDataEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_OBJECT_RESERVATION_CREATE_INFO) {
    cleanup_VkDeviceObjectReservationCreateInfo((VkDeviceObjectReservationCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR) {
    cleanup_VkDevicePipelineBinaryInternalCacheControlKHR(
        (VkDevicePipelineBinaryInternalCacheControlKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO) {
    cleanup_VkDevicePrivateDataCreateInfo((VkDevicePrivateDataCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT) {
    cleanup_VkDevicePrivateDataCreateInfoEXT((VkDevicePrivateDataCreateInfoEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO) {
    cleanup_VkDeviceQueueCreateInfo((VkDeviceQueueCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO) {
    cleanup_VkDeviceQueueGlobalPriorityCreateInfo(
        (VkDeviceQueueGlobalPriorityCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 203 && VK_EXT_global_priority)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT) {
    cleanup_VkDeviceQueueGlobalPriorityCreateInfoEXT(
        (VkDeviceQueueGlobalPriorityCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR) {
    cleanup_VkDeviceQueueGlobalPriorityCreateInfoKHR(
        (VkDeviceQueueGlobalPriorityCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2) {
    cleanup_VkDeviceQueueInfo2((VkDeviceQueueInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM) {
    cleanup_VkDeviceQueueShaderCoreControlCreateInfoARM(
        (VkDeviceQueueShaderCoreControlCreateInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2 && VKSC_VERSION_1_0)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_SEMAPHORE_SCI_SYNC_POOL_RESERVATION_CREATE_INFO_NV) {
    cleanup_VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV(
        (VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DEVICE_TENSOR_MEMORY_REQUIREMENTS_ARM) {
    cleanup_VkDeviceTensorMemoryRequirementsARM((VkDeviceTensorMemoryRequirementsARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 236 && VK_HEADER_VERSION <= 236 && VK_LUNARG_direct_driver_loading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG) {
    cleanup_VkDirectDriverLoadingInfoLUNARG((VkDirectDriverLoadingInfoLUNARG const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 237 && VK_LUNARG_direct_driver_loading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG) {
    cleanup_VkDirectDriverLoadingInfoLUNARG((VkDirectDriverLoadingInfoLUNARG const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 236 && VK_LUNARG_direct_driver_loading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG) {
    cleanup_VkDirectDriverLoadingListLUNARG((VkDirectDriverLoadingListLUNARG const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT) {
    cleanup_VkDirectFBSurfaceCreateInfoEXT((VkDirectFBSurfaceCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPATCH_TILE_INFO_QCOM) {
    cleanup_VkDispatchTileInfoQCOM((VkDispatchTileInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_EXT_display_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT) {
    cleanup_VkDisplayEventInfoEXT((VkDisplayEventInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_KHR_display)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR) {
    cleanup_VkDisplayModeCreateInfoKHR((VkDisplayModeCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR) {
    cleanup_VkDisplayModeProperties2KHR((VkDisplayModeProperties2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_NV_display_stereo)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_MODE_STEREO_PROPERTIES_NV) {
    cleanup_VkDisplayModeStereoPropertiesNV((VkDisplayModeStereoPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD) {
    cleanup_VkDisplayNativeHdrSurfaceCapabilitiesAMD(
        (VkDisplayNativeHdrSurfaceCapabilitiesAMD const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR) {
    cleanup_VkDisplayPlaneCapabilities2KHR((VkDisplayPlaneCapabilities2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR) {
    cleanup_VkDisplayPlaneInfo2KHR((VkDisplayPlaneInfo2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR) {
    cleanup_VkDisplayPlaneProperties2KHR((VkDisplayPlaneProperties2KHR const *)pData);
    return;
  }
#endif

#if (VK_EXT_display_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT) {
    cleanup_VkDisplayPowerInfoEXT((VkDisplayPowerInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_KHR_display_swapchain)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR) {
    cleanup_VkDisplayPresentInfoKHR((VkDisplayPresentInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR) {
    cleanup_VkDisplayProperties2KHR((VkDisplayProperties2KHR const *)pData);
    return;
  }
#endif

#if (VK_KHR_display)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR) {
    cleanup_VkDisplaySurfaceCreateInfoKHR((VkDisplaySurfaceCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_NV_display_stereo)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DISPLAY_SURFACE_STEREO_CREATE_INFO_NV) {
    cleanup_VkDisplaySurfaceStereoCreateInfoNV((VkDisplaySurfaceStereoCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 281 && VK_EXT_image_drm_format_modifier &&                               \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 && VK_EXT_image_drm_format_modifier &&   \
     VK_KHR_format_feature_flags2) ||                                                              \
    (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 240 && VK_EXT_image_drm_format_modifier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT) {
    cleanup_VkDrmFormatModifierPropertiesList2EXT(
        (VkDrmFormatModifierPropertiesList2EXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT) {
    cleanup_VkDrmFormatModifierPropertiesListEXT(
        (VkDrmFormatModifierPropertiesListEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_EVENT_CREATE_INFO) {
    cleanup_VkEventCreateInfo((VkEventCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX) {
    cleanup_VkExecutionGraphPipelineCreateInfoAMDX(
        (VkExecutionGraphPipelineCreateInfoAMDX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&             \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX) {
    cleanup_VkExecutionGraphPipelineScratchSizeAMDX(
        (VkExecutionGraphPipelineScratchSizeAMDX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX) {
    cleanup_VkExecutionGraphPipelineScratchSizeAMDX(
        (VkExecutionGraphPipelineScratchSizeAMDX const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO) {
    cleanup_VkExportFenceCreateInfo((VkExportFenceCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_FENCE_SCI_SYNC_INFO_NV) {
    cleanup_VkExportFenceSciSyncInfoNV((VkExportFenceSciSyncInfoNV const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_fence_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR) {
    cleanup_VkExportFenceWin32HandleInfoKHR((VkExportFenceWin32HandleInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO) {
    cleanup_VkExportMemoryAllocateInfo((VkExportMemoryAllocateInfo const *)pData);
    return;
  }
#endif

#if (VK_NV_external_memory)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV) {
    cleanup_VkExportMemoryAllocateInfoNV((VkExportMemoryAllocateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_MEMORY_SCI_BUF_INFO_NV) {
    cleanup_VkExportMemorySciBufInfoNV((VkExportMemorySciBufInfoNV const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_memory_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR) {
    cleanup_VkExportMemoryWin32HandleInfoKHR((VkExportMemoryWin32HandleInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_NV_external_memory_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV) {
    cleanup_VkExportMemoryWin32HandleInfoNV((VkExportMemoryWin32HandleInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT) {
    cleanup_VkExportMetalBufferInfoEXT((VkExportMetalBufferInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT) {
    cleanup_VkExportMetalCommandQueueInfoEXT((VkExportMetalCommandQueueInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT) {
    cleanup_VkExportMetalDeviceInfoEXT((VkExportMetalDeviceInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT) {
    cleanup_VkExportMetalIOSurfaceInfoEXT((VkExportMetalIOSurfaceInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT) {
    cleanup_VkExportMetalObjectCreateInfoEXT((VkExportMetalObjectCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT) {
    cleanup_VkExportMetalObjectsInfoEXT((VkExportMetalObjectsInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT) {
    cleanup_VkExportMetalSharedEventInfoEXT((VkExportMetalSharedEventInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT) {
    cleanup_VkExportMetalTextureInfoEXT((VkExportMetalTextureInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO) {
    cleanup_VkExportSemaphoreCreateInfo((VkExportSemaphoreCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_SCI_SYNC_INFO_NV) {
    cleanup_VkExportSemaphoreSciSyncInfoNV((VkExportSemaphoreSciSyncInfoNV const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_semaphore_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR) {
    cleanup_VkExportSemaphoreWin32HandleInfoKHR((VkExportSemaphoreWin32HandleInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES) {
    cleanup_VkExternalBufferProperties((VkExternalBufferProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_CREATE_INFO_NV) {
    cleanup_VkExternalComputeQueueCreateInfoNV((VkExternalComputeQueueCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_DATA_PARAMS_NV) {
    cleanup_VkExternalComputeQueueDataParamsNV((VkExternalComputeQueueDataParamsNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_DEVICE_CREATE_INFO_NV) {
    cleanup_VkExternalComputeQueueDeviceCreateInfoNV(
        (VkExternalComputeQueueDeviceCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES) {
    cleanup_VkExternalFenceProperties((VkExternalFenceProperties const *)pData);
    return;
  }
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID) {
    cleanup_VkExternalFormatANDROID((VkExternalFormatANDROID const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX) {
    cleanup_VkExternalFormatQNX((VkExternalFormatQNX const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES) {
    cleanup_VkExternalImageFormatProperties((VkExternalImageFormatProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 252 && VK_EXT_external_memory_acquire_unmodified)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT) {
    cleanup_VkExternalMemoryAcquireUnmodifiedEXT(
        (VkExternalMemoryAcquireUnmodifiedEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO) {
    cleanup_VkExternalMemoryBufferCreateInfo((VkExternalMemoryBufferCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO) {
    cleanup_VkExternalMemoryImageCreateInfo((VkExternalMemoryImageCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_NV_external_memory)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV) {
    cleanup_VkExternalMemoryImageCreateInfoNV((VkExternalMemoryImageCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_TENSOR_CREATE_INFO_ARM) {
    cleanup_VkExternalMemoryTensorCreateInfoARM((VkExternalMemoryTensorCreateInfoARM const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES) {
    cleanup_VkExternalSemaphoreProperties((VkExternalSemaphoreProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_EXTERNAL_TENSOR_PROPERTIES_ARM) {
    cleanup_VkExternalTensorPropertiesARM((VkExternalTensorPropertiesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FAULT_CALLBACK_INFO) {
    cleanup_VkFaultCallbackInfo((VkFaultCallbackInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FAULT_DATA) {
    cleanup_VkFaultData((VkFaultData const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_FENCE_CREATE_INFO) {
    cleanup_VkFenceCreateInfo((VkFenceCreateInfo const *)pData);
    return;
  }

#if (VK_KHR_external_fence_fd)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR) {
    cleanup_VkFenceGetFdInfoKHR((VkFenceGetFdInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FENCE_GET_SCI_SYNC_INFO_NV) {
    cleanup_VkFenceGetSciSyncInfoNV((VkFenceGetSciSyncInfoNV const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_fence_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR) {
    cleanup_VkFenceGetWin32HandleInfoKHR((VkFenceGetWin32HandleInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT) {
    cleanup_VkFilterCubicImageViewImageFormatPropertiesEXT(
        (VkFilterCubicImageViewImageFormatPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2) {
    cleanup_VkFormatProperties2((VkFormatProperties2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3) {
    cleanup_VkFormatProperties3((VkFormatProperties3 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_format_feature_flags2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR) {
    cleanup_VkFormatProperties3KHR((VkFormatProperties3KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR) {
    cleanup_VkFragmentShadingRateAttachmentInfoKHR(
        (VkFragmentShadingRateAttachmentInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 264 && VK_EXT_frame_boundary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT) {
    cleanup_VkFrameBoundaryEXT((VkFrameBoundaryEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_frame_boundary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FRAME_BOUNDARY_TENSORS_ARM) {
    cleanup_VkFrameBoundaryTensorsARM((VkFrameBoundaryTensorsARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 142 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO) {
    cleanup_VkFramebufferAttachmentImageInfo((VkFramebufferAttachmentImageInfo const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130
  if (pTemp->sType == VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR) {
    cleanup_VkFramebufferAttachmentImageInfoKHR((VkFramebufferAttachmentImageInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO) {
    cleanup_VkFramebufferAttachmentsCreateInfo((VkFramebufferAttachmentsCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR) {
    cleanup_VkFramebufferAttachmentsCreateInfoKHR(
        (VkFramebufferAttachmentsCreateInfoKHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO) {
    cleanup_VkFramebufferCreateInfo((VkFramebufferCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode)
  if (pTemp->sType == VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV) {
    cleanup_VkFramebufferMixedSamplesCombinationNV(
        (VkFramebufferMixedSamplesCombinationNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_EXT) {
    cleanup_VkGeneratedCommandsInfoEXT((VkGeneratedCommandsInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV) {
    cleanup_VkGeneratedCommandsInfoNV((VkGeneratedCommandsInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT) {
    cleanup_VkGeneratedCommandsMemoryRequirementsInfoEXT(
        (VkGeneratedCommandsMemoryRequirementsInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV) {
    cleanup_VkGeneratedCommandsMemoryRequirementsInfoNV(
        (VkGeneratedCommandsMemoryRequirementsInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GENERATED_COMMANDS_PIPELINE_INFO_EXT) {
    cleanup_VkGeneratedCommandsPipelineInfoEXT((VkGeneratedCommandsPipelineInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GENERATED_COMMANDS_SHADER_INFO_EXT) {
    cleanup_VkGeneratedCommandsShaderInfoEXT((VkGeneratedCommandsShaderInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV) {
    cleanup_VkGeometryAABBNV((VkGeometryAABBNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GEOMETRY_AABB_NVX) {
    cleanup_VkGeometryAABBNVX((VkGeometryAABBNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 134 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GEOMETRY_NV) {
    cleanup_VkGeometryNV((VkGeometryNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GEOMETRY_NV) {
    cleanup_VkGeometryNV((VkGeometryNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GEOMETRY_NVX) {
    cleanup_VkGeometryNVX((VkGeometryNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV) {
    cleanup_VkGeometryTrianglesNV((VkGeometryTrianglesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NVX) {
    cleanup_VkGeometryTrianglesNVX((VkGeometryTrianglesNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 266 && VK_HEADER_VERSION <= 270 && VK_NV_low_latency2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV) {
    cleanup_VkGetLatencyMarkerInfoNV((VkGetLatencyMarkerInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 271 && VK_NV_low_latency2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV) {
    cleanup_VkGetLatencyMarkerInfoNV((VkGetLatencyMarkerInfoNV const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION <= 240
  if (pTemp->sType == VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO) {
    cleanup_VkGraphicsPipelineCreateInfo((VkGraphicsPipelineCreateInfo const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION >= 241
  if (pTemp->sType == VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO) {
    cleanup_VkGraphicsPipelineCreateInfo((VkGraphicsPipelineCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT) {
    cleanup_VkGraphicsPipelineLibraryCreateInfoEXT(
        (VkGraphicsPipelineLibraryCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV) {
    cleanup_VkGraphicsPipelineShaderGroupsCreateInfoNV(
        (VkGraphicsPipelineShaderGroupsCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV) {
    cleanup_VkGraphicsShaderGroupCreateInfoNV((VkGraphicsShaderGroupCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_EXT_hdr_metadata)
  if (pTemp->sType == VK_STRUCTURE_TYPE_HDR_METADATA_EXT) {
    cleanup_VkHdrMetadataEXT((VkHdrMetadataEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 301 && VK_HUAWEI_hdr_vivid)
  if (pTemp->sType == VK_STRUCTURE_TYPE_HDR_VIVID_DYNAMIC_METADATA_HUAWEI) {
    cleanup_VkHdrVividDynamicMetadataHUAWEI((VkHdrVividDynamicMetadataHUAWEI const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT) {
    cleanup_VkHeadlessSurfaceCreateInfoEXT((VkHeadlessSurfaceCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY) {
    cleanup_VkHostImageCopyDevicePerformanceQuery(
        (VkHostImageCopyDevicePerformanceQuery const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
  if (pTemp->sType == VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT) {
    cleanup_VkHostImageCopyDevicePerformanceQueryEXT(
        (VkHostImageCopyDevicePerformanceQueryEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO) {
    cleanup_VkHostImageLayoutTransitionInfo((VkHostImageLayoutTransitionInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
  if (pTemp->sType == VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT) {
    cleanup_VkHostImageLayoutTransitionInfoEXT((VkHostImageLayoutTransitionInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_MVK_ios_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK) {
    cleanup_VkIOSSurfaceCreateInfoMVK((VkIOSSurfaceCreateInfoMVK const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA) {
    cleanup_VkImageAlignmentControlCreateInfoMESA(
        (VkImageAlignmentControlCreateInfoMESA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_BLIT_2) {
    cleanup_VkImageBlit2((VkImageBlit2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR) {
    cleanup_VkImageBlit2KHR((VkImageBlit2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT) {
    cleanup_VkImageCaptureDescriptorDataInfoEXT((VkImageCaptureDescriptorDataInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT) {
    cleanup_VkImageCompressionControlEXT((VkImageCompressionControlEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT) {
    cleanup_VkImageCompressionPropertiesEXT((VkImageCompressionPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA) {
    cleanup_VkImageConstraintsInfoFUCHSIA((VkImageConstraintsInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_COPY_2) {
    cleanup_VkImageCopy2((VkImageCopy2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR) {
    cleanup_VkImageCopy2KHR((VkImageCopy2KHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO) {
    cleanup_VkImageCreateInfo((VkImageCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT) {
    cleanup_VkImageDrmFormatModifierExplicitCreateInfoEXT(
        (VkImageDrmFormatModifierExplicitCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT) {
    cleanup_VkImageDrmFormatModifierListCreateInfoEXT(
        (VkImageDrmFormatModifierListCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT) {
    cleanup_VkImageDrmFormatModifierPropertiesEXT(
        (VkImageDrmFormatModifierPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA) {
    cleanup_VkImageFormatConstraintsInfoFUCHSIA((VkImageFormatConstraintsInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO) {
    cleanup_VkImageFormatListCreateInfo((VkImageFormatListCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 130 && VK_KHR_image_format_list)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR) {
    cleanup_VkImageFormatListCreateInfoKHR((VkImageFormatListCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2) {
    cleanup_VkImageFormatProperties2((VkImageFormatProperties2 const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER) {
    cleanup_VkImageMemoryBarrier((VkImageMemoryBarrier const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2) {
    cleanup_VkImageMemoryBarrier2((VkImageMemoryBarrier2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR) {
    cleanup_VkImageMemoryBarrier2KHR((VkImageMemoryBarrier2KHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2) {
    cleanup_VkImageMemoryRequirementsInfo2((VkImageMemoryRequirementsInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA) {
    cleanup_VkImagePipeSurfaceCreateInfoFUCHSIA((VkImagePipeSurfaceCreateInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO) {
    cleanup_VkImagePlaneMemoryRequirementsInfo((VkImagePlaneMemoryRequirementsInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2) {
    cleanup_VkImageResolve2((VkImageResolve2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR) {
    cleanup_VkImageResolve2KHR((VkImageResolve2KHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2) {
    cleanup_VkImageSparseMemoryRequirementsInfo2(
        (VkImageSparseMemoryRequirementsInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO) {
    cleanup_VkImageStencilUsageCreateInfo((VkImageStencilUsageCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 93 && VK_HEADER_VERSION <= 130 && VK_EXT_separate_stencil_usage)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT) {
    cleanup_VkImageStencilUsageCreateInfoEXT((VkImageStencilUsageCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2) {
    cleanup_VkImageSubresource2((VkImageSubresource2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 259 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control) ||                                                          \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 257 && VK_EXT_image_compression_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT) {
    cleanup_VkImageSubresource2EXT((VkImageSubresource2EXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR) {
    cleanup_VkImageSubresource2KHR((VkImageSubresource2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR) {
    cleanup_VkImageSwapchainCreateInfoKHR((VkImageSwapchainCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY) {
    cleanup_VkImageToMemoryCopy((VkImageToMemoryCopy const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT) {
    cleanup_VkImageToMemoryCopyEXT((VkImageToMemoryCopyEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT) {
    cleanup_VkImageViewASTCDecodeModeEXT((VkImageViewASTCDecodeModeEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 137 && VK_NVX_image_view_handle)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX) {
    cleanup_VkImageViewAddressPropertiesNVX((VkImageViewAddressPropertiesNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT) {
    cleanup_VkImageViewCaptureDescriptorDataInfoEXT(
        (VkImageViewCaptureDescriptorDataInfoEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO) {
    cleanup_VkImageViewCreateInfo((VkImageViewCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 102 && VK_NVX_image_view_handle)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX) {
    cleanup_VkImageViewHandleInfoNVX((VkImageViewHandleInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT) {
    cleanup_VkImageViewMinLodCreateInfoEXT((VkImageViewMinLodCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM) {
    cleanup_VkImageViewSampleWeightCreateInfoQCOM(
        (VkImageViewSampleWeightCreateInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_image_sliced_view_of_3d)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT) {
    cleanup_VkImageViewSlicedCreateInfoEXT((VkImageViewSlicedCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO) {
    cleanup_VkImageViewUsageCreateInfo((VkImageViewUsageCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID) {
    cleanup_VkImportAndroidHardwareBufferInfoANDROID(
        (VkImportAndroidHardwareBufferInfoANDROID const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_fence_fd)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR) {
    cleanup_VkImportFenceFdInfoKHR((VkImportFenceFdInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_FENCE_SCI_SYNC_INFO_NV) {
    cleanup_VkImportFenceSciSyncInfoNV((VkImportFenceSciSyncInfoNV const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_fence_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR) {
    cleanup_VkImportFenceWin32HandleInfoKHR((VkImportFenceWin32HandleInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA) {
    cleanup_VkImportMemoryBufferCollectionFUCHSIA(
        (VkImportMemoryBufferCollectionFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_memory_fd)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR) {
    cleanup_VkImportMemoryFdInfoKHR((VkImportMemoryFdInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_EXT_external_memory_host)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT) {
    cleanup_VkImportMemoryHostPointerInfoEXT((VkImportMemoryHostPointerInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_MEMORY_METAL_HANDLE_INFO_EXT) {
    cleanup_VkImportMemoryMetalHandleInfoEXT((VkImportMemoryMetalHandleInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_MEMORY_SCI_BUF_INFO_NV) {
    cleanup_VkImportMemorySciBufInfoNV((VkImportMemorySciBufInfoNV const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_memory_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR) {
    cleanup_VkImportMemoryWin32HandleInfoKHR((VkImportMemoryWin32HandleInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_NV_external_memory_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV) {
    cleanup_VkImportMemoryWin32HandleInfoNV((VkImportMemoryWin32HandleInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA) {
    cleanup_VkImportMemoryZirconHandleInfoFUCHSIA(
        (VkImportMemoryZirconHandleInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT) {
    cleanup_VkImportMetalBufferInfoEXT((VkImportMetalBufferInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT) {
    cleanup_VkImportMetalIOSurfaceInfoEXT((VkImportMetalIOSurfaceInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT) {
    cleanup_VkImportMetalSharedEventInfoEXT((VkImportMetalSharedEventInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT) {
    cleanup_VkImportMetalTextureInfoEXT((VkImportMetalTextureInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX) {
    cleanup_VkImportScreenBufferInfoQNX((VkImportScreenBufferInfoQNX const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_semaphore_fd)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR) {
    cleanup_VkImportSemaphoreFdInfoKHR((VkImportSemaphoreFdInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_SCI_SYNC_INFO_NV) {
    cleanup_VkImportSemaphoreSciSyncInfoNV((VkImportSemaphoreSciSyncInfoNV const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_semaphore_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR) {
    cleanup_VkImportSemaphoreWin32HandleInfoKHR((VkImportSemaphoreWin32HandleInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore)
  if (pTemp->sType == VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA) {
    cleanup_VkImportSemaphoreZirconHandleInfoFUCHSIA(
        (VkImportSemaphoreZirconHandleInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT) {
    cleanup_VkIndirectCommandsLayoutCreateInfoEXT(
        (VkIndirectCommandsLayoutCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV) {
    cleanup_VkIndirectCommandsLayoutCreateInfoNV(
        (VkIndirectCommandsLayoutCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX) {
    cleanup_VkIndirectCommandsLayoutCreateInfoNVX(
        (VkIndirectCommandsLayoutCreateInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT) {
    cleanup_VkIndirectCommandsLayoutTokenEXT((VkIndirectCommandsLayoutTokenEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV) {
    cleanup_VkIndirectCommandsLayoutTokenNV((VkIndirectCommandsLayoutTokenNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_CREATE_INFO_EXT) {
    cleanup_VkIndirectExecutionSetCreateInfoEXT((VkIndirectExecutionSetCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT) {
    cleanup_VkIndirectExecutionSetPipelineInfoEXT(
        (VkIndirectExecutionSetPipelineInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_INFO_EXT) {
    cleanup_VkIndirectExecutionSetShaderInfoEXT((VkIndirectExecutionSetShaderInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT) {
    cleanup_VkIndirectExecutionSetShaderLayoutInfoEXT(
        (VkIndirectExecutionSetShaderLayoutInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL) {
    cleanup_VkInitializePerformanceApiInfoINTEL((VkInitializePerformanceApiInfoINTEL const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO) {
    cleanup_VkInstanceCreateInfo((VkInstanceCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV) {
    cleanup_VkLatencySleepInfoNV((VkLatencySleepInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV) {
    cleanup_VkLatencySleepModeInfoNV((VkLatencySleepModeInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV) {
    cleanup_VkLatencySubmissionPresentIdNV((VkLatencySubmissionPresentIdNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV) {
    cleanup_VkLatencySurfaceCapabilitiesNV((VkLatencySurfaceCapabilitiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV) {
    cleanup_VkLatencyTimingsFrameReportNV((VkLatencyTimingsFrameReportNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 272 && VK_EXT_layer_settings)
  if (pTemp->sType == VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT) {
    cleanup_VkLayerSettingsCreateInfoEXT((VkLayerSettingsCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_MVK_macos_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK) {
    cleanup_VkMacOSSurfaceCreateInfoMVK((VkMacOSSurfaceCreateInfoMVK const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE) {
    cleanup_VkMappedMemoryRange((VkMappedMemoryRange const *)pData);
    return;
  }

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO) {
    cleanup_VkMemoryAllocateFlagsInfo((VkMemoryAllocateFlagsInfo const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO) {
    cleanup_VkMemoryAllocateInfo((VkMemoryAllocateInfo const *)pData);
    return;
  }
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_BARRIER) {
    cleanup_VkMemoryBarrier((VkMemoryBarrier const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_BARRIER_2) {
    cleanup_VkMemoryBarrier2((VkMemoryBarrier2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR) {
    cleanup_VkMemoryBarrier2KHR((VkMemoryBarrier2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 305 && VK_KHR_maintenance8)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_BARRIER_ACCESS_FLAGS_3_KHR) {
    cleanup_VkMemoryBarrierAccessFlags3KHR((VkMemoryBarrierAccessFlags3KHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO) {
    cleanup_VkMemoryDedicatedAllocateInfo((VkMemoryDedicatedAllocateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_TENSOR_ARM) {
    cleanup_VkMemoryDedicatedAllocateInfoTensorARM(
        (VkMemoryDedicatedAllocateInfoTensorARM const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS) {
    cleanup_VkMemoryDedicatedRequirements((VkMemoryDedicatedRequirements const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_memory_fd)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR) {
    cleanup_VkMemoryFdPropertiesKHR((VkMemoryFdPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID) {
    cleanup_VkMemoryGetAndroidHardwareBufferInfoANDROID(
        (VkMemoryGetAndroidHardwareBufferInfoANDROID const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_memory_fd)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR) {
    cleanup_VkMemoryGetFdInfoKHR((VkMemoryGetFdInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_GET_METAL_HANDLE_INFO_EXT) {
    cleanup_VkMemoryGetMetalHandleInfoEXT((VkMemoryGetMetalHandleInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV) {
    cleanup_VkMemoryGetRemoteAddressInfoNV((VkMemoryGetRemoteAddressInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_GET_SCI_BUF_INFO_NV) {
    cleanup_VkMemoryGetSciBufInfoNV((VkMemoryGetSciBufInfoNV const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_memory_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR) {
    cleanup_VkMemoryGetWin32HandleInfoKHR((VkMemoryGetWin32HandleInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA) {
    cleanup_VkMemoryGetZirconHandleInfoFUCHSIA((VkMemoryGetZirconHandleInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_EXT_external_memory_host)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT) {
    cleanup_VkMemoryHostPointerPropertiesEXT((VkMemoryHostPointerPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_MAP_INFO) {
    cleanup_VkMemoryMapInfo((VkMemoryMapInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 244 && VK_HEADER_VERSION <= 302 && VK_KHR_map_memory2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR) {
    cleanup_VkMemoryMapInfoKHR((VkMemoryMapInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT) {
    cleanup_VkMemoryMapPlacedInfoEXT((VkMemoryMapPlacedInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_METAL_HANDLE_PROPERTIES_EXT) {
    cleanup_VkMemoryMetalHandlePropertiesEXT((VkMemoryMetalHandlePropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO) {
    cleanup_VkMemoryOpaqueCaptureAddressAllocateInfo(
        (VkMemoryOpaqueCaptureAddressAllocateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR) {
    cleanup_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
        (VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT) {
    cleanup_VkMemoryPriorityAllocateInfoEXT((VkMemoryPriorityAllocateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2) {
    cleanup_VkMemoryRequirements2((VkMemoryRequirements2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_SCI_BUF_PROPERTIES_NV) {
    cleanup_VkMemorySciBufPropertiesNV((VkMemorySciBufPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY) {
    cleanup_VkMemoryToImageCopy((VkMemoryToImageCopy const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT) {
    cleanup_VkMemoryToImageCopyEXT((VkMemoryToImageCopyEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO) {
    cleanup_VkMemoryUnmapInfo((VkMemoryUnmapInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 244 && VK_HEADER_VERSION <= 302 && VK_KHR_map_memory2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR) {
    cleanup_VkMemoryUnmapInfoKHR((VkMemoryUnmapInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_memory_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR) {
    cleanup_VkMemoryWin32HandlePropertiesKHR((VkMemoryWin32HandlePropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA) {
    cleanup_VkMemoryZirconHandlePropertiesFUCHSIA(
        (VkMemoryZirconHandlePropertiesFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT) {
    cleanup_VkMetalSurfaceCreateInfoEXT((VkMetalSurfaceCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT) {
    cleanup_VkMicromapBuildInfoEXT((VkMicromapBuildInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT) {
    cleanup_VkMicromapBuildSizesInfoEXT((VkMicromapBuildSizesInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT) {
    cleanup_VkMicromapCreateInfoEXT((VkMicromapCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT) {
    cleanup_VkMicromapVersionInfoEXT((VkMicromapVersionInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR) {
    cleanup_VkMirSurfaceCreateInfoKHR((VkMirSurfaceCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_EXT_sample_locations)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT) {
    cleanup_VkMultisamplePropertiesEXT((VkMultisamplePropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT) {
    cleanup_VkMultisampledRenderToSingleSampledInfoEXT(
        (VkMultisampledRenderToSingleSampledInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NVX_multiview_per_view_attributes &&                           \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_NVX_multiview_per_view_attributes) ||                                                      \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX) {
    cleanup_VkMultiviewPerViewAttributesInfoNVX((VkMultiviewPerViewAttributesInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_QCOM_multiview_per_view_render_areas)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM) {
    cleanup_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(
        (VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT) {
    cleanup_VkMutableDescriptorTypeCreateInfoEXT(
        (VkMutableDescriptorTypeCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type)
  if (pTemp->sType == VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE) {
    cleanup_VkMutableDescriptorTypeCreateInfoVALVE(
        (VkMutableDescriptorTypeCreateInfoVALVE const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 116 && VK_ANDROID_native_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID) {
    cleanup_VkNativeBufferANDROID((VkNativeBufferANDROID const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID) {
    cleanup_VkNativeBufferANDROID((VkNativeBufferANDROID const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 318 && VK_OHOS_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_OH_SURFACE_CREATE_INFO_OHOS) {
    cleanup_VkOHSurfaceCreateInfoOHOS((VkOHSurfaceCreateInfoOHOS const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX) {
    cleanup_VkObjectTableCreateInfoNVX((VkObjectTableCreateInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT) {
    cleanup_VkOpaqueCaptureDescriptorDataCreateInfoEXT(
        (VkOpaqueCaptureDescriptorDataCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
  if (pTemp->sType == VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV) {
    cleanup_VkOpticalFlowExecuteInfoNV((VkOpticalFlowExecuteInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
  if (pTemp->sType == VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV) {
    cleanup_VkOpticalFlowImageFormatInfoNV((VkOpticalFlowImageFormatInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
  if (pTemp->sType == VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV) {
    cleanup_VkOpticalFlowImageFormatPropertiesNV(
        (VkOpticalFlowImageFormatPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
  if (pTemp->sType == VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV) {
    cleanup_VkOpticalFlowSessionCreateInfoNV((VkOpticalFlowSessionCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
  if (pTemp->sType == VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV) {
    cleanup_VkOpticalFlowSessionCreatePrivateDataInfoNV(
        (VkOpticalFlowSessionCreatePrivateDataInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV) {
    cleanup_VkOutOfBandQueueTypeInfoNV((VkOutOfBandQueueTypeInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_FLAGS_NV) {
    cleanup_VkPartitionedAccelerationStructureFlagsNV(
        (VkPartitionedAccelerationStructureFlagsNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCES_INPUT_NV) {
    cleanup_VkPartitionedAccelerationStructureInstancesInputNV(
        (VkPartitionedAccelerationStructureInstancesInputNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PER_TILE_BEGIN_INFO_QCOM) {
    cleanup_VkPerTileBeginInfoQCOM((VkPerTileBeginInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PER_TILE_END_INFO_QCOM) {
    cleanup_VkPerTileEndInfoQCOM((VkPerTileEndInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL) {
    cleanup_VkPerformanceConfigurationAcquireInfoINTEL(
        (VkPerformanceConfigurationAcquireInfoINTEL const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR) {
    cleanup_VkPerformanceCounterDescriptionKHR((VkPerformanceCounterDescriptionKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR) {
    cleanup_VkPerformanceCounterKHR((VkPerformanceCounterKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL) {
    cleanup_VkPerformanceMarkerInfoINTEL((VkPerformanceMarkerInfoINTEL const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL) {
    cleanup_VkPerformanceOverrideInfoINTEL((VkPerformanceOverrideInfoINTEL const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_performance_query && VKSC_VERSION_1_0)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_RESERVATION_INFO_KHR) {
    cleanup_VkPerformanceQueryReservationInfoKHR(
        (VkPerformanceQueryReservationInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR) {
    cleanup_VkPerformanceQuerySubmitInfoKHR((VkPerformanceQuerySubmitInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL) {
    cleanup_VkPerformanceStreamMarkerInfoINTEL((VkPerformanceStreamMarkerInfoINTEL const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES) {
    cleanup_VkPhysicalDevice16BitStorageFeatures(
        (VkPhysicalDevice16BitStorageFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 149 && VK_EXT_4444_formats)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT) {
    cleanup_VkPhysicalDevice4444FormatsFeaturesEXT(
        (VkPhysicalDevice4444FormatsFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES) {
    cleanup_VkPhysicalDevice8BitStorageFeatures((VkPhysicalDevice8BitStorageFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130 && VK_KHR_8bit_storage)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR) {
    cleanup_VkPhysicalDevice8BitStorageFeaturesKHR(
        (VkPhysicalDevice8BitStorageFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceASTCDecodeFeaturesEXT(
        (VkPhysicalDeviceASTCDecodeFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceAccelerationStructureFeaturesKHR(
        (VkPhysicalDeviceAccelerationStructureFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceAccelerationStructurePropertiesKHR(
        (VkPhysicalDeviceAccelerationStructurePropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceAddressBindingReportFeaturesEXT(
        (VkPhysicalDeviceAddressBindingReportFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC) {
    cleanup_VkPhysicalDeviceAmigoProfilingFeaturesSEC(
        (VkPhysicalDeviceAmigoProfilingFeaturesSEC const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD) {
    cleanup_VkPhysicalDeviceAntiLagFeaturesAMD((VkPhysicalDeviceAntiLagFeaturesAMD const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 250 && VK_EXT_attachment_feedback_loop_dynamic_state)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(
        (VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 224 && VK_EXT_attachment_feedback_loop_layout)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(
        (VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_blend_operation_advanced)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
        (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_blend_operation_advanced)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
        (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(
        (VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 105 && VK_EXT_buffer_device_address)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceBufferAddressFeaturesEXT(
        (VkPhysicalDeviceBufferAddressFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES) {
    cleanup_VkPhysicalDeviceBufferDeviceAddressFeatures(
        (VkPhysicalDeviceBufferDeviceAddressFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
        (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
        (VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_FEATURES_NV) {
    cleanup_VkPhysicalDeviceClusterAccelerationStructureFeaturesNV(
        (VkPhysicalDeviceClusterAccelerationStructureFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceClusterAccelerationStructurePropertiesNV(
        (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 239 && VK_HUAWEI_cluster_culling_shader)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI) {
    cleanup_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(
        (VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 239 && VK_HEADER_VERSION <= 242 && VK_HUAWEI_cluster_culling_shader)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI) {
    cleanup_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
        (VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HUAWEI_cluster_culling_shader)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI) {
    cleanup_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
        (VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 272 && VK_HUAWEI_cluster_culling_shader)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI) {
    cleanup_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(
        (VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 121 && VK_AMD_device_coherent_memory)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD) {
    cleanup_VkPhysicalDeviceCoherentMemoryFeaturesAMD(
        (VkPhysicalDeviceCoherentMemoryFeaturesAMD const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
        (VkPhysicalDeviceColorWriteEnableFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 293 && VK_NV_command_buffer_inheritance)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV) {
    cleanup_VkPhysicalDeviceCommandBufferInheritanceFeaturesNV(
        (VkPhysicalDeviceCommandBufferInheritanceFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 295 && VK_KHR_compute_shader_derivatives)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR(
        (VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 294 && VK_NV_compute_shader_derivatives)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV) {
    cleanup_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
        (VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 295 && VK_KHR_compute_shader_derivatives)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR(
        (VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
        (VkPhysicalDeviceConditionalRenderingFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_conservative_rasterization)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
        (VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV) {
    cleanup_VkPhysicalDeviceCooperativeMatrix2FeaturesNV(
        (VkPhysicalDeviceCooperativeMatrix2FeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceCooperativeMatrix2PropertiesNV(
        (VkPhysicalDeviceCooperativeMatrix2PropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceCooperativeMatrixFeaturesKHR(
        (VkPhysicalDeviceCooperativeMatrixFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV) {
    cleanup_VkPhysicalDeviceCooperativeMatrixFeaturesNV(
        (VkPhysicalDeviceCooperativeMatrixFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceCooperativeMatrixPropertiesKHR(
        (VkPhysicalDeviceCooperativeMatrixPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceCooperativeMatrixPropertiesNV(
        (VkPhysicalDeviceCooperativeMatrixPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV) {
    cleanup_VkPhysicalDeviceCooperativeVectorFeaturesNV(
        (VkPhysicalDeviceCooperativeVectorFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceCooperativeVectorPropertiesNV(
        (VkPhysicalDeviceCooperativeVectorPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV) {
    cleanup_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(
        (VkPhysicalDeviceCopyMemoryIndirectFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(
        (VkPhysicalDeviceCopyMemoryIndirectPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_corner_sampled_image)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV) {
    cleanup_VkPhysicalDeviceCornerSampledImageFeaturesNV(
        (VkPhysicalDeviceCornerSampledImageFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV) {
    cleanup_VkPhysicalDeviceCoverageReductionModeFeaturesNV(
        (VkPhysicalDeviceCoverageReductionModeFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_clamp)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM) {
    cleanup_VkPhysicalDeviceCubicClampFeaturesQCOM(
        (VkPhysicalDeviceCubicClampFeaturesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM) {
    cleanup_VkPhysicalDeviceCubicWeightsFeaturesQCOM(
        (VkPhysicalDeviceCubicWeightsFeaturesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV) {
    cleanup_VkPhysicalDeviceCudaKernelLaunchFeaturesNV(
        (VkPhysicalDeviceCudaKernelLaunchFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceCudaKernelLaunchPropertiesNV(
        (VkPhysicalDeviceCudaKernelLaunchPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
        (VkPhysicalDeviceCustomBorderColorFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
        (VkPhysicalDeviceCustomBorderColorPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DATA_GRAPH_FEATURES_ARM) {
    cleanup_VkPhysicalDeviceDataGraphFeaturesARM(
        (VkPhysicalDeviceDataGraphFeaturesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 99 && VK_NV_dedicated_allocation_image_aliasing)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV) {
    cleanup_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
        (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceDepthBiasControlFeaturesEXT(
        (VkPhysicalDeviceDepthBiasControlFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceDepthClampControlFeaturesEXT(
        (VkPhysicalDeviceDepthClampControlFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 304 && VK_EXT_depth_clamp_zero_one)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
        (VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 305 && VK_KHR_depth_clamp_zero_one)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceDepthClampZeroOneFeaturesKHR(
        (VkPhysicalDeviceDepthClampZeroOneFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceDepthClipControlFeaturesEXT(
        (VkPhysicalDeviceDepthClipControlFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
        (VkPhysicalDeviceDepthClipEnableFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES) {
    cleanup_VkPhysicalDeviceDepthStencilResolveProperties(
        (VkPhysicalDeviceDepthStencilResolveProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 130 && VK_KHR_depth_stencil_resolve)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
        (VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(
        (VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceDescriptorBufferFeaturesEXT(
        (VkPhysicalDeviceDescriptorBufferFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceDescriptorBufferPropertiesEXT(
        (VkPhysicalDeviceDescriptorBufferPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_TENSOR_FEATURES_ARM) {
    cleanup_VkPhysicalDeviceDescriptorBufferTensorFeaturesARM(
        (VkPhysicalDeviceDescriptorBufferTensorFeaturesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_TENSOR_PROPERTIES_ARM) {
    cleanup_VkPhysicalDeviceDescriptorBufferTensorPropertiesARM(
        (VkPhysicalDeviceDescriptorBufferTensorPropertiesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES) {
    cleanup_VkPhysicalDeviceDescriptorIndexingFeatures(
        (VkPhysicalDeviceDescriptorIndexingFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
        (VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES) {
    cleanup_VkPhysicalDeviceDescriptorIndexingProperties(
        (VkPhysicalDeviceDescriptorIndexingProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
        (VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 263 && VK_NV_descriptor_pool_overallocation)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV) {
    cleanup_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV(
        (VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE) {
    cleanup_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(
        (VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV) {
    cleanup_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(
        (VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT(
        (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV) {
    cleanup_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
        (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT(
        (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
        (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
        (VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV) {
    cleanup_VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
        (VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_EXT_discard_rectangles)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
        (VkPhysicalDeviceDiscardRectanglePropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV) {
    cleanup_VkPhysicalDeviceDisplacementMicromapFeaturesNV(
        (VkPhysicalDeviceDisplacementMicromapFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceDisplacementMicromapPropertiesNV(
        (VkPhysicalDeviceDisplacementMicromapPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES) {
    cleanup_VkPhysicalDeviceDriverProperties((VkPhysicalDeviceDriverProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 87 && VK_KHR_driver_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceDriverPropertiesKHR((VkPhysicalDeviceDriverPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 130 && VK_KHR_driver_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceDriverPropertiesKHR((VkPhysicalDeviceDriverPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_physical_device_drm)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceDrmPropertiesEXT((VkPhysicalDeviceDrmPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES) {
    cleanup_VkPhysicalDeviceDynamicRenderingFeatures(
        (VkPhysicalDeviceDynamicRenderingFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceDynamicRenderingFeaturesKHR(
        (VkPhysicalDeviceDynamicRenderingFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES) {
    cleanup_VkPhysicalDeviceDynamicRenderingLocalReadFeatures(
        (VkPhysicalDeviceDynamicRenderingLocalReadFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(
        (VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 251 && VK_EXT_dynamic_rendering_unused_attachments)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(
        (VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV) {
    cleanup_VkPhysicalDeviceExclusiveScissorFeaturesNV(
        (VkPhysicalDeviceExclusiveScissorFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 176 && VK_EXT_extended_dynamic_state2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
        (VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(
        (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(
        (VkPhysicalDeviceExtendedDynamicState3PropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 145 && VK_EXT_extended_dynamic_state)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
        (VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 267 && VK_NV_extended_sparse_address_space)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV) {
    cleanup_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(
        (VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 267 && VK_NV_extended_sparse_address_space)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV(
        (VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO) {
    cleanup_VkPhysicalDeviceExternalBufferInfo((VkPhysicalDeviceExternalBufferInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_COMPUTE_QUEUE_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceExternalComputeQueuePropertiesNV(
        (VkPhysicalDeviceExternalComputeQueuePropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO) {
    cleanup_VkPhysicalDeviceExternalFenceInfo((VkPhysicalDeviceExternalFenceInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID) {
    cleanup_VkPhysicalDeviceExternalFormatResolveFeaturesANDROID(
        (VkPhysicalDeviceExternalFormatResolveFeaturesANDROID const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID) {
    cleanup_VkPhysicalDeviceExternalFormatResolvePropertiesANDROID(
        (VkPhysicalDeviceExternalFormatResolvePropertiesANDROID const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO) {
    cleanup_VkPhysicalDeviceExternalImageFormatInfo(
        (VkPhysicalDeviceExternalImageFormatInfo const *)pData);
    return;
  }
#endif

#if (VK_EXT_external_memory_host)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
        (VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV) {
    cleanup_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(
        (VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCI_BUF_FEATURES_NV) {
    cleanup_VkPhysicalDeviceExternalMemorySciBufFeaturesNV(
        (VkPhysicalDeviceExternalMemorySciBufFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX) {
    cleanup_VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX(
        (VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_2_FEATURES_NV) {
    cleanup_VkPhysicalDeviceExternalSciSync2FeaturesNV(
        (VkPhysicalDeviceExternalSciSync2FeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_FEATURES_NV) {
    cleanup_VkPhysicalDeviceExternalSciSyncFeaturesNV(
        (VkPhysicalDeviceExternalSciSyncFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO) {
    cleanup_VkPhysicalDeviceExternalSemaphoreInfo(
        (VkPhysicalDeviceExternalSemaphoreInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_TENSOR_INFO_ARM) {
    cleanup_VkPhysicalDeviceExternalTensorInfoARM(
        (VkPhysicalDeviceExternalTensorInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceFaultFeaturesEXT((VkPhysicalDeviceFaultFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2) {
    cleanup_VkPhysicalDeviceFeatures2((VkPhysicalDeviceFeatures2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 95 && VK_HEADER_VERSION <= 114 && VK_KHR_shader_float16_int8)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceFloat16Int8FeaturesKHR(
        (VkPhysicalDeviceFloat16Int8FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES) {
    cleanup_VkPhysicalDeviceFloatControlsProperties(
        (VkPhysicalDeviceFloatControlsProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 95 && VK_HEADER_VERSION <= 115 && VK_KHR_shader_float_controls)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceFloatControlsPropertiesKHR(
        (VkPhysicalDeviceFloatControlsPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float_controls)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceFloatControlsPropertiesKHR(
        (VkPhysicalDeviceFloatControlsPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 316 && VK_ARM_format_pack)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FORMAT_PACK_FEATURES_ARM) {
    cleanup_VkPhysicalDeviceFormatPackFeaturesARM(
        (VkPhysicalDeviceFormatPackFeaturesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
        (VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
        (VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
        (VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_LAYERED_FEATURES_VALVE) {
    cleanup_VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE(
        (VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_LAYERED_PROPERTIES_VALVE) {
    cleanup_VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE(
        (VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT(
        (VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM) {
    cleanup_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
        (VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT(
        (VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM) {
    cleanup_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
        (VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
        (VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(
        (VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 214 && VK_NV_fragment_shader_barycentric)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV) {
    cleanup_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
        (VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(
        (VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 110 && VK_EXT_fragment_shader_interlock)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
        (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV) {
    cleanup_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
        (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
        (VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceFragmentShadingRateFeaturesKHR(
        (VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR) {
    cleanup_VkPhysicalDeviceFragmentShadingRateKHR(
        (VkPhysicalDeviceFragmentShadingRateKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceFragmentShadingRatePropertiesKHR(
        (VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 264 && VK_EXT_frame_boundary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceFrameBoundaryFeaturesEXT(
        (VkPhysicalDeviceFrameBoundaryFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES) {
    cleanup_VkPhysicalDeviceGlobalPriorityQueryFeatures(
        (VkPhysicalDeviceGlobalPriorityQueryFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 180 && VK_HEADER_VERSION <= 203 && VK_EXT_global_priority_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
        (VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
        (VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(
        (VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(
        (VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES) {
    cleanup_VkPhysicalDeviceGroupProperties((VkPhysicalDeviceGroupProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 301 && VK_HUAWEI_hdr_vivid)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI) {
    cleanup_VkPhysicalDeviceHdrVividFeaturesHUAWEI(
        (VkPhysicalDeviceHdrVividFeaturesHUAWEI const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES) {
    cleanup_VkPhysicalDeviceHostImageCopyFeatures(
        (VkPhysicalDeviceHostImageCopyFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceHostImageCopyFeaturesEXT(
        (VkPhysicalDeviceHostImageCopyFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES) {
    cleanup_VkPhysicalDeviceHostImageCopyProperties(
        (VkPhysicalDeviceHostImageCopyProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceHostImageCopyPropertiesEXT(
        (VkPhysicalDeviceHostImageCopyPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES) {
    cleanup_VkPhysicalDeviceHostQueryResetFeatures(
        (VkPhysicalDeviceHostQueryResetFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 130 && VK_EXT_host_query_reset)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceHostQueryResetFeaturesEXT(
        (VkPhysicalDeviceHostQueryResetFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES) {
    cleanup_VkPhysicalDeviceIDProperties((VkPhysicalDeviceIDProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 211 && VK_EXT_image_2d_view_of_3d)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(
        (VkPhysicalDeviceImage2DViewOf3DFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA) {
    cleanup_VkPhysicalDeviceImageAlignmentControlFeaturesMESA(
        (VkPhysicalDeviceImageAlignmentControlFeaturesMESA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA) {
    cleanup_VkPhysicalDeviceImageAlignmentControlPropertiesMESA(
        (VkPhysicalDeviceImageAlignmentControlPropertiesMESA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceImageCompressionControlFeaturesEXT(
        (VkPhysicalDeviceImageCompressionControlFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control_swapchain)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
        (VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 87 && VK_EXT_image_drm_format_modifier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT) {
    cleanup_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
        (VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_image_drm_format_modifier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT) {
    cleanup_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
        (VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2) {
    cleanup_VkPhysicalDeviceImageFormatInfo2((VkPhysicalDeviceImageFormatInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM) {
    cleanup_VkPhysicalDeviceImageProcessing2FeaturesQCOM(
        (VkPhysicalDeviceImageProcessing2FeaturesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM) {
    cleanup_VkPhysicalDeviceImageProcessing2PropertiesQCOM(
        (VkPhysicalDeviceImageProcessing2PropertiesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM) {
    cleanup_VkPhysicalDeviceImageProcessingFeaturesQCOM(
        (VkPhysicalDeviceImageProcessingFeaturesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM) {
    cleanup_VkPhysicalDeviceImageProcessingPropertiesQCOM(
        (VkPhysicalDeviceImageProcessingPropertiesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES) {
    cleanup_VkPhysicalDeviceImageRobustnessFeatures(
        (VkPhysicalDeviceImageRobustnessFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 148 && VK_HEADER_VERSION <= 203 && VK_EXT_image_robustness)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceImageRobustnessFeaturesEXT(
        (VkPhysicalDeviceImageRobustnessFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_image_sliced_view_of_3d)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(
        (VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT) {
    cleanup_VkPhysicalDeviceImageViewImageFormatInfoEXT(
        (VkPhysicalDeviceImageViewImageFormatInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceImageViewMinLodFeaturesEXT(
        (VkPhysicalDeviceImageViewMinLodFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES) {
    cleanup_VkPhysicalDeviceImagelessFramebufferFeatures(
        (VkPhysicalDeviceImagelessFramebufferFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
        (VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES) {
    cleanup_VkPhysicalDeviceIndexTypeUint8Features(
        (VkPhysicalDeviceIndexTypeUint8Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_index_type_uint8)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
        (VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_index_type_uint8)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesKHR(
        (VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV) {
    cleanup_VkPhysicalDeviceInheritedViewportScissorFeaturesNV(
        (VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES) {
    cleanup_VkPhysicalDeviceInlineUniformBlockFeatures(
        (VkPhysicalDeviceInlineUniformBlockFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
        (VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES) {
    cleanup_VkPhysicalDeviceInlineUniformBlockProperties(
        (VkPhysicalDeviceInlineUniformBlockProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
        (VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 185 && VK_HUAWEI_invocation_mask)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI) {
    cleanup_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(
        (VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceLayeredApiPropertiesKHR(
        (VkPhysicalDeviceLayeredApiPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR) {
    cleanup_VkPhysicalDeviceLayeredApiPropertiesListKHR(
        (VkPhysicalDeviceLayeredApiPropertiesListKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceLayeredApiVulkanPropertiesKHR(
        (VkPhysicalDeviceLayeredApiVulkanPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 264 && VK_MSFT_layered_driver)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT) {
    cleanup_VkPhysicalDeviceLayeredDriverPropertiesMSFT(
        (VkPhysicalDeviceLayeredDriverPropertiesMSFT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 227 && VK_EXT_legacy_dithering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceLegacyDitheringFeaturesEXT(
        (VkPhysicalDeviceLegacyDitheringFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 284 && VK_EXT_legacy_vertex_attributes)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT(
        (VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 284 && VK_EXT_legacy_vertex_attributes)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT(
        (VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES) {
    cleanup_VkPhysicalDeviceLineRasterizationFeatures(
        (VkPhysicalDeviceLineRasterizationFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceLineRasterizationFeaturesEXT(
        (VkPhysicalDeviceLineRasterizationFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceLineRasterizationFeaturesKHR(
        (VkPhysicalDeviceLineRasterizationFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES) {
    cleanup_VkPhysicalDeviceLineRasterizationProperties(
        (VkPhysicalDeviceLineRasterizationProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceLineRasterizationPropertiesEXT(
        (VkPhysicalDeviceLineRasterizationPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceLineRasterizationPropertiesKHR(
        (VkPhysicalDeviceLineRasterizationPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 203 && VK_NV_linear_color_attachment)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV) {
    cleanup_VkPhysicalDeviceLinearColorAttachmentFeaturesNV(
        (VkPhysicalDeviceLinearColorAttachmentFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES) {
    cleanup_VkPhysicalDeviceMaintenance3Properties(
        (VkPhysicalDeviceMaintenance3Properties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES) {
    cleanup_VkPhysicalDeviceMaintenance4Features(
        (VkPhysicalDeviceMaintenance4Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceMaintenance4FeaturesKHR(
        (VkPhysicalDeviceMaintenance4FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES) {
    cleanup_VkPhysicalDeviceMaintenance4Properties(
        (VkPhysicalDeviceMaintenance4Properties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceMaintenance4PropertiesKHR(
        (VkPhysicalDeviceMaintenance4PropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES) {
    cleanup_VkPhysicalDeviceMaintenance5Features(
        (VkPhysicalDeviceMaintenance5Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceMaintenance5FeaturesKHR(
        (VkPhysicalDeviceMaintenance5FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES) {
    cleanup_VkPhysicalDeviceMaintenance5Properties(
        (VkPhysicalDeviceMaintenance5Properties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceMaintenance5PropertiesKHR(
        (VkPhysicalDeviceMaintenance5PropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES) {
    cleanup_VkPhysicalDeviceMaintenance6Features(
        (VkPhysicalDeviceMaintenance6Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceMaintenance6FeaturesKHR(
        (VkPhysicalDeviceMaintenance6FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES) {
    cleanup_VkPhysicalDeviceMaintenance6Properties(
        (VkPhysicalDeviceMaintenance6Properties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceMaintenance6PropertiesKHR(
        (VkPhysicalDeviceMaintenance6PropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceMaintenance7FeaturesKHR(
        (VkPhysicalDeviceMaintenance7FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceMaintenance7PropertiesKHR(
        (VkPhysicalDeviceMaintenance7PropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 305 && VK_KHR_maintenance8)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_8_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceMaintenance8FeaturesKHR(
        (VkPhysicalDeviceMaintenance8FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_9_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceMaintenance9FeaturesKHR(
        (VkPhysicalDeviceMaintenance9FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_9_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceMaintenance9PropertiesKHR(
        (VkPhysicalDeviceMaintenance9PropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceMapMemoryPlacedFeaturesEXT(
        (VkPhysicalDeviceMapMemoryPlacedFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceMapMemoryPlacedPropertiesEXT(
        (VkPhysicalDeviceMapMemoryPlacedPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_memory_budget)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceMemoryBudgetPropertiesEXT(
        (VkPhysicalDeviceMemoryBudgetPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV) {
    cleanup_VkPhysicalDeviceMemoryDecompressionFeaturesNV(
        (VkPhysicalDeviceMemoryDecompressionFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceMemoryDecompressionPropertiesNV(
        (VkPhysicalDeviceMemoryDecompressionPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceMemoryPriorityFeaturesEXT(
        (VkPhysicalDeviceMemoryPriorityFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2) {
    cleanup_VkPhysicalDeviceMemoryProperties2((VkPhysicalDeviceMemoryProperties2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceMeshShaderFeaturesEXT(
        (VkPhysicalDeviceMeshShaderFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV) {
    cleanup_VkPhysicalDeviceMeshShaderFeaturesNV(
        (VkPhysicalDeviceMeshShaderFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceMeshShaderPropertiesEXT(
        (VkPhysicalDeviceMeshShaderPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceMeshShaderPropertiesNV(
        (VkPhysicalDeviceMeshShaderPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceMultiDrawFeaturesEXT(
        (VkPhysicalDeviceMultiDrawFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceMultiDrawPropertiesEXT(
        (VkPhysicalDeviceMultiDrawPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(
        (VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES) {
    cleanup_VkPhysicalDeviceMultiviewFeatures((VkPhysicalDeviceMultiviewFeatures const *)pData);
    return;
  }
#endif

#if (VK_NVX_multiview_per_view_attributes)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX) {
    cleanup_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
        (VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_QCOM_multiview_per_view_render_areas)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM) {
    cleanup_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(
        (VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 236 && VK_QCOM_multiview_per_view_viewports)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM) {
    cleanup_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(
        (VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES) {
    cleanup_VkPhysicalDeviceMultiviewProperties((VkPhysicalDeviceMultiviewProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(
        (VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE) {
    cleanup_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
        (VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 267 && VK_EXT_nested_command_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceNestedCommandBufferFeaturesEXT(
        (VkPhysicalDeviceNestedCommandBufferFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 267 && VK_EXT_nested_command_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceNestedCommandBufferPropertiesEXT(
        (VkPhysicalDeviceNestedCommandBufferPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_non_seamless_cube_map)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(
        (VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceOpacityMicromapFeaturesEXT(
        (VkPhysicalDeviceOpacityMicromapFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceOpacityMicromapPropertiesEXT(
        (VkPhysicalDeviceOpacityMicromapPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV) {
    cleanup_VkPhysicalDeviceOpticalFlowFeaturesNV(
        (VkPhysicalDeviceOpticalFlowFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceOpticalFlowPropertiesNV(
        (VkPhysicalDeviceOpticalFlowPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 95 && VK_EXT_pci_bus_info)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT) {
    cleanup_VkPhysicalDevicePCIBusInfoPropertiesEXT(
        (VkPhysicalDevicePCIBusInfoPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 96 && VK_EXT_pci_bus_info)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT) {
    cleanup_VkPhysicalDevicePCIBusInfoPropertiesEXT(
        (VkPhysicalDevicePCIBusInfoPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 191 && VK_EXT_pageable_device_local_memory)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT) {
    cleanup_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(
        (VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_FEATURES_NV) {
    cleanup_VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV(
        (VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_PROPERTIES_NV) {
    cleanup_VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV(
        (VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_NV_per_stage_descriptor_set)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV) {
    cleanup_VkPhysicalDevicePerStageDescriptorSetFeaturesNV(
        (VkPhysicalDevicePerStageDescriptorSetFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR) {
    cleanup_VkPhysicalDevicePerformanceQueryFeaturesKHR(
        (VkPhysicalDevicePerformanceQueryFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR) {
    cleanup_VkPhysicalDevicePerformanceQueryPropertiesKHR(
        (VkPhysicalDevicePerformanceQueryPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR) {
    cleanup_VkPhysicalDevicePipelineBinaryFeaturesKHR(
        (VkPhysicalDevicePipelineBinaryFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR) {
    cleanup_VkPhysicalDevicePipelineBinaryPropertiesKHR(
        (VkPhysicalDevicePipelineBinaryPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES) {
    cleanup_VkPhysicalDevicePipelineCreationCacheControlFeatures(
        (VkPhysicalDevicePipelineCreationCacheControlFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_cache_control)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT) {
    cleanup_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
        (VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR) {
    cleanup_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
        (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 240 && VK_EXT_pipeline_library_group_handles)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT) {
    cleanup_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(
        (VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 305 && VK_ARM_pipeline_opacity_micromap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_OPACITY_MICROMAP_FEATURES_ARM) {
    cleanup_VkPhysicalDevicePipelineOpacityMicromapFeaturesARM(
        (VkPhysicalDevicePipelineOpacityMicromapFeaturesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT) {
    cleanup_VkPhysicalDevicePipelinePropertiesFeaturesEXT(
        (VkPhysicalDevicePipelinePropertiesFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES) {
    cleanup_VkPhysicalDevicePipelineProtectedAccessFeatures(
        (VkPhysicalDevicePipelineProtectedAccessFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_protected_access)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT) {
    cleanup_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
        (VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES) {
    cleanup_VkPhysicalDevicePipelineRobustnessFeatures(
        (VkPhysicalDevicePipelineRobustnessFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT) {
    cleanup_VkPhysicalDevicePipelineRobustnessFeaturesEXT(
        (VkPhysicalDevicePipelineRobustnessFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES) {
    cleanup_VkPhysicalDevicePipelineRobustnessProperties(
        (VkPhysicalDevicePipelineRobustnessProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT) {
    cleanup_VkPhysicalDevicePipelineRobustnessPropertiesEXT(
        (VkPhysicalDevicePipelineRobustnessPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES) {
    cleanup_VkPhysicalDevicePointClippingProperties(
        (VkPhysicalDevicePointClippingProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR) {
    cleanup_VkPhysicalDevicePortabilitySubsetFeaturesKHR(
        (VkPhysicalDevicePortabilitySubsetFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR) {
    cleanup_VkPhysicalDevicePortabilitySubsetPropertiesKHR(
        (VkPhysicalDevicePortabilitySubsetPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_present_barrier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV) {
    cleanup_VkPhysicalDevicePresentBarrierFeaturesNV(
        (VkPhysicalDevicePresentBarrierFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_id2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_2_FEATURES_KHR) {
    cleanup_VkPhysicalDevicePresentId2FeaturesKHR(
        (VkPhysicalDevicePresentId2FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 185 && VK_KHR_present_id)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR) {
    cleanup_VkPhysicalDevicePresentIdFeaturesKHR(
        (VkPhysicalDevicePresentIdFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 308 && VK_NV_present_metering && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_METERING_FEATURES_NV) {
    cleanup_VkPhysicalDevicePresentMeteringFeaturesNV(
        (VkPhysicalDevicePresentMeteringFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 297 && VK_EXT_present_mode_fifo_latest_ready)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT) {
    cleanup_VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT(
        (VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_2_FEATURES_KHR) {
    cleanup_VkPhysicalDevicePresentWait2FeaturesKHR(
        (VkPhysicalDevicePresentWait2FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 185 && VK_KHR_present_wait)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR) {
    cleanup_VkPhysicalDevicePresentWaitFeaturesKHR(
        (VkPhysicalDevicePresentWaitFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID) {
    cleanup_VkPhysicalDevicePresentationPropertiesANDROID(
        (VkPhysicalDevicePresentationPropertiesANDROID const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 190 && VK_EXT_primitive_topology_list_restart)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT) {
    cleanup_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
        (VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_primitives_generated_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT) {
    cleanup_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(
        (VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES) {
    cleanup_VkPhysicalDevicePrivateDataFeatures((VkPhysicalDevicePrivateDataFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT) {
    cleanup_VkPhysicalDevicePrivateDataFeaturesEXT(
        (VkPhysicalDevicePrivateDataFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2) {
    cleanup_VkPhysicalDeviceProperties2((VkPhysicalDeviceProperties2 const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES) {
    cleanup_VkPhysicalDeviceProtectedMemoryFeatures(
        (VkPhysicalDeviceProtectedMemoryFeatures const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES) {
    cleanup_VkPhysicalDeviceProtectedMemoryProperties(
        (VkPhysicalDeviceProtectedMemoryProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceProvokingVertexFeaturesEXT(
        (VkPhysicalDeviceProvokingVertexFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceProvokingVertexPropertiesEXT(
        (VkPhysicalDeviceProvokingVertexPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES) {
    cleanup_VkPhysicalDevicePushDescriptorProperties(
        (VkPhysicalDevicePushDescriptorProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 302 && VK_KHR_push_descriptor)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR) {
    cleanup_VkPhysicalDevicePushDescriptorPropertiesKHR(
        (VkPhysicalDevicePushDescriptorPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_QUEUE_FAMILY_DATA_GRAPH_PROCESSING_ENGINE_INFO_ARM) {
    cleanup_VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM(
        (VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 195 && VK_EXT_rgba10x6_formats)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(
        (VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 200 && VK_HEADER_VERSION <= 224 &&                                       \
     VK_ARM_rasterization_order_attachment_access)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM) {
    cleanup_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(
        (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_EXT_rasterization_order_attachment_access)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(
        (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 279 && VK_NV_raw_access_chains)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV) {
    cleanup_VkPhysicalDeviceRawAccessChainsFeaturesNV(
        (VkPhysicalDeviceRawAccessChainsFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceRayQueryFeaturesKHR((VkPhysicalDeviceRayQueryFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceRayTracingFeaturesKHR(
        (VkPhysicalDeviceRayTracingFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV) {
    cleanup_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(
        (VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(
        (VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_LINEAR_SWEPT_SPHERES_FEATURES_NV) {
    cleanup_VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV(
        (VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 213 && VK_KHR_ray_tracing_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(
        (VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV) {
    cleanup_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(
        (VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
        (VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
        (VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 249 && VK_KHR_ray_tracing_position_fetch)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(
        (VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceRayTracingPropertiesKHR(
        (VkPhysicalDeviceRayTracingPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceRayTracingPropertiesNV(
        (VkPhysicalDeviceRayTracingPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 280 && VK_NV_ray_tracing_validation)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV) {
    cleanup_VkPhysicalDeviceRayTracingValidationFeaturesNV(
        (VkPhysicalDeviceRayTracingValidationFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAYTRACING_PROPERTIES_NVX) {
    cleanup_VkPhysicalDeviceRaytracingPropertiesNVX(
        (VkPhysicalDeviceRaytracingPropertiesNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 270 && VK_IMG_relaxed_line_rasterization)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG) {
    cleanup_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG(
        (VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM) {
    cleanup_VkPhysicalDeviceRenderPassStripedFeaturesARM(
        (VkPhysicalDeviceRenderPassStripedFeaturesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM) {
    cleanup_VkPhysicalDeviceRenderPassStripedPropertiesARM(
        (VkPhysicalDeviceRenderPassStripedPropertiesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV) {
    cleanup_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
        (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 313 && VK_EXT_robustness2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceRobustness2FeaturesEXT(
        (VkPhysicalDeviceRobustness2FeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 314 && VK_KHR_robustness2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceRobustness2FeaturesKHR(
        (VkPhysicalDeviceRobustness2FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 313 && VK_EXT_robustness2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceRobustness2PropertiesEXT(
        (VkPhysicalDeviceRobustness2PropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 314 && VK_KHR_robustness2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceRobustness2PropertiesKHR(
        (VkPhysicalDeviceRobustness2PropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_EXT_sample_locations)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceSampleLocationsPropertiesEXT(
        (VkPhysicalDeviceSampleLocationsPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES) {
    cleanup_VkPhysicalDeviceSamplerFilterMinmaxProperties(
        (VkPhysicalDeviceSamplerFilterMinmaxProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_sampler_filter_minmax)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
        (VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES) {
    cleanup_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
        (VkPhysicalDeviceSamplerYcbcrConversionFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES) {
    cleanup_VkPhysicalDeviceScalarBlockLayoutFeatures(
        (VkPhysicalDeviceScalarBlockLayoutFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 93 && VK_HEADER_VERSION <= 130 && VK_EXT_scalar_block_layout)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
        (VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM) {
    cleanup_VkPhysicalDeviceSchedulingControlsFeaturesARM(
        (VkPhysicalDeviceSchedulingControlsFeaturesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM) {
    cleanup_VkPhysicalDeviceSchedulingControlsPropertiesARM(
        (VkPhysicalDeviceSchedulingControlsPropertiesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES) {
    cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
        (VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
        (VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 278 && VK_NV_shader_atomic_float16_vector)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV) {
    cleanup_VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(
        (VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 185 && VK_EXT_shader_atomic_float2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(
        (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 148 && VK_EXT_shader_atomic_float)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
        (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES) {
    cleanup_VkPhysicalDeviceShaderAtomicInt64Features(
        (VkPhysicalDeviceShaderAtomicInt64Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_atomic_int64)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
        (VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 311 && VK_KHR_shader_bfloat16)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_BFLOAT16_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderBfloat16FeaturesKHR(
        (VkPhysicalDeviceShaderBfloat16FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 124 && VK_KHR_shader_clock)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderClockFeaturesKHR(
        (VkPhysicalDeviceShaderClockFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 231 && VK_ARM_shader_core_builtins)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM) {
    cleanup_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(
        (VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 231 && VK_HEADER_VERSION <= 231 && VK_ARM_shader_core_builtins)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM) {
    cleanup_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
        (VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 232 && VK_ARM_shader_core_builtins)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM) {
    cleanup_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
        (VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD) {
    cleanup_VkPhysicalDeviceShaderCoreProperties2AMD(
        (VkPhysicalDeviceShaderCoreProperties2AMD const *)pData);
    return;
  }
#endif

#if (VK_AMD_shader_core_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD) {
    cleanup_VkPhysicalDeviceShaderCorePropertiesAMD(
        (VkPhysicalDeviceShaderCorePropertiesAMD const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_ARM_shader_core_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM) {
    cleanup_VkPhysicalDeviceShaderCorePropertiesARM(
        (VkPhysicalDeviceShaderCorePropertiesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES) {
    cleanup_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(
        (VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 113 && VK_HEADER_VERSION <= 203 &&                                       \
     VK_EXT_shader_demote_to_helper_invocation)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
        (VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 105 && VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES) {
    cleanup_VkPhysicalDeviceShaderDrawParameterFeatures(
        (VkPhysicalDeviceShaderDrawParameterFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 106 && VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES) {
    cleanup_VkPhysicalDeviceShaderDrawParametersFeatures(
        (VkPhysicalDeviceShaderDrawParametersFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 215 && VK_AMD_shader_early_and_late_fragment_tests)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD) {
    cleanup_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(
        (VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 214 && VK_HEADER_VERSION <= 214 &&                                       \
     VK_AMD_shader_early_and_late_fragment_tests)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT(
        (VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&             \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX) {
    cleanup_VkPhysicalDeviceShaderEnqueueFeaturesAMDX(
        (VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX) {
    cleanup_VkPhysicalDeviceShaderEnqueueFeaturesAMDX(
        (VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&             \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX) {
    cleanup_VkPhysicalDeviceShaderEnqueuePropertiesAMDX(
        (VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX) {
    cleanup_VkPhysicalDeviceShaderEnqueuePropertiesAMDX(
        (VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES) {
    cleanup_VkPhysicalDeviceShaderExpectAssumeFeatures(
        (VkPhysicalDeviceShaderExpectAssumeFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_expect_assume)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR(
        (VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES) {
    cleanup_VkPhysicalDeviceShaderFloat16Int8Features(
        (VkPhysicalDeviceShaderFloat16Int8Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 115 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float16_int8)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
        (VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_EXT_shader_float8)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT8_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceShaderFloat8FeaturesEXT(
        (VkPhysicalDeviceShaderFloat8FeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES) {
    cleanup_VkPhysicalDeviceShaderFloatControls2Features(
        (VkPhysicalDeviceShaderFloatControls2Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_float_controls2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderFloatControls2FeaturesKHR(
        (VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 155 && VK_EXT_shader_image_atomic_int64)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
        (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shader_image_footprint)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV) {
    cleanup_VkPhysicalDeviceShaderImageFootprintFeaturesNV(
        (VkPhysicalDeviceShaderImageFootprintFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES) {
    cleanup_VkPhysicalDeviceShaderIntegerDotProductFeatures(
        (VkPhysicalDeviceShaderIntegerDotProductFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 190 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_integer_dot_product)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
        (VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES) {
    cleanup_VkPhysicalDeviceShaderIntegerDotProductProperties(
        (VkPhysicalDeviceShaderIntegerDotProductProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 190 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_integer_dot_product)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
        (VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 115 && VK_INTEL_shader_integer_functions2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL) {
    cleanup_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
        (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 114 && VK_INTEL_shader_integer_functions2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS2_FEATURES_INTEL) {
    cleanup_VkPhysicalDeviceShaderIntegerFunctions2INTEL(
        (VkPhysicalDeviceShaderIntegerFunctions2INTEL const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_KHR_shader_maximal_reconvergence)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(
        (VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(
        (VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(
        (VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_object)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceShaderObjectFeaturesEXT(
        (VkPhysicalDeviceShaderObjectFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_object)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceShaderObjectPropertiesEXT(
        (VkPhysicalDeviceShaderObjectPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_KHR_shader_quad_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderQuadControlFeaturesKHR(
        (VkPhysicalDeviceShaderQuadControlFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 288 && VK_KHR_shader_relaxed_extended_instruction)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(
        (VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 286 && VK_EXT_shader_replicated_composites)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT(
        (VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV) {
    cleanup_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
        (VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
        (VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES) {
    cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
        (VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 123 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_subgroup_extended_types)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
        (VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES) {
    cleanup_VkPhysicalDeviceShaderSubgroupRotateFeatures(
        (VkPhysicalDeviceShaderSubgroupRotateFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_subgroup_rotate)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR(
        (VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 180 && VK_KHR_shader_subgroup_uniform_control_flow)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
        (VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES) {
    cleanup_VkPhysicalDeviceShaderTerminateInvocationFeatures(
        (VkPhysicalDeviceShaderTerminateInvocationFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 158 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_terminate_invocation)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
        (VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_tile_image)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceShaderTileImageFeaturesEXT(
        (VkPhysicalDeviceShaderTileImageFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_tile_image)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceShaderTileImagePropertiesEXT(
        (VkPhysicalDeviceShaderTileImagePropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV) {
    cleanup_VkPhysicalDeviceShadingRateImageFeaturesNV(
        (VkPhysicalDeviceShadingRateImageFeaturesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV) {
    cleanup_VkPhysicalDeviceShadingRateImagePropertiesNV(
        (VkPhysicalDeviceShadingRateImagePropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2) {
    cleanup_VkPhysicalDeviceSparseImageFormatInfo2(
        (VkPhysicalDeviceSparseImageFormatInfo2 const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES) {
    cleanup_VkPhysicalDeviceSubgroupProperties((VkPhysicalDeviceSubgroupProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES) {
    cleanup_VkPhysicalDeviceSubgroupSizeControlFeatures(
        (VkPhysicalDeviceSubgroupSizeControlFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 118 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
        (VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES) {
    cleanup_VkPhysicalDeviceSubgroupSizeControlProperties(
        (VkPhysicalDeviceSubgroupSizeControlProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
        (VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(
        (VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI) {
    cleanup_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(
        (VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI) {
    cleanup_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(
        (VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *)pData);
    return;
  }
#endif

#if (VK_KHR_get_surface_capabilities2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR) {
    cleanup_VkPhysicalDeviceSurfaceInfo2KHR((VkPhysicalDeviceSurfaceInfo2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(
        (VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES) {
    cleanup_VkPhysicalDeviceSynchronization2Features(
        (VkPhysicalDeviceSynchronization2Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceSynchronization2FeaturesKHR(
        (VkPhysicalDeviceSynchronization2FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TENSOR_FEATURES_ARM) {
    cleanup_VkPhysicalDeviceTensorFeaturesARM((VkPhysicalDeviceTensorFeaturesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TENSOR_PROPERTIES_ARM) {
    cleanup_VkPhysicalDeviceTensorPropertiesARM((VkPhysicalDeviceTensorPropertiesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
        (VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES) {
    cleanup_VkPhysicalDeviceTexelBufferAlignmentProperties(
        (VkPhysicalDeviceTexelBufferAlignmentProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 113 && VK_HEADER_VERSION <= 203 && VK_EXT_texel_buffer_alignment)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
        (VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES) {
    cleanup_VkPhysicalDeviceTextureCompressionASTCHDRFeatures(
        (VkPhysicalDeviceTextureCompressionASTCHDRFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 203 && VK_EXT_texture_compression_astc_hdr)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
        (VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_MEMORY_HEAP_FEATURES_QCOM) {
    cleanup_VkPhysicalDeviceTileMemoryHeapFeaturesQCOM(
        (VkPhysicalDeviceTileMemoryHeapFeaturesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_MEMORY_HEAP_PROPERTIES_QCOM) {
    cleanup_VkPhysicalDeviceTileMemoryHeapPropertiesQCOM(
        (VkPhysicalDeviceTileMemoryHeapPropertiesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM) {
    cleanup_VkPhysicalDeviceTilePropertiesFeaturesQCOM(
        (VkPhysicalDeviceTilePropertiesFeaturesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_SHADING_FEATURES_QCOM) {
    cleanup_VkPhysicalDeviceTileShadingFeaturesQCOM(
        (VkPhysicalDeviceTileShadingFeaturesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_SHADING_PROPERTIES_QCOM) {
    cleanup_VkPhysicalDeviceTileShadingPropertiesQCOM(
        (VkPhysicalDeviceTileShadingPropertiesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES) {
    cleanup_VkPhysicalDeviceTimelineSemaphoreFeatures(
        (VkPhysicalDeviceTimelineSemaphoreFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
        (VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES) {
    cleanup_VkPhysicalDeviceTimelineSemaphoreProperties(
        (VkPhysicalDeviceTimelineSemaphoreProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
        (VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES) {
    cleanup_VkPhysicalDeviceToolProperties((VkPhysicalDeviceToolProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 130 && VK_HEADER_VERSION <= 203 && VK_EXT_tooling_info)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceToolPropertiesEXT((VkPhysicalDeviceToolPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
        (VkPhysicalDeviceTransformFeedbackFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
        (VkPhysicalDeviceTransformFeedbackPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_unified_image_layouts)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFIED_IMAGE_LAYOUTS_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR(
        (VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES) {
    cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
        (VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 108 && VK_HEADER_VERSION <= 130 && VK_KHR_uniform_buffer_standard_layout)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
        (VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 105 && VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES) {
    cleanup_VkPhysicalDeviceVariablePointerFeatures(
        (VkPhysicalDeviceVariablePointerFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 106 && VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES) {
    cleanup_VkPhysicalDeviceVariablePointersFeatures(
        (VkPhysicalDeviceVariablePointersFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES) {
    cleanup_VkPhysicalDeviceVertexAttributeDivisorFeatures(
        (VkPhysicalDeviceVertexAttributeDivisorFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
        (VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(
        (VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES) {
    cleanup_VkPhysicalDeviceVertexAttributeDivisorProperties(
        (VkPhysicalDeviceVertexAttributeDivisorProperties const *)pData);
    return;
  }
#endif

#if (VK_EXT_vertex_attribute_divisor)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT) {
    cleanup_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
        (VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR) {
    cleanup_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(
        (VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_EXT_vertex_attribute_robustness)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT(
        (VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(
        (VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_DECODE_VP9_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceVideoDecodeVP9FeaturesKHR(
        (VkPhysicalDeviceVideoDecodeVP9FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceVideoEncodeAV1FeaturesKHR(
        (VkPhysicalDeviceVideoEncodeAV1FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR) {
    cleanup_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR(
        (VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR(
        (VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR) {
    cleanup_VkPhysicalDeviceVideoFormatInfoKHR((VkPhysicalDeviceVideoFormatInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR) {
    cleanup_VkPhysicalDeviceVideoFormatInfoKHR((VkPhysicalDeviceVideoFormatInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceVideoMaintenance1FeaturesKHR(
        (VkPhysicalDeviceVideoMaintenance1FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_2_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceVideoMaintenance2FeaturesKHR(
        (VkPhysicalDeviceVideoMaintenance2FeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES) {
    cleanup_VkPhysicalDeviceVulkan11Features((VkPhysicalDeviceVulkan11Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES) {
    cleanup_VkPhysicalDeviceVulkan11Properties((VkPhysicalDeviceVulkan11Properties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES) {
    cleanup_VkPhysicalDeviceVulkan12Features((VkPhysicalDeviceVulkan12Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES) {
    cleanup_VkPhysicalDeviceVulkan12Properties((VkPhysicalDeviceVulkan12Properties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES) {
    cleanup_VkPhysicalDeviceVulkan13Features((VkPhysicalDeviceVulkan13Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES) {
    cleanup_VkPhysicalDeviceVulkan13Properties((VkPhysicalDeviceVulkan13Properties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES) {
    cleanup_VkPhysicalDeviceVulkan14Features((VkPhysicalDeviceVulkan14Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES) {
    cleanup_VkPhysicalDeviceVulkan14Properties((VkPhysicalDeviceVulkan14Properties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES) {
    cleanup_VkPhysicalDeviceVulkanMemoryModelFeatures(
        (VkPhysicalDeviceVulkanMemoryModelFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 97 && VK_KHR_vulkan_memory_model &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
        (VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 118 && VK_HEADER_VERSION <= 130 && VK_KHR_vulkan_memory_model) ||        \
    (VK_HEADER_VERSION >= 98 && VK_HEADER_VERSION <= 117 && VK_KHR_vulkan_memory_model &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
        (VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_SC_1_0_FEATURES) {
    cleanup_VkPhysicalDeviceVulkanSC10Features((VkPhysicalDeviceVulkanSC10Features const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_SC_1_0_PROPERTIES) {
    cleanup_VkPhysicalDeviceVulkanSC10Properties(
        (VkPhysicalDeviceVulkanSC10Properties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 168 && VK_KHR_workgroup_memory_explicit_layout)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
        (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_EXT_ycbcr_2plane_444_formats)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
        (VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_ycbcr_degamma)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM) {
    cleanup_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM(
        (VkPhysicalDeviceYcbcrDegammaFeaturesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 102 && VK_EXT_ycbcr_image_arrays)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
        (VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 315 && VK_EXT_zero_initialize_device_memory)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_DEVICE_MEMORY_FEATURES_EXT) {
    cleanup_VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT(
        (VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES) {
    cleanup_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(
        (VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 168 && VK_HEADER_VERSION <= 203 &&                                       \
     VK_KHR_zero_initialize_workgroup_memory)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR) {
    cleanup_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
        (VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR) {
    cleanup_VkPipelineBinaryCreateInfoKHR((VkPipelineBinaryCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR) {
    cleanup_VkPipelineBinaryDataInfoKHR((VkPipelineBinaryDataInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR) {
    cleanup_VkPipelineBinaryHandlesInfoKHR((VkPipelineBinaryHandlesInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR) {
    cleanup_VkPipelineBinaryInfoKHR((VkPipelineBinaryInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR) {
    cleanup_VkPipelineBinaryKeyKHR((VkPipelineBinaryKeyKHR const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION <= 240
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO) {
    cleanup_VkPipelineCacheCreateInfo((VkPipelineCacheCreateInfo const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION >= 241
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO) {
    cleanup_VkPipelineCacheCreateInfo((VkPipelineCacheCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_EXT_blend_operation_advanced)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT) {
    cleanup_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
        (VkPipelineColorBlendAdvancedStateCreateInfoEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO) {
    cleanup_VkPipelineColorBlendStateCreateInfo((VkPipelineColorBlendStateCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT) {
    cleanup_VkPipelineColorWriteCreateInfoEXT((VkPipelineColorWriteCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD) {
    cleanup_VkPipelineCompilerControlCreateInfoAMD(
        (VkPipelineCompilerControlCreateInfoAMD const *)pData);
    return;
  }
#endif

#if (VK_NV_framebuffer_mixed_samples)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV) {
    cleanup_VkPipelineCoverageModulationStateCreateInfoNV(
        (VkPipelineCoverageModulationStateCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV) {
    cleanup_VkPipelineCoverageReductionStateCreateInfoNV(
        (VkPipelineCoverageReductionStateCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_NV_fragment_coverage_to_color)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV) {
    cleanup_VkPipelineCoverageToColorStateCreateInfoNV(
        (VkPipelineCoverageToColorStateCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO) {
    cleanup_VkPipelineCreateFlags2CreateInfo((VkPipelineCreateFlags2CreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR) {
    cleanup_VkPipelineCreateFlags2CreateInfoKHR((VkPipelineCreateFlags2CreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR) {
    cleanup_VkPipelineCreateInfoKHR((VkPipelineCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO) {
    cleanup_VkPipelineCreationFeedbackCreateInfo(
        (VkPipelineCreationFeedbackCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_feedback)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT) {
    cleanup_VkPipelineCreationFeedbackCreateInfoEXT(
        (VkPipelineCreationFeedbackCreateInfoEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO) {
    cleanup_VkPipelineDepthStencilStateCreateInfo(
        (VkPipelineDepthStencilStateCreateInfo const *)pData);
    return;
  }

#if (VK_EXT_discard_rectangles)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT) {
    cleanup_VkPipelineDiscardRectangleStateCreateInfoEXT(
        (VkPipelineDiscardRectangleStateCreateInfoEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO) {
    cleanup_VkPipelineDynamicStateCreateInfo((VkPipelineDynamicStateCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR) {
    cleanup_VkPipelineExecutableInfoKHR((VkPipelineExecutableInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR) {
    cleanup_VkPipelineExecutableInternalRepresentationKHR(
        (VkPipelineExecutableInternalRepresentationKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR) {
    cleanup_VkPipelineExecutablePropertiesKHR((VkPipelineExecutablePropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR) {
    cleanup_VkPipelineExecutableStatisticKHR((VkPipelineExecutableStatisticKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_DENSITY_MAP_LAYERED_CREATE_INFO_VALVE) {
    cleanup_VkPipelineFragmentDensityMapLayeredCreateInfoVALVE(
        (VkPipelineFragmentDensityMapLayeredCreateInfoVALVE const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV) {
    cleanup_VkPipelineFragmentShadingRateEnumStateCreateInfoNV(
        (VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR) {
    cleanup_VkPipelineFragmentShadingRateStateCreateInfoKHR(
        (VkPipelineFragmentShadingRateStateCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV) {
    cleanup_VkPipelineIndirectDeviceAddressInfoNV(
        (VkPipelineIndirectDeviceAddressInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR) {
    cleanup_VkPipelineInfoKHR((VkPipelineInfoKHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO) {
    cleanup_VkPipelineInputAssemblyStateCreateInfo(
        (VkPipelineInputAssemblyStateCreateInfo const *)pData);
    return;
  }
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO) {
    cleanup_VkPipelineLayoutCreateInfo((VkPipelineLayoutCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 162 && VK_KHR_pipeline_library) ||                                       \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_pipeline_library &&            \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR) {
    cleanup_VkPipelineLibraryCreateInfoKHR((VkPipelineLibraryCreateInfoKHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO) {
    cleanup_VkPipelineMultisampleStateCreateInfo(
        (VkPipelineMultisampleStateCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_OFFLINE_CREATE_INFO) {
    cleanup_VkPipelineOfflineCreateInfo((VkPipelineOfflineCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_POOL_SIZE) {
    cleanup_VkPipelinePoolSize((VkPipelinePoolSize const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT) {
    cleanup_VkPipelinePropertiesIdentifierEXT((VkPipelinePropertiesIdentifierEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_conservative_rasterization)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT) {
    cleanup_VkPipelineRasterizationConservativeStateCreateInfoEXT(
        (VkPipelineRasterizationConservativeStateCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT) {
    cleanup_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
        (VkPipelineRasterizationDepthClipStateCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO) {
    cleanup_VkPipelineRasterizationLineStateCreateInfo(
        (VkPipelineRasterizationLineStateCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT) {
    cleanup_VkPipelineRasterizationLineStateCreateInfoEXT(
        (VkPipelineRasterizationLineStateCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR) {
    cleanup_VkPipelineRasterizationLineStateCreateInfoKHR(
        (VkPipelineRasterizationLineStateCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT) {
    cleanup_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
        (VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO) {
    cleanup_VkPipelineRasterizationStateCreateInfo(
        (VkPipelineRasterizationStateCreateInfo const *)pData);
    return;
  }

#if (VK_AMD_rasterization_order)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD) {
    cleanup_VkPipelineRasterizationStateRasterizationOrderAMD(
        (VkPipelineRasterizationStateRasterizationOrderAMD const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT) {
    cleanup_VkPipelineRasterizationStateStreamCreateInfoEXT(
        (VkPipelineRasterizationStateStreamCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO) {
    cleanup_VkPipelineRenderingCreateInfo((VkPipelineRenderingCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR) {
    cleanup_VkPipelineRenderingCreateInfoKHR((VkPipelineRenderingCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV) {
    cleanup_VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
        (VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO) {
    cleanup_VkPipelineRobustnessCreateInfo((VkPipelineRobustnessCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT) {
    cleanup_VkPipelineRobustnessCreateInfoEXT((VkPipelineRobustnessCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_sample_locations)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT) {
    cleanup_VkPipelineSampleLocationsStateCreateInfoEXT(
        (VkPipelineSampleLocationsStateCreateInfoEXT const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION <= 240
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO) {
    cleanup_VkPipelineShaderStageCreateInfo((VkPipelineShaderStageCreateInfo const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION >= 241
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO) {
    cleanup_VkPipelineShaderStageCreateInfo((VkPipelineShaderStageCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT) {
    cleanup_VkPipelineShaderStageModuleIdentifierCreateInfoEXT(
        (VkPipelineShaderStageModuleIdentifierCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX) {
    cleanup_VkPipelineShaderStageNodeCreateInfoAMDX(
        (VkPipelineShaderStageNodeCreateInfoAMDX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO) {
    cleanup_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(
        (VkPipelineShaderStageRequiredSubgroupSizeCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT) {
    cleanup_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
        (VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO) {
    cleanup_VkPipelineTessellationDomainOriginStateCreateInfo(
        (VkPipelineTessellationDomainOriginStateCreateInfo const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO) {
    cleanup_VkPipelineTessellationStateCreateInfo(
        (VkPipelineTessellationStateCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO) {
    cleanup_VkPipelineVertexInputDivisorStateCreateInfo(
        (VkPipelineVertexInputDivisorStateCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT) {
    cleanup_VkPipelineVertexInputDivisorStateCreateInfoEXT(
        (VkPipelineVertexInputDivisorStateCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR) {
    cleanup_VkPipelineVertexInputDivisorStateCreateInfoKHR(
        (VkPipelineVertexInputDivisorStateCreateInfoKHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO) {
    cleanup_VkPipelineVertexInputStateCreateInfo(
        (VkPipelineVertexInputStateCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV) {
    cleanup_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
        (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT) {
    cleanup_VkPipelineViewportDepthClampControlCreateInfoEXT(
        (VkPipelineViewportDepthClampControlCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT) {
    cleanup_VkPipelineViewportDepthClipControlCreateInfoEXT(
        (VkPipelineViewportDepthClipControlCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV) {
    cleanup_VkPipelineViewportExclusiveScissorStateCreateInfoNV(
        (VkPipelineViewportExclusiveScissorStateCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV) {
    cleanup_VkPipelineViewportShadingRateImageStateCreateInfoNV(
        (VkPipelineViewportShadingRateImageStateCreateInfoNV const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO) {
    cleanup_VkPipelineViewportStateCreateInfo((VkPipelineViewportStateCreateInfo const *)pData);
    return;
  }

#if (VK_NV_viewport_swizzle)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV) {
    cleanup_VkPipelineViewportSwizzleStateCreateInfoNV(
        (VkPipelineViewportSwizzleStateCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_NV_clip_space_w_scaling)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV) {
    cleanup_VkPipelineViewportWScalingStateCreateInfoNV(
        (VkPipelineViewportWScalingStateCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 105 && VK_GGP_frame_token)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP) {
    cleanup_VkPresentFrameTokenGGP((VkPresentFrameTokenGGP const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_id2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PRESENT_ID_2_KHR) {
    cleanup_VkPresentId2KHR((VkPresentId2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 185 && VK_KHR_present_id)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PRESENT_ID_KHR) {
    cleanup_VkPresentIdKHR((VkPresentIdKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 140 && VK_KHR_swapchain)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PRESENT_INFO_KHR) {
    cleanup_VkPresentInfoKHR((VkPresentInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_KHR_incremental_present)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR) {
    cleanup_VkPresentRegionsKHR((VkPresentRegionsKHR const *)pData);
    return;
  }
#endif

#if (VK_GOOGLE_display_timing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE) {
    cleanup_VkPresentTimesInfoGOOGLE((VkPresentTimesInfoGOOGLE const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PRESENT_WAIT_2_INFO_KHR) {
    cleanup_VkPresentWait2InfoKHR((VkPresentWait2InfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO) {
    cleanup_VkPrivateDataSlotCreateInfo((VkPrivateDataSlotCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT) {
    cleanup_VkPrivateDataSlotCreateInfoEXT((VkPrivateDataSlotCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO) {
    cleanup_VkProtectedSubmitInfo((VkProtectedSubmitInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO) {
    cleanup_VkPushConstantsInfo((VkPushConstantsInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR) {
    cleanup_VkPushConstantsInfoKHR((VkPushConstantsInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO) {
    cleanup_VkPushDescriptorSetInfo((VkPushDescriptorSetInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR) {
    cleanup_VkPushDescriptorSetInfoKHR((VkPushDescriptorSetInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO) {
    cleanup_VkPushDescriptorSetWithTemplateInfo((VkPushDescriptorSetWithTemplateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 275 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor) ||                                                                    \
    (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 274 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor && VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR) {
    cleanup_VkPushDescriptorSetWithTemplateInfoKHR(
        (VkPushDescriptorSetWithTemplateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 242 && VK_NV_low_latency)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV) {
    cleanup_VkQueryLowLatencySupportNV((VkQueryLowLatencySupportNV const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO) {
    cleanup_VkQueryPoolCreateInfo((VkQueryPoolCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 134 && VK_INTEL_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL) {
    cleanup_VkQueryPoolCreateInfoINTEL((VkQueryPoolCreateInfoINTEL const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR) {
    cleanup_VkQueryPoolPerformanceCreateInfoKHR((VkQueryPoolPerformanceCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL) {
    cleanup_VkQueryPoolPerformanceQueryCreateInfoINTEL(
        (VkQueryPoolPerformanceQueryCreateInfoINTEL const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR) {
    cleanup_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR(
        (VkQueryPoolVideoEncodeFeedbackCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV) {
    cleanup_VkQueueFamilyCheckpointProperties2NV(
        (VkQueueFamilyCheckpointProperties2NV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_device_diagnostic_checkpoints &&                            \
     (VK_VERSION_1_3 || VK_KHR_synchronization2)) ||                                               \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_synchronization2 &&            \
     VK_NV_device_diagnostic_checkpoints) ||                                                       \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV) {
    cleanup_VkQueueFamilyCheckpointProperties2NV(
        (VkQueueFamilyCheckpointProperties2NV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV) {
    cleanup_VkQueueFamilyCheckpointPropertiesNV((VkQueueFamilyCheckpointPropertiesNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_DATA_GRAPH_PROCESSING_ENGINE_PROPERTIES_ARM) {
    cleanup_VkQueueFamilyDataGraphProcessingEnginePropertiesARM(
        (VkQueueFamilyDataGraphProcessingEnginePropertiesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_DATA_GRAPH_PROPERTIES_ARM) {
    cleanup_VkQueueFamilyDataGraphPropertiesARM((VkQueueFamilyDataGraphPropertiesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES) {
    cleanup_VkQueueFamilyGlobalPriorityProperties(
        (VkQueueFamilyGlobalPriorityProperties const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 180 && VK_HEADER_VERSION <= 203 && VK_EXT_global_priority_query)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT) {
    cleanup_VkQueueFamilyGlobalPriorityPropertiesEXT(
        (VkQueueFamilyGlobalPriorityPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR) {
    cleanup_VkQueueFamilyGlobalPriorityPropertiesKHR(
        (VkQueueFamilyGlobalPriorityPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_OWNERSHIP_TRANSFER_PROPERTIES_KHR) {
    cleanup_VkQueueFamilyOwnershipTransferPropertiesKHR(
        (VkQueueFamilyOwnershipTransferPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2) {
    cleanup_VkQueueFamilyProperties2((VkQueueFamilyProperties2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_2_KHR) {
    cleanup_VkQueueFamilyQueryResultStatusProperties2KHR(
        (VkQueueFamilyQueryResultStatusProperties2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_2_KHR) {
    cleanup_VkQueueFamilyQueryResultStatusProperties2KHR(
        (VkQueueFamilyQueryResultStatusProperties2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR) {
    cleanup_VkQueueFamilyQueryResultStatusPropertiesKHR(
        (VkQueueFamilyQueryResultStatusPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR) {
    cleanup_VkQueueFamilyVideoPropertiesKHR((VkQueueFamilyVideoPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure &&                           \
     VK_KHR_ray_tracing_pipeline)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CLUSTER_ACCELERATION_STRUCTURE_CREATE_INFO_NV) {
    cleanup_VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV(
        (VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR) {
    cleanup_VkRayTracingPipelineCreateInfoKHR((VkRayTracingPipelineCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR) {
    cleanup_VkRayTracingPipelineCreateInfoKHR((VkRayTracingPipelineCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV) {
    cleanup_VkRayTracingPipelineCreateInfoNV((VkRayTracingPipelineCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR) {
    cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(
        (VkRayTracingPipelineInterfaceCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR) {
    cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(
        (VkRayTracingPipelineInterfaceCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline) ||                                   \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR) {
    cleanup_VkRayTracingShaderGroupCreateInfoKHR(
        (VkRayTracingShaderGroupCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 134 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV) {
    cleanup_VkRayTracingShaderGroupCreateInfoNV((VkRayTracingShaderGroupCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV) {
    cleanup_VkRayTracingShaderGroupCreateInfoNV((VkRayTracingShaderGroupCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RAYTRACING_PIPELINE_CREATE_INFO_NVX) {
    cleanup_VkRaytracingPipelineCreateInfoNVX((VkRaytracingPipelineCreateInfoNVX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_object_refresh)
  if (pTemp->sType == VK_STRUCTURE_TYPE_REFRESH_OBJECT_LIST_KHR) {
    cleanup_VkRefreshObjectListKHR((VkRefreshObjectListKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR) {
    cleanup_VkReleaseCapturedPipelineDataInfoKHR(
        (VkReleaseCapturedPipelineDataInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT) {
    cleanup_VkReleaseSwapchainImagesInfoEXT((VkReleaseSwapchainImagesInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO) {
    cleanup_VkRenderPassAttachmentBeginInfo((VkRenderPassAttachmentBeginInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR) {
    cleanup_VkRenderPassAttachmentBeginInfoKHR((VkRenderPassAttachmentBeginInfoKHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO) {
    cleanup_VkRenderPassBeginInfo((VkRenderPassBeginInfo const *)pData);
    return;
  }
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO) {
    cleanup_VkRenderPassCreateInfo((VkRenderPassCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2) {
    cleanup_VkRenderPassCreateInfo2((VkRenderPassCreateInfo2 const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR) {
    cleanup_VkRenderPassCreateInfo2KHR((VkRenderPassCreateInfo2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT) {
    cleanup_VkRenderPassCreationControlEXT((VkRenderPassCreationControlEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT) {
    cleanup_VkRenderPassCreationFeedbackCreateInfoEXT(
        (VkRenderPassCreationFeedbackCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 215 && VK_EXT_subpass_merge_feedback)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_INFO_EXT) {
    cleanup_VkRenderPassCreationFeedbackInfoEXT((VkRenderPassCreationFeedbackInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT) {
    cleanup_VkRenderPassFragmentDensityMapCreateInfoEXT(
        (VkRenderPassFragmentDensityMapCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_EXT) {
    cleanup_VkRenderPassFragmentDensityMapOffsetEndInfoEXT(
        (VkRenderPassFragmentDensityMapOffsetEndInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO) {
    cleanup_VkRenderPassInputAttachmentAspectCreateInfo(
        (VkRenderPassInputAttachmentAspectCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO) {
    cleanup_VkRenderPassMultiviewCreateInfo((VkRenderPassMultiviewCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_EXT_sample_locations)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT) {
    cleanup_VkRenderPassSampleLocationsBeginInfoEXT(
        (VkRenderPassSampleLocationsBeginInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM) {
    cleanup_VkRenderPassStripeBeginInfoARM((VkRenderPassStripeBeginInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM) {
    cleanup_VkRenderPassStripeInfoARM((VkRenderPassStripeInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM) {
    cleanup_VkRenderPassStripeSubmitInfoARM((VkRenderPassStripeSubmitInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT) {
    cleanup_VkRenderPassSubpassFeedbackCreateInfoEXT(
        (VkRenderPassSubpassFeedbackCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 215 && VK_EXT_subpass_merge_feedback)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_INFO_EXT) {
    cleanup_VkRenderPassSubpassFeedbackInfoEXT((VkRenderPassSubpassFeedbackInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_TILE_SHADING_CREATE_INFO_QCOM) {
    cleanup_VkRenderPassTileShadingCreateInfoQCOM(
        (VkRenderPassTileShadingCreateInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM) {
    cleanup_VkRenderPassTransformBeginInfoQCOM((VkRenderPassTransformBeginInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_AREA_INFO) {
    cleanup_VkRenderingAreaInfo((VkRenderingAreaInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR) {
    cleanup_VkRenderingAreaInfoKHR((VkRenderingAreaInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO) {
    cleanup_VkRenderingAttachmentInfo((VkRenderingAttachmentInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR) {
    cleanup_VkRenderingAttachmentInfoKHR((VkRenderingAttachmentInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO) {
    cleanup_VkRenderingAttachmentLocationInfo((VkRenderingAttachmentLocationInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR) {
    cleanup_VkRenderingAttachmentLocationInfoKHR(
        (VkRenderingAttachmentLocationInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_END_INFO_EXT) {
    cleanup_VkRenderingEndInfoEXT((VkRenderingEndInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 299 && VK_EXT_fragment_density_map &&                                    \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_EXT_fragment_density_map) ||                                                               \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT) {
    cleanup_VkRenderingFragmentDensityMapAttachmentInfoEXT(
        (VkRenderingFragmentDensityMapAttachmentInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 299 && VK_KHR_fragment_shading_rate &&                                   \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_KHR_fragment_shading_rate) ||                                                              \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR) {
    cleanup_VkRenderingFragmentShadingRateAttachmentInfoKHR(
        (VkRenderingFragmentShadingRateAttachmentInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_INFO) {
    cleanup_VkRenderingInfo((VkRenderingInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_INFO_KHR) {
    cleanup_VkRenderingInfoKHR((VkRenderingInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO) {
    cleanup_VkRenderingInputAttachmentIndexInfo((VkRenderingInputAttachmentIndexInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR) {
    cleanup_VkRenderingInputAttachmentIndexInfoKHR(
        (VkRenderingInputAttachmentIndexInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2) {
    cleanup_VkResolveImageInfo2((VkResolveImageInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR) {
    cleanup_VkResolveImageInfo2KHR((VkResolveImageInfo2KHR const *)pData);
    return;
  }
#endif

#if (VK_EXT_sample_locations)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT) {
    cleanup_VkSampleLocationsInfoEXT((VkSampleLocationsInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM) {
    cleanup_VkSamplerBlockMatchWindowCreateInfoQCOM(
        (VkSamplerBlockMatchWindowCreateInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT) {
    cleanup_VkSamplerBorderColorComponentMappingCreateInfoEXT(
        (VkSamplerBorderColorComponentMappingCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT) {
    cleanup_VkSamplerCaptureDescriptorDataInfoEXT(
        (VkSamplerCaptureDescriptorDataInfoEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO) {
    cleanup_VkSamplerCreateInfo((VkSamplerCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM) {
    cleanup_VkSamplerCubicWeightsCreateInfoQCOM((VkSamplerCubicWeightsCreateInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT) {
    cleanup_VkSamplerCustomBorderColorCreateInfoEXT(
        (VkSamplerCustomBorderColorCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO) {
    cleanup_VkSamplerReductionModeCreateInfo((VkSamplerReductionModeCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_sampler_filter_minmax)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT) {
    cleanup_VkSamplerReductionModeCreateInfoEXT((VkSamplerReductionModeCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO) {
    cleanup_VkSamplerYcbcrConversionCreateInfo((VkSamplerYcbcrConversionCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES) {
    cleanup_VkSamplerYcbcrConversionImageFormatProperties(
        (VkSamplerYcbcrConversionImageFormatProperties const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO) {
    cleanup_VkSamplerYcbcrConversionInfo((VkSamplerYcbcrConversionInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_ycbcr_degamma)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM) {
    cleanup_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(
        (VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SCI_SYNC_ATTRIBUTES_INFO_NV) {
    cleanup_VkSciSyncAttributesInfoNV((VkSciSyncAttributesInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX) {
    cleanup_VkScreenBufferFormatPropertiesQNX((VkScreenBufferFormatPropertiesQNX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX) {
    cleanup_VkScreenBufferPropertiesQNX((VkScreenBufferPropertiesQNX const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX) {
    cleanup_VkScreenSurfaceCreateInfoQNX((VkScreenSurfaceCreateInfoQNX const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO) {
    cleanup_VkSemaphoreCreateInfo((VkSemaphoreCreateInfo const *)pData);
    return;
  }

#if (VK_KHR_external_semaphore_fd)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR) {
    cleanup_VkSemaphoreGetFdInfoKHR((VkSemaphoreGetFdInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_GET_SCI_SYNC_INFO_NV) {
    cleanup_VkSemaphoreGetSciSyncInfoNV((VkSemaphoreGetSciSyncInfoNV const *)pData);
    return;
  }
#endif

#if (VK_KHR_external_semaphore_win32)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR) {
    cleanup_VkSemaphoreGetWin32HandleInfoKHR((VkSemaphoreGetWin32HandleInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA) {
    cleanup_VkSemaphoreGetZirconHandleInfoFUCHSIA(
        (VkSemaphoreGetZirconHandleInfoFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_CREATE_INFO_NV) {
    cleanup_VkSemaphoreSciSyncCreateInfoNV((VkSemaphoreSciSyncCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_SCI_SYNC_POOL_CREATE_INFO_NV) {
    cleanup_VkSemaphoreSciSyncPoolCreateInfoNV((VkSemaphoreSciSyncPoolCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO) {
    cleanup_VkSemaphoreSignalInfo((VkSemaphoreSignalInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR) {
    cleanup_VkSemaphoreSignalInfoKHR((VkSemaphoreSignalInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO) {
    cleanup_VkSemaphoreSubmitInfo((VkSemaphoreSubmitInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR) {
    cleanup_VkSemaphoreSubmitInfoKHR((VkSemaphoreSubmitInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO) {
    cleanup_VkSemaphoreTypeCreateInfo((VkSemaphoreTypeCreateInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR) {
    cleanup_VkSemaphoreTypeCreateInfoKHR((VkSemaphoreTypeCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO) {
    cleanup_VkSemaphoreWaitInfo((VkSemaphoreWaitInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR) {
    cleanup_VkSemaphoreWaitInfoKHR((VkSemaphoreWaitInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_maintenance6 && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT) {
    cleanup_VkSetDescriptorBufferOffsetsInfoEXT((VkSetDescriptorBufferOffsetsInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV) {
    cleanup_VkSetLatencyMarkerInfoNV((VkSetLatencyMarkerInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 308 && VK_NV_present_metering && VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SET_PRESENT_CONFIG_NV) {
    cleanup_VkSetPresentConfigNV((VkSetPresentConfigNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_object)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT) {
    cleanup_VkShaderCreateInfoEXT((VkShaderCreateInfoEXT const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO) {
    cleanup_VkShaderModuleCreateInfo((VkShaderModuleCreateInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT) {
    cleanup_VkShaderModuleIdentifierEXT((VkShaderModuleIdentifierEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_validation_cache)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT) {
    cleanup_VkShaderModuleValidationCacheCreateInfoEXT(
        (VkShaderModuleValidationCacheCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_KHR_shared_presentable_image)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR) {
    cleanup_VkSharedPresentSurfaceCapabilitiesKHR(
        (VkSharedPresentSurfaceCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2) {
    cleanup_VkSparseImageFormatProperties2((VkSparseImageFormatProperties2 const *)pData);
    return;
  }
#endif

#if (VK_VERSION_1_1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2) {
    cleanup_VkSparseImageMemoryRequirements2((VkSparseImageMemoryRequirements2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP) {
    cleanup_VkStreamDescriptorSurfaceCreateInfoGGP(
        (VkStreamDescriptorSurfaceCreateInfoGGP const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBMIT_INFO) {
    cleanup_VkSubmitInfo((VkSubmitInfo const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBMIT_INFO_2) {
    cleanup_VkSubmitInfo2((VkSubmitInfo2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR) {
    cleanup_VkSubmitInfo2KHR((VkSubmitInfo2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO) {
    cleanup_VkSubpassBeginInfo((VkSubpassBeginInfo const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR) {
    cleanup_VkSubpassBeginInfoKHR((VkSubpassBeginInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2) {
    cleanup_VkSubpassDependency2((VkSubpassDependency2 const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR) {
    cleanup_VkSubpassDependency2KHR((VkSubpassDependency2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2) {
    cleanup_VkSubpassDescription2((VkSubpassDescription2 const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR) {
    cleanup_VkSubpassDescription2KHR((VkSubpassDescription2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE) {
    cleanup_VkSubpassDescriptionDepthStencilResolve(
        (VkSubpassDescriptionDepthStencilResolve const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 130 && VK_KHR_depth_stencil_resolve)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR) {
    cleanup_VkSubpassDescriptionDepthStencilResolveKHR(
        (VkSubpassDescriptionDepthStencilResolveKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_END_INFO) {
    cleanup_VkSubpassEndInfo((VkSubpassEndInfo const *)pData);
    return;
  }
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR) {
    cleanup_VkSubpassEndInfoKHR((VkSubpassEndInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM) {
    cleanup_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
        (VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT) {
    cleanup_VkSubpassResolvePerformanceQueryEXT((VkSubpassResolvePerformanceQueryEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI) {
    cleanup_VkSubpassShadingPipelineCreateInfoHUAWEI(
        (VkSubpassShadingPipelineCreateInfoHUAWEI const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE) {
    cleanup_VkSubresourceHostMemcpySize((VkSubresourceHostMemcpySize const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT) {
    cleanup_VkSubresourceHostMemcpySizeEXT((VkSubresourceHostMemcpySizeEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2) {
    cleanup_VkSubresourceLayout2((VkSubresourceLayout2 const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 259 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control) ||                                                          \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 257 && VK_EXT_image_compression_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT) {
    cleanup_VkSubresourceLayout2EXT((VkSubresourceLayout2EXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR) {
    cleanup_VkSubresourceLayout2KHR((VkSubresourceLayout2KHR const *)pData);
    return;
  }
#endif

#if (VK_EXT_display_surface_counter)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT) {
    cleanup_VkSurfaceCapabilities2EXT((VkSurfaceCapabilities2EXT const *)pData);
    return;
  }
#endif

#if (VK_KHR_get_surface_capabilities2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR) {
    cleanup_VkSurfaceCapabilities2KHR((VkSurfaceCapabilities2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT) {
    cleanup_VkSurfaceCapabilitiesFullScreenExclusiveEXT(
        (VkSurfaceCapabilitiesFullScreenExclusiveEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_present_barrier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV) {
    cleanup_VkSurfaceCapabilitiesPresentBarrierNV(
        (VkSurfaceCapabilitiesPresentBarrierNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_id2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_ID_2_KHR) {
    cleanup_VkSurfaceCapabilitiesPresentId2KHR((VkSurfaceCapabilitiesPresentId2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_WAIT_2_KHR) {
    cleanup_VkSurfaceCapabilitiesPresentWait2KHR(
        (VkSurfaceCapabilitiesPresentWait2KHR const *)pData);
    return;
  }
#endif

#if (VK_KHR_get_surface_capabilities2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR) {
    cleanup_VkSurfaceFormat2KHR((VkSurfaceFormat2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT) {
    cleanup_VkSurfaceFullScreenExclusiveInfoEXT((VkSurfaceFullScreenExclusiveInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_full_screen_exclusive && VK_KHR_win32_surface) ||          \
    (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 240 && VK_EXT_full_screen_exclusive)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT) {
    cleanup_VkSurfaceFullScreenExclusiveWin32InfoEXT(
        (VkSurfaceFullScreenExclusiveWin32InfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT) {
    cleanup_VkSurfacePresentModeCompatibilityEXT(
        (VkSurfacePresentModeCompatibilityEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT) {
    cleanup_VkSurfacePresentModeEXT((VkSurfacePresentModeEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT) {
    cleanup_VkSurfacePresentScalingCapabilitiesEXT(
        (VkSurfacePresentScalingCapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 104 && VK_KHR_surface_protected_capabilities)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR) {
    cleanup_VkSurfaceProtectedCapabilitiesKHR((VkSurfaceProtectedCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_EXT_display_control)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT) {
    cleanup_VkSwapchainCounterCreateInfoEXT((VkSwapchainCounterCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 240 && VK_KHR_swapchain)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR) {
    cleanup_VkSwapchainCreateInfoKHR((VkSwapchainCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR) {
    cleanup_VkSwapchainCreateInfoKHR((VkSwapchainCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD) {
    cleanup_VkSwapchainDisplayNativeHdrCreateInfoAMD(
        (VkSwapchainDisplayNativeHdrCreateInfoAMD const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID) {
    cleanup_VkSwapchainImageCreateInfoANDROID((VkSwapchainImageCreateInfoANDROID const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV) {
    cleanup_VkSwapchainLatencyCreateInfoNV((VkSwapchainLatencyCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_present_barrier)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV) {
    cleanup_VkSwapchainPresentBarrierCreateInfoNV(
        (VkSwapchainPresentBarrierCreateInfoNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT) {
    cleanup_VkSwapchainPresentFenceInfoEXT((VkSwapchainPresentFenceInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT) {
    cleanup_VkSwapchainPresentModeInfoEXT((VkSwapchainPresentModeInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT) {
    cleanup_VkSwapchainPresentModesCreateInfoEXT(
        (VkSwapchainPresentModesCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT) {
    cleanup_VkSwapchainPresentScalingCreateInfoEXT(
        (VkSwapchainPresentScalingCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
  if (pTemp->sType == VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA) {
    cleanup_VkSysmemColorSpaceFUCHSIA((VkSysmemColorSpaceFUCHSIA const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TENSOR_CAPTURE_DESCRIPTOR_DATA_INFO_ARM) {
    cleanup_VkTensorCaptureDescriptorDataInfoARM(
        (VkTensorCaptureDescriptorDataInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TENSOR_COPY_ARM) {
    cleanup_VkTensorCopyARM((VkTensorCopyARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TENSOR_CREATE_INFO_ARM) {
    cleanup_VkTensorCreateInfoARM((VkTensorCreateInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TENSOR_DEPENDENCY_INFO_ARM) {
    cleanup_VkTensorDependencyInfoARM((VkTensorDependencyInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TENSOR_DESCRIPTION_ARM) {
    cleanup_VkTensorDescriptionARM((VkTensorDescriptionARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TENSOR_FORMAT_PROPERTIES_ARM) {
    cleanup_VkTensorFormatPropertiesARM((VkTensorFormatPropertiesARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TENSOR_MEMORY_BARRIER_ARM) {
    cleanup_VkTensorMemoryBarrierARM((VkTensorMemoryBarrierARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TENSOR_MEMORY_REQUIREMENTS_INFO_ARM) {
    cleanup_VkTensorMemoryRequirementsInfoARM((VkTensorMemoryRequirementsInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TENSOR_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_ARM) {
    cleanup_VkTensorViewCaptureDescriptorDataInfoARM(
        (VkTensorViewCaptureDescriptorDataInfoARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TENSOR_VIEW_CREATE_INFO_ARM) {
    cleanup_VkTensorViewCreateInfoARM((VkTensorViewCreateInfoARM const *)pData);
    return;
  }
#endif

#if (VK_AMD_texture_gather_bias_lod)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD) {
    cleanup_VkTextureLODGatherFormatPropertiesAMD(
        (VkTextureLODGatherFormatPropertiesAMD const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TILE_MEMORY_BIND_INFO_QCOM) {
    cleanup_VkTileMemoryBindInfoQCOM((VkTileMemoryBindInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TILE_MEMORY_REQUIREMENTS_QCOM) {
    cleanup_VkTileMemoryRequirementsQCOM((VkTileMemoryRequirementsQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap && VK_QCOM_tile_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TILE_MEMORY_SIZE_INFO_QCOM) {
    cleanup_VkTileMemorySizeInfoQCOM((VkTileMemorySizeInfoQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM) {
    cleanup_VkTilePropertiesQCOM((VkTilePropertiesQCOM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO) {
    cleanup_VkTimelineSemaphoreSubmitInfo((VkTimelineSemaphoreSubmitInfo const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
  if (pTemp->sType == VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR) {
    cleanup_VkTimelineSemaphoreSubmitInfoKHR((VkTimelineSemaphoreSubmitInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_EXT_validation_cache)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT) {
    cleanup_VkValidationCacheCreateInfoEXT((VkValidationCacheCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_validation_features)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT) {
    cleanup_VkValidationFeaturesEXT((VkValidationFeaturesEXT const *)pData);
    return;
  }
#endif

#if (VK_EXT_validation_flags)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT) {
    cleanup_VkValidationFlagsEXT((VkValidationFlagsEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_vertex_input_dynamic_state && VK_EXT_shader_object) ||     \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 245 && VK_EXT_vertex_input_dynamic_state)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT) {
    cleanup_VkVertexInputAttributeDescription2EXT(
        (VkVertexInputAttributeDescription2EXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_vertex_input_dynamic_state && VK_EXT_shader_object) ||     \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 245 && VK_EXT_vertex_input_dynamic_state)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT) {
    cleanup_VkVertexInputBindingDescription2EXT((VkVertexInputBindingDescription2EXT const *)pData);
    return;
  }
#endif

#if (VK_NN_vi_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN) {
    cleanup_VkViSurfaceCreateInfoNN((VkViSurfaceCreateInfoNN const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR) {
    cleanup_VkVideoBeginCodingInfoKHR((VkVideoBeginCodingInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR) {
    cleanup_VkVideoBeginCodingInfoKHR((VkVideoBeginCodingInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR) {
    cleanup_VkVideoBindMemoryKHR((VkVideoBindMemoryKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR) {
    cleanup_VkVideoCapabilitiesKHR((VkVideoCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 208 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR) {
    cleanup_VkVideoCapabilitiesKHR((VkVideoCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR) {
    cleanup_VkVideoCapabilitiesKHR((VkVideoCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR) {
    cleanup_VkVideoCapabilitiesKHR((VkVideoCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR) {
    cleanup_VkVideoCodingControlInfoKHR((VkVideoCodingControlInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR) {
    cleanup_VkVideoDecodeAV1CapabilitiesKHR((VkVideoDecodeAV1CapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR) {
    cleanup_VkVideoDecodeAV1DpbSlotInfoKHR((VkVideoDecodeAV1DpbSlotInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_INLINE_SESSION_PARAMETERS_INFO_KHR) {
    cleanup_VkVideoDecodeAV1InlineSessionParametersInfoKHR(
        (VkVideoDecodeAV1InlineSessionParametersInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR) {
    cleanup_VkVideoDecodeAV1PictureInfoKHR((VkVideoDecodeAV1PictureInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR) {
    cleanup_VkVideoDecodeAV1ProfileInfoKHR((VkVideoDecodeAV1ProfileInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR) {
    cleanup_VkVideoDecodeAV1SessionParametersCreateInfoKHR(
        (VkVideoDecodeAV1SessionParametersCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 207 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR) {
    cleanup_VkVideoDecodeCapabilitiesKHR((VkVideoDecodeCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT) {
    cleanup_VkVideoDecodeH264CapabilitiesEXT((VkVideoDecodeH264CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 210 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT) {
    cleanup_VkVideoDecodeH264CapabilitiesEXT((VkVideoDecodeH264CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT) {
    cleanup_VkVideoDecodeH264CapabilitiesEXT((VkVideoDecodeH264CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT) {
    cleanup_VkVideoDecodeH264CapabilitiesEXT((VkVideoDecodeH264CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR) {
    cleanup_VkVideoDecodeH264CapabilitiesKHR((VkVideoDecodeH264CapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT) {
    cleanup_VkVideoDecodeH264DpbSlotInfoEXT((VkVideoDecodeH264DpbSlotInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR) {
    cleanup_VkVideoDecodeH264DpbSlotInfoKHR((VkVideoDecodeH264DpbSlotInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_INLINE_SESSION_PARAMETERS_INFO_KHR) {
    cleanup_VkVideoDecodeH264InlineSessionParametersInfoKHR(
        (VkVideoDecodeH264InlineSessionParametersInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT) {
    cleanup_VkVideoDecodeH264MvcEXT((VkVideoDecodeH264MvcEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_INFO_EXT) {
    cleanup_VkVideoDecodeH264MvcInfoEXT((VkVideoDecodeH264MvcInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT) {
    cleanup_VkVideoDecodeH264PictureInfoEXT((VkVideoDecodeH264PictureInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT) {
    cleanup_VkVideoDecodeH264PictureInfoEXT((VkVideoDecodeH264PictureInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR) {
    cleanup_VkVideoDecodeH264PictureInfoKHR((VkVideoDecodeH264PictureInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT) {
    cleanup_VkVideoDecodeH264ProfileEXT((VkVideoDecodeH264ProfileEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT) {
    cleanup_VkVideoDecodeH264ProfileEXT((VkVideoDecodeH264ProfileEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_EXT) {
    cleanup_VkVideoDecodeH264ProfileInfoEXT((VkVideoDecodeH264ProfileInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_EXT) {
    cleanup_VkVideoDecodeH264ProfileInfoEXT((VkVideoDecodeH264ProfileInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR) {
    cleanup_VkVideoDecodeH264ProfileInfoKHR((VkVideoDecodeH264ProfileInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT) {
    cleanup_VkVideoDecodeH264SessionCreateInfoEXT(
        (VkVideoDecodeH264SessionCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT) {
    cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(
        (VkVideoDecodeH264SessionParametersAddInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT) {
    cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(
        (VkVideoDecodeH264SessionParametersAddInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR) {
    cleanup_VkVideoDecodeH264SessionParametersAddInfoKHR(
        (VkVideoDecodeH264SessionParametersAddInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT) {
    cleanup_VkVideoDecodeH264SessionParametersCreateInfoEXT(
        (VkVideoDecodeH264SessionParametersCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT) {
    cleanup_VkVideoDecodeH264SessionParametersCreateInfoEXT(
        (VkVideoDecodeH264SessionParametersCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR) {
    cleanup_VkVideoDecodeH264SessionParametersCreateInfoKHR(
        (VkVideoDecodeH264SessionParametersCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT) {
    cleanup_VkVideoDecodeH265CapabilitiesEXT((VkVideoDecodeH265CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 210 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT) {
    cleanup_VkVideoDecodeH265CapabilitiesEXT((VkVideoDecodeH265CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT) {
    cleanup_VkVideoDecodeH265CapabilitiesEXT((VkVideoDecodeH265CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT) {
    cleanup_VkVideoDecodeH265CapabilitiesEXT((VkVideoDecodeH265CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR) {
    cleanup_VkVideoDecodeH265CapabilitiesKHR((VkVideoDecodeH265CapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT) {
    cleanup_VkVideoDecodeH265DpbSlotInfoEXT((VkVideoDecodeH265DpbSlotInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR) {
    cleanup_VkVideoDecodeH265DpbSlotInfoKHR((VkVideoDecodeH265DpbSlotInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_INLINE_SESSION_PARAMETERS_INFO_KHR) {
    cleanup_VkVideoDecodeH265InlineSessionParametersInfoKHR(
        (VkVideoDecodeH265InlineSessionParametersInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT) {
    cleanup_VkVideoDecodeH265PictureInfoEXT((VkVideoDecodeH265PictureInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 235 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT) {
    cleanup_VkVideoDecodeH265PictureInfoEXT((VkVideoDecodeH265PictureInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 236 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT) {
    cleanup_VkVideoDecodeH265PictureInfoEXT((VkVideoDecodeH265PictureInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR) {
    cleanup_VkVideoDecodeH265PictureInfoKHR((VkVideoDecodeH265PictureInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT) {
    cleanup_VkVideoDecodeH265ProfileEXT((VkVideoDecodeH265ProfileEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_EXT) {
    cleanup_VkVideoDecodeH265ProfileInfoEXT((VkVideoDecodeH265ProfileInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR) {
    cleanup_VkVideoDecodeH265ProfileInfoKHR((VkVideoDecodeH265ProfileInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT) {
    cleanup_VkVideoDecodeH265SessionCreateInfoEXT(
        (VkVideoDecodeH265SessionCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT) {
    cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
        (VkVideoDecodeH265SessionParametersAddInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT) {
    cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
        (VkVideoDecodeH265SessionParametersAddInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT) {
    cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
        (VkVideoDecodeH265SessionParametersAddInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR) {
    cleanup_VkVideoDecodeH265SessionParametersAddInfoKHR(
        (VkVideoDecodeH265SessionParametersAddInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT) {
    cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
        (VkVideoDecodeH265SessionParametersCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT) {
    cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
        (VkVideoDecodeH265SessionParametersCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT) {
    cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
        (VkVideoDecodeH265SessionParametersCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR) {
    cleanup_VkVideoDecodeH265SessionParametersCreateInfoKHR(
        (VkVideoDecodeH265SessionParametersCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 210 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR) {
    cleanup_VkVideoDecodeInfoKHR((VkVideoDecodeInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 224 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR) {
    cleanup_VkVideoDecodeInfoKHR((VkVideoDecodeInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR) {
    cleanup_VkVideoDecodeInfoKHR((VkVideoDecodeInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR) {
    cleanup_VkVideoDecodeUsageInfoKHR((VkVideoDecodeUsageInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_VP9_CAPABILITIES_KHR) {
    cleanup_VkVideoDecodeVP9CapabilitiesKHR((VkVideoDecodeVP9CapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_VP9_PICTURE_INFO_KHR) {
    cleanup_VkVideoDecodeVP9PictureInfoKHR((VkVideoDecodeVP9PictureInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_DECODE_VP9_PROFILE_INFO_KHR) {
    cleanup_VkVideoDecodeVP9ProfileInfoKHR((VkVideoDecodeVP9ProfileInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_CAPABILITIES_KHR) {
    cleanup_VkVideoEncodeAV1CapabilitiesKHR((VkVideoEncodeAV1CapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR) {
    cleanup_VkVideoEncodeAV1DpbSlotInfoKHR((VkVideoEncodeAV1DpbSlotInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR) {
    cleanup_VkVideoEncodeAV1GopRemainingFrameInfoKHR(
        (VkVideoEncodeAV1GopRemainingFrameInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR) {
    cleanup_VkVideoEncodeAV1PictureInfoKHR((VkVideoEncodeAV1PictureInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PROFILE_INFO_KHR) {
    cleanup_VkVideoEncodeAV1ProfileInfoKHR((VkVideoEncodeAV1ProfileInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR) {
    cleanup_VkVideoEncodeAV1QualityLevelPropertiesKHR(
        (VkVideoEncodeAV1QualityLevelPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR) {
    cleanup_VkVideoEncodeAV1QuantizationMapCapabilitiesKHR(
        (VkVideoEncodeAV1QuantizationMapCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR) {
    cleanup_VkVideoEncodeAV1RateControlInfoKHR((VkVideoEncodeAV1RateControlInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR) {
    cleanup_VkVideoEncodeAV1RateControlLayerInfoKHR(
        (VkVideoEncodeAV1RateControlLayerInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR) {
    cleanup_VkVideoEncodeAV1SessionCreateInfoKHR(
        (VkVideoEncodeAV1SessionCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR) {
    cleanup_VkVideoEncodeAV1SessionParametersCreateInfoKHR(
        (VkVideoEncodeAV1SessionParametersCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR) {
    cleanup_VkVideoEncodeCapabilitiesKHR((VkVideoEncodeCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR) {
    cleanup_VkVideoEncodeCapabilitiesKHR((VkVideoEncodeCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR) {
    cleanup_VkVideoEncodeCapabilitiesKHR((VkVideoEncodeCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT) {
    cleanup_VkVideoEncodeH264CapabilitiesEXT((VkVideoEncodeH264CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT) {
    cleanup_VkVideoEncodeH264CapabilitiesEXT((VkVideoEncodeH264CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT) {
    cleanup_VkVideoEncodeH264CapabilitiesEXT((VkVideoEncodeH264CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT) {
    cleanup_VkVideoEncodeH264CapabilitiesEXT((VkVideoEncodeH264CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT) {
    cleanup_VkVideoEncodeH264CapabilitiesEXT((VkVideoEncodeH264CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT) {
    cleanup_VkVideoEncodeH264CapabilitiesEXT((VkVideoEncodeH264CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR) {
    cleanup_VkVideoEncodeH264CapabilitiesKHR((VkVideoEncodeH264CapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT((VkVideoEncodeH264DpbSlotInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT((VkVideoEncodeH264DpbSlotInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT((VkVideoEncodeH264DpbSlotInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR) {
    cleanup_VkVideoEncodeH264DpbSlotInfoKHR((VkVideoEncodeH264DpbSlotInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT) {
    cleanup_VkVideoEncodeH264EmitPictureParametersEXT(
        (VkVideoEncodeH264EmitPictureParametersEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_INFO_EXT) {
    cleanup_VkVideoEncodeH264EmitPictureParametersInfoEXT(
        (VkVideoEncodeH264EmitPictureParametersInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_EXT) {
    cleanup_VkVideoEncodeH264GopRemainingFrameInfoEXT(
        (VkVideoEncodeH264GopRemainingFrameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR) {
    cleanup_VkVideoEncodeH264GopRemainingFrameInfoKHR(
        (VkVideoEncodeH264GopRemainingFrameInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT) {
    cleanup_VkVideoEncodeH264NaluSliceEXT((VkVideoEncodeH264NaluSliceEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT) {
    cleanup_VkVideoEncodeH264NaluSliceEXT((VkVideoEncodeH264NaluSliceEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT) {
    cleanup_VkVideoEncodeH264NaluSliceEXT((VkVideoEncodeH264NaluSliceEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT) {
    cleanup_VkVideoEncodeH264NaluSliceInfoEXT((VkVideoEncodeH264NaluSliceInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT) {
    cleanup_VkVideoEncodeH264NaluSliceInfoEXT((VkVideoEncodeH264NaluSliceInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT) {
    cleanup_VkVideoEncodeH264NaluSliceInfoEXT((VkVideoEncodeH264NaluSliceInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR) {
    cleanup_VkVideoEncodeH264NaluSliceInfoKHR((VkVideoEncodeH264NaluSliceInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_EXT) {
    cleanup_VkVideoEncodeH264PictureInfoEXT((VkVideoEncodeH264PictureInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR) {
    cleanup_VkVideoEncodeH264PictureInfoKHR((VkVideoEncodeH264PictureInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT) {
    cleanup_VkVideoEncodeH264ProfileEXT((VkVideoEncodeH264ProfileEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT) {
    cleanup_VkVideoEncodeH264ProfileInfoEXT((VkVideoEncodeH264ProfileInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR) {
    cleanup_VkVideoEncodeH264ProfileInfoKHR((VkVideoEncodeH264ProfileInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_EXT) {
    cleanup_VkVideoEncodeH264QualityLevelPropertiesEXT(
        (VkVideoEncodeH264QualityLevelPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR) {
    cleanup_VkVideoEncodeH264QualityLevelPropertiesKHR(
        (VkVideoEncodeH264QualityLevelPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR) {
    cleanup_VkVideoEncodeH264QuantizationMapCapabilitiesKHR(
        (VkVideoEncodeH264QuantizationMapCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 202 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT) {
    cleanup_VkVideoEncodeH264RateControlInfoEXT((VkVideoEncodeH264RateControlInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT) {
    cleanup_VkVideoEncodeH264RateControlInfoEXT((VkVideoEncodeH264RateControlInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT) {
    cleanup_VkVideoEncodeH264RateControlInfoEXT((VkVideoEncodeH264RateControlInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT) {
    cleanup_VkVideoEncodeH264RateControlInfoEXT((VkVideoEncodeH264RateControlInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT) {
    cleanup_VkVideoEncodeH264RateControlInfoEXT((VkVideoEncodeH264RateControlInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR) {
    cleanup_VkVideoEncodeH264RateControlInfoKHR((VkVideoEncodeH264RateControlInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT) {
    cleanup_VkVideoEncodeH264RateControlLayerInfoEXT(
        (VkVideoEncodeH264RateControlLayerInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT) {
    cleanup_VkVideoEncodeH264RateControlLayerInfoEXT(
        (VkVideoEncodeH264RateControlLayerInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT) {
    cleanup_VkVideoEncodeH264RateControlLayerInfoEXT(
        (VkVideoEncodeH264RateControlLayerInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR) {
    cleanup_VkVideoEncodeH264RateControlLayerInfoKHR(
        (VkVideoEncodeH264RateControlLayerInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_REFERENCE_LISTS_EXT) {
    cleanup_VkVideoEncodeH264ReferenceListsEXT((VkVideoEncodeH264ReferenceListsEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_REFERENCE_LISTS_INFO_EXT) {
    cleanup_VkVideoEncodeH264ReferenceListsInfoEXT(
        (VkVideoEncodeH264ReferenceListsInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT) {
    cleanup_VkVideoEncodeH264SessionCreateInfoEXT(
        (VkVideoEncodeH264SessionCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT) {
    cleanup_VkVideoEncodeH264SessionCreateInfoEXT(
        (VkVideoEncodeH264SessionCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR) {
    cleanup_VkVideoEncodeH264SessionCreateInfoKHR(
        (VkVideoEncodeH264SessionCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT) {
    cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(
        (VkVideoEncodeH264SessionParametersAddInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT) {
    cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(
        (VkVideoEncodeH264SessionParametersAddInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR) {
    cleanup_VkVideoEncodeH264SessionParametersAddInfoKHR(
        (VkVideoEncodeH264SessionParametersAddInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT) {
    cleanup_VkVideoEncodeH264SessionParametersCreateInfoEXT(
        (VkVideoEncodeH264SessionParametersCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT) {
    cleanup_VkVideoEncodeH264SessionParametersCreateInfoEXT(
        (VkVideoEncodeH264SessionParametersCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR) {
    cleanup_VkVideoEncodeH264SessionParametersCreateInfoKHR(
        (VkVideoEncodeH264SessionParametersCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_EXT) {
    cleanup_VkVideoEncodeH264SessionParametersFeedbackInfoEXT(
        (VkVideoEncodeH264SessionParametersFeedbackInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR) {
    cleanup_VkVideoEncodeH264SessionParametersFeedbackInfoKHR(
        (VkVideoEncodeH264SessionParametersFeedbackInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_EXT) {
    cleanup_VkVideoEncodeH264SessionParametersGetInfoEXT(
        (VkVideoEncodeH264SessionParametersGetInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR) {
    cleanup_VkVideoEncodeH264SessionParametersGetInfoKHR(
        (VkVideoEncodeH264SessionParametersGetInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT) {
    cleanup_VkVideoEncodeH264VclFrameInfoEXT((VkVideoEncodeH264VclFrameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT) {
    cleanup_VkVideoEncodeH264VclFrameInfoEXT((VkVideoEncodeH264VclFrameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT) {
    cleanup_VkVideoEncodeH264VclFrameInfoEXT((VkVideoEncodeH264VclFrameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT) {
    cleanup_VkVideoEncodeH264VclFrameInfoEXT((VkVideoEncodeH264VclFrameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT) {
    cleanup_VkVideoEncodeH265CapabilitiesEXT((VkVideoEncodeH265CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT) {
    cleanup_VkVideoEncodeH265CapabilitiesEXT((VkVideoEncodeH265CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT) {
    cleanup_VkVideoEncodeH265CapabilitiesEXT((VkVideoEncodeH265CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT) {
    cleanup_VkVideoEncodeH265CapabilitiesEXT((VkVideoEncodeH265CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT) {
    cleanup_VkVideoEncodeH265CapabilitiesEXT((VkVideoEncodeH265CapabilitiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR) {
    cleanup_VkVideoEncodeH265CapabilitiesKHR((VkVideoEncodeH265CapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT) {
    cleanup_VkVideoEncodeH265DpbSlotInfoEXT((VkVideoEncodeH265DpbSlotInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT) {
    cleanup_VkVideoEncodeH265DpbSlotInfoEXT((VkVideoEncodeH265DpbSlotInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR) {
    cleanup_VkVideoEncodeH265DpbSlotInfoKHR((VkVideoEncodeH265DpbSlotInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_EXT) {
    cleanup_VkVideoEncodeH265EmitPictureParametersEXT(
        (VkVideoEncodeH265EmitPictureParametersEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_INFO_EXT) {
    cleanup_VkVideoEncodeH265EmitPictureParametersInfoEXT(
        (VkVideoEncodeH265EmitPictureParametersInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_EXT) {
    cleanup_VkVideoEncodeH265GopRemainingFrameInfoEXT(
        (VkVideoEncodeH265GopRemainingFrameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR) {
    cleanup_VkVideoEncodeH265GopRemainingFrameInfoKHR(
        (VkVideoEncodeH265GopRemainingFrameInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_EXT) {
    cleanup_VkVideoEncodeH265NaluSliceEXT((VkVideoEncodeH265NaluSliceEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_EXT) {
    cleanup_VkVideoEncodeH265NaluSliceSegmentEXT(
        (VkVideoEncodeH265NaluSliceSegmentEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT) {
    cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
        (VkVideoEncodeH265NaluSliceSegmentInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT) {
    cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
        (VkVideoEncodeH265NaluSliceSegmentInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT) {
    cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
        (VkVideoEncodeH265NaluSliceSegmentInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR) {
    cleanup_VkVideoEncodeH265NaluSliceSegmentInfoKHR(
        (VkVideoEncodeH265NaluSliceSegmentInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_EXT) {
    cleanup_VkVideoEncodeH265PictureInfoEXT((VkVideoEncodeH265PictureInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR) {
    cleanup_VkVideoEncodeH265PictureInfoKHR((VkVideoEncodeH265PictureInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_EXT) {
    cleanup_VkVideoEncodeH265ProfileEXT((VkVideoEncodeH265ProfileEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT) {
    cleanup_VkVideoEncodeH265ProfileInfoEXT((VkVideoEncodeH265ProfileInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR) {
    cleanup_VkVideoEncodeH265ProfileInfoKHR((VkVideoEncodeH265ProfileInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_EXT) {
    cleanup_VkVideoEncodeH265QualityLevelPropertiesEXT(
        (VkVideoEncodeH265QualityLevelPropertiesEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR) {
    cleanup_VkVideoEncodeH265QualityLevelPropertiesKHR(
        (VkVideoEncodeH265QualityLevelPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR) {
    cleanup_VkVideoEncodeH265QuantizationMapCapabilitiesKHR(
        (VkVideoEncodeH265QuantizationMapCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 202 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT) {
    cleanup_VkVideoEncodeH265RateControlInfoEXT((VkVideoEncodeH265RateControlInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT) {
    cleanup_VkVideoEncodeH265RateControlInfoEXT((VkVideoEncodeH265RateControlInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT) {
    cleanup_VkVideoEncodeH265RateControlInfoEXT((VkVideoEncodeH265RateControlInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT) {
    cleanup_VkVideoEncodeH265RateControlInfoEXT((VkVideoEncodeH265RateControlInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT) {
    cleanup_VkVideoEncodeH265RateControlInfoEXT((VkVideoEncodeH265RateControlInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR) {
    cleanup_VkVideoEncodeH265RateControlInfoKHR((VkVideoEncodeH265RateControlInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT) {
    cleanup_VkVideoEncodeH265RateControlLayerInfoEXT(
        (VkVideoEncodeH265RateControlLayerInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT) {
    cleanup_VkVideoEncodeH265RateControlLayerInfoEXT(
        (VkVideoEncodeH265RateControlLayerInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT) {
    cleanup_VkVideoEncodeH265RateControlLayerInfoEXT(
        (VkVideoEncodeH265RateControlLayerInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR) {
    cleanup_VkVideoEncodeH265RateControlLayerInfoKHR(
        (VkVideoEncodeH265RateControlLayerInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_EXT) {
    cleanup_VkVideoEncodeH265ReferenceListsEXT((VkVideoEncodeH265ReferenceListsEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_INFO_EXT) {
    cleanup_VkVideoEncodeH265ReferenceListsInfoEXT(
        (VkVideoEncodeH265ReferenceListsInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT) {
    cleanup_VkVideoEncodeH265SessionCreateInfoEXT(
        (VkVideoEncodeH265SessionCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT) {
    cleanup_VkVideoEncodeH265SessionCreateInfoEXT(
        (VkVideoEncodeH265SessionCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR) {
    cleanup_VkVideoEncodeH265SessionCreateInfoKHR(
        (VkVideoEncodeH265SessionCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT) {
    cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(
        (VkVideoEncodeH265SessionParametersAddInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT) {
    cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(
        (VkVideoEncodeH265SessionParametersAddInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR) {
    cleanup_VkVideoEncodeH265SessionParametersAddInfoKHR(
        (VkVideoEncodeH265SessionParametersAddInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT) {
    cleanup_VkVideoEncodeH265SessionParametersCreateInfoEXT(
        (VkVideoEncodeH265SessionParametersCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT) {
    cleanup_VkVideoEncodeH265SessionParametersCreateInfoEXT(
        (VkVideoEncodeH265SessionParametersCreateInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR) {
    cleanup_VkVideoEncodeH265SessionParametersCreateInfoKHR(
        (VkVideoEncodeH265SessionParametersCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_EXT) {
    cleanup_VkVideoEncodeH265SessionParametersFeedbackInfoEXT(
        (VkVideoEncodeH265SessionParametersFeedbackInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR) {
    cleanup_VkVideoEncodeH265SessionParametersFeedbackInfoKHR(
        (VkVideoEncodeH265SessionParametersFeedbackInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_EXT) {
    cleanup_VkVideoEncodeH265SessionParametersGetInfoEXT(
        (VkVideoEncodeH265SessionParametersGetInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR) {
    cleanup_VkVideoEncodeH265SessionParametersGetInfoKHR(
        (VkVideoEncodeH265SessionParametersGetInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT) {
    cleanup_VkVideoEncodeH265VclFrameInfoEXT((VkVideoEncodeH265VclFrameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT) {
    cleanup_VkVideoEncodeH265VclFrameInfoEXT((VkVideoEncodeH265VclFrameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT) {
    cleanup_VkVideoEncodeH265VclFrameInfoEXT((VkVideoEncodeH265VclFrameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT) {
    cleanup_VkVideoEncodeH265VclFrameInfoEXT((VkVideoEncodeH265VclFrameInfoEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR) {
    cleanup_VkVideoEncodeInfoKHR((VkVideoEncodeInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 210 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR) {
    cleanup_VkVideoEncodeInfoKHR((VkVideoEncodeInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 224 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR) {
    cleanup_VkVideoEncodeInfoKHR((VkVideoEncodeInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR) {
    cleanup_VkVideoEncodeInfoKHR((VkVideoEncodeInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR) {
    cleanup_VkVideoEncodeInfoKHR((VkVideoEncodeInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR) {
    cleanup_VkVideoEncodeInfoKHR((VkVideoEncodeInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR) {
    cleanup_VkVideoEncodeQualityLevelInfoKHR((VkVideoEncodeQualityLevelInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR) {
    cleanup_VkVideoEncodeQualityLevelPropertiesKHR(
        (VkVideoEncodeQualityLevelPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR) {
    cleanup_VkVideoEncodeQuantizationMapCapabilitiesKHR(
        (VkVideoEncodeQuantizationMapCapabilitiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR) {
    cleanup_VkVideoEncodeQuantizationMapInfoKHR((VkVideoEncodeQuantizationMapInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR) {
    cleanup_VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR(
        (VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR) {
    cleanup_VkVideoEncodeRateControlInfoKHR((VkVideoEncodeRateControlInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR) {
    cleanup_VkVideoEncodeRateControlInfoKHR((VkVideoEncodeRateControlInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR) {
    cleanup_VkVideoEncodeRateControlInfoKHR((VkVideoEncodeRateControlInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR) {
    cleanup_VkVideoEncodeRateControlInfoKHR((VkVideoEncodeRateControlInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR) {
    cleanup_VkVideoEncodeRateControlLayerInfoKHR(
        (VkVideoEncodeRateControlLayerInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR) {
    cleanup_VkVideoEncodeRateControlLayerInfoKHR(
        (VkVideoEncodeRateControlLayerInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR) {
    cleanup_VkVideoEncodeRateControlLayerInfoKHR(
        (VkVideoEncodeRateControlLayerInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR) {
    cleanup_VkVideoEncodeSessionParametersFeedbackInfoKHR(
        (VkVideoEncodeSessionParametersFeedbackInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR) {
    cleanup_VkVideoEncodeSessionParametersGetInfoKHR(
        (VkVideoEncodeSessionParametersGetInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR) {
    cleanup_VkVideoEncodeUsageInfoKHR((VkVideoEncodeUsageInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR) {
    cleanup_VkVideoEndCodingInfoKHR((VkVideoEndCodingInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_av1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR) {
    cleanup_VkVideoFormatAV1QuantizationMapPropertiesKHR(
        (VkVideoFormatAV1QuantizationMapPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h265)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR) {
    cleanup_VkVideoFormatH265QuantizationMapPropertiesKHR(
        (VkVideoFormatH265QuantizationMapPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR) {
    cleanup_VkVideoFormatPropertiesKHR((VkVideoFormatPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR) {
    cleanup_VkVideoFormatPropertiesKHR((VkVideoFormatPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR) {
    cleanup_VkVideoFormatQuantizationMapPropertiesKHR(
        (VkVideoFormatQuantizationMapPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR) {
    cleanup_VkVideoGetMemoryPropertiesKHR((VkVideoGetMemoryPropertiesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_maintenance1)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR) {
    cleanup_VkVideoInlineQueryInfoKHR((VkVideoInlineQueryInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR) {
    cleanup_VkVideoPictureResourceInfoKHR((VkVideoPictureResourceInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR) {
    cleanup_VkVideoPictureResourceKHR((VkVideoPictureResourceKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR) {
    cleanup_VkVideoProfileInfoKHR((VkVideoProfileInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_PROFILE_KHR) {
    cleanup_VkVideoProfileKHR((VkVideoProfileKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR) {
    cleanup_VkVideoProfileListInfoKHR((VkVideoProfileListInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_PROFILES_KHR) {
    cleanup_VkVideoProfilesKHR((VkVideoProfilesKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR) {
    cleanup_VkVideoQueueFamilyProperties2KHR((VkVideoQueueFamilyProperties2KHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 229 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR) {
    cleanup_VkVideoReferenceSlotInfoKHR((VkVideoReferenceSlotInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR) {
    cleanup_VkVideoReferenceSlotInfoKHR((VkVideoReferenceSlotInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR) {
    cleanup_VkVideoReferenceSlotKHR((VkVideoReferenceSlotKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR) {
    cleanup_VkVideoSessionCreateInfoKHR((VkVideoSessionCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR) {
    cleanup_VkVideoSessionCreateInfoKHR((VkVideoSessionCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR) {
    cleanup_VkVideoSessionCreateInfoKHR((VkVideoSessionCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR) {
    cleanup_VkVideoSessionCreateInfoKHR((VkVideoSessionCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR) {
    cleanup_VkVideoSessionMemoryRequirementsKHR((VkVideoSessionMemoryRequirementsKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR) {
    cleanup_VkVideoSessionParametersCreateInfoKHR(
        (VkVideoSessionParametersCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR) {
    cleanup_VkVideoSessionParametersCreateInfoKHR(
        (VkVideoSessionParametersCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR) {
    cleanup_VkVideoSessionParametersUpdateInfoKHR(
        (VkVideoSessionParametersUpdateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_KHR_wayland_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR) {
    cleanup_VkWaylandSurfaceCreateInfoKHR((VkWaylandSurfaceCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_KHR_win32_keyed_mutex)
  if (pTemp->sType == VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR) {
    cleanup_VkWin32KeyedMutexAcquireReleaseInfoKHR(
        (VkWin32KeyedMutexAcquireReleaseInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_NV_win32_keyed_mutex)
  if (pTemp->sType == VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV) {
    cleanup_VkWin32KeyedMutexAcquireReleaseInfoNV(
        (VkWin32KeyedMutexAcquireReleaseInfoNV const *)pData);
    return;
  }
#endif

#if (VK_KHR_win32_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR) {
    cleanup_VkWin32SurfaceCreateInfoKHR((VkWin32SurfaceCreateInfoKHR const *)pData);
    return;
  }
#endif

  if (pTemp->sType == VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET) {
    cleanup_VkWriteDescriptorSet((VkWriteDescriptorSet const *)pData);
    return;
  }

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
  if (pTemp->sType == VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR) {
    cleanup_VkWriteDescriptorSetAccelerationStructureKHR(
        (VkWriteDescriptorSetAccelerationStructureKHR const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
  if (pTemp->sType == VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV) {
    cleanup_VkWriteDescriptorSetAccelerationStructureNV(
        (VkWriteDescriptorSetAccelerationStructureNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
  if (pTemp->sType == VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK) {
    cleanup_VkWriteDescriptorSetInlineUniformBlock(
        (VkWriteDescriptorSetInlineUniformBlock const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
  if (pTemp->sType == VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT) {
    cleanup_VkWriteDescriptorSetInlineUniformBlockEXT(
        (VkWriteDescriptorSetInlineUniformBlockEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
  if (pTemp->sType ==
      VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_PARTITIONED_ACCELERATION_STRUCTURE_NV) {
    cleanup_VkWriteDescriptorSetPartitionedAccelerationStructureNV(
        (VkWriteDescriptorSetPartitionedAccelerationStructureNV const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
  if (pTemp->sType == VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_TENSOR_ARM) {
    cleanup_VkWriteDescriptorSetTensorARM((VkWriteDescriptorSetTensorARM const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
  if (pTemp->sType == VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT) {
    cleanup_VkWriteIndirectExecutionSetPipelineEXT(
        (VkWriteIndirectExecutionSetPipelineEXT const *)pData);
    return;
  }
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands && VK_EXT_shader_object)
  if (pTemp->sType == VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT) {
    cleanup_VkWriteIndirectExecutionSetShaderEXT(
        (VkWriteIndirectExecutionSetShaderEXT const *)pData);
    return;
  }
#endif

#if (VK_KHR_xcb_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR) {
    cleanup_VkXcbSurfaceCreateInfoKHR((VkXcbSurfaceCreateInfoKHR const *)pData);
    return;
  }
#endif

#if (VK_KHR_xlib_surface)
  if (pTemp->sType == VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR) {
    cleanup_VkXlibSurfaceCreateInfoKHR((VkXlibSurfaceCreateInfoKHR const *)pData);
    return;
  }
#endif
}

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAabbPositionsKHR(VkAabbPositionsKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
void cleanup_VkAabbPositionsNV(VkAabbPositionsNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureBuildGeometryInfoKHR(
    VkAccelerationStructureBuildGeometryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // ppGeometries
  if (pData->ppGeometries != NULL)
    cleanup_VkAccelerationStructureGeometryKHR(pData->ppGeometries);
  free((void *)pData->ppGeometries);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureBuildGeometryInfoKHR(
    VkAccelerationStructureBuildGeometryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pGeometries - geometryCount
  for (size_t i = 0; i < pData->geometryCount; ++i) {
    cleanup_VkAccelerationStructureGeometryKHR(&pData->pGeometries[i]);
  }
  free((void *)pData->pGeometries);

  // ppGeometries - geometryCount,1
  for (size_t i = 0; i < pData->geometryCount; ++i) {
    for (size_t j = 0; j < 1; ++j) {
      cleanup_VkAccelerationStructureGeometryKHR(&pData->ppGeometries[i][j]);
    }
    free((void *)pData->ppGeometries[i]);
  }
  free((void *)pData->ppGeometries);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureBuildOffsetInfoKHR(
    VkAccelerationStructureBuildOffsetInfoKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureBuildRangeInfoKHR(
    VkAccelerationStructureBuildRangeInfoKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureBuildSizesInfoKHR(
    VkAccelerationStructureBuildSizesInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_descriptor_buffer &&                                       \
     (VK_KHR_acceleration_structure || VK_NV_ray_tracing)) ||                                      \
    (VK_HEADER_VERSION >= 235 && VK_HEADER_VERSION <= 240 && VK_EXT_descriptor_buffer)
void cleanup_VkAccelerationStructureCaptureDescriptorDataInfoEXT(
    VkAccelerationStructureCaptureDescriptorDataInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureCreateGeometryTypeInfoKHR(
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureCreateInfoKHR(
    VkAccelerationStructureCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pGeometryInfos - maxGeometryCount
  for (size_t i = 0; i < pData->maxGeometryCount; ++i) {
    cleanup_VkAccelerationStructureCreateGeometryTypeInfoKHR(&pData->pGeometryInfos[i]);
  }
  free((void *)pData->pGeometryInfos);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureCreateInfoKHR(
    VkAccelerationStructureCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkAccelerationStructureCreateInfoNV(VkAccelerationStructureCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkAccelerationStructureCreateInfoNVX(
    VkAccelerationStructureCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pGeometries - geometryCount
  for (size_t i = 0; i < pData->geometryCount; ++i) {
    cleanup_VkGeometryNVX(&pData->pGeometries[i]);
  }
  free((void *)pData->pGeometries);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureDeviceAddressInfoKHR(
    VkAccelerationStructureDeviceAddressInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureGeometryAabbsDataKHR(
    VkAccelerationStructureGeometryAabbsDataKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureGeometryInstancesDataKHR(
    VkAccelerationStructureGeometryInstancesDataKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureGeometryKHR(VkAccelerationStructureGeometryKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres)
void cleanup_VkAccelerationStructureGeometryLinearSweptSpheresDataNV(
    VkAccelerationStructureGeometryLinearSweptSpheresDataNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkAccelerationStructureGeometryMotionTrianglesDataNV(
    VkAccelerationStructureGeometryMotionTrianglesDataNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres)
void cleanup_VkAccelerationStructureGeometrySpheresDataNV(
    VkAccelerationStructureGeometrySpheresDataNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureGeometryTrianglesDataKHR(
    VkAccelerationStructureGeometryTrianglesDataKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureGeometryTrianglesDataKHR(
    VkAccelerationStructureGeometryTrianglesDataKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkAccelerationStructureInfoNV(VkAccelerationStructureInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pGeometries - geometryCount
  for (size_t i = 0; i < pData->geometryCount; ++i) {
    cleanup_VkGeometryNV(&pData->pGeometries[i]);
  }
  free((void *)pData->pGeometries);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 138 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR const *pData){}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureInstanceKHR(VkAccelerationStructureInstanceKHR const *pData) {
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
void cleanup_VkAccelerationStructureInstanceNV(VkAccelerationStructureInstanceNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkAccelerationStructureMatrixMotionInstanceNV(
    VkAccelerationStructureMatrixMotionInstanceNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureMemoryRequirementsInfoKHR(
    VkAccelerationStructureMemoryRequirementsInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkAccelerationStructureMemoryRequirementsInfoNV(
    VkAccelerationStructureMemoryRequirementsInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkAccelerationStructureMemoryRequirementsInfoNVX(
    VkAccelerationStructureMemoryRequirementsInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkAccelerationStructureMotionInfoNV(VkAccelerationStructureMotionInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkAccelerationStructureMotionInstanceNV(
    VkAccelerationStructureMotionInstanceNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkAccelerationStructureSRTMotionInstanceNV(
    VkAccelerationStructureSRTMotionInstanceNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureTrianglesDisplacementMicromapNV(
    VkAccelerationStructureTrianglesDisplacementMicromapNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pUsageCounts - usageCountsCount
  for (size_t i = 0; i < pData->usageCountsCount; ++i) {
    cleanup_VkMicromapUsageEXT(&pData->pUsageCounts[i]);
  }
  free((void *)pData->pUsageCounts);

  // ppUsageCounts - usageCountsCount,1
  for (size_t i = 0; i < pData->usageCountsCount; ++i) {
    for (size_t j = 0; j < 1; ++j) {
      cleanup_VkMicromapUsageEXT(&pData->ppUsageCounts[i][j]);
    }
    free((void *)pData->ppUsageCounts[i]);
  }
  free((void *)pData->ppUsageCounts);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkAccelerationStructureTrianglesOpacityMicromapEXT(
    VkAccelerationStructureTrianglesOpacityMicromapEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pUsageCounts - usageCountsCount
  for (size_t i = 0; i < pData->usageCountsCount; ++i) {
    cleanup_VkMicromapUsageEXT(&pData->pUsageCounts[i]);
  }
  free((void *)pData->pUsageCounts);

  // ppUsageCounts - usageCountsCount,1
  for (size_t i = 0; i < pData->usageCountsCount; ++i) {
    for (size_t j = 0; j < 1; ++j) {
      cleanup_VkMicromapUsageEXT(&pData->ppUsageCounts[i][j]);
    }
    free((void *)pData->ppUsageCounts[i]);
  }
  free((void *)pData->ppUsageCounts);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkAccelerationStructureVersionInfoKHR(
    VkAccelerationStructureVersionInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVersionData - 2*VK_UUID_SIZE
  free((void *)pData->pVersionData);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkAccelerationStructureVersionKHR(VkAccelerationStructureVersionKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // versionData - 2*VK_UUID_SIZE
  free((void *)pData->versionData);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkAcquireNextImageInfoKHR(VkAcquireNextImageInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkAcquireProfilingLockInfoKHR(VkAcquireProfilingLockInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkAllocationCallbacks(VkAllocationCallbacks const *pData) {
  // pUserData
  free((void *)pData->pUserData);
}

#if (VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling)
void cleanup_VkAmigoProfilingSubmitInfoSEC(VkAmigoProfilingSubmitInfoSEC const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 281 && VK_ANDROID_external_memory_android_hardware_buffer &&             \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer && VK_KHR_format_feature_flags2) ||        \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 &&                                       \
     VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkAndroidHardwareBufferFormatPropertiesANDROID(
    VkAndroidHardwareBufferFormatPropertiesANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve)
void cleanup_VkAndroidHardwareBufferFormatResolvePropertiesANDROID(
    VkAndroidHardwareBufferFormatResolvePropertiesANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkAndroidHardwareBufferPropertiesANDROID(
    VkAndroidHardwareBufferPropertiesANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkAndroidHardwareBufferUsageANDROID(VkAndroidHardwareBufferUsageANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_android_surface)
void cleanup_VkAndroidSurfaceCreateInfoKHR(VkAndroidSurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // window
  free((void *)pData->window);
}
#endif

#if (VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag)
void cleanup_VkAntiLagDataAMD(VkAntiLagDataAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPresentationInfo
  if (pData->pPresentationInfo != NULL)
    cleanup_VkAntiLagPresentationInfoAMD(pData->pPresentationInfo);
  free((void *)pData->pPresentationInfo);
}
#endif

#if (VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag)
void cleanup_VkAntiLagPresentationInfoAMD(VkAntiLagPresentationInfoAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkApplicationInfo(VkApplicationInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pApplicationName - null-terminated
  free((void *)pData->pApplicationName);

  // pEngineName - null-terminated
  free((void *)pData->pEngineName);
}

#if (VK_HEADER_VERSION >= 241 && VK_EXT_application_parameters)
void cleanup_VkApplicationParametersEXT(VkApplicationParametersEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkAttachmentDescription(VkAttachmentDescription const *pData) {}

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkAttachmentDescription2(VkAttachmentDescription2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkAttachmentDescriptionStencilLayout(
    VkAttachmentDescriptionStencilLayout const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_unified_image_layouts &&                                   \
     VK_EXT_attachment_feedback_loop_layout && ((VK_VERSION_1_3 || VK_KHR_dynamic_rendering)))
void cleanup_VkAttachmentFeedbackLoopInfoEXT(VkAttachmentFeedbackLoopInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkAttachmentReference(VkAttachmentReference const *pData) {}

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkAttachmentReference2(VkAttachmentReference2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkAttachmentReferenceStencilLayout(VkAttachmentReferenceStencilLayout const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkAttachmentReferenceStencilLayoutKHR(
    VkAttachmentReferenceStencilLayoutKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkAttachmentReferenceStencilLayoutKHR(
    VkAttachmentReferenceStencilLayoutKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_AMD_mixed_attachment_samples &&                                \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_AMD_mixed_attachment_samples) ||                                                           \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
void cleanup_VkAttachmentSampleCountInfoAMD(VkAttachmentSampleCountInfoAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentSamples - colorAttachmentCount
  free((void *)pData->pColorAttachmentSamples);
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_framebuffer_mixed_samples &&                                \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_NV_framebuffer_mixed_samples) ||                                                           \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
void cleanup_VkAttachmentSampleCountInfoNV(VkAttachmentSampleCountInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentSamples - colorAttachmentCount
  free((void *)pData->pColorAttachmentSamples);
}
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkAttachmentSampleLocationsEXT(VkAttachmentSampleLocationsEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkBindAccelerationStructureMemoryInfoKHR(
    VkBindAccelerationStructureMemoryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_NV_ray_tracing)
void cleanup_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkBindAccelerationStructureMemoryInfoNVX(
    VkBindAccelerationStructureMemoryInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBindBufferMemoryDeviceGroupInfo(VkBindBufferMemoryDeviceGroupInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_device_group && VK_KHR_bind_memory2) ||                    \
    (VK_HEADER_VERSION <= 240 && VK_KHR_device_group)
void cleanup_VkBindBufferMemoryDeviceGroupInfoKHR(
    VkBindBufferMemoryDeviceGroupInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBindBufferMemoryInfo(VkBindBufferMemoryInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_bind_memory2)
void cleanup_VkBindBufferMemoryInfoKHR(VkBindBufferMemoryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkBindDataGraphPipelineSessionMemoryInfoARM(
    VkBindDataGraphPipelineSessionMemoryInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_maintenance6 && VK_EXT_descriptor_buffer)
void cleanup_VkBindDescriptorBufferEmbeddedSamplersInfoEXT(
    VkBindDescriptorBufferEmbeddedSamplersInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkBindDescriptorSetsInfo(VkBindDescriptorSetsInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorSets - descriptorSetCount
  free((void *)pData->pDescriptorSets);

  // pDynamicOffsets - dynamicOffsetCount
  free((void *)pData->pDynamicOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
void cleanup_VkBindDescriptorSetsInfoKHR(VkBindDescriptorSetsInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorSets - descriptorSetCount
  free((void *)pData->pDescriptorSets);

  // pDynamicOffsets - dynamicOffsetCount
  free((void *)pData->pDynamicOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6)
void cleanup_VkBindDescriptorSetsInfoKHR(VkBindDescriptorSetsInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorSets - descriptorSetCount
  free((void *)pData->pDescriptorSets);

  // pDynamicOffsets - dynamicOffsetCount
  free((void *)pData->pDynamicOffsets);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBindImageMemoryDeviceGroupInfo(VkBindImageMemoryDeviceGroupInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);

  // pSplitInstanceBindRegions - splitInstanceBindRegionCount
  for (size_t i = 0; i < pData->splitInstanceBindRegionCount; ++i) {
    cleanup_VkRect2D(&pData->pSplitInstanceBindRegions[i]);
  }
  free((void *)pData->pSplitInstanceBindRegions);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_device_group && VK_KHR_bind_memory2) ||                    \
    (VK_HEADER_VERSION <= 240 && VK_KHR_device_group)
void cleanup_VkBindImageMemoryDeviceGroupInfoKHR(VkBindImageMemoryDeviceGroupInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);

  // pSplitInstanceBindRegions - splitInstanceBindRegionCount
  for (size_t i = 0; i < pData->splitInstanceBindRegionCount; ++i) {
    cleanup_VkRect2D(&pData->pSplitInstanceBindRegions[i]);
  }
  free((void *)pData->pSplitInstanceBindRegions);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBindImageMemoryInfo(VkBindImageMemoryInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_bind_memory2)
void cleanup_VkBindImageMemoryInfoKHR(VkBindImageMemoryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkBindImageMemorySwapchainInfoKHR(VkBindImageMemorySwapchainInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBindImagePlaneMemoryInfo(VkBindImagePlaneMemoryInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkBindImagePlaneMemoryInfoKHR(VkBindImagePlaneMemoryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkBindIndexBufferIndirectCommandEXT(VkBindIndexBufferIndirectCommandEXT const *pData) {
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkBindIndexBufferIndirectCommandNV(VkBindIndexBufferIndirectCommandNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkBindMemoryStatus(VkBindMemoryStatus const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pResult
  free((void *)pData->pResult);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
void cleanup_VkBindMemoryStatusKHR(VkBindMemoryStatusKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pResult
  free((void *)pData->pResult);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6)
void cleanup_VkBindMemoryStatusKHR(VkBindMemoryStatusKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pResult
  free((void *)pData->pResult);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute)
void cleanup_VkBindPipelineIndirectCommandNV(VkBindPipelineIndirectCommandNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkBindShaderGroupIndirectCommandNV(VkBindShaderGroupIndirectCommandNV const *pData) {}
#endif

void cleanup_VkBindSparseInfo(VkBindSparseInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphores - waitSemaphoreCount
  free((void *)pData->pWaitSemaphores);

  // pBufferBinds - bufferBindCount
  for (size_t i = 0; i < pData->bufferBindCount; ++i) {
    cleanup_VkSparseBufferMemoryBindInfo(&pData->pBufferBinds[i]);
  }
  free((void *)pData->pBufferBinds);

  // pImageOpaqueBinds - imageOpaqueBindCount
  for (size_t i = 0; i < pData->imageOpaqueBindCount; ++i) {
    cleanup_VkSparseImageOpaqueMemoryBindInfo(&pData->pImageOpaqueBinds[i]);
  }
  free((void *)pData->pImageOpaqueBinds);

  // pImageBinds - imageBindCount
  for (size_t i = 0; i < pData->imageBindCount; ++i) {
    cleanup_VkSparseImageMemoryBindInfo(&pData->pImageBinds[i]);
  }
  free((void *)pData->pImageBinds);

  // pSignalSemaphores - signalSemaphoreCount
  free((void *)pData->pSignalSemaphores);
}

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkBindTensorMemoryInfoARM(VkBindTensorMemoryInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkBindVertexBufferIndirectCommandEXT(
    VkBindVertexBufferIndirectCommandEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkBindVertexBufferIndirectCommandNV(VkBindVertexBufferIndirectCommandNV const *pData){}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkBindVideoSessionMemoryInfoKHR(VkBindVideoSessionMemoryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights)
void cleanup_VkBlitImageCubicWeightsInfoQCOM(VkBlitImageCubicWeightsInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkBlitImageInfo2(VkBlitImageInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageBlit2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageBlit2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageBlit2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkBufferCaptureDescriptorDataInfoEXT(
    VkBufferCaptureDescriptorDataInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferCollectionBufferCreateInfoFUCHSIA(
    VkBufferCollectionBufferCreateInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferCollectionConstraintsInfoFUCHSIA(
    VkBufferCollectionConstraintsInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferCollectionCreateInfoFUCHSIA(VkBufferCollectionCreateInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferCollectionImageCreateInfoFUCHSIA(
    VkBufferCollectionImageCreateInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferCollectionPropertiesFUCHSIA(VkBufferCollectionPropertiesFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkBufferConstraintsInfoFUCHSIA(VkBufferConstraintsInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkBufferCopy(VkBufferCopy const *pData) {}

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkBufferCopy2(VkBufferCopy2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkBufferCopy2KHR(VkBufferCopy2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkBufferCopy2KHR(VkBufferCopy2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkBufferCreateInfo(VkBufferCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueueFamilyIndices - queueFamilyIndexCount
  free((void *)pData->pQueueFamilyIndices);
}

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 103 && VK_EXT_buffer_device_address)
void cleanup_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 104 && VK_EXT_buffer_device_address)
void cleanup_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkBufferDeviceAddressInfo(VkBufferDeviceAddressInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 128 && VK_EXT_buffer_device_address)
void cleanup_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_EXT_buffer_device_address)
void cleanup_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_buffer_device_address)
void cleanup_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
void cleanup_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address)
void cleanup_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkBufferImageCopy(VkBufferImageCopy const *pData) {}

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkBufferImageCopy2(VkBufferImageCopy2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkBufferMemoryBarrier(VkBufferMemoryBarrier const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkBufferMemoryBarrier2(VkBufferMemoryBarrier2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkBufferMemoryRequirementsInfo2(VkBufferMemoryRequirementsInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_memory_requirements2)
void cleanup_VkBufferMemoryRequirementsInfo2KHR(VkBufferMemoryRequirementsInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkBufferOpaqueCaptureAddressCreateInfo(
    VkBufferOpaqueCaptureAddressCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
void cleanup_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address)
void cleanup_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkBufferUsageFlags2CreateInfo(VkBufferUsageFlags2CreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkBufferUsageFlags2CreateInfoKHR(VkBufferUsageFlags2CreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkBufferUsageFlags2CreateInfoKHR(VkBufferUsageFlags2CreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkBufferViewCreateInfo(VkBufferViewCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkBuildPartitionedAccelerationStructureIndirectCommandNV(
    VkBuildPartitionedAccelerationStructureIndirectCommandNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkBuildPartitionedAccelerationStructureInfoNV(
    VkBuildPartitionedAccelerationStructureInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 272 && VK_EXT_calibrated_timestamps)
void cleanup_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 273 && VK_EXT_calibrated_timestamps)
void cleanup_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 273 && VK_KHR_calibrated_timestamps)
void cleanup_VkCalibratedTimestampInfoKHR(VkCalibratedTimestampInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkCheckpointData2NV(VkCheckpointData2NV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCheckpointMarker
  free((void *)pData->pCheckpointMarker);
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_device_diagnostic_checkpoints &&                            \
     (VK_VERSION_1_3 || VK_KHR_synchronization2)) ||                                               \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_synchronization2 &&            \
     VK_NV_device_diagnostic_checkpoints) ||                                                       \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_KHR_synchronization2)
void cleanup_VkCheckpointData2NV(VkCheckpointData2NV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCheckpointMarker
  free((void *)pData->pCheckpointMarker);
}
#endif

#if (VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints)
void cleanup_VkCheckpointDataNV(VkCheckpointDataNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCheckpointMarker
  free((void *)pData->pCheckpointMarker);
}
#endif

void cleanup_VkClearAttachment(VkClearAttachment const *pData) {}

void cleanup_VkClearDepthStencilValue(VkClearDepthStencilValue const *pData) {}

void cleanup_VkClearRect(VkClearRect const *pData) {}

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV(
    VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureBuildTriangleClusterInfoNV(
    VkClusterAccelerationStructureBuildTriangleClusterInfoNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV(
    VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureClustersBottomLevelInputNV(
    VkClusterAccelerationStructureClustersBottomLevelInputNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureCommandsInfoNV(
    VkClusterAccelerationStructureCommandsInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV(
    VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureGetTemplateIndicesInfoNV(
    VkClusterAccelerationStructureGetTemplateIndicesInfoNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureInputInfoNV(
    VkClusterAccelerationStructureInputInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureInstantiateClusterInfoNV(
    VkClusterAccelerationStructureInstantiateClusterInfoNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureMoveObjectsInfoNV(
    VkClusterAccelerationStructureMoveObjectsInfoNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureMoveObjectsInputNV(
    VkClusterAccelerationStructureMoveObjectsInputNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkClusterAccelerationStructureTriangleClusterInputNV(
    VkClusterAccelerationStructureTriangleClusterInputNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkCmdProcessCommandsInfoNVX(VkCmdProcessCommandsInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pIndirectCommandsTokens - indirectCommandsTokenCount
  for (size_t i = 0; i < pData->indirectCommandsTokenCount; ++i) {
    cleanup_VkIndirectCommandsTokenNVX(&pData->pIndirectCommandsTokens[i]);
  }
  free((void *)pData->pIndirectCommandsTokens);
}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkCmdReserveSpaceForCommandsInfoNVX(VkCmdReserveSpaceForCommandsInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkCoarseSampleLocationNV(VkCoarseSampleLocationNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkCoarseSampleOrderCustomNV(VkCoarseSampleOrderCustomNV const *pData) {
  // pSampleLocations - sampleLocationCount
  for (size_t i = 0; i < pData->sampleLocationCount; ++i) {
    cleanup_VkCoarseSampleLocationNV(&pData->pSampleLocations[i]);
  }
  free((void *)pData->pSampleLocations);
}
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_extended_dynamic_state3 && VK_EXT_shader_object) ||        \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 245 && VK_EXT_extended_dynamic_state3)
void cleanup_VkColorBlendAdvancedEXT(VkColorBlendAdvancedEXT const *pData){}
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_extended_dynamic_state3 && VK_EXT_shader_object) ||        \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 245 && VK_EXT_extended_dynamic_state3)
void cleanup_VkColorBlendEquationEXT(VkColorBlendEquationEXT const *pData) {
}
#endif

void cleanup_VkCommandBufferAllocateInfo(VkCommandBufferAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkCommandBufferBeginInfo(VkCommandBufferBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInheritanceInfo
  if (pData->pInheritanceInfo != NULL)
    cleanup_VkCommandBufferInheritanceInfo(pData->pInheritanceInfo);
  free((void *)pData->pInheritanceInfo);
}

#if (VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering)
void cleanup_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkCommandBufferInheritanceInfo(VkCommandBufferInheritanceInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform)
void cleanup_VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_VERSION_1_3)
void cleanup_VkCommandBufferInheritanceRenderingInfo(
    VkCommandBufferInheritanceRenderingInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentFormats - colorAttachmentCount
  free((void *)pData->pColorAttachmentFormats);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_VERSION_1_3)
void cleanup_VkCommandBufferInheritanceRenderingInfo(
    VkCommandBufferInheritanceRenderingInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentFormats - colorAttachmentCount
  free((void *)pData->pColorAttachmentFormats);
}
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
void cleanup_VkCommandBufferInheritanceRenderingInfoKHR(
    VkCommandBufferInheritanceRenderingInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentFormats - colorAttachmentCount
  free((void *)pData->pColorAttachmentFormats);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering)
void cleanup_VkCommandBufferInheritanceRenderingInfoKHR(
    VkCommandBufferInheritanceRenderingInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentFormats - colorAttachmentCount
  free((void *)pData->pColorAttachmentFormats);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor)
void cleanup_VkCommandBufferInheritanceViewportScissorInfoNV(
    VkCommandBufferInheritanceViewportScissorInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewportDepths
  if (pData->pViewportDepths != NULL)
    cleanup_VkViewport(pData->pViewportDepths);
  free((void *)pData->pViewportDepths);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkCommandBufferSubmitInfo(VkCommandBufferSubmitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkCommandPoolCreateInfo(VkCommandPoolCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkCommandPoolMemoryConsumption(VkCommandPoolMemoryConsumption const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkCommandPoolMemoryReservationCreateInfo(
    VkCommandPoolMemoryReservationCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkComponentMapping(VkComponentMapping const *pData) {}

void cleanup_VkComputePipelineCreateInfo(VkComputePipelineCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute)
void cleanup_VkComputePipelineIndirectBufferInfoNV(
    VkComputePipelineIndirectBufferInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering)
void cleanup_VkConditionalRenderingBeginInfoEXT(VkConditionalRenderingBeginInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkConformanceVersion(VkConformanceVersion const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 130 && VK_KHR_driver_properties)
void cleanup_VkConformanceVersionKHR(VkConformanceVersionKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_driver_properties)
void cleanup_VkConformanceVersionKHR(VkConformanceVersionKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
void cleanup_VkConvertCooperativeVectorMatrixInfoNV(
    VkConvertCooperativeVectorMatrixInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDstSize
  free((void *)pData->pDstSize);
}
#endif

#if (VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2)
void cleanup_VkCooperativeMatrixFlexibleDimensionsPropertiesNV(
    VkCooperativeMatrixFlexibleDimensionsPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix)
void cleanup_VkCooperativeMatrixPropertiesKHR(VkCooperativeMatrixPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix)
void cleanup_VkCooperativeMatrixPropertiesNV(VkCooperativeMatrixPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
void cleanup_VkCooperativeVectorPropertiesNV(VkCooperativeVectorPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCopyAccelerationStructureInfoKHR(VkCopyAccelerationStructureInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCopyAccelerationStructureToMemoryInfoKHR(
    VkCopyAccelerationStructureToMemoryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkCopyBufferInfo2(VkCopyBufferInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkBufferCopy2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkBufferCopy2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkBufferCopy2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkCopyBufferToImageInfo2(VkCopyBufferToImageInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkBufferImageCopy2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkBufferImageCopy2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkBufferImageCopy2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 159 && VK_QCOM_rotated_copy_commands)
void cleanup_VkCopyCommandTransformInfoQCOM(VkCopyCommandTransformInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkCopyDescriptorSet(VkCopyDescriptorSet const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkCopyImageInfo2(VkCopyImageInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageCopy2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageCopy2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageCopy2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkCopyImageToBufferInfo2(VkCopyImageToBufferInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkBufferImageCopy2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkBufferImageCopy2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkBufferImageCopy2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkCopyImageToImageInfo(VkCopyImageToImageInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageCopy2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkCopyImageToImageInfoEXT(VkCopyImageToImageInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageCopy2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkCopyImageToImageInfoEXT(VkCopyImageToImageInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageCopy2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkCopyImageToMemoryInfo(VkCopyImageToMemoryInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageToMemoryCopy(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkCopyImageToMemoryInfoEXT(VkCopyImageToMemoryInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageToMemoryCopyEXT(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkCopyImageToMemoryInfoEXT(VkCopyImageToMemoryInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageToMemoryCopy(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect)
void cleanup_VkCopyMemoryIndirectCommandNV(VkCopyMemoryIndirectCommandNV const *pData){}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCopyMemoryToAccelerationStructureInfoKHR(
    VkCopyMemoryToAccelerationStructureInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect)
void cleanup_VkCopyMemoryToImageIndirectCommandNV(
    VkCopyMemoryToImageIndirectCommandNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkCopyMemoryToImageInfo(VkCopyMemoryToImageInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkMemoryToImageCopy(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkCopyMemoryToImageInfoEXT(VkCopyMemoryToImageInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkMemoryToImageCopyEXT(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkCopyMemoryToImageInfoEXT(VkCopyMemoryToImageInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkMemoryToImageCopy(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkCopyMemoryToMicromapInfoEXT(VkCopyMemoryToMicromapInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkCopyMicromapInfoEXT(VkCopyMicromapInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkCopyMicromapToMemoryInfoEXT(VkCopyMicromapToMemoryInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkCopyTensorInfoARM(VkCopyTensorInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkTensorCopyARM(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 178 && VK_NVX_binary_import)
void cleanup_VkCuFunctionCreateInfoNVX(VkCuFunctionCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pName - null-terminated
  free((void *)pData->pName);
}
#endif

#if (VK_HEADER_VERSION >= 178 && VK_NVX_binary_import)
void cleanup_VkCuLaunchInfoNVX(VkCuLaunchInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParams - paramCount
  free((void *)pData->pParams);

  // pExtras - extraCount
  free((void *)pData->pExtras);
}
#endif

#if (VK_HEADER_VERSION >= 178 && VK_NVX_binary_import)
void cleanup_VkCuModuleCreateInfoNVX(VkCuModuleCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData - dataSize
  free((void *)pData->pData);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_NVX_binary_import)
void cleanup_VkCuModuleTexturingModeCreateInfoNVX(
    VkCuModuleTexturingModeCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCudaFunctionCreateInfoNV(VkCudaFunctionCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pName - null-terminated
  free((void *)pData->pName);
}
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCudaLaunchInfoNV(VkCudaLaunchInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParams - paramCount
  free((void *)pData->pParams);

  // pExtras - extraCount
  free((void *)pData->pExtras);
}
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkCudaModuleCreateInfoNV(VkCudaModuleCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData - dataSize
  free((void *)pData->pData);
}
#endif

#if (VK_KHR_external_semaphore_win32)
void cleanup_VkD3D12FenceSubmitInfoKHR(VkD3D12FenceSubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreValues - waitSemaphoreValuesCount
  free((void *)pData->pWaitSemaphoreValues);

  // pSignalSemaphoreValues - signalSemaphoreValuesCount
  free((void *)pData->pSignalSemaphoreValues);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineCompilerControlCreateInfoARM(
    VkDataGraphPipelineCompilerControlCreateInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVendorOptions - null-terminated
  free((void *)pData->pVendorOptions);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineConstantARM(VkDataGraphPipelineConstantARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pConstantData
  free((void *)pData->pConstantData);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph && VK_ARM_tensors)
void cleanup_VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM(
    VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineCreateInfoARM(VkDataGraphPipelineCreateInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pResourceInfos - resourceInfoCount
  for (size_t i = 0; i < pData->resourceInfoCount; ++i) {
    cleanup_VkDataGraphPipelineResourceInfoARM(&pData->pResourceInfos[i]);
  }
  free((void *)pData->pResourceInfos);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineDispatchInfoARM(VkDataGraphPipelineDispatchInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineIdentifierCreateInfoARM(
    VkDataGraphPipelineIdentifierCreateInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pIdentifier - identifierSize
  free((void *)pData->pIdentifier);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineInfoARM(VkDataGraphPipelineInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelinePropertyQueryResultARM(
    VkDataGraphPipelinePropertyQueryResultARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData - dataSize
  free((void *)pData->pData);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineResourceInfoARM(VkDataGraphPipelineResourceInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineSessionBindPointRequirementARM(
    VkDataGraphPipelineSessionBindPointRequirementARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineSessionBindPointRequirementsInfoARM(
    VkDataGraphPipelineSessionBindPointRequirementsInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineSessionCreateInfoARM(
    VkDataGraphPipelineSessionCreateInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineSessionMemoryRequirementsInfoARM(
    VkDataGraphPipelineSessionMemoryRequirementsInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphPipelineShaderModuleCreateInfoARM(
    VkDataGraphPipelineShaderModuleCreateInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pName - null-terminated
  free((void *)pData->pName);

  // pSpecializationInfo
  if (pData->pSpecializationInfo != NULL)
    cleanup_VkSpecializationInfo(pData->pSpecializationInfo);
  free((void *)pData->pSpecializationInfo);

  // pConstants - constantCount
  for (size_t i = 0; i < pData->constantCount; ++i) {
    cleanup_VkDataGraphPipelineConstantARM(&pData->pConstants[i]);
  }
  free((void *)pData->pConstants);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkDataGraphProcessingEngineCreateInfoARM(
    VkDataGraphProcessingEngineCreateInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pProcessingEngines - processingEngineCount
  for (size_t i = 0; i < pData->processingEngineCount; ++i) {
    cleanup_VkPhysicalDeviceDataGraphProcessingEngineARM(&pData->pProcessingEngines[i]);
  }
  free((void *)pData->pProcessingEngines);
}
#endif

#if (VK_EXT_debug_marker)
void cleanup_VkDebugMarkerMarkerInfoEXT(VkDebugMarkerMarkerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMarkerName - null-terminated
  free((void *)pData->pMarkerName);
}
#endif

#if (VK_EXT_debug_marker)
void cleanup_VkDebugMarkerObjectNameInfoEXT(VkDebugMarkerObjectNameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pObjectName - null-terminated
  free((void *)pData->pObjectName);
}
#endif

#if (VK_EXT_debug_marker)
void cleanup_VkDebugMarkerObjectTagInfoEXT(VkDebugMarkerObjectTagInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTag - tagSize
  free((void *)pData->pTag);
}
#endif

#if (VK_EXT_debug_report)
void cleanup_VkDebugReportCallbackCreateInfoEXT(VkDebugReportCallbackCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pUserData
  free((void *)pData->pUserData);
}
#endif

#if (VK_EXT_debug_utils)
void cleanup_VkDebugUtilsLabelEXT(VkDebugUtilsLabelEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pLabelName - null-terminated
  free((void *)pData->pLabelName);
}
#endif

#if (VK_EXT_debug_utils)
void cleanup_VkDebugUtilsMessengerCallbackDataEXT(
    VkDebugUtilsMessengerCallbackDataEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMessageIdName - null-terminated
  free((void *)pData->pMessageIdName);

  // pMessage - null-terminated
  free((void *)pData->pMessage);

  // pQueueLabels - queueLabelCount
  for (size_t i = 0; i < pData->queueLabelCount; ++i) {
    cleanup_VkDebugUtilsLabelEXT(&pData->pQueueLabels[i]);
  }
  free((void *)pData->pQueueLabels);

  // pCmdBufLabels - cmdBufLabelCount
  for (size_t i = 0; i < pData->cmdBufLabelCount; ++i) {
    cleanup_VkDebugUtilsLabelEXT(&pData->pCmdBufLabels[i]);
  }
  free((void *)pData->pCmdBufLabels);

  // pObjects - objectCount
  for (size_t i = 0; i < pData->objectCount; ++i) {
    cleanup_VkDebugUtilsObjectNameInfoEXT(&pData->pObjects[i]);
  }
  free((void *)pData->pObjects);
}
#endif

#if (VK_EXT_debug_utils)
void cleanup_VkDebugUtilsMessengerCreateInfoEXT(VkDebugUtilsMessengerCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pUserData
  free((void *)pData->pUserData);
}
#endif

#if (VK_EXT_debug_utils)
void cleanup_VkDebugUtilsObjectNameInfoEXT(VkDebugUtilsObjectNameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pObjectName - null-terminated
  free((void *)pData->pObjectName);
}
#endif

#if (VK_EXT_debug_utils)
void cleanup_VkDebugUtilsObjectTagInfoEXT(VkDebugUtilsObjectTagInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTag - tagSize
  free((void *)pData->pTag);
}
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression)
void cleanup_VkDecompressMemoryRegionNV(VkDecompressMemoryRegionNV const *pData) {}
#endif

#if (VK_NV_dedicated_allocation)
void cleanup_VkDedicatedAllocationBufferCreateInfoNV(
    VkDedicatedAllocationBufferCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_NV_dedicated_allocation)
void cleanup_VkDedicatedAllocationImageCreateInfoNV(
    VkDedicatedAllocationImageCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_NV_dedicated_allocation)
void cleanup_VkDedicatedAllocationMemoryAllocateInfoNV(
    VkDedicatedAllocationMemoryAllocateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_deferred_host_operations &&    \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkDeferredOperationInfoKHR(VkDeferredOperationInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkDependencyInfo(VkDependencyInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMemoryBarriers - memoryBarrierCount
  for (size_t i = 0; i < pData->memoryBarrierCount; ++i) {
    cleanup_VkMemoryBarrier2(&pData->pMemoryBarriers[i]);
  }
  free((void *)pData->pMemoryBarriers);

  // pBufferMemoryBarriers - bufferMemoryBarrierCount
  for (size_t i = 0; i < pData->bufferMemoryBarrierCount; ++i) {
    cleanup_VkBufferMemoryBarrier2(&pData->pBufferMemoryBarriers[i]);
  }
  free((void *)pData->pBufferMemoryBarriers);

  // pImageMemoryBarriers - imageMemoryBarrierCount
  for (size_t i = 0; i < pData->imageMemoryBarrierCount; ++i) {
    cleanup_VkImageMemoryBarrier2(&pData->pImageMemoryBarriers[i]);
  }
  free((void *)pData->pImageMemoryBarriers);
}
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkDependencyInfoKHR(VkDependencyInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMemoryBarriers - memoryBarrierCount
  for (size_t i = 0; i < pData->memoryBarrierCount; ++i) {
    cleanup_VkMemoryBarrier2KHR(&pData->pMemoryBarriers[i]);
  }
  free((void *)pData->pMemoryBarriers);

  // pBufferMemoryBarriers - bufferMemoryBarrierCount
  for (size_t i = 0; i < pData->bufferMemoryBarrierCount; ++i) {
    cleanup_VkBufferMemoryBarrier2KHR(&pData->pBufferMemoryBarriers[i]);
  }
  free((void *)pData->pBufferMemoryBarriers);

  // pImageMemoryBarriers - imageMemoryBarrierCount
  for (size_t i = 0; i < pData->imageMemoryBarrierCount; ++i) {
    cleanup_VkImageMemoryBarrier2KHR(&pData->pImageMemoryBarriers[i]);
  }
  free((void *)pData->pImageMemoryBarriers);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkDependencyInfoKHR(VkDependencyInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMemoryBarriers - memoryBarrierCount
  for (size_t i = 0; i < pData->memoryBarrierCount; ++i) {
    cleanup_VkMemoryBarrier2(&pData->pMemoryBarriers[i]);
  }
  free((void *)pData->pMemoryBarriers);

  // pBufferMemoryBarriers - bufferMemoryBarrierCount
  for (size_t i = 0; i < pData->bufferMemoryBarrierCount; ++i) {
    cleanup_VkBufferMemoryBarrier2(&pData->pBufferMemoryBarriers[i]);
  }
  free((void *)pData->pBufferMemoryBarriers);

  // pImageMemoryBarriers - imageMemoryBarrierCount
  for (size_t i = 0; i < pData->imageMemoryBarrierCount; ++i) {
    cleanup_VkImageMemoryBarrier2(&pData->pImageMemoryBarriers[i]);
  }
  free((void *)pData->pImageMemoryBarriers);
}
#endif

#if (VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control)
void cleanup_VkDepthBiasInfoEXT(VkDepthBiasInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control)
void cleanup_VkDepthBiasRepresentationInfoEXT(VkDepthBiasRepresentationInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control)
void cleanup_VkDepthClampRangeEXT(VkDepthClampRangeEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkDescriptorAccelerationStructureInfoNVX(
    VkDescriptorAccelerationStructureInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAccelerationStructures - accelerationStructureCount
  free((void *)pData->pAccelerationStructures);
}
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkDescriptorAddressInfoEXT(VkDescriptorAddressInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkDescriptorBufferBindingInfoEXT(VkDescriptorBufferBindingInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(
    VkDescriptorBufferBindingPushDescriptorBufferHandleEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkDescriptorBufferInfo(VkDescriptorBufferInfo const *pData) {}

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkDescriptorGetInfoEXT(VkDescriptorGetInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
void cleanup_VkDescriptorGetTensorInfoARM(VkDescriptorGetTensorInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkDescriptorImageInfo(VkDescriptorImageInfo const *pData) {}

void cleanup_VkDescriptorPoolCreateInfo(VkDescriptorPoolCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPoolSizes - poolSizeCount
  for (size_t i = 0; i < pData->poolSizeCount; ++i) {
    cleanup_VkDescriptorPoolSize(&pData->pPoolSizes[i]);
  }
  free((void *)pData->pPoolSizes);
}

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkDescriptorPoolInlineUniformBlockCreateInfo(
    VkDescriptorPoolInlineUniformBlockCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
void cleanup_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block)
void cleanup_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkDescriptorPoolSize(VkDescriptorPoolSize const *pData) {}

void cleanup_VkDescriptorSetAllocateInfo(VkDescriptorSetAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetLayouts - descriptorSetCount
  free((void *)pData->pSetLayouts);
}

#if (VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping)
void cleanup_VkDescriptorSetBindingReferenceVALVE(
    VkDescriptorSetBindingReferenceVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkDescriptorSetLayoutBinding(VkDescriptorSetLayoutBinding const *pData) {
  // pImmutableSamplers - descriptorCount
  free((void *)pData->pImmutableSamplers);
}

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfo(
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pBindingFlags - bindingCount
  free((void *)pData->pBindingFlags);
}
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pBindingFlags - bindingCount
  free((void *)pData->pBindingFlags);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pBindingFlags - bindingCount
  free((void *)pData->pBindingFlags);
}
#endif

void cleanup_VkDescriptorSetLayoutCreateInfo(VkDescriptorSetLayoutCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pBindings - bindingCount
  for (size_t i = 0; i < pData->bindingCount; ++i) {
    cleanup_VkDescriptorSetLayoutBinding(&pData->pBindings[i]);
  }
  free((void *)pData->pBindings);
}

#if (VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping)
void cleanup_VkDescriptorSetLayoutHostMappingInfoVALVE(
    VkDescriptorSetLayoutHostMappingInfoVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDescriptorSetLayoutSupport(VkDescriptorSetLayoutSupport const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_maintenance3)
void cleanup_VkDescriptorSetLayoutSupportKHR(VkDescriptorSetLayoutSupportKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfo(
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorCounts - descriptorSetCount
  free((void *)pData->pDescriptorCounts);
}
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorCounts - descriptorSetCount
  free((void *)pData->pDescriptorCounts);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorCounts - descriptorSetCount
  free((void *)pData->pDescriptorCounts);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupport(
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing)
void cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDescriptorUpdateTemplateCreateInfo(
    VkDescriptorUpdateTemplateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorUpdateEntries - descriptorUpdateEntryCount
  for (size_t i = 0; i < pData->descriptorUpdateEntryCount; ++i) {
    cleanup_VkDescriptorUpdateTemplateEntry(&pData->pDescriptorUpdateEntries[i]);
  }
  free((void *)pData->pDescriptorUpdateEntries);
}
#endif

#if (VK_KHR_descriptor_update_template)
void cleanup_VkDescriptorUpdateTemplateCreateInfoKHR(
    VkDescriptorUpdateTemplateCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorUpdateEntries - descriptorUpdateEntryCount
  for (size_t i = 0; i < pData->descriptorUpdateEntryCount; ++i) {
    cleanup_VkDescriptorUpdateTemplateEntry(&pData->pDescriptorUpdateEntries[i]);
  }
  free((void *)pData->pDescriptorUpdateEntries);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDescriptorUpdateTemplateEntry(VkDescriptorUpdateTemplateEntry const *pData) {}
#endif

#if (VK_KHR_descriptor_update_template)
void cleanup_VkDescriptorUpdateTemplateEntryKHR(VkDescriptorUpdateTemplateEntryKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report)
void cleanup_VkDeviceAddressBindingCallbackDataEXT(
    VkDeviceAddressBindingCallbackDataEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkDeviceBufferMemoryRequirements(VkDeviceBufferMemoryRequirements const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkBufferCreateInfo(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);
}
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
void cleanup_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkBufferCreateInfo(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4)
void cleanup_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkBufferCreateInfo(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);
}
#endif

void cleanup_VkDeviceCreateInfo(VkDeviceCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueueCreateInfos - queueCreateInfoCount
  for (size_t i = 0; i < pData->queueCreateInfoCount; ++i) {
    cleanup_VkDeviceQueueCreateInfo(&pData->pQueueCreateInfos[i]);
  }
  free((void *)pData->pQueueCreateInfos);

  // ppEnabledLayerNames - enabledLayerCount,null-terminated
  for (size_t i = 0; i < pData->enabledLayerCount; ++i) {
    free((void *)pData->ppEnabledLayerNames[i]);
  }
  free((void *)pData->ppEnabledLayerNames);

  // ppEnabledExtensionNames - enabledExtensionCount,null-terminated
  for (size_t i = 0; i < pData->enabledExtensionCount; ++i) {
    free((void *)pData->ppEnabledExtensionNames[i]);
  }
  free((void *)pData->ppEnabledExtensionNames);

  // pEnabledFeatures
  if (pData->pEnabledFeatures != NULL)
    cleanup_VkPhysicalDeviceFeatures(pData->pEnabledFeatures);
  free((void *)pData->pEnabledFeatures);
}

#if (VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report)
void cleanup_VkDeviceDeviceMemoryReportCreateInfoEXT(
    VkDeviceDeviceMemoryReportCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pUserData
  free((void *)pData->pUserData);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config)
void cleanup_VkDeviceDiagnosticsConfigCreateInfoNV(
    VkDeviceDiagnosticsConfigCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_display_control)
void cleanup_VkDeviceEventInfoEXT(VkDeviceEventInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultAddressInfoEXT(VkDeviceFaultAddressInfoEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultCountsEXT(VkDeviceFaultCountsEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultInfoEXT(VkDeviceFaultInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAddressInfos
  if (pData->pAddressInfos != NULL)
    cleanup_VkDeviceFaultAddressInfoEXT(pData->pAddressInfos);
  free((void *)pData->pAddressInfos);

  // pVendorInfos
  if (pData->pVendorInfos != NULL)
    cleanup_VkDeviceFaultVendorInfoEXT(pData->pVendorInfos);
  free((void *)pData->pVendorInfos);

  // pVendorBinaryData
  free((void *)pData->pVendorBinaryData);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 246 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultVendorBinaryHeaderVersionOneEXT(
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 247 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultVendorBinaryHeaderVersionOneEXT(
    VkDeviceFaultVendorBinaryHeaderVersionOneEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
void cleanup_VkDeviceFaultVendorInfoEXT(VkDeviceFaultVendorInfoEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkDeviceGeneratedCommandsFeaturesNVX(
    VkDeviceGeneratedCommandsFeaturesNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkDeviceGeneratedCommandsLimitsNVX(VkDeviceGeneratedCommandsLimitsNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceGroupBindSparseInfo(VkDeviceGroupBindSparseInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_device_group)
void cleanup_VkDeviceGroupBindSparseInfoKHR(VkDeviceGroupBindSparseInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceGroupCommandBufferBeginInfo(VkDeviceGroupCommandBufferBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_device_group)
void cleanup_VkDeviceGroupCommandBufferBeginInfoKHR(
    VkDeviceGroupCommandBufferBeginInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceGroupDeviceCreateInfo(VkDeviceGroupDeviceCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPhysicalDevices - physicalDeviceCount
  free((void *)pData->pPhysicalDevices);
}
#endif

#if (VK_KHR_device_group_creation)
void cleanup_VkDeviceGroupDeviceCreateInfoKHR(VkDeviceGroupDeviceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPhysicalDevices - physicalDeviceCount
  free((void *)pData->pPhysicalDevices);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group &&      \
     VK_KHR_surface) ||                                                                            \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkDeviceGroupPresentCapabilitiesKHR(VkDeviceGroupPresentCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkDeviceGroupPresentInfoKHR(VkDeviceGroupPresentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceMasks - swapchainCount
  free((void *)pData->pDeviceMasks);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceGroupRenderPassBeginInfo(VkDeviceGroupRenderPassBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceRenderAreas - deviceRenderAreaCount
  for (size_t i = 0; i < pData->deviceRenderAreaCount; ++i) {
    cleanup_VkRect2D(&pData->pDeviceRenderAreas[i]);
  }
  free((void *)pData->pDeviceRenderAreas);
}
#endif

#if (VK_KHR_device_group)
void cleanup_VkDeviceGroupRenderPassBeginInfoKHR(VkDeviceGroupRenderPassBeginInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceRenderAreas - deviceRenderAreaCount
  for (size_t i = 0; i < pData->deviceRenderAreaCount; ++i) {
    cleanup_VkRect2D(&pData->pDeviceRenderAreas[i]);
  }
  free((void *)pData->pDeviceRenderAreas);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceGroupSubmitInfo(VkDeviceGroupSubmitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreDeviceIndices - waitSemaphoreCount
  free((void *)pData->pWaitSemaphoreDeviceIndices);

  // pCommandBufferDeviceMasks - commandBufferCount
  free((void *)pData->pCommandBufferDeviceMasks);

  // pSignalSemaphoreDeviceIndices - signalSemaphoreCount
  free((void *)pData->pSignalSemaphoreDeviceIndices);
}
#endif

#if (VK_KHR_device_group)
void cleanup_VkDeviceGroupSubmitInfoKHR(VkDeviceGroupSubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreDeviceIndices - waitSemaphoreCount
  free((void *)pData->pWaitSemaphoreDeviceIndices);

  // pCommandBufferDeviceMasks - commandBufferCount
  free((void *)pData->pCommandBufferDeviceMasks);

  // pSignalSemaphoreDeviceIndices - signalSemaphoreCount
  free((void *)pData->pSignalSemaphoreDeviceIndices);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkDeviceGroupSwapchainCreateInfoKHR(VkDeviceGroupSwapchainCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkDeviceImageMemoryRequirements(VkDeviceImageMemoryRequirements const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkImageCreateInfo(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);
}
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
void cleanup_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkImageCreateInfo(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4)
void cleanup_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkImageCreateInfo(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkDeviceImageSubresourceInfo(VkDeviceImageSubresourceInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkImageCreateInfo(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);

  // pSubresource
  if (pData->pSubresource != NULL)
    cleanup_VkImageSubresource2(pData->pSubresource);
  free((void *)pData->pSubresource);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkDeviceImageSubresourceInfoKHR(VkDeviceImageSubresourceInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkImageCreateInfo(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);

  // pSubresource
  if (pData->pSubresource != NULL)
    cleanup_VkImageSubresource2KHR(pData->pSubresource);
  free((void *)pData->pSubresource);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkDeviceImageSubresourceInfoKHR(VkDeviceImageSubresourceInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkImageCreateInfo(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);

  // pSubresource
  if (pData->pSubresource != NULL)
    cleanup_VkImageSubresource2(pData->pSubresource);
  free((void *)pData->pSubresource);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkDeviceMemoryOpaqueCaptureAddressInfo(
    VkDeviceMemoryOpaqueCaptureAddressInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
void cleanup_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address)
void cleanup_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior)
void cleanup_VkDeviceMemoryOverallocationCreateInfoAMD(
    VkDeviceMemoryOverallocationCreateInfoAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report)
void cleanup_VkDeviceMemoryReportCallbackDataEXT(VkDeviceMemoryReportCallbackDataEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkDeviceObjectReservationCreateInfo(VkDeviceObjectReservationCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPipelineCacheCreateInfos - pipelineCacheCreateInfoCount
  for (size_t i = 0; i < pData->pipelineCacheCreateInfoCount; ++i) {
    cleanup_VkPipelineCacheCreateInfo(&pData->pPipelineCacheCreateInfos[i]);
  }
  free((void *)pData->pPipelineCacheCreateInfos);

  // pPipelinePoolSizes - pipelinePoolSizeCount
  for (size_t i = 0; i < pData->pipelinePoolSizeCount; ++i) {
    cleanup_VkPipelinePoolSize(&pData->pPipelinePoolSizes[i]);
  }
  free((void *)pData->pPipelinePoolSizes);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkDevicePipelineBinaryInternalCacheControlKHR(
    VkDevicePipelineBinaryInternalCacheControlKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkDevicePrivateDataCreateInfo(VkDevicePrivateDataCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data)
void cleanup_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_private_data)
void cleanup_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkDeviceQueueCreateInfo(VkDeviceQueueCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueuePriorities - queueCount
  free((void *)pData->pQueuePriorities);
}

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfo(
    VkDeviceQueueGlobalPriorityCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 203 && VK_EXT_global_priority)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_global_priority)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoKHR(
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_global_priority)
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoKHR(
    VkDeviceQueueGlobalPriorityCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkDeviceQueueInfo2(VkDeviceQueueInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls)
void cleanup_VkDeviceQueueShaderCoreControlCreateInfoARM(
    VkDeviceQueueShaderCoreControlCreateInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2 && VKSC_VERSION_1_0)
void cleanup_VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV(
    VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkDeviceTensorMemoryRequirementsARM(VkDeviceTensorMemoryRequirementsARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkTensorCreateInfoARM(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);
}
#endif

#if (VK_HEADER_VERSION >= 236 && VK_HEADER_VERSION <= 236 && VK_LUNARG_direct_driver_loading)
void cleanup_VkDirectDriverLoadingInfoLUNARG(VkDirectDriverLoadingInfoLUNARG const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 237 && VK_LUNARG_direct_driver_loading)
void cleanup_VkDirectDriverLoadingInfoLUNARG(VkDirectDriverLoadingInfoLUNARG const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 236 && VK_LUNARG_direct_driver_loading)
void cleanup_VkDirectDriverLoadingListLUNARG(VkDirectDriverLoadingListLUNARG const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDrivers - driverCount
  for (size_t i = 0; i < pData->driverCount; ++i) {
    cleanup_VkDirectDriverLoadingInfoLUNARG(&pData->pDrivers[i]);
  }
  free((void *)pData->pDrivers);
}
#endif

#if (VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface)
void cleanup_VkDirectFBSurfaceCreateInfoEXT(VkDirectFBSurfaceCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // dfb
  free((void *)pData->dfb);

  // surface
  free((void *)pData->surface);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkDispatchGraphCountInfoAMDX(VkDispatchGraphCountInfoAMDX const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkDispatchGraphInfoAMDX(VkDispatchGraphInfoAMDX const *pData) {}
#endif

void cleanup_VkDispatchIndirectCommand(VkDispatchIndirectCommand const *pData) {}

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkDispatchTileInfoQCOM(VkDispatchTileInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_display_control)
void cleanup_VkDisplayEventInfoEXT(VkDisplayEventInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayModeCreateInfoKHR(VkDisplayModeCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayModeParametersKHR(VkDisplayModeParametersKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
void cleanup_VkDisplayModeProperties2KHR(VkDisplayModeProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayModePropertiesKHR(VkDisplayModePropertiesKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_NV_display_stereo)
void cleanup_VkDisplayModeStereoPropertiesNV(VkDisplayModeStereoPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr)
void cleanup_VkDisplayNativeHdrSurfaceCapabilitiesAMD(
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
void cleanup_VkDisplayPlaneCapabilities2KHR(VkDisplayPlaneCapabilities2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayPlaneCapabilitiesKHR(VkDisplayPlaneCapabilitiesKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
void cleanup_VkDisplayPlaneInfo2KHR(VkDisplayPlaneInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
void cleanup_VkDisplayPlaneProperties2KHR(VkDisplayPlaneProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayPlanePropertiesKHR(VkDisplayPlanePropertiesKHR const *pData) {}
#endif

#if (VK_EXT_display_control)
void cleanup_VkDisplayPowerInfoEXT(VkDisplayPowerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_display_swapchain)
void cleanup_VkDisplayPresentInfoKHR(VkDisplayPresentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2)
void cleanup_VkDisplayProperties2KHR(VkDisplayProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_display)
void cleanup_VkDisplayPropertiesKHR(VkDisplayPropertiesKHR const *pData) {
  // displayName - null-terminated
  free((void *)pData->displayName);
}
#endif

#if (VK_KHR_display)
void cleanup_VkDisplaySurfaceCreateInfoKHR(VkDisplaySurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_NV_display_stereo)
void cleanup_VkDisplaySurfaceStereoCreateInfoNV(VkDisplaySurfaceStereoCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkDrawIndexedIndirectCommand(VkDrawIndexedIndirectCommand const *pData) {}

void cleanup_VkDrawIndirectCommand(VkDrawIndirectCommand const *pData) {}

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkDrawIndirectCountIndirectCommandEXT(
    VkDrawIndirectCountIndirectCommandEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader)
void cleanup_VkDrawMeshTasksIndirectCommandEXT(VkDrawMeshTasksIndirectCommandEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader)
void cleanup_VkDrawMeshTasksIndirectCommandNV(VkDrawMeshTasksIndirectCommandNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_EXT_image_drm_format_modifier)
void cleanup_VkDrmFormatModifierProperties2EXT(VkDrmFormatModifierProperties2EXT const *pData){}
#endif

#if (VK_HEADER_VERSION >= 281 && VK_EXT_image_drm_format_modifier &&                               \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 && VK_EXT_image_drm_format_modifier &&   \
     VK_KHR_format_feature_flags2) ||                                                              \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_EXT_image_drm_format_modifier)
void cleanup_VkDrmFormatModifierProperties2EXT(VkDrmFormatModifierProperties2EXT const *pData) {
}
#endif

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
void cleanup_VkDrmFormatModifierPropertiesEXT(VkDrmFormatModifierPropertiesEXT const *pData){}
#endif

#if (VK_HEADER_VERSION >= 281 && VK_EXT_image_drm_format_modifier &&                               \
     (VK_KHR_format_feature_flags2 || VK_VERSION_1_3)) ||                                          \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 280 && VK_EXT_image_drm_format_modifier &&   \
     VK_KHR_format_feature_flags2) ||                                                              \
    (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 240 && VK_EXT_image_drm_format_modifier)
void cleanup_VkDrmFormatModifierPropertiesList2EXT(
    VkDrmFormatModifierPropertiesList2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDrmFormatModifierProperties - drmFormatModifierCount
  for (size_t i = 0; i < pData->drmFormatModifierCount; ++i) {
    cleanup_VkDrmFormatModifierProperties2EXT(&pData->pDrmFormatModifierProperties[i]);
  }
  free((void *)pData->pDrmFormatModifierProperties);
}
#endif

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
void cleanup_VkDrmFormatModifierPropertiesListEXT(
    VkDrmFormatModifierPropertiesListEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDrmFormatModifierProperties - drmFormatModifierCount
  for (size_t i = 0; i < pData->drmFormatModifierCount; ++i) {
    cleanup_VkDrmFormatModifierPropertiesEXT(&pData->pDrmFormatModifierProperties[i]);
  }
  free((void *)pData->pDrmFormatModifierProperties);
}
#endif

void cleanup_VkEventCreateInfo(VkEventCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkExecutionGraphPipelineCreateInfoAMDX(
    VkExecutionGraphPipelineCreateInfoAMDX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  for (size_t i = 0; i < pData->stageCount; ++i) {
    cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pLibraryInfo
  if (pData->pLibraryInfo != NULL)
    cleanup_VkPipelineLibraryCreateInfoKHR(pData->pLibraryInfo);
  free((void *)pData->pLibraryInfo);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&             \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkExecutionGraphPipelineScratchSizeAMDX(
    VkExecutionGraphPipelineScratchSizeAMDX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkExecutionGraphPipelineScratchSizeAMDX(
    VkExecutionGraphPipelineScratchSizeAMDX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExportFenceCreateInfo(VkExportFenceCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_fence)
void cleanup_VkExportFenceCreateInfoKHR(VkExportFenceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
void cleanup_VkExportFenceSciSyncInfoNV(VkExportFenceSciSyncInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_fence_win32)
void cleanup_VkExportFenceWin32HandleInfoKHR(VkExportFenceWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttributes
  free((void *)pData->pAttributes);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExportMemoryAllocateInfo(VkExportMemoryAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory)
void cleanup_VkExportMemoryAllocateInfoKHR(VkExportMemoryAllocateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_NV_external_memory)
void cleanup_VkExportMemoryAllocateInfoNV(VkExportMemoryAllocateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkExportMemorySciBufInfoNV(VkExportMemorySciBufInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_win32)
void cleanup_VkExportMemoryWin32HandleInfoKHR(VkExportMemoryWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttributes
  free((void *)pData->pAttributes);
}
#endif

#if (VK_NV_external_memory_win32)
void cleanup_VkExportMemoryWin32HandleInfoNV(VkExportMemoryWin32HandleInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttributes
  free((void *)pData->pAttributes);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalBufferInfoEXT(VkExportMetalBufferInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalCommandQueueInfoEXT(VkExportMetalCommandQueueInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalDeviceInfoEXT(VkExportMetalDeviceInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalIOSurfaceInfoEXT(VkExportMetalIOSurfaceInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalObjectCreateInfoEXT(VkExportMetalObjectCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalObjectsInfoEXT(VkExportMetalObjectsInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalSharedEventInfoEXT(VkExportMetalSharedEventInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkExportMetalTextureInfoEXT(VkExportMetalTextureInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExportSemaphoreCreateInfo(VkExportSemaphoreCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_semaphore)
void cleanup_VkExportSemaphoreCreateInfoKHR(VkExportSemaphoreCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
void cleanup_VkExportSemaphoreSciSyncInfoNV(VkExportSemaphoreSciSyncInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_semaphore_win32)
void cleanup_VkExportSemaphoreWin32HandleInfoKHR(VkExportSemaphoreWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttributes
  free((void *)pData->pAttributes);
}
#endif

void cleanup_VkExtensionProperties(VkExtensionProperties const *pData) {}

void cleanup_VkExtent2D(VkExtent2D const *pData) {}

void cleanup_VkExtent3D(VkExtent3D const *pData) {}

#if (VK_VERSION_1_1)
void cleanup_VkExternalBufferProperties(VkExternalBufferProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_capabilities)
void cleanup_VkExternalBufferPropertiesKHR(VkExternalBufferPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
void cleanup_VkExternalComputeQueueCreateInfoNV(VkExternalComputeQueueCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
void cleanup_VkExternalComputeQueueDataParamsNV(VkExternalComputeQueueDataParamsNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
void cleanup_VkExternalComputeQueueDeviceCreateInfoNV(
    VkExternalComputeQueueDeviceCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalFenceProperties(VkExternalFenceProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_fence_capabilities)
void cleanup_VkExternalFencePropertiesKHR(VkExternalFencePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkExternalFormatANDROID(VkExternalFormatANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
void cleanup_VkExternalFormatQNX(VkExternalFormatQNX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalImageFormatProperties(VkExternalImageFormatProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_capabilities)
void cleanup_VkExternalImageFormatPropertiesKHR(VkExternalImageFormatPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_NV_external_memory_capabilities)
void cleanup_VkExternalImageFormatPropertiesNV(VkExternalImageFormatPropertiesNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 252 && VK_EXT_external_memory_acquire_unmodified)
void cleanup_VkExternalMemoryAcquireUnmodifiedEXT(
    VkExternalMemoryAcquireUnmodifiedEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalMemoryBufferCreateInfo(VkExternalMemoryBufferCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory)
void cleanup_VkExternalMemoryBufferCreateInfoKHR(VkExternalMemoryBufferCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalMemoryImageCreateInfo(VkExternalMemoryImageCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory)
void cleanup_VkExternalMemoryImageCreateInfoKHR(VkExternalMemoryImageCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_NV_external_memory)
void cleanup_VkExternalMemoryImageCreateInfoNV(VkExternalMemoryImageCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalMemoryProperties(VkExternalMemoryProperties const *pData) {}
#endif

#if (VK_KHR_external_memory_capabilities)
void cleanup_VkExternalMemoryPropertiesKHR(VkExternalMemoryPropertiesKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkExternalMemoryTensorCreateInfoARM(VkExternalMemoryTensorCreateInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkExternalSemaphoreProperties(VkExternalSemaphoreProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_semaphore_capabilities)
void cleanup_VkExternalSemaphorePropertiesKHR(VkExternalSemaphorePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkExternalTensorPropertiesARM(VkExternalTensorPropertiesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkFaultCallbackInfo(VkFaultCallbackInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pFaults - faultCount
  for (size_t i = 0; i < pData->faultCount; ++i) {
    cleanup_VkFaultData(&pData->pFaults[i]);
  }
  free((void *)pData->pFaults);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkFaultData(VkFaultData const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkFenceCreateInfo(VkFenceCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_KHR_external_fence_fd)
void cleanup_VkFenceGetFdInfoKHR(VkFenceGetFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
void cleanup_VkFenceGetSciSyncInfoNV(VkFenceGetSciSyncInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_fence_win32)
void cleanup_VkFenceGetWin32HandleInfoKHR(VkFenceGetWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic)
void cleanup_VkFilterCubicImageViewImageFormatPropertiesEXT(
    VkFilterCubicImageViewImageFormatPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkFormatProperties(VkFormatProperties const *pData) {}

#if (VK_VERSION_1_1)
void cleanup_VkFormatProperties2(VkFormatProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkFormatProperties2KHR(VkFormatProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkFormatProperties3(VkFormatProperties3 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_format_feature_flags2)
void cleanup_VkFormatProperties3KHR(VkFormatProperties3KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_format_feature_flags2)
void cleanup_VkFormatProperties3KHR(VkFormatProperties3KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
void cleanup_VkFragmentShadingRateAttachmentInfoKHR(
    VkFragmentShadingRateAttachmentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pFragmentShadingRateAttachment
  if (pData->pFragmentShadingRateAttachment != NULL)
    cleanup_VkAttachmentReference2(pData->pFragmentShadingRateAttachment);
  free((void *)pData->pFragmentShadingRateAttachment);
}
#endif

#if (VK_HEADER_VERSION >= 264 && VK_EXT_frame_boundary)
void cleanup_VkFrameBoundaryEXT(VkFrameBoundaryEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pImages - imageCount
  free((void *)pData->pImages);

  // pBuffers - bufferCount
  free((void *)pData->pBuffers);

  // pTag - tagSize
  free((void *)pData->pTag);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_frame_boundary)
void cleanup_VkFrameBoundaryTensorsARM(VkFrameBoundaryTensorsARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTensors - tensorCount
  free((void *)pData->pTensors);
}
#endif

#if (VK_HEADER_VERSION >= 142 && VK_VERSION_1_2)
void cleanup_VkFramebufferAttachmentImageInfo(VkFramebufferAttachmentImageInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewFormats - viewFormatCount
  free((void *)pData->pViewFormats);
}
#endif

#if VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130
void cleanup_VkFramebufferAttachmentImageInfoKHR(VkFramebufferAttachmentImageInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewFormats - viewFormatCount
  free((void *)pData->pViewFormats);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer)
void cleanup_VkFramebufferAttachmentImageInfoKHR(VkFramebufferAttachmentImageInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewFormats - viewFormatCount
  free((void *)pData->pViewFormats);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkFramebufferAttachmentsCreateInfo(VkFramebufferAttachmentsCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachmentImageInfos - attachmentImageInfoCount
  for (size_t i = 0; i < pData->attachmentImageInfoCount; ++i) {
    cleanup_VkFramebufferAttachmentImageInfo(&pData->pAttachmentImageInfos[i]);
  }
  free((void *)pData->pAttachmentImageInfos);
}
#endif

#if (VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer)
void cleanup_VkFramebufferAttachmentsCreateInfoKHR(
    VkFramebufferAttachmentsCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachmentImageInfos - attachmentImageInfoCount
  for (size_t i = 0; i < pData->attachmentImageInfoCount; ++i) {
    cleanup_VkFramebufferAttachmentImageInfoKHR(&pData->pAttachmentImageInfos[i]);
  }
  free((void *)pData->pAttachmentImageInfos);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer)
void cleanup_VkFramebufferAttachmentsCreateInfoKHR(
    VkFramebufferAttachmentsCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachmentImageInfos - attachmentImageInfoCount
  for (size_t i = 0; i < pData->attachmentImageInfoCount; ++i) {
    cleanup_VkFramebufferAttachmentImageInfo(&pData->pAttachmentImageInfos[i]);
  }
  free((void *)pData->pAttachmentImageInfos);
}
#endif

void cleanup_VkFramebufferCreateInfo(VkFramebufferCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  free((void *)pData->pAttachments);
}

#if (VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode)
void cleanup_VkFramebufferMixedSamplesCombinationNV(
    VkFramebufferMixedSamplesCombinationNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkGeneratedCommandsInfoEXT(VkGeneratedCommandsInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkGeneratedCommandsInfoNV(VkGeneratedCommandsInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStreams - streamCount
  for (size_t i = 0; i < pData->streamCount; ++i) {
    cleanup_VkIndirectCommandsStreamNV(&pData->pStreams[i]);
  }
  free((void *)pData->pStreams);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkGeneratedCommandsMemoryRequirementsInfoEXT(
    VkGeneratedCommandsMemoryRequirementsInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkGeneratedCommandsMemoryRequirementsInfoNV(
    VkGeneratedCommandsMemoryRequirementsInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkGeneratedCommandsPipelineInfoEXT(VkGeneratedCommandsPipelineInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkGeneratedCommandsShaderInfoEXT(VkGeneratedCommandsShaderInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pShaders - shaderCount
  free((void *)pData->pShaders);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkGeometryAABBNV(VkGeometryAABBNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkGeometryAABBNVX(VkGeometryAABBNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkGeometryDataNV(VkGeometryDataNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkGeometryDataNVX(VkGeometryDataNVX const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 134 && VK_NV_ray_tracing)
void cleanup_VkGeometryNV(VkGeometryNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
void cleanup_VkGeometryNV(VkGeometryNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkGeometryNVX(VkGeometryNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkGeometryTrianglesNV(VkGeometryTrianglesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkGeometryTrianglesNVX(VkGeometryTrianglesNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 266 && VK_HEADER_VERSION <= 270 && VK_NV_low_latency2)
void cleanup_VkGetLatencyMarkerInfoNV(VkGetLatencyMarkerInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTimings
  if (pData->pTimings != NULL)
    cleanup_VkLatencyTimingsFrameReportNV(pData->pTimings);
  free((void *)pData->pTimings);
}
#endif

#if (VK_HEADER_VERSION >= 271 && VK_NV_low_latency2)
void cleanup_VkGetLatencyMarkerInfoNV(VkGetLatencyMarkerInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTimings - timingCount
  for (size_t i = 0; i < pData->timingCount; ++i) {
    cleanup_VkLatencyTimingsFrameReportNV(&pData->pTimings[i]);
  }
  free((void *)pData->pTimings);
}
#endif

#if VK_HEADER_VERSION <= 240
void cleanup_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  for (size_t i = 0; i < pData->stageCount; ++i) {
    cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pVertexInputState
  if (pData->pVertexInputState != NULL)
    cleanup_VkPipelineVertexInputStateCreateInfo(pData->pVertexInputState);
  free((void *)pData->pVertexInputState);

  // pInputAssemblyState
  if (pData->pInputAssemblyState != NULL)
    cleanup_VkPipelineInputAssemblyStateCreateInfo(pData->pInputAssemblyState);
  free((void *)pData->pInputAssemblyState);

  // pTessellationState
  if (pData->pTessellationState != NULL)
    cleanup_VkPipelineTessellationStateCreateInfo(pData->pTessellationState);
  free((void *)pData->pTessellationState);

  // pViewportState
  if (pData->pViewportState != NULL)
    cleanup_VkPipelineViewportStateCreateInfo(pData->pViewportState);
  free((void *)pData->pViewportState);

  // pRasterizationState
  if (pData->pRasterizationState != NULL)
    cleanup_VkPipelineRasterizationStateCreateInfo(pData->pRasterizationState);
  free((void *)pData->pRasterizationState);

  // pMultisampleState
  if (pData->pMultisampleState != NULL)
    cleanup_VkPipelineMultisampleStateCreateInfo(pData->pMultisampleState);
  free((void *)pData->pMultisampleState);

  // pDepthStencilState
  if (pData->pDepthStencilState != NULL)
    cleanup_VkPipelineDepthStencilStateCreateInfo(pData->pDepthStencilState);
  free((void *)pData->pDepthStencilState);

  // pColorBlendState
  if (pData->pColorBlendState != NULL)
    cleanup_VkPipelineColorBlendStateCreateInfo(pData->pColorBlendState);
  free((void *)pData->pColorBlendState);

  // pDynamicState
  if (pData->pDynamicState != NULL)
    cleanup_VkPipelineDynamicStateCreateInfo(pData->pDynamicState);
  free((void *)pData->pDynamicState);
}
#endif

#if VK_HEADER_VERSION >= 241
void cleanup_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  for (size_t i = 0; i < pData->stageCount; ++i) {
    cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pVertexInputState
  if (pData->pVertexInputState != NULL)
    cleanup_VkPipelineVertexInputStateCreateInfo(pData->pVertexInputState);
  free((void *)pData->pVertexInputState);

  // pInputAssemblyState
  if (pData->pInputAssemblyState != NULL)
    cleanup_VkPipelineInputAssemblyStateCreateInfo(pData->pInputAssemblyState);
  free((void *)pData->pInputAssemblyState);

  // pTessellationState
  if (pData->pTessellationState != NULL)
    cleanup_VkPipelineTessellationStateCreateInfo(pData->pTessellationState);
  free((void *)pData->pTessellationState);

  // pViewportState
  if (pData->pViewportState != NULL)
    cleanup_VkPipelineViewportStateCreateInfo(pData->pViewportState);
  free((void *)pData->pViewportState);

  // pRasterizationState
  if (pData->pRasterizationState != NULL)
    cleanup_VkPipelineRasterizationStateCreateInfo(pData->pRasterizationState);
  free((void *)pData->pRasterizationState);

  // pMultisampleState
  if (pData->pMultisampleState != NULL)
    cleanup_VkPipelineMultisampleStateCreateInfo(pData->pMultisampleState);
  free((void *)pData->pMultisampleState);

  // pDepthStencilState
  if (pData->pDepthStencilState != NULL)
    cleanup_VkPipelineDepthStencilStateCreateInfo(pData->pDepthStencilState);
  free((void *)pData->pDepthStencilState);

  // pColorBlendState
  if (pData->pColorBlendState != NULL)
    cleanup_VkPipelineColorBlendStateCreateInfo(pData->pColorBlendState);
  free((void *)pData->pColorBlendState);

  // pDynamicState
  if (pData->pDynamicState != NULL)
    cleanup_VkPipelineDynamicStateCreateInfo(pData->pDynamicState);
  free((void *)pData->pDynamicState);
}
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library)
void cleanup_VkGraphicsPipelineLibraryCreateInfoEXT(
    VkGraphicsPipelineLibraryCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkGraphicsPipelineShaderGroupsCreateInfoNV(
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pGroups - groupCount
  for (size_t i = 0; i < pData->groupCount; ++i) {
    cleanup_VkGraphicsShaderGroupCreateInfoNV(&pData->pGroups[i]);
  }
  free((void *)pData->pGroups);

  // pPipelines - pipelineCount
  free((void *)pData->pPipelines);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkGraphicsShaderGroupCreateInfoNV(VkGraphicsShaderGroupCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  for (size_t i = 0; i < pData->stageCount; ++i) {
    cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pVertexInputState
  if (pData->pVertexInputState != NULL)
    cleanup_VkPipelineVertexInputStateCreateInfo(pData->pVertexInputState);
  free((void *)pData->pVertexInputState);

  // pTessellationState
  if (pData->pTessellationState != NULL)
    cleanup_VkPipelineTessellationStateCreateInfo(pData->pTessellationState);
  free((void *)pData->pTessellationState);
}
#endif

#if (VK_EXT_hdr_metadata)
void cleanup_VkHdrMetadataEXT(VkHdrMetadataEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 301 && VK_HUAWEI_hdr_vivid)
void cleanup_VkHdrVividDynamicMetadataHUAWEI(VkHdrVividDynamicMetadataHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDynamicMetadata - dynamicMetadataSize
  free((void *)pData->pDynamicMetadata);
}
#endif

#if (VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface)
void cleanup_VkHeadlessSurfaceCreateInfoEXT(VkHeadlessSurfaceCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkHostImageCopyDevicePerformanceQuery(
    VkHostImageCopyDevicePerformanceQuery const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkHostImageCopyDevicePerformanceQueryEXT(
    VkHostImageCopyDevicePerformanceQueryEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkHostImageCopyDevicePerformanceQueryEXT(
    VkHostImageCopyDevicePerformanceQueryEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkHostImageLayoutTransitionInfo(VkHostImageLayoutTransitionInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkHostImageLayoutTransitionInfoEXT(VkHostImageLayoutTransitionInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkHostImageLayoutTransitionInfoEXT(VkHostImageLayoutTransitionInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_MVK_ios_surface)
void cleanup_VkIOSSurfaceCreateInfoMVK(VkIOSSurfaceCreateInfoMVK const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pView
  free((void *)pData->pView);
}
#endif

#if (VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control)
void cleanup_VkImageAlignmentControlCreateInfoMESA(
    VkImageAlignmentControlCreateInfoMESA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkImageBlit(VkImageBlit const *pData) {}

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkImageBlit2(VkImageBlit2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkImageBlit2KHR(VkImageBlit2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkImageBlit2KHR(VkImageBlit2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkImageCaptureDescriptorDataInfoEXT(VkImageCaptureDescriptorDataInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control)
void cleanup_VkImageCompressionControlEXT(VkImageCompressionControlEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pFixedRateFlags - compressionControlPlaneCount
  free((void *)pData->pFixedRateFlags);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control)
void cleanup_VkImageCompressionPropertiesEXT(VkImageCompressionPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkImageConstraintsInfoFUCHSIA(VkImageConstraintsInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pFormatConstraints - formatConstraintsCount
  for (size_t i = 0; i < pData->formatConstraintsCount; ++i) {
    cleanup_VkImageFormatConstraintsInfoFUCHSIA(&pData->pFormatConstraints[i]);
  }
  free((void *)pData->pFormatConstraints);
}
#endif

void cleanup_VkImageCopy(VkImageCopy const *pData) {}

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkImageCopy2(VkImageCopy2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkImageCopy2KHR(VkImageCopy2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkImageCopy2KHR(VkImageCopy2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkImageCreateInfo(VkImageCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueueFamilyIndices - queueFamilyIndexCount
  free((void *)pData->pQueueFamilyIndices);
}

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
void cleanup_VkImageDrmFormatModifierExplicitCreateInfoEXT(
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPlaneLayouts - drmFormatModifierPlaneCount
  for (size_t i = 0; i < pData->drmFormatModifierPlaneCount; ++i) {
    cleanup_VkSubresourceLayout(&pData->pPlaneLayouts[i]);
  }
  free((void *)pData->pPlaneLayouts);
}
#endif

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
void cleanup_VkImageDrmFormatModifierListCreateInfoEXT(
    VkImageDrmFormatModifierListCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDrmFormatModifiers - drmFormatModifierCount
  free((void *)pData->pDrmFormatModifiers);
}
#endif

#if (VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier)
void cleanup_VkImageDrmFormatModifierPropertiesEXT(
    VkImageDrmFormatModifierPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkImageFormatConstraintsInfoFUCHSIA(VkImageFormatConstraintsInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorSpaces - colorSpaceCount
  for (size_t i = 0; i < pData->colorSpaceCount; ++i) {
    cleanup_VkSysmemColorSpaceFUCHSIA(&pData->pColorSpaces[i]);
  }
  free((void *)pData->pColorSpaces);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkImageFormatListCreateInfo(VkImageFormatListCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewFormats - viewFormatCount
  free((void *)pData->pViewFormats);
}
#endif

#if (VK_HEADER_VERSION <= 130 && VK_KHR_image_format_list)
void cleanup_VkImageFormatListCreateInfoKHR(VkImageFormatListCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewFormats - viewFormatCount
  free((void *)pData->pViewFormats);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_image_format_list)
void cleanup_VkImageFormatListCreateInfoKHR(VkImageFormatListCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewFormats - viewFormatCount
  free((void *)pData->pViewFormats);
}
#endif

void cleanup_VkImageFormatProperties(VkImageFormatProperties const *pData) {}

#if (VK_VERSION_1_1)
void cleanup_VkImageFormatProperties2(VkImageFormatProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkImageFormatProperties2KHR(VkImageFormatProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkImageMemoryBarrier(VkImageMemoryBarrier const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkImageMemoryBarrier2(VkImageMemoryBarrier2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkImageMemoryRequirementsInfo2(VkImageMemoryRequirementsInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_memory_requirements2)
void cleanup_VkImageMemoryRequirementsInfo2KHR(VkImageMemoryRequirementsInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface)
void cleanup_VkImagePipeSurfaceCreateInfoFUCHSIA(VkImagePipeSurfaceCreateInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkImagePlaneMemoryRequirementsInfo(VkImagePlaneMemoryRequirementsInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkImagePlaneMemoryRequirementsInfoKHR(
    VkImagePlaneMemoryRequirementsInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkImageResolve(VkImageResolve const *pData) {}

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkImageResolve2(VkImageResolve2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkImageResolve2KHR(VkImageResolve2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkImageResolve2KHR(VkImageResolve2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkImageSparseMemoryRequirementsInfo2(
    VkImageSparseMemoryRequirementsInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_memory_requirements2)
void cleanup_VkImageSparseMemoryRequirementsInfo2KHR(
    VkImageSparseMemoryRequirementsInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkImageStencilUsageCreateInfo(VkImageStencilUsageCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 93 && VK_HEADER_VERSION <= 130 && VK_EXT_separate_stencil_usage)
void cleanup_VkImageStencilUsageCreateInfoEXT(VkImageStencilUsageCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_separate_stencil_usage)
void cleanup_VkImageStencilUsageCreateInfoEXT(VkImageStencilUsageCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkImageSubresource(VkImageSubresource const *pData) {}

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkImageSubresource2(VkImageSubresource2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 259 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control) ||                                                          \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 257 && VK_EXT_image_compression_control)
void cleanup_VkImageSubresource2EXT(VkImageSubresource2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control)
void cleanup_VkImageSubresource2EXT(VkImageSubresource2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy && VK_EXT_image_compression_control)
void cleanup_VkImageSubresource2EXT(VkImageSubresource2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkImageSubresource2KHR(VkImageSubresource2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkImageSubresource2KHR(VkImageSubresource2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkImageSubresourceLayers(VkImageSubresourceLayers const *pData) {}

void cleanup_VkImageSubresourceRange(VkImageSubresourceRange const *pData){}

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain && VK_VERSION_1_1 && VK_KHR_device_group) ||     \
    (VK_HEADER_VERSION <= 240 && VK_KHR_swapchain && VK_KHR_device_group)
void cleanup_VkImageSwapchainCreateInfoKHR(VkImageSwapchainCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkImageToMemoryCopy(VkImageToMemoryCopy const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pHostPointer
  free((void *)pData->pHostPointer);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkImageToMemoryCopyEXT(VkImageToMemoryCopyEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pHostPointer
  free((void *)pData->pHostPointer);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkImageToMemoryCopyEXT(VkImageToMemoryCopyEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pHostPointer
  free((void *)pData->pHostPointer);
}
#endif

#if (VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode)
void cleanup_VkImageViewASTCDecodeModeEXT(VkImageViewASTCDecodeModeEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 137 && VK_NVX_image_view_handle)
void cleanup_VkImageViewAddressPropertiesNVX(VkImageViewAddressPropertiesNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkImageViewCaptureDescriptorDataInfoEXT(
    VkImageViewCaptureDescriptorDataInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkImageViewCreateInfo(VkImageViewCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 102 && VK_NVX_image_view_handle)
void cleanup_VkImageViewHandleInfoNVX(VkImageViewHandleInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod)
void cleanup_VkImageViewMinLodCreateInfoEXT(VkImageViewMinLodCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing)
void cleanup_VkImageViewSampleWeightCreateInfoQCOM(
    VkImageViewSampleWeightCreateInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_image_sliced_view_of_3d)
void cleanup_VkImageViewSlicedCreateInfoEXT(VkImageViewSlicedCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkImageViewUsageCreateInfo(VkImageViewUsageCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_maintenance2)
void cleanup_VkImageViewUsageCreateInfoKHR(VkImageViewUsageCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkImportAndroidHardwareBufferInfoANDROID(
    VkImportAndroidHardwareBufferInfoANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // buffer
  free((void *)pData->buffer);
}
#endif

#if (VK_KHR_external_fence_fd)
void cleanup_VkImportFenceFdInfoKHR(VkImportFenceFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
void cleanup_VkImportFenceSciSyncInfoNV(VkImportFenceSciSyncInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // handle
  free((void *)pData->handle);
}
#endif

#if (VK_KHR_external_fence_win32)
void cleanup_VkImportFenceWin32HandleInfoKHR(VkImportFenceWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkImportMemoryBufferCollectionFUCHSIA(
    VkImportMemoryBufferCollectionFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_fd)
void cleanup_VkImportMemoryFdInfoKHR(VkImportMemoryFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_external_memory_host)
void cleanup_VkImportMemoryHostPointerInfoEXT(VkImportMemoryHostPointerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pHostPointer
  free((void *)pData->pHostPointer);
}
#endif

#if (VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal)
void cleanup_VkImportMemoryMetalHandleInfoEXT(VkImportMemoryMetalHandleInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // handle
  free((void *)pData->handle);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkImportMemorySciBufInfoNV(VkImportMemorySciBufInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_win32)
void cleanup_VkImportMemoryWin32HandleInfoKHR(VkImportMemoryWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_NV_external_memory_win32)
void cleanup_VkImportMemoryWin32HandleInfoNV(VkImportMemoryWin32HandleInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory)
void cleanup_VkImportMemoryZirconHandleInfoFUCHSIA(
    VkImportMemoryZirconHandleInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkImportMetalBufferInfoEXT(VkImportMetalBufferInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkImportMetalIOSurfaceInfoEXT(VkImportMetalIOSurfaceInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkImportMetalSharedEventInfoEXT(VkImportMetalSharedEventInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_metal_objects)
void cleanup_VkImportMetalTextureInfoEXT(VkImportMetalTextureInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
void cleanup_VkImportScreenBufferInfoQNX(VkImportScreenBufferInfoQNX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // buffer
  free((void *)pData->buffer);
}
#endif

#if (VK_KHR_external_semaphore_fd)
void cleanup_VkImportSemaphoreFdInfoKHR(VkImportSemaphoreFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
void cleanup_VkImportSemaphoreSciSyncInfoNV(VkImportSemaphoreSciSyncInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // handle
  free((void *)pData->handle);
}
#endif

#if (VK_KHR_external_semaphore_win32)
void cleanup_VkImportSemaphoreWin32HandleInfoKHR(VkImportSemaphoreWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore)
void cleanup_VkImportSemaphoreZirconHandleInfoFUCHSIA(
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsExecutionSetTokenEXT(
    VkIndirectCommandsExecutionSetTokenEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsIndexBufferTokenEXT(
    VkIndirectCommandsIndexBufferTokenEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutCreateInfoEXT(
    VkIndirectCommandsLayoutCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTokens - tokenCount
  for (size_t i = 0; i < pData->tokenCount; ++i) {
    cleanup_VkIndirectCommandsLayoutTokenEXT(&pData->pTokens[i]);
  }
  free((void *)pData->pTokens);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutCreateInfoNV(
    VkIndirectCommandsLayoutCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTokens - tokenCount
  for (size_t i = 0; i < pData->tokenCount; ++i) {
    cleanup_VkIndirectCommandsLayoutTokenNV(&pData->pTokens[i]);
  }
  free((void *)pData->pTokens);

  // pStreamStrides - streamCount
  free((void *)pData->pStreamStrides);
}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutCreateInfoNVX(
    VkIndirectCommandsLayoutCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTokens - tokenCount
  for (size_t i = 0; i < pData->tokenCount; ++i) {
    cleanup_VkIndirectCommandsLayoutTokenNVX(&pData->pTokens[i]);
  }
  free((void *)pData->pTokens);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutTokenEXT(VkIndirectCommandsLayoutTokenEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutTokenNV(VkIndirectCommandsLayoutTokenNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pIndexTypes - indexTypeCount
  free((void *)pData->pIndexTypes);

  // pIndexTypeValues - indexTypeCount
  free((void *)pData->pIndexTypeValues);
}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkIndirectCommandsLayoutTokenNVX(VkIndirectCommandsLayoutTokenNVX const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsPushConstantTokenEXT(
    VkIndirectCommandsPushConstantTokenEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkIndirectCommandsStreamNV(VkIndirectCommandsStreamNV const *pData) {}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkIndirectCommandsTokenNVX(VkIndirectCommandsTokenNVX const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectCommandsVertexBufferTokenEXT(
    VkIndirectCommandsVertexBufferTokenEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectExecutionSetCreateInfoEXT(VkIndirectExecutionSetCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectExecutionSetPipelineInfoEXT(
    VkIndirectExecutionSetPipelineInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectExecutionSetShaderInfoEXT(VkIndirectExecutionSetShaderInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInitialShaders - shaderCount
  free((void *)pData->pInitialShaders);

  // pSetLayoutInfos - shaderCount
  for (size_t i = 0; i < pData->shaderCount; ++i) {
    cleanup_VkIndirectExecutionSetShaderLayoutInfoEXT(&pData->pSetLayoutInfos[i]);
  }
  free((void *)pData->pSetLayoutInfos);

  // pPushConstantRanges - pushConstantRangeCount
  for (size_t i = 0; i < pData->pushConstantRangeCount; ++i) {
    cleanup_VkPushConstantRange(&pData->pPushConstantRanges[i]);
  }
  free((void *)pData->pPushConstantRanges);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkIndirectExecutionSetShaderLayoutInfoEXT(
    VkIndirectExecutionSetShaderLayoutInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetLayouts - setLayoutCount
  free((void *)pData->pSetLayouts);
}
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkInitializePerformanceApiInfoINTEL(VkInitializePerformanceApiInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pUserData
  free((void *)pData->pUserData);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkInputAttachmentAspectReference(VkInputAttachmentAspectReference const *pData) {}
#endif

#if (VK_KHR_maintenance2)
void cleanup_VkInputAttachmentAspectReferenceKHR(VkInputAttachmentAspectReferenceKHR const *pData) {
}
#endif

void cleanup_VkInstanceCreateInfo(VkInstanceCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pApplicationInfo
  if (pData->pApplicationInfo != NULL)
    cleanup_VkApplicationInfo(pData->pApplicationInfo);
  free((void *)pData->pApplicationInfo);

  // ppEnabledLayerNames - enabledLayerCount,null-terminated
  for (size_t i = 0; i < pData->enabledLayerCount; ++i) {
    free((void *)pData->ppEnabledLayerNames[i]);
  }
  free((void *)pData->ppEnabledLayerNames);

  // ppEnabledExtensionNames - enabledExtensionCount,null-terminated
  for (size_t i = 0; i < pData->enabledExtensionCount; ++i) {
    free((void *)pData->ppEnabledExtensionNames[i]);
  }
  free((void *)pData->ppEnabledExtensionNames);
}

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkLatencySleepInfoNV(VkLatencySleepInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkLatencySleepModeInfoNV(VkLatencySleepModeInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkLatencySubmissionPresentIdNV(VkLatencySubmissionPresentIdNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkLatencySurfaceCapabilitiesNV(VkLatencySurfaceCapabilitiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPresentModes - presentModeCount
  free((void *)pData->pPresentModes);
}
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkLatencyTimingsFrameReportNV(VkLatencyTimingsFrameReportNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkLayerProperties(VkLayerProperties const *pData) {}

#if (VK_HEADER_VERSION >= 272 && VK_EXT_layer_settings)
void cleanup_VkLayerSettingEXT(VkLayerSettingEXT const *pData) {
  // pLayerName - null-terminated
  free((void *)pData->pLayerName);

  // pSettingName - null-terminated
  free((void *)pData->pSettingName);

  // pValues - valueCount
  free((void *)pData->pValues);
}
#endif

#if (VK_HEADER_VERSION >= 272 && VK_EXT_layer_settings)
void cleanup_VkLayerSettingsCreateInfoEXT(VkLayerSettingsCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSettings - settingCount
  for (size_t i = 0; i < pData->settingCount; ++i) {
    cleanup_VkLayerSettingEXT(&pData->pSettings[i]);
  }
  free((void *)pData->pSettings);
}
#endif

#if (VK_MVK_macos_surface)
void cleanup_VkMacOSSurfaceCreateInfoMVK(VkMacOSSurfaceCreateInfoMVK const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pView
  free((void *)pData->pView);
}
#endif

void cleanup_VkMappedMemoryRange(VkMappedMemoryRange const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_VERSION_1_1)
void cleanup_VkMemoryAllocateFlagsInfo(VkMemoryAllocateFlagsInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_device_group)
void cleanup_VkMemoryAllocateFlagsInfoKHR(VkMemoryAllocateFlagsInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkMemoryAllocateInfo(VkMemoryAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkMemoryBarrier(VkMemoryBarrier const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkMemoryBarrier2(VkMemoryBarrier2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 305 && VK_KHR_maintenance8)
void cleanup_VkMemoryBarrierAccessFlags3KHR(VkMemoryBarrierAccessFlags3KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkMemoryDedicatedAllocateInfo(VkMemoryDedicatedAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_dedicated_allocation)
void cleanup_VkMemoryDedicatedAllocateInfoKHR(VkMemoryDedicatedAllocateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkMemoryDedicatedAllocateInfoTensorARM(
    VkMemoryDedicatedAllocateInfoTensorARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkMemoryDedicatedRequirements(VkMemoryDedicatedRequirements const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_dedicated_allocation)
void cleanup_VkMemoryDedicatedRequirementsKHR(VkMemoryDedicatedRequirementsKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_fd)
void cleanup_VkMemoryFdPropertiesKHR(VkMemoryFdPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_ANDROID_external_memory_android_hardware_buffer)
void cleanup_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_fd)
void cleanup_VkMemoryGetFdInfoKHR(VkMemoryGetFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal)
void cleanup_VkMemoryGetMetalHandleInfoEXT(VkMemoryGetMetalHandleInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma)
void cleanup_VkMemoryGetRemoteAddressInfoNV(VkMemoryGetRemoteAddressInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkMemoryGetSciBufInfoNV(VkMemoryGetSciBufInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_win32)
void cleanup_VkMemoryGetWin32HandleInfoKHR(VkMemoryGetWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory)
void cleanup_VkMemoryGetZirconHandleInfoFUCHSIA(VkMemoryGetZirconHandleInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkMemoryHeap(VkMemoryHeap const *pData) {}

#if (VK_EXT_external_memory_host)
void cleanup_VkMemoryHostPointerPropertiesEXT(VkMemoryHostPointerPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkMemoryMapInfo(VkMemoryMapInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 244 && VK_HEADER_VERSION <= 302 && VK_KHR_map_memory2)
void cleanup_VkMemoryMapInfoKHR(VkMemoryMapInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_map_memory2)
void cleanup_VkMemoryMapInfoKHR(VkMemoryMapInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed)
void cleanup_VkMemoryMapPlacedInfoEXT(VkMemoryMapPlacedInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPlacedAddress
  free((void *)pData->pPlacedAddress);
}
#endif

#if (VK_HEADER_VERSION >= 306 && VK_EXT_external_memory_metal)
void cleanup_VkMemoryMetalHandlePropertiesEXT(VkMemoryMetalHandlePropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkMemoryOpaqueCaptureAddressAllocateInfo(
    VkMemoryOpaqueCaptureAddressAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
void cleanup_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address)
void cleanup_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority)
void cleanup_VkMemoryPriorityAllocateInfoEXT(VkMemoryPriorityAllocateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkMemoryRequirements(VkMemoryRequirements const *pData) {}

#if (VK_VERSION_1_1)
void cleanup_VkMemoryRequirements2(VkMemoryRequirements2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 281 && VK_KHR_get_memory_requirements2 && VK_NV_ray_tracing &&           \
     (VK_KHR_get_memory_requirements2 || VK_VERSION_1_1)) ||                                       \
    (VK_HEADER_VERSION >= 142 && VK_HEADER_VERSION <= 280 && VK_KHR_get_memory_requirements2 &&    \
     VK_NV_ray_tracing) ||                                                                         \
    (VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 141 && VK_VERSION_1_1 &&                      \
     VK_KHR_get_memory_requirements2 && VK_NV_ray_tracing) ||                                      \
    (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_VERSION_1_1 &&                       \
     VK_KHR_get_memory_requirements2 && VK_NVX_raytracing) ||                                      \
    (VK_HEADER_VERSION <= 84 && VK_KHR_get_memory_requirements2)
void cleanup_VkMemoryRequirements2KHR(VkMemoryRequirements2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkMemorySciBufPropertiesNV(VkMemorySciBufPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkMemoryToImageCopy(VkMemoryToImageCopy const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pHostPointer
  free((void *)pData->pHostPointer);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkMemoryToImageCopyEXT(VkMemoryToImageCopyEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pHostPointer
  free((void *)pData->pHostPointer);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkMemoryToImageCopyEXT(VkMemoryToImageCopyEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pHostPointer
  free((void *)pData->pHostPointer);
}
#endif

void cleanup_VkMemoryType(VkMemoryType const *pData) {}

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkMemoryUnmapInfo(VkMemoryUnmapInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 244 && VK_HEADER_VERSION <= 302 && VK_KHR_map_memory2)
void cleanup_VkMemoryUnmapInfoKHR(VkMemoryUnmapInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_map_memory2)
void cleanup_VkMemoryUnmapInfoKHR(VkMemoryUnmapInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_win32)
void cleanup_VkMemoryWin32HandlePropertiesKHR(VkMemoryWin32HandlePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory)
void cleanup_VkMemoryZirconHandlePropertiesFUCHSIA(
    VkMemoryZirconHandlePropertiesFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface)
void cleanup_VkMetalSurfaceCreateInfoEXT(VkMetalSurfaceCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pLayer
  free((void *)pData->pLayer);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapBuildInfoEXT(VkMicromapBuildInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pUsageCounts - usageCountsCount
  for (size_t i = 0; i < pData->usageCountsCount; ++i) {
    cleanup_VkMicromapUsageEXT(&pData->pUsageCounts[i]);
  }
  free((void *)pData->pUsageCounts);

  // ppUsageCounts - usageCountsCount,1
  for (size_t i = 0; i < pData->usageCountsCount; ++i) {
    for (size_t j = 0; j < 1; ++j) {
      cleanup_VkMicromapUsageEXT(&pData->ppUsageCounts[i][j]);
    }
    free((void *)pData->ppUsageCounts[i]);
  }
  free((void *)pData->ppUsageCounts);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapBuildSizesInfoEXT(VkMicromapBuildSizesInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapCreateInfoEXT(VkMicromapCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapTriangleEXT(VkMicromapTriangleEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapUsageEXT(VkMicromapUsageEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkMicromapVersionInfoEXT(VkMicromapVersionInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVersionData - 2*VK_UUID_SIZE
  free((void *)pData->pVersionData);
}
#endif

#if (VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface)
void cleanup_VkMirSurfaceCreateInfoKHR(VkMirSurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // connection
  free((void *)pData->connection);

  // mirSurface
  free((void *)pData->mirSurface);
}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw)
void cleanup_VkMultiDrawIndexedInfoEXT(VkMultiDrawIndexedInfoEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw)
void cleanup_VkMultiDrawInfoEXT(VkMultiDrawInfoEXT const *pData) {}
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkMultisamplePropertiesEXT(VkMultisamplePropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled)
void cleanup_VkMultisampledRenderToSingleSampledInfoEXT(
    VkMultisampledRenderToSingleSampledInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NVX_multiview_per_view_attributes &&                           \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_NVX_multiview_per_view_attributes) ||                                                      \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
void cleanup_VkMultiviewPerViewAttributesInfoNVX(VkMultiviewPerViewAttributesInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_QCOM_multiview_per_view_render_areas)
void cleanup_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(
    VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPerViewRenderAreas - perViewRenderAreaCount
  for (size_t i = 0; i < pData->perViewRenderAreaCount; ++i) {
    cleanup_VkRect2D(&pData->pPerViewRenderAreas[i]);
  }
  free((void *)pData->pPerViewRenderAreas);
}
#endif

#if (VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeCreateInfoEXT(
    VkMutableDescriptorTypeCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMutableDescriptorTypeLists - mutableDescriptorTypeListCount
  for (size_t i = 0; i < pData->mutableDescriptorTypeListCount; ++i) {
    cleanup_VkMutableDescriptorTypeListEXT(&pData->pMutableDescriptorTypeLists[i]);
  }
  free((void *)pData->pMutableDescriptorTypeLists);
}
#endif

#if (VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMutableDescriptorTypeLists - mutableDescriptorTypeListCount
  for (size_t i = 0; i < pData->mutableDescriptorTypeListCount; ++i) {
    cleanup_VkMutableDescriptorTypeListVALVE(&pData->pMutableDescriptorTypeLists[i]);
  }
  free((void *)pData->pMutableDescriptorTypeLists);
}
#endif

#if (VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMutableDescriptorTypeLists - mutableDescriptorTypeListCount
  for (size_t i = 0; i < pData->mutableDescriptorTypeListCount; ++i) {
    cleanup_VkMutableDescriptorTypeListEXT(&pData->pMutableDescriptorTypeLists[i]);
  }
  free((void *)pData->pMutableDescriptorTypeLists);
}
#endif

#if (VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeListEXT(VkMutableDescriptorTypeListEXT const *pData) {
  // pDescriptorTypes - descriptorTypeCount
  free((void *)pData->pDescriptorTypes);
}
#endif

#if (VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *pData) {
  // pDescriptorTypes - descriptorTypeCount
  free((void *)pData->pDescriptorTypes);
}
#endif

#if (VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *pData) {
  // pDescriptorTypes - descriptorTypeCount
  free((void *)pData->pDescriptorTypes);
}
#endif

#if (VK_HEADER_VERSION <= 116 && VK_ANDROID_native_buffer)
void cleanup_VkNativeBufferANDROID(VkNativeBufferANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // handle
  free((void *)pData->handle);
}
#endif

#if (VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer)
void cleanup_VkNativeBufferANDROID(VkNativeBufferANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // handle
  free((void *)pData->handle);
}
#endif

#if (VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer)
void cleanup_VkNativeBufferUsage2ANDROID(VkNativeBufferUsage2ANDROID const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 318 && VK_OHOS_surface)
void cleanup_VkOHSurfaceCreateInfoOHOS(VkOHSurfaceCreateInfoOHOS const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // window
  free((void *)pData->window);
}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTableCreateInfoNVX(VkObjectTableCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pObjectEntryTypes - objectCount
  free((void *)pData->pObjectEntryTypes);

  // pObjectEntryCounts - objectCount
  free((void *)pData->pObjectEntryCounts);

  // pObjectEntryUsageFlags - objectCount
  free((void *)pData->pObjectEntryUsageFlags);
}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTableDescriptorSetEntryNVX(VkObjectTableDescriptorSetEntryNVX const *pData) {}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTableEntryNVX(VkObjectTableEntryNVX const *pData) {}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTableIndexBufferEntryNVX(VkObjectTableIndexBufferEntryNVX const *pData) {}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTablePipelineEntryNVX(VkObjectTablePipelineEntryNVX const *pData) {}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTablePushConstantEntryNVX(VkObjectTablePushConstantEntryNVX const *pData) {}
#endif

#if (VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands)
void cleanup_VkObjectTableVertexBufferEntryNVX(VkObjectTableVertexBufferEntryNVX const *pData) {}
#endif

void cleanup_VkOffset2D(VkOffset2D const *pData) {}

void cleanup_VkOffset3D(VkOffset3D const *pData) {}

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkOpaqueCaptureDescriptorDataCreateInfoEXT(
    VkOpaqueCaptureDescriptorDataCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // opaqueCaptureDescriptorData
  free((void *)pData->opaqueCaptureDescriptorData);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkOpticalFlowExecuteInfoNV(VkOpticalFlowExecuteInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkRect2D(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkOpticalFlowImageFormatInfoNV(VkOpticalFlowImageFormatInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkOpticalFlowImageFormatPropertiesNV(
    VkOpticalFlowImageFormatPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkOpticalFlowSessionCreateInfoNV(VkOpticalFlowSessionCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkOpticalFlowSessionCreatePrivateDataInfoNV(
    VkOpticalFlowSessionCreatePrivateDataInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPrivateData
  free((void *)pData->pPrivateData);
}
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkOutOfBandQueueTypeInfoNV(VkOutOfBandQueueTypeInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPartitionedAccelerationStructureFlagsNV(
    VkPartitionedAccelerationStructureFlagsNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPartitionedAccelerationStructureInstancesInputNV(
    VkPartitionedAccelerationStructureInstancesInputNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPartitionedAccelerationStructureUpdateInstanceDataNV(
    VkPartitionedAccelerationStructureUpdateInstanceDataNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPartitionedAccelerationStructureWriteInstanceDataNV(
    VkPartitionedAccelerationStructureWriteInstanceDataNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPartitionedAccelerationStructureWritePartitionTranslationDataNV(
    VkPartitionedAccelerationStructureWritePartitionTranslationDataNV const *pData) {}
#endif

#if (VK_GOOGLE_display_timing)
void cleanup_VkPastPresentationTimingGOOGLE(VkPastPresentationTimingGOOGLE const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkPerTileBeginInfoQCOM(VkPerTileBeginInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkPerTileEndInfoQCOM(VkPerTileEndInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkPerformanceConfigurationAcquireInfoINTEL(
    VkPerformanceConfigurationAcquireInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkPerformanceCounterDescriptionKHR(VkPerformanceCounterDescriptionKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkPerformanceCounterKHR(VkPerformanceCounterKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkPerformanceMarkerInfoINTEL(VkPerformanceMarkerInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkPerformanceOverrideInfoINTEL(VkPerformanceOverrideInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_performance_query && VKSC_VERSION_1_0)
void cleanup_VkPerformanceQueryReservationInfoKHR(
    VkPerformanceQueryReservationInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkPerformanceQuerySubmitInfoKHR(VkPerformanceQuerySubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkPerformanceStreamMarkerInfoINTEL(VkPerformanceStreamMarkerInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query)
void cleanup_VkPerformanceValueINTEL(VkPerformanceValueINTEL const *pData) {}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDevice16BitStorageFeatures(
    VkPhysicalDevice16BitStorageFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_16bit_storage)
void cleanup_VkPhysicalDevice16BitStorageFeaturesKHR(
    VkPhysicalDevice16BitStorageFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 149 && VK_EXT_4444_formats)
void cleanup_VkPhysicalDevice4444FormatsFeaturesEXT(
    VkPhysicalDevice4444FormatsFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDevice8BitStorageFeatures(VkPhysicalDevice8BitStorageFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130 && VK_KHR_8bit_storage)
void cleanup_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_8bit_storage)
void cleanup_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode)
void cleanup_VkPhysicalDeviceASTCDecodeFeaturesEXT(
    VkPhysicalDeviceASTCDecodeFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkPhysicalDeviceAccelerationStructureFeaturesKHR(
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure)
void cleanup_VkPhysicalDeviceAccelerationStructurePropertiesKHR(
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_address_binding_report)
void cleanup_VkPhysicalDeviceAddressBindingReportFeaturesEXT(
    VkPhysicalDeviceAddressBindingReportFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 224 && VK_SEC_amigo_profiling)
void cleanup_VkPhysicalDeviceAmigoProfilingFeaturesSEC(
    VkPhysicalDeviceAmigoProfilingFeaturesSEC const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 291 && VK_AMD_anti_lag)
void cleanup_VkPhysicalDeviceAntiLagFeaturesAMD(VkPhysicalDeviceAntiLagFeaturesAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 250 && VK_EXT_attachment_feedback_loop_dynamic_state)
void cleanup_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(
    VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 224 && VK_EXT_attachment_feedback_loop_layout)
void cleanup_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(
    VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_blend_operation_advanced)
void cleanup_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_blend_operation_advanced)
void cleanup_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle)
void cleanup_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 105 && VK_EXT_buffer_device_address)
void cleanup_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address)
void cleanup_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeatures(
    VkPhysicalDeviceBufferDeviceAddressFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address)
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 129 && VK_HEADER_VERSION <= 130 && VK_KHR_buffer_device_address)
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_buffer_device_address)
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkPhysicalDeviceClusterAccelerationStructureFeaturesNV(
    VkPhysicalDeviceClusterAccelerationStructureFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkPhysicalDeviceClusterAccelerationStructurePropertiesNV(
    VkPhysicalDeviceClusterAccelerationStructurePropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 239 && VK_HUAWEI_cluster_culling_shader)
void cleanup_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 239 && VK_HEADER_VERSION <= 242 && VK_HUAWEI_cluster_culling_shader)
void cleanup_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HUAWEI_cluster_culling_shader)
void cleanup_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 272 && VK_HUAWEI_cluster_culling_shader)
void cleanup_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(
    VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 121 && VK_AMD_device_coherent_memory)
void cleanup_VkPhysicalDeviceCoherentMemoryFeaturesAMD(
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable)
void cleanup_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 293 && VK_NV_command_buffer_inheritance)
void cleanup_VkPhysicalDeviceCommandBufferInheritanceFeaturesNV(
    VkPhysicalDeviceCommandBufferInheritanceFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 295 && VK_KHR_compute_shader_derivatives)
void cleanup_VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 294 && VK_NV_compute_shader_derivatives)
void cleanup_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 295 && VK_NV_compute_shader_derivatives)
void cleanup_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 295 && VK_KHR_compute_shader_derivatives)
void cleanup_VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR(
    VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering)
void cleanup_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_conservative_rasterization)
void cleanup_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2)
void cleanup_VkPhysicalDeviceCooperativeMatrix2FeaturesNV(
    VkPhysicalDeviceCooperativeMatrix2FeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 300 && VK_NV_cooperative_matrix2)
void cleanup_VkPhysicalDeviceCooperativeMatrix2PropertiesNV(
    VkPhysicalDeviceCooperativeMatrix2PropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix)
void cleanup_VkPhysicalDeviceCooperativeMatrixFeaturesKHR(
    VkPhysicalDeviceCooperativeMatrixFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix)
void cleanup_VkPhysicalDeviceCooperativeMatrixFeaturesNV(
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 255 && VK_KHR_cooperative_matrix)
void cleanup_VkPhysicalDeviceCooperativeMatrixPropertiesKHR(
    VkPhysicalDeviceCooperativeMatrixPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix)
void cleanup_VkPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
void cleanup_VkPhysicalDeviceCooperativeVectorFeaturesNV(
    VkPhysicalDeviceCooperativeVectorFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cooperative_vector)
void cleanup_VkPhysicalDeviceCooperativeVectorPropertiesNV(
    VkPhysicalDeviceCooperativeVectorPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect)
void cleanup_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(
    VkPhysicalDeviceCopyMemoryIndirectFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_copy_memory_indirect)
void cleanup_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(
    VkPhysicalDeviceCopyMemoryIndirectPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_corner_sampled_image)
void cleanup_VkPhysicalDeviceCornerSampledImageFeaturesNV(
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode)
void cleanup_VkPhysicalDeviceCoverageReductionModeFeaturesNV(
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_clamp)
void cleanup_VkPhysicalDeviceCubicClampFeaturesQCOM(
    VkPhysicalDeviceCubicClampFeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights)
void cleanup_VkPhysicalDeviceCubicWeightsFeaturesQCOM(
    VkPhysicalDeviceCubicWeightsFeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceCudaKernelLaunchFeaturesNV(
    VkPhysicalDeviceCudaKernelLaunchFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 269 && VK_NV_cuda_kernel_launch && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceCudaKernelLaunchPropertiesNV(
    VkPhysicalDeviceCudaKernelLaunchPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color)
void cleanup_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color)
void cleanup_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkPhysicalDeviceDataGraphFeaturesARM(
    VkPhysicalDeviceDataGraphFeaturesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkPhysicalDeviceDataGraphOperationSupportARM(
    VkPhysicalDeviceDataGraphOperationSupportARM const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkPhysicalDeviceDataGraphProcessingEngineARM(
    VkPhysicalDeviceDataGraphProcessingEngineARM const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 99 && VK_NV_dedicated_allocation_image_aliasing)
void cleanup_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 254 && VK_EXT_depth_bias_control)
void cleanup_VkPhysicalDeviceDepthBiasControlFeaturesEXT(
    VkPhysicalDeviceDepthBiasControlFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control)
void cleanup_VkPhysicalDeviceDepthClampControlFeaturesEXT(
    VkPhysicalDeviceDepthClampControlFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 304 && VK_EXT_depth_clamp_zero_one)
void cleanup_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 305 && VK_EXT_depth_clamp_zero_one)
void cleanup_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
    VkPhysicalDeviceDepthClampZeroOneFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 305 && VK_KHR_depth_clamp_zero_one)
void cleanup_VkPhysicalDeviceDepthClampZeroOneFeaturesKHR(
    VkPhysicalDeviceDepthClampZeroOneFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control)
void cleanup_VkPhysicalDeviceDepthClipControlFeaturesEXT(
    VkPhysicalDeviceDepthClipControlFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable)
void cleanup_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceDepthStencilResolveProperties(
    VkPhysicalDeviceDepthStencilResolveProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 130 && VK_KHR_depth_stencil_resolve)
void cleanup_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_depth_stencil_resolve)
void cleanup_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkPhysicalDeviceDescriptorBufferFeaturesEXT(
    VkPhysicalDeviceDescriptorBufferFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkPhysicalDeviceDescriptorBufferPropertiesEXT(
    VkPhysicalDeviceDescriptorBufferPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
void cleanup_VkPhysicalDeviceDescriptorBufferTensorFeaturesARM(
    VkPhysicalDeviceDescriptorBufferTensorFeaturesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
void cleanup_VkPhysicalDeviceDescriptorBufferTensorPropertiesARM(
    VkPhysicalDeviceDescriptorBufferTensorPropertiesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceDescriptorIndexingFeatures(
    VkPhysicalDeviceDescriptorIndexingFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
void cleanup_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing)
void cleanup_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceDescriptorIndexingProperties(
    VkPhysicalDeviceDescriptorIndexingProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_descriptor_indexing)
void cleanup_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_descriptor_indexing)
void cleanup_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 263 && VK_NV_descriptor_pool_overallocation)
void cleanup_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV(
    VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 207 && VK_VALVE_descriptor_set_host_mapping)
void cleanup_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(
    VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute)
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report)
void cleanup_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config)
void cleanup_VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_discard_rectangles)
void cleanup_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceDisplacementMicromapFeaturesNV(
    VkPhysicalDeviceDisplacementMicromapFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 245 && VK_NV_displacement_micromap && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceDisplacementMicromapPropertiesNV(
    VkPhysicalDeviceDisplacementMicromapPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceDriverProperties(VkPhysicalDeviceDriverProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 87 && VK_KHR_driver_properties)
void cleanup_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 130 && VK_KHR_driver_properties)
void cleanup_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_driver_properties)
void cleanup_VkPhysicalDeviceDriverPropertiesKHR(VkPhysicalDeviceDriverPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_physical_device_drm)
void cleanup_VkPhysicalDeviceDrmPropertiesEXT(VkPhysicalDeviceDrmPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceDynamicRenderingFeatures(
    VkPhysicalDeviceDynamicRenderingFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
void cleanup_VkPhysicalDeviceDynamicRenderingFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering)
void cleanup_VkPhysicalDeviceDynamicRenderingFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceDynamicRenderingLocalReadFeatures(
    VkPhysicalDeviceDynamicRenderingLocalReadFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(
    VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 251 && VK_EXT_dynamic_rendering_unused_attachments)
void cleanup_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(
    VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive)
void cleanup_VkPhysicalDeviceExclusiveScissorFeaturesNV(
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 176 && VK_EXT_extended_dynamic_state2)
void cleanup_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3)
void cleanup_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_extended_dynamic_state3)
void cleanup_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(
    VkPhysicalDeviceExtendedDynamicState3PropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 145 && VK_EXT_extended_dynamic_state)
void cleanup_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 267 && VK_NV_extended_sparse_address_space)
void cleanup_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(
    VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 267 && VK_NV_extended_sparse_address_space)
void cleanup_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV(
    VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceExternalBufferInfo(VkPhysicalDeviceExternalBufferInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_capabilities)
void cleanup_VkPhysicalDeviceExternalBufferInfoKHR(
    VkPhysicalDeviceExternalBufferInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 312 && VK_NV_external_compute_queue)
void cleanup_VkPhysicalDeviceExternalComputeQueuePropertiesNV(
    VkPhysicalDeviceExternalComputeQueuePropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceExternalFenceInfo(VkPhysicalDeviceExternalFenceInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_fence_capabilities)
void cleanup_VkPhysicalDeviceExternalFenceInfoKHR(
    VkPhysicalDeviceExternalFenceInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve)
void cleanup_VkPhysicalDeviceExternalFormatResolveFeaturesANDROID(
    VkPhysicalDeviceExternalFormatResolveFeaturesANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 266 && VK_ANDROID_external_format_resolve)
void cleanup_VkPhysicalDeviceExternalFormatResolvePropertiesANDROID(
    VkPhysicalDeviceExternalFormatResolvePropertiesANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceExternalImageFormatInfo(
    VkPhysicalDeviceExternalImageFormatInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_capabilities)
void cleanup_VkPhysicalDeviceExternalImageFormatInfoKHR(
    VkPhysicalDeviceExternalImageFormatInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_external_memory_host)
void cleanup_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma)
void cleanup_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkPhysicalDeviceExternalMemorySciBufFeaturesNV(
    VkPhysicalDeviceExternalMemorySciBufFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
void cleanup_VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX(
    VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_memory_sci_buf)
void cleanup_VkPhysicalDeviceExternalSciBufFeaturesNV(
    VkPhysicalDeviceExternalSciBufFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2)
void cleanup_VkPhysicalDeviceExternalSciSync2FeaturesNV(
    VkPhysicalDeviceExternalSciSync2FeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
void cleanup_VkPhysicalDeviceExternalSciSyncFeaturesNV(
    VkPhysicalDeviceExternalSciSyncFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceExternalSemaphoreInfo(
    VkPhysicalDeviceExternalSemaphoreInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_semaphore_capabilities)
void cleanup_VkPhysicalDeviceExternalSemaphoreInfoKHR(
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkPhysicalDeviceExternalTensorInfoARM(
    VkPhysicalDeviceExternalTensorInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescription
  if (pData->pDescription != NULL)
    cleanup_VkTensorDescriptionARM(pData->pDescription);
  free((void *)pData->pDescription);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_device_fault)
void cleanup_VkPhysicalDeviceFaultFeaturesEXT(VkPhysicalDeviceFaultFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkPhysicalDeviceFeatures(VkPhysicalDeviceFeatures const *pData) {}

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceFeatures2(VkPhysicalDeviceFeatures2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkPhysicalDeviceFeatures2KHR(VkPhysicalDeviceFeatures2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 95 && VK_HEADER_VERSION <= 114 && VK_KHR_shader_float16_int8)
void cleanup_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 115 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float16_int8)
void cleanup_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_shader_float16_int8)
void cleanup_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceFloatControlsProperties(
    VkPhysicalDeviceFloatControlsProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 95 && VK_HEADER_VERSION <= 115 && VK_KHR_shader_float_controls)
void cleanup_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float_controls)
void cleanup_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_shader_float_controls)
void cleanup_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 316 && VK_ARM_format_pack)
void cleanup_VkPhysicalDeviceFormatPackFeaturesARM(
    VkPhysicalDeviceFormatPackFeaturesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2)
void cleanup_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2)
void cleanup_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map)
void cleanup_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered)
void cleanup_VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE(
    VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered)
void cleanup_VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE(
    VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map)
void cleanup_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric)
void cleanup_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 214 && VK_NV_fragment_shader_barycentric)
void cleanup_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 215 && VK_NV_fragment_shader_barycentric)
void cleanup_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 215 && VK_KHR_fragment_shader_barycentric)
void cleanup_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(
    VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 110 && VK_EXT_fragment_shader_interlock)
void cleanup_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums)
void cleanup_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums)
void cleanup_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
void cleanup_VkPhysicalDeviceFragmentShadingRateFeaturesKHR(
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
void cleanup_VkPhysicalDeviceFragmentShadingRateKHR(
    VkPhysicalDeviceFragmentShadingRateKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
void cleanup_VkPhysicalDeviceFragmentShadingRatePropertiesKHR(
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 264 && VK_EXT_frame_boundary)
void cleanup_VkPhysicalDeviceFrameBoundaryFeaturesEXT(
    VkPhysicalDeviceFrameBoundaryFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeatures(
    VkPhysicalDeviceGlobalPriorityQueryFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 180 && VK_HEADER_VERSION <= 203 && VK_EXT_global_priority_query)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority_query)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_global_priority_query)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_global_priority)
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library)
void cleanup_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_graphics_pipeline_library)
void cleanup_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(
    VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceGroupProperties(VkPhysicalDeviceGroupProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_device_group_creation)
void cleanup_VkPhysicalDeviceGroupPropertiesKHR(VkPhysicalDeviceGroupPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 301 && VK_HUAWEI_hdr_vivid)
void cleanup_VkPhysicalDeviceHdrVividFeaturesHUAWEI(
    VkPhysicalDeviceHdrVividFeaturesHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceHostImageCopyFeatures(
    VkPhysicalDeviceHostImageCopyFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkPhysicalDeviceHostImageCopyFeaturesEXT(
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkPhysicalDeviceHostImageCopyFeaturesEXT(
    VkPhysicalDeviceHostImageCopyFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceHostImageCopyProperties(
    VkPhysicalDeviceHostImageCopyProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCopySrcLayouts - copySrcLayoutCount
  free((void *)pData->pCopySrcLayouts);

  // pCopyDstLayouts - copyDstLayoutCount
  free((void *)pData->pCopyDstLayouts);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkPhysicalDeviceHostImageCopyPropertiesEXT(
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCopySrcLayouts - copySrcLayoutCount
  free((void *)pData->pCopySrcLayouts);

  // pCopyDstLayouts - copyDstLayoutCount
  free((void *)pData->pCopyDstLayouts);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkPhysicalDeviceHostImageCopyPropertiesEXT(
    VkPhysicalDeviceHostImageCopyPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCopySrcLayouts - copySrcLayoutCount
  free((void *)pData->pCopySrcLayouts);

  // pCopyDstLayouts - copyDstLayoutCount
  free((void *)pData->pCopyDstLayouts);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceHostQueryResetFeatures(
    VkPhysicalDeviceHostQueryResetFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 130 && VK_EXT_host_query_reset)
void cleanup_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_host_query_reset)
void cleanup_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceIDProperties(VkPhysicalDeviceIDProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_memory_capabilities && VK_KHR_external_semaphore_capabilities &&              \
     VK_KHR_external_fence_capabilities)
void cleanup_VkPhysicalDeviceIDPropertiesKHR(VkPhysicalDeviceIDPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 211 && VK_EXT_image_2d_view_of_3d)
void cleanup_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(
    VkPhysicalDeviceImage2DViewOf3DFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control)
void cleanup_VkPhysicalDeviceImageAlignmentControlFeaturesMESA(
    VkPhysicalDeviceImageAlignmentControlFeaturesMESA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 285 && VK_MESA_image_alignment_control)
void cleanup_VkPhysicalDeviceImageAlignmentControlPropertiesMESA(
    VkPhysicalDeviceImageAlignmentControlPropertiesMESA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control)
void cleanup_VkPhysicalDeviceImageCompressionControlFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_image_compression_control_swapchain)
void cleanup_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
    VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 87 && VK_EXT_image_drm_format_modifier)
void cleanup_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_image_drm_format_modifier)
void cleanup_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueueFamilyIndices - queueFamilyIndexCount
  free((void *)pData->pQueueFamilyIndices);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceImageFormatInfo2(VkPhysicalDeviceImageFormatInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkPhysicalDeviceImageFormatInfo2KHR(VkPhysicalDeviceImageFormatInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2)
void cleanup_VkPhysicalDeviceImageProcessing2FeaturesQCOM(
    VkPhysicalDeviceImageProcessing2FeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2)
void cleanup_VkPhysicalDeviceImageProcessing2PropertiesQCOM(
    VkPhysicalDeviceImageProcessing2PropertiesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing)
void cleanup_VkPhysicalDeviceImageProcessingFeaturesQCOM(
    VkPhysicalDeviceImageProcessingFeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_image_processing)
void cleanup_VkPhysicalDeviceImageProcessingPropertiesQCOM(
    VkPhysicalDeviceImageProcessingPropertiesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceImageRobustnessFeatures(
    VkPhysicalDeviceImageRobustnessFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 148 && VK_HEADER_VERSION <= 203 && VK_EXT_image_robustness)
void cleanup_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_image_robustness)
void cleanup_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_image_sliced_view_of_3d)
void cleanup_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(
    VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic)
void cleanup_VkPhysicalDeviceImageViewImageFormatInfoEXT(
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 199 && VK_EXT_image_view_min_lod)
void cleanup_VkPhysicalDeviceImageViewMinLodFeaturesEXT(
    VkPhysicalDeviceImageViewMinLodFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceImagelessFramebufferFeatures(
    VkPhysicalDeviceImagelessFramebufferFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer)
void cleanup_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer)
void cleanup_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceIndexTypeUint8Features(
    VkPhysicalDeviceIndexTypeUint8Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_index_type_uint8)
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_index_type_uint8)
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_index_type_uint8)
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_index_type_uint8)
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesKHR(
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_index_type_uint8)
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesKHR(
    VkPhysicalDeviceIndexTypeUint8FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor)
void cleanup_VkPhysicalDeviceInheritedViewportScissorFeaturesNV(
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceInlineUniformBlockFeatures(
    VkPhysicalDeviceInlineUniformBlockFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
void cleanup_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block)
void cleanup_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceInlineUniformBlockProperties(
    VkPhysicalDeviceInlineUniformBlockProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
void cleanup_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block)
void cleanup_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 185 && VK_HUAWEI_invocation_mask)
void cleanup_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
void cleanup_VkPhysicalDeviceLayeredApiPropertiesKHR(
    VkPhysicalDeviceLayeredApiPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
void cleanup_VkPhysicalDeviceLayeredApiPropertiesListKHR(
    VkPhysicalDeviceLayeredApiPropertiesListKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pLayeredApis - layeredApiCount
  for (size_t i = 0; i < pData->layeredApiCount; ++i) {
    cleanup_VkPhysicalDeviceLayeredApiPropertiesKHR(&pData->pLayeredApis[i]);
  }
  free((void *)pData->pLayeredApis);
}
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
void cleanup_VkPhysicalDeviceLayeredApiVulkanPropertiesKHR(
    VkPhysicalDeviceLayeredApiVulkanPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 264 && VK_MSFT_layered_driver)
void cleanup_VkPhysicalDeviceLayeredDriverPropertiesMSFT(
    VkPhysicalDeviceLayeredDriverPropertiesMSFT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 227 && VK_EXT_legacy_dithering)
void cleanup_VkPhysicalDeviceLegacyDitheringFeaturesEXT(
    VkPhysicalDeviceLegacyDitheringFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 284 && VK_EXT_legacy_vertex_attributes)
void cleanup_VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT(
    VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 284 && VK_EXT_legacy_vertex_attributes)
void cleanup_VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT(
    VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkPhysicalDeviceLimits(VkPhysicalDeviceLimits const *pData) {}

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceLineRasterizationFeatures(
    VkPhysicalDeviceLineRasterizationFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesKHR(
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesKHR(
    VkPhysicalDeviceLineRasterizationFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceLineRasterizationProperties(
    VkPhysicalDeviceLineRasterizationProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesKHR(
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization)
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesKHR(
    VkPhysicalDeviceLineRasterizationPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 203 && VK_NV_linear_color_attachment)
void cleanup_VkPhysicalDeviceLinearColorAttachmentFeaturesNV(
    VkPhysicalDeviceLinearColorAttachmentFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceMaintenance3Properties(
    VkPhysicalDeviceMaintenance3Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_maintenance3)
void cleanup_VkPhysicalDeviceMaintenance3PropertiesKHR(
    VkPhysicalDeviceMaintenance3PropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceMaintenance4Features(
    VkPhysicalDeviceMaintenance4Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
void cleanup_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4)
void cleanup_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceMaintenance4Properties(
    VkPhysicalDeviceMaintenance4Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 195 && VK_HEADER_VERSION <= 203 && VK_KHR_maintenance4)
void cleanup_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_maintenance4)
void cleanup_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceMaintenance5Features(
    VkPhysicalDeviceMaintenance5Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkPhysicalDeviceMaintenance5FeaturesKHR(
    VkPhysicalDeviceMaintenance5FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkPhysicalDeviceMaintenance5FeaturesKHR(
    VkPhysicalDeviceMaintenance5FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceMaintenance5Properties(
    VkPhysicalDeviceMaintenance5Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkPhysicalDeviceMaintenance5PropertiesKHR(
    VkPhysicalDeviceMaintenance5PropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkPhysicalDeviceMaintenance5PropertiesKHR(
    VkPhysicalDeviceMaintenance5PropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceMaintenance6Features(
    VkPhysicalDeviceMaintenance6Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
void cleanup_VkPhysicalDeviceMaintenance6FeaturesKHR(
    VkPhysicalDeviceMaintenance6FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6)
void cleanup_VkPhysicalDeviceMaintenance6FeaturesKHR(
    VkPhysicalDeviceMaintenance6FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceMaintenance6Properties(
    VkPhysicalDeviceMaintenance6Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
void cleanup_VkPhysicalDeviceMaintenance6PropertiesKHR(
    VkPhysicalDeviceMaintenance6PropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6)
void cleanup_VkPhysicalDeviceMaintenance6PropertiesKHR(
    VkPhysicalDeviceMaintenance6PropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
void cleanup_VkPhysicalDeviceMaintenance7FeaturesKHR(
    VkPhysicalDeviceMaintenance7FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 289 && VK_KHR_maintenance7)
void cleanup_VkPhysicalDeviceMaintenance7PropertiesKHR(
    VkPhysicalDeviceMaintenance7PropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 305 && VK_KHR_maintenance8)
void cleanup_VkPhysicalDeviceMaintenance8FeaturesKHR(
    VkPhysicalDeviceMaintenance8FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9)
void cleanup_VkPhysicalDeviceMaintenance9FeaturesKHR(
    VkPhysicalDeviceMaintenance9FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9)
void cleanup_VkPhysicalDeviceMaintenance9PropertiesKHR(
    VkPhysicalDeviceMaintenance9PropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed)
void cleanup_VkPhysicalDeviceMapMemoryPlacedFeaturesEXT(
    VkPhysicalDeviceMapMemoryPlacedFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 278 && VK_EXT_map_memory_placed)
void cleanup_VkPhysicalDeviceMapMemoryPlacedPropertiesEXT(
    VkPhysicalDeviceMapMemoryPlacedPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_memory_budget)
void cleanup_VkPhysicalDeviceMemoryBudgetPropertiesEXT(
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression)
void cleanup_VkPhysicalDeviceMemoryDecompressionFeaturesNV(
    VkPhysicalDeviceMemoryDecompressionFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_memory_decompression)
void cleanup_VkPhysicalDeviceMemoryDecompressionPropertiesNV(
    VkPhysicalDeviceMemoryDecompressionPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority)
void cleanup_VkPhysicalDeviceMemoryPriorityFeaturesEXT(
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkPhysicalDeviceMemoryProperties(VkPhysicalDeviceMemoryProperties const *pData) {}

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceMemoryProperties2(VkPhysicalDeviceMemoryProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkPhysicalDeviceMemoryProperties2KHR(
    VkPhysicalDeviceMemoryProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader)
void cleanup_VkPhysicalDeviceMeshShaderFeaturesEXT(
    VkPhysicalDeviceMeshShaderFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader)
void cleanup_VkPhysicalDeviceMeshShaderFeaturesNV(
    VkPhysicalDeviceMeshShaderFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 226 && VK_EXT_mesh_shader)
void cleanup_VkPhysicalDeviceMeshShaderPropertiesEXT(
    VkPhysicalDeviceMeshShaderPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader)
void cleanup_VkPhysicalDeviceMeshShaderPropertiesNV(
    VkPhysicalDeviceMeshShaderPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw)
void cleanup_VkPhysicalDeviceMultiDrawFeaturesEXT(
    VkPhysicalDeviceMultiDrawFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw)
void cleanup_VkPhysicalDeviceMultiDrawPropertiesEXT(
    VkPhysicalDeviceMultiDrawPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled)
void cleanup_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(
    VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceMultiviewFeatures(VkPhysicalDeviceMultiviewFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_multiview)
void cleanup_VkPhysicalDeviceMultiviewFeaturesKHR(
    VkPhysicalDeviceMultiviewFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_NVX_multiview_per_view_attributes)
void cleanup_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_QCOM_multiview_per_view_render_areas)
void cleanup_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(
    VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 236 && VK_QCOM_multiview_per_view_viewports)
void cleanup_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(
    VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceMultiviewProperties(VkPhysicalDeviceMultiviewProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_multiview)
void cleanup_VkPhysicalDeviceMultiviewPropertiesKHR(
    VkPhysicalDeviceMultiviewPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 228 && VK_EXT_mutable_descriptor_type)
void cleanup_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 164 && VK_HEADER_VERSION <= 227 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 228 && VK_VALVE_mutable_descriptor_type)
void cleanup_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 267 && VK_EXT_nested_command_buffer)
void cleanup_VkPhysicalDeviceNestedCommandBufferFeaturesEXT(
    VkPhysicalDeviceNestedCommandBufferFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 267 && VK_EXT_nested_command_buffer)
void cleanup_VkPhysicalDeviceNestedCommandBufferPropertiesEXT(
    VkPhysicalDeviceNestedCommandBufferPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 217 && VK_EXT_non_seamless_cube_map)
void cleanup_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(
    VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkPhysicalDeviceOpacityMicromapFeaturesEXT(
    VkPhysicalDeviceOpacityMicromapFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_EXT_opacity_micromap)
void cleanup_VkPhysicalDeviceOpacityMicromapPropertiesEXT(
    VkPhysicalDeviceOpacityMicromapPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkPhysicalDeviceOpticalFlowFeaturesNV(
    VkPhysicalDeviceOpticalFlowFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_optical_flow)
void cleanup_VkPhysicalDeviceOpticalFlowPropertiesNV(
    VkPhysicalDeviceOpticalFlowPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 88 && VK_HEADER_VERSION <= 95 && VK_EXT_pci_bus_info)
void cleanup_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 96 && VK_EXT_pci_bus_info)
void cleanup_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 191 && VK_EXT_pageable_device_local_memory)
void cleanup_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV(
    VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV(
    VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_NV_per_stage_descriptor_set)
void cleanup_VkPhysicalDevicePerStageDescriptorSetFeaturesNV(
    VkPhysicalDevicePerStageDescriptorSetFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkPhysicalDevicePerformanceQueryFeaturesKHR(
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkPhysicalDevicePerformanceQueryPropertiesKHR(
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPhysicalDevicePipelineBinaryFeaturesKHR(
    VkPhysicalDevicePipelineBinaryFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPhysicalDevicePipelineBinaryPropertiesKHR(
    VkPhysicalDevicePipelineBinaryPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDevicePipelineCreationCacheControlFeatures(
    VkPhysicalDevicePipelineCreationCacheControlFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_cache_control)
void cleanup_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_cache_control)
void cleanup_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 240 && VK_EXT_pipeline_library_group_handles)
void cleanup_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(
    VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 305 && VK_ARM_pipeline_opacity_micromap)
void cleanup_VkPhysicalDevicePipelineOpacityMicromapFeaturesARM(
    VkPhysicalDevicePipelineOpacityMicromapFeaturesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties)
void cleanup_VkPhysicalDevicePipelinePropertiesFeaturesEXT(
    VkPhysicalDevicePipelinePropertiesFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDevicePipelineProtectedAccessFeatures(
    VkPhysicalDevicePipelineProtectedAccessFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_protected_access)
void cleanup_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_protected_access)
void cleanup_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
    VkPhysicalDevicePipelineProtectedAccessFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDevicePipelineRobustnessFeatures(
    VkPhysicalDevicePipelineRobustnessFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness)
void cleanup_VkPhysicalDevicePipelineRobustnessFeaturesEXT(
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness)
void cleanup_VkPhysicalDevicePipelineRobustnessFeaturesEXT(
    VkPhysicalDevicePipelineRobustnessFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDevicePipelineRobustnessProperties(
    VkPhysicalDevicePipelineRobustnessProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness)
void cleanup_VkPhysicalDevicePipelineRobustnessPropertiesEXT(
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness)
void cleanup_VkPhysicalDevicePipelineRobustnessPropertiesEXT(
    VkPhysicalDevicePipelineRobustnessPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDevicePointClippingProperties(
    VkPhysicalDevicePointClippingProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_maintenance2)
void cleanup_VkPhysicalDevicePointClippingPropertiesKHR(
    VkPhysicalDevicePointClippingPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDevicePortabilitySubsetFeaturesKHR(
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDevicePortabilitySubsetPropertiesKHR(
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_present_barrier)
void cleanup_VkPhysicalDevicePresentBarrierFeaturesNV(
    VkPhysicalDevicePresentBarrierFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_id2)
void cleanup_VkPhysicalDevicePresentId2FeaturesKHR(
    VkPhysicalDevicePresentId2FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 185 && VK_KHR_present_id)
void cleanup_VkPhysicalDevicePresentIdFeaturesKHR(
    VkPhysicalDevicePresentIdFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 308 && VK_NV_present_metering && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDevicePresentMeteringFeaturesNV(
    VkPhysicalDevicePresentMeteringFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 297 && VK_EXT_present_mode_fifo_latest_ready)
void cleanup_VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT(
    VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2)
void cleanup_VkPhysicalDevicePresentWait2FeaturesKHR(
    VkPhysicalDevicePresentWait2FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 185 && VK_KHR_present_wait)
void cleanup_VkPhysicalDevicePresentWaitFeaturesKHR(
    VkPhysicalDevicePresentWaitFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer)
void cleanup_VkPhysicalDevicePresentationPropertiesANDROID(
    VkPhysicalDevicePresentationPropertiesANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 190 && VK_EXT_primitive_topology_list_restart)
void cleanup_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 210 && VK_EXT_primitives_generated_query)
void cleanup_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(
    VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDevicePrivateDataFeatures(VkPhysicalDevicePrivateDataFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data)
void cleanup_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_private_data)
void cleanup_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkPhysicalDeviceProperties(VkPhysicalDeviceProperties const *pData) {}

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceProperties2(VkPhysicalDeviceProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkPhysicalDeviceProperties2KHR(VkPhysicalDeviceProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceProtectedMemoryFeatures(
    VkPhysicalDeviceProtectedMemoryFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceProtectedMemoryProperties(
    VkPhysicalDeviceProtectedMemoryProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex)
void cleanup_VkPhysicalDeviceProvokingVertexFeaturesEXT(
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex)
void cleanup_VkPhysicalDeviceProvokingVertexPropertiesEXT(
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDevicePushDescriptorProperties(
    VkPhysicalDevicePushDescriptorProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 302 && VK_KHR_push_descriptor)
void cleanup_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_push_descriptor)
void cleanup_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM(
    VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 195 && VK_EXT_rgba10x6_formats)
void cleanup_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 200 && VK_HEADER_VERSION <= 224 &&                                       \
     VK_ARM_rasterization_order_attachment_access)
void cleanup_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_ARM_rasterization_order_attachment_access)
void cleanup_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_EXT_rasterization_order_attachment_access)
void cleanup_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 279 && VK_NV_raw_access_chains)
void cleanup_VkPhysicalDeviceRawAccessChainsFeaturesNV(
    VkPhysicalDeviceRawAccessChainsFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_query)
void cleanup_VkPhysicalDeviceRayQueryFeaturesKHR(VkPhysicalDeviceRayQueryFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceRayTracingFeaturesKHR(
    VkPhysicalDeviceRayTracingFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder)
void cleanup_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(
    VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 233 && VK_NV_ray_tracing_invocation_reorder)
void cleanup_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(
    VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_ray_tracing_linear_swept_spheres)
void cleanup_VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV(
    VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_KHR_ray_tracing_maintenance1)
void cleanup_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(
    VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
void cleanup_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
void cleanup_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 249 && VK_KHR_ray_tracing_position_fetch)
void cleanup_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(
    VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceRayTracingPropertiesKHR(
    VkPhysicalDeviceRayTracingPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkPhysicalDeviceRayTracingPropertiesNV(
    VkPhysicalDeviceRayTracingPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 280 && VK_NV_ray_tracing_validation)
void cleanup_VkPhysicalDeviceRayTracingValidationFeaturesNV(
    VkPhysicalDeviceRayTracingValidationFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkPhysicalDeviceRaytracingPropertiesNVX(
    VkPhysicalDeviceRaytracingPropertiesNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 270 && VK_IMG_relaxed_line_rasterization)
void cleanup_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG(
    VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
void cleanup_VkPhysicalDeviceRenderPassStripedFeaturesARM(
    VkPhysicalDeviceRenderPassStripedFeaturesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
void cleanup_VkPhysicalDeviceRenderPassStripedPropertiesARM(
    VkPhysicalDeviceRenderPassStripedPropertiesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test)
void cleanup_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 313 && VK_EXT_robustness2)
void cleanup_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 314 && VK_EXT_robustness2)
void cleanup_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 314 && VK_KHR_robustness2)
void cleanup_VkPhysicalDeviceRobustness2FeaturesKHR(
    VkPhysicalDeviceRobustness2FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 139 && VK_HEADER_VERSION <= 313 && VK_EXT_robustness2)
void cleanup_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 314 && VK_EXT_robustness2)
void cleanup_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 314 && VK_KHR_robustness2)
void cleanup_VkPhysicalDeviceRobustness2PropertiesKHR(
    VkPhysicalDeviceRobustness2PropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceSamplerFilterMinmaxProperties(
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_sampler_filter_minmax)
void cleanup_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_sampler_filter_minmax)
void cleanup_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceScalarBlockLayoutFeatures(
    VkPhysicalDeviceScalarBlockLayoutFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 93 && VK_HEADER_VERSION <= 130 && VK_EXT_scalar_block_layout)
void cleanup_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_scalar_block_layout)
void cleanup_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls)
void cleanup_VkPhysicalDeviceSchedulingControlsFeaturesARM(
    VkPhysicalDeviceSchedulingControlsFeaturesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 269 && VK_ARM_scheduling_controls)
void cleanup_VkPhysicalDeviceSchedulingControlsPropertiesARM(
    VkPhysicalDeviceSchedulingControlsPropertiesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 127 && VK_HEADER_VERSION <= 130 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_separate_depth_stencil_layouts)
void cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 278 && VK_NV_shader_atomic_float16_vector)
void cleanup_VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(
    VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 185 && VK_EXT_shader_atomic_float2)
void cleanup_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 148 && VK_EXT_shader_atomic_float)
void cleanup_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceShaderAtomicInt64Features(
    VkPhysicalDeviceShaderAtomicInt64Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 86 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_atomic_int64)
void cleanup_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_shader_atomic_int64)
void cleanup_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 311 && VK_KHR_shader_bfloat16)
void cleanup_VkPhysicalDeviceShaderBfloat16FeaturesKHR(
    VkPhysicalDeviceShaderBfloat16FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 124 && VK_KHR_shader_clock)
void cleanup_VkPhysicalDeviceShaderClockFeaturesKHR(
    VkPhysicalDeviceShaderClockFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 231 && VK_ARM_shader_core_builtins)
void cleanup_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(
    VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 231 && VK_HEADER_VERSION <= 231 && VK_ARM_shader_core_builtins)
void cleanup_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 232 && VK_ARM_shader_core_builtins)
void cleanup_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
    VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2)
void cleanup_VkPhysicalDeviceShaderCoreProperties2AMD(
    VkPhysicalDeviceShaderCoreProperties2AMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_AMD_shader_core_properties)
void cleanup_VkPhysicalDeviceShaderCorePropertiesAMD(
    VkPhysicalDeviceShaderCorePropertiesAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_ARM_shader_core_properties)
void cleanup_VkPhysicalDeviceShaderCorePropertiesARM(
    VkPhysicalDeviceShaderCorePropertiesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 113 && VK_HEADER_VERSION <= 203 &&                                       \
     VK_EXT_shader_demote_to_helper_invocation)
void cleanup_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_shader_demote_to_helper_invocation)
void cleanup_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 105 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 106 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 106 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceShaderDrawParametersFeatures(
    VkPhysicalDeviceShaderDrawParametersFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 215 && VK_AMD_shader_early_and_late_fragment_tests)
void cleanup_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 214 && VK_HEADER_VERSION <= 214 &&                                       \
     VK_AMD_shader_early_and_late_fragment_tests)
void cleanup_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT(
    VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&             \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceShaderEnqueueFeaturesAMDX(
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceShaderEnqueueFeaturesAMDX(
    VkPhysicalDeviceShaderEnqueueFeaturesAMDX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 297 && VK_AMDX_shader_enqueue &&             \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceShaderEnqueuePropertiesAMDX(
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 298 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceShaderEnqueuePropertiesAMDX(
    VkPhysicalDeviceShaderEnqueuePropertiesAMDX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceShaderExpectAssumeFeatures(
    VkPhysicalDeviceShaderExpectAssumeFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_expect_assume)
void cleanup_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR(
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_shader_expect_assume)
void cleanup_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR(
    VkPhysicalDeviceShaderExpectAssumeFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceShaderFloat16Int8Features(
    VkPhysicalDeviceShaderFloat16Int8Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 115 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_float16_int8)
void cleanup_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_shader_float16_int8)
void cleanup_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_EXT_shader_float8)
void cleanup_VkPhysicalDeviceShaderFloat8FeaturesEXT(
    VkPhysicalDeviceShaderFloat8FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceShaderFloatControls2Features(
    VkPhysicalDeviceShaderFloatControls2Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_float_controls2)
void cleanup_VkPhysicalDeviceShaderFloatControls2FeaturesKHR(
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_shader_float_controls2)
void cleanup_VkPhysicalDeviceShaderFloatControls2FeaturesKHR(
    VkPhysicalDeviceShaderFloatControls2FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 155 && VK_EXT_shader_image_atomic_int64)
void cleanup_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shader_image_footprint)
void cleanup_VkPhysicalDeviceShaderImageFootprintFeaturesNV(
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductFeatures(
    VkPhysicalDeviceShaderIntegerDotProductFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 190 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_integer_dot_product)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_shader_integer_dot_product)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductProperties(
    VkPhysicalDeviceShaderIntegerDotProductProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 190 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_integer_dot_product)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_shader_integer_dot_product)
void cleanup_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 115 && VK_INTEL_shader_integer_functions2)
void cleanup_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 114 && VK_INTEL_shader_integer_functions2)
void cleanup_VkPhysicalDeviceShaderIntegerFunctions2INTEL(
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_KHR_shader_maximal_reconvergence)
void cleanup_VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(
    VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
void cleanup_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(
    VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
void cleanup_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(
    VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_object)
void cleanup_VkPhysicalDeviceShaderObjectFeaturesEXT(
    VkPhysicalDeviceShaderObjectFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_object)
void cleanup_VkPhysicalDeviceShaderObjectPropertiesEXT(
    VkPhysicalDeviceShaderObjectPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_KHR_shader_quad_control)
void cleanup_VkPhysicalDeviceShaderQuadControlFeaturesKHR(
    VkPhysicalDeviceShaderQuadControlFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 288 && VK_KHR_shader_relaxed_extended_instruction)
void cleanup_VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(
    VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 286 && VK_EXT_shader_replicated_composites)
void cleanup_VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT(
    VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins)
void cleanup_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins)
void cleanup_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 123 && VK_HEADER_VERSION <= 130 && VK_KHR_shader_subgroup_extended_types)
void cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_shader_subgroup_extended_types)
void cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceShaderSubgroupRotateFeatures(
    VkPhysicalDeviceShaderSubgroupRotateFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_shader_subgroup_rotate)
void cleanup_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_shader_subgroup_rotate)
void cleanup_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 180 && VK_KHR_shader_subgroup_uniform_control_flow)
void cleanup_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceShaderTerminateInvocationFeatures(
    VkPhysicalDeviceShaderTerminateInvocationFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 158 && VK_HEADER_VERSION <= 203 && VK_KHR_shader_terminate_invocation)
void cleanup_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_shader_terminate_invocation)
void cleanup_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_tile_image)
void cleanup_VkPhysicalDeviceShaderTileImageFeaturesEXT(
    VkPhysicalDeviceShaderTileImageFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_tile_image)
void cleanup_VkPhysicalDeviceShaderTileImagePropertiesEXT(
    VkPhysicalDeviceShaderTileImagePropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkPhysicalDeviceShadingRateImageFeaturesNV(
    VkPhysicalDeviceShadingRateImageFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkPhysicalDeviceShadingRateImagePropertiesNV(
    VkPhysicalDeviceShadingRateImagePropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceSparseImageFormatInfo2(
    VkPhysicalDeviceSparseImageFormatInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkPhysicalDeviceSparseImageFormatInfo2KHR(
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkPhysicalDeviceSparseProperties(VkPhysicalDeviceSparseProperties const *pData) {}

#if (VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceSubgroupProperties(VkPhysicalDeviceSubgroupProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceSubgroupSizeControlFeatures(
    VkPhysicalDeviceSubgroupSizeControlFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 118 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control)
void cleanup_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control)
void cleanup_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceSubgroupSizeControlProperties(
    VkPhysicalDeviceSubgroupSizeControlProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control)
void cleanup_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control)
void cleanup_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback)
void cleanup_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(
    VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading)
void cleanup_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading)
void cleanup_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_surface_capabilities2)
void cleanup_VkPhysicalDeviceSurfaceInfo2KHR(VkPhysicalDeviceSurfaceInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(
    VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceSynchronization2Features(
    VkPhysicalDeviceSynchronization2Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkPhysicalDeviceTensorFeaturesARM(VkPhysicalDeviceTensorFeaturesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkPhysicalDeviceTensorPropertiesARM(VkPhysicalDeviceTensorPropertiesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment)
void cleanup_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceTexelBufferAlignmentProperties(
    VkPhysicalDeviceTexelBufferAlignmentProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 113 && VK_HEADER_VERSION <= 203 && VK_EXT_texel_buffer_alignment)
void cleanup_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_texel_buffer_alignment)
void cleanup_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceTextureCompressionASTCHDRFeatures(
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 203 && VK_EXT_texture_compression_astc_hdr)
void cleanup_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_texture_compression_astc_hdr)
void cleanup_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
void cleanup_VkPhysicalDeviceTileMemoryHeapFeaturesQCOM(
    VkPhysicalDeviceTileMemoryHeapFeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
void cleanup_VkPhysicalDeviceTileMemoryHeapPropertiesQCOM(
    VkPhysicalDeviceTileMemoryHeapPropertiesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties)
void cleanup_VkPhysicalDeviceTilePropertiesFeaturesQCOM(
    VkPhysicalDeviceTilePropertiesFeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkPhysicalDeviceTileShadingFeaturesQCOM(
    VkPhysicalDeviceTileShadingFeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkPhysicalDeviceTileShadingPropertiesQCOM(
    VkPhysicalDeviceTileShadingPropertiesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceTimelineSemaphoreFeatures(
    VkPhysicalDeviceTimelineSemaphoreFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceTimelineSemaphoreProperties(
    VkPhysicalDeviceTimelineSemaphoreProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceToolProperties(VkPhysicalDeviceToolProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 130 && VK_HEADER_VERSION <= 203 && VK_EXT_tooling_info)
void cleanup_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_tooling_info)
void cleanup_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback)
void cleanup_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback)
void cleanup_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_unified_image_layouts)
void cleanup_VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR(
    VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 108 && VK_HEADER_VERSION <= 130 && VK_KHR_uniform_buffer_standard_layout)
void cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_uniform_buffer_standard_layout)
void cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 105 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 106 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 105 && VK_KHR_variable_pointers)
void cleanup_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers)
void cleanup_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 106 && VK_VERSION_1_1)
void cleanup_VkPhysicalDeviceVariablePointersFeatures(
    VkPhysicalDeviceVariablePointersFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers)
void cleanup_VkPhysicalDeviceVariablePointersFeaturesKHR(
    VkPhysicalDeviceVariablePointersFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeatures(
    VkPhysicalDeviceVertexAttributeDivisorFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorProperties(
    VkPhysicalDeviceVertexAttributeDivisorProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_EXT_vertex_attribute_robustness)
void cleanup_VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT(
    VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state)
void cleanup_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
void cleanup_VkPhysicalDeviceVideoDecodeVP9FeaturesKHR(
    VkPhysicalDeviceVideoDecodeVP9FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkPhysicalDeviceVideoEncodeAV1FeaturesKHR(
    VkPhysicalDeviceVideoEncodeAV1FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR(
    VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVideoProfile
  if (pData->pVideoProfile != NULL)
    cleanup_VkVideoProfileInfoKHR(pData->pVideoProfile);
  free((void *)pData->pVideoProfile);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
void cleanup_VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR(
    VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVideoProfiles
  if (pData->pVideoProfiles != NULL)
    cleanup_VkVideoProfilesKHR(pData->pVideoProfiles);
  free((void *)pData->pVideoProfiles);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_maintenance1)
void cleanup_VkPhysicalDeviceVideoMaintenance1FeaturesKHR(
    VkPhysicalDeviceVideoMaintenance1FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2)
void cleanup_VkPhysicalDeviceVideoMaintenance2FeaturesKHR(
    VkPhysicalDeviceVideoMaintenance2FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceVulkan11Features(VkPhysicalDeviceVulkan11Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceVulkan11Properties(VkPhysicalDeviceVulkan11Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceVulkan12Features(VkPhysicalDeviceVulkan12Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceVulkan12Properties(VkPhysicalDeviceVulkan12Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceVulkan13Features(VkPhysicalDeviceVulkan13Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceVulkan13Properties(VkPhysicalDeviceVulkan13Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceVulkan14Features(VkPhysicalDeviceVulkan14Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPhysicalDeviceVulkan14Properties(VkPhysicalDeviceVulkan14Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCopySrcLayouts - copySrcLayoutCount
  free((void *)pData->pCopySrcLayouts);

  // pCopyDstLayouts - copyDstLayoutCount
  free((void *)pData->pCopyDstLayouts);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkPhysicalDeviceVulkanMemoryModelFeatures(
    VkPhysicalDeviceVulkanMemoryModelFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 97 && VK_KHR_vulkan_memory_model &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 118 && VK_HEADER_VERSION <= 130 && VK_KHR_vulkan_memory_model) ||        \
    (VK_HEADER_VERSION >= 98 && VK_HEADER_VERSION <= 117 && VK_KHR_vulkan_memory_model &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_vulkan_memory_model)
void cleanup_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPhysicalDeviceVulkanSC10Features(VkPhysicalDeviceVulkanSC10Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPhysicalDeviceVulkanSC10Properties(
    VkPhysicalDeviceVulkanSC10Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 168 && VK_KHR_workgroup_memory_explicit_layout)
void cleanup_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_EXT_ycbcr_2plane_444_formats)
void cleanup_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_ycbcr_degamma)
void cleanup_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM(
    VkPhysicalDeviceYcbcrDegammaFeaturesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 102 && VK_EXT_ycbcr_image_arrays)
void cleanup_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 315 && VK_EXT_zero_initialize_device_memory)
void cleanup_VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT(
    VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 168 && VK_HEADER_VERSION <= 203 &&                                       \
     VK_KHR_zero_initialize_workgroup_memory)
void cleanup_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_zero_initialize_workgroup_memory)
void cleanup_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryCreateInfoKHR(VkPipelineBinaryCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pKeysAndDataInfo
  if (pData->pKeysAndDataInfo != NULL)
    cleanup_VkPipelineBinaryKeysAndDataKHR(pData->pKeysAndDataInfo);
  free((void *)pData->pKeysAndDataInfo);

  // pPipelineCreateInfo
  if (pData->pPipelineCreateInfo != NULL)
    cleanup_VkPipelineCreateInfoKHR(pData->pPipelineCreateInfo);
  free((void *)pData->pPipelineCreateInfo);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryDataInfoKHR(VkPipelineBinaryDataInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryDataKHR(VkPipelineBinaryDataKHR const *pData) {
  // pData - dataSize
  free((void *)pData->pData);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryHandlesInfoKHR(VkPipelineBinaryHandlesInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPipelineBinaries - pipelineBinaryCount
  free((void *)pData->pPipelineBinaries);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryInfoKHR(VkPipelineBinaryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPipelineBinaries - binaryCount
  free((void *)pData->pPipelineBinaries);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryKeyKHR(VkPipelineBinaryKeyKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineBinaryKeysAndDataKHR(VkPipelineBinaryKeysAndDataKHR const *pData) {
  // pPipelineBinaryKeys - binaryCount
  for (size_t i = 0; i < pData->binaryCount; ++i) {
    cleanup_VkPipelineBinaryKeyKHR(&pData->pPipelineBinaryKeys[i]);
  }
  free((void *)pData->pPipelineBinaryKeys);

  // pPipelineBinaryData - binaryCount
  for (size_t i = 0; i < pData->binaryCount; ++i) {
    cleanup_VkPipelineBinaryDataKHR(&pData->pPipelineBinaryData[i]);
  }
  free((void *)pData->pPipelineBinaryData);
}
#endif

#if VK_HEADER_VERSION <= 240
void cleanup_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInitialData - initialDataSize
  free((void *)pData->pInitialData);
}
#endif

#if VK_HEADER_VERSION >= 241
void cleanup_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInitialData - initialDataSize
  free((void *)pData->pInitialData);
}
#endif

#if VK_HEADER_VERSION >= 184
void cleanup_VkPipelineCacheHeaderVersionOne(VkPipelineCacheHeaderVersionOne const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPipelineCacheHeaderVersionSafetyCriticalOne(
    VkPipelineCacheHeaderVersionSafetyCriticalOne const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPipelineCacheSafetyCriticalIndexEntry(
    VkPipelineCacheSafetyCriticalIndexEntry const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPipelineCacheStageValidationIndexEntry(
    VkPipelineCacheStageValidationIndexEntry const *pData) {}
#endif

#if (VK_EXT_blend_operation_advanced)
void cleanup_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkPipelineColorBlendAttachmentState(VkPipelineColorBlendAttachmentState const *pData) {
}

void cleanup_VkPipelineColorBlendStateCreateInfo(VkPipelineColorBlendStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  for (size_t i = 0; i < pData->attachmentCount; ++i) {
    cleanup_VkPipelineColorBlendAttachmentState(&pData->pAttachments[i]);
  }
  free((void *)pData->pAttachments);
}

#if (VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable)
void cleanup_VkPipelineColorWriteCreateInfoEXT(VkPipelineColorWriteCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorWriteEnables - attachmentCount
  free((void *)pData->pColorWriteEnables);
}
#endif

#if (VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control)
void cleanup_VkPipelineCompilerControlCreateInfoAMD(
    VkPipelineCompilerControlCreateInfoAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_NV_framebuffer_mixed_samples)
void cleanup_VkPipelineCoverageModulationStateCreateInfoNV(
    VkPipelineCoverageModulationStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCoverageModulationTable - coverageModulationTableCount
  free((void *)pData->pCoverageModulationTable);
}
#endif

#if (VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode)
void cleanup_VkPipelineCoverageReductionStateCreateInfoNV(
    VkPipelineCoverageReductionStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_NV_fragment_coverage_to_color)
void cleanup_VkPipelineCoverageToColorStateCreateInfoNV(
    VkPipelineCoverageToColorStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPipelineCreateFlags2CreateInfo(VkPipelineCreateFlags2CreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkPipelineCreateFlags2CreateInfoKHR(VkPipelineCreateFlags2CreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkPipelineCreateFlags2CreateInfoKHR(VkPipelineCreateFlags2CreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkPipelineCreateInfoKHR(VkPipelineCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPipelineCreationFeedback(VkPipelineCreationFeedback const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPipelineCreationFeedbackCreateInfo(
    VkPipelineCreationFeedbackCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPipelineCreationFeedback
  if (pData->pPipelineCreationFeedback != NULL)
    cleanup_VkPipelineCreationFeedback(pData->pPipelineCreationFeedback);
  free((void *)pData->pPipelineCreationFeedback);

  // pPipelineStageCreationFeedbacks - pipelineStageCreationFeedbackCount
  for (size_t i = 0; i < pData->pipelineStageCreationFeedbackCount; ++i) {
    cleanup_VkPipelineCreationFeedback(&pData->pPipelineStageCreationFeedbacks[i]);
  }
  free((void *)pData->pPipelineStageCreationFeedbacks);
}
#endif

#if (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_feedback)
void cleanup_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPipelineCreationFeedback
  if (pData->pPipelineCreationFeedback != NULL)
    cleanup_VkPipelineCreationFeedbackEXT(pData->pPipelineCreationFeedback);
  free((void *)pData->pPipelineCreationFeedback);

  // pPipelineStageCreationFeedbacks - pipelineStageCreationFeedbackCount
  for (size_t i = 0; i < pData->pipelineStageCreationFeedbackCount; ++i) {
    cleanup_VkPipelineCreationFeedbackEXT(&pData->pPipelineStageCreationFeedbacks[i]);
  }
  free((void *)pData->pPipelineStageCreationFeedbacks);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_feedback)
void cleanup_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPipelineCreationFeedback
  if (pData->pPipelineCreationFeedback != NULL)
    cleanup_VkPipelineCreationFeedback(pData->pPipelineCreationFeedback);
  free((void *)pData->pPipelineCreationFeedback);

  // pPipelineStageCreationFeedbacks - pipelineStageCreationFeedbackCount
  for (size_t i = 0; i < pData->pipelineStageCreationFeedbackCount; ++i) {
    cleanup_VkPipelineCreationFeedback(&pData->pPipelineStageCreationFeedbacks[i]);
  }
  free((void *)pData->pPipelineStageCreationFeedbacks);
}
#endif

#if (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 203 && VK_EXT_pipeline_creation_feedback)
void cleanup_VkPipelineCreationFeedbackEXT(VkPipelineCreationFeedbackEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_pipeline_creation_feedback)
void cleanup_VkPipelineCreationFeedbackEXT(VkPipelineCreationFeedbackEXT const *pData) {}
#endif

void cleanup_VkPipelineDepthStencilStateCreateInfo(
    VkPipelineDepthStencilStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_EXT_discard_rectangles)
void cleanup_VkPipelineDiscardRectangleStateCreateInfoEXT(
    VkPipelineDiscardRectangleStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDiscardRectangles - discardRectangleCount
  for (size_t i = 0; i < pData->discardRectangleCount; ++i) {
    cleanup_VkRect2D(&pData->pDiscardRectangles[i]);
  }
  free((void *)pData->pDiscardRectangles);
}
#endif

void cleanup_VkPipelineDynamicStateCreateInfo(VkPipelineDynamicStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDynamicStates - dynamicStateCount
  free((void *)pData->pDynamicStates);
}

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPipelineExecutableInfoKHR(VkPipelineExecutableInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPipelineExecutableInternalRepresentationKHR(
    VkPipelineExecutableInternalRepresentationKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData - dataSize
  free((void *)pData->pData);
}
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPipelineExecutablePropertiesKHR(VkPipelineExecutablePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPipelineExecutableStatisticKHR(VkPipelineExecutableStatisticKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 318 && VK_VALVE_fragment_density_map_layered)
void cleanup_VkPipelineFragmentDensityMapLayeredCreateInfoVALVE(
    VkPipelineFragmentDensityMapLayeredCreateInfoVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums)
void cleanup_VkPipelineFragmentShadingRateEnumStateCreateInfoNV(
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate)
void cleanup_VkPipelineFragmentShadingRateStateCreateInfoKHR(
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_NV_device_generated_commands_compute)
void cleanup_VkPipelineIndirectDeviceAddressInfoNV(
    VkPipelineIndirectDeviceAddressInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties)
void cleanup_VkPipelineInfoEXT(VkPipelineInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties)
void cleanup_VkPipelineInfoKHR(VkPipelineInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkPipelineInputAssemblyStateCreateInfo(
    VkPipelineInputAssemblyStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkPipelineLayoutCreateInfo(VkPipelineLayoutCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetLayouts - setLayoutCount
  free((void *)pData->pSetLayouts);

  // pPushConstantRanges - pushConstantRangeCount
  for (size_t i = 0; i < pData->pushConstantRangeCount; ++i) {
    cleanup_VkPushConstantRange(&pData->pPushConstantRanges[i]);
  }
  free((void *)pData->pPushConstantRanges);
}

#if (VK_HEADER_VERSION >= 162 && VK_KHR_pipeline_library) ||                                       \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_pipeline_library &&            \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPipelineLibraryCreateInfoKHR(VkPipelineLibraryCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pLibraries - libraryCount
  free((void *)pData->pLibraries);
}
#endif

void cleanup_VkPipelineMultisampleStateCreateInfo(
    VkPipelineMultisampleStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSampleMask - (rasterizationSamples + 31) / 32
  free((void *)pData->pSampleMask);
}

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPipelineOfflineCreateInfo(VkPipelineOfflineCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VKSC_VERSION_1_0)
void cleanup_VkPipelinePoolSize(VkPipelinePoolSize const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_pipeline_properties)
void cleanup_VkPipelinePropertiesIdentifierEXT(VkPipelinePropertiesIdentifierEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_conservative_rasterization)
void cleanup_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable)
void cleanup_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPipelineRasterizationLineStateCreateInfo(
    VkPipelineRasterizationLineStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 117 && VK_HEADER_VERSION <= 275 && VK_EXT_line_rasterization)
void cleanup_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_EXT_line_rasterization)
void cleanup_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_line_rasterization)
void cleanup_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_line_rasterization)
void cleanup_VkPipelineRasterizationLineStateCreateInfoKHR(
    VkPipelineRasterizationLineStateCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_line_rasterization)
void cleanup_VkPipelineRasterizationLineStateCreateInfoKHR(
    VkPipelineRasterizationLineStateCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex)
void cleanup_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkPipelineRasterizationStateCreateInfo(
    VkPipelineRasterizationStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_AMD_rasterization_order)
void cleanup_VkPipelineRasterizationStateRasterizationOrderAMD(
    VkPipelineRasterizationStateRasterizationOrderAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback)
void cleanup_VkPipelineRasterizationStateStreamCreateInfoEXT(
    VkPipelineRasterizationStateStreamCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPipelineRenderingCreateInfo(VkPipelineRenderingCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentFormats - colorAttachmentCount
  free((void *)pData->pColorAttachmentFormats);
}
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
void cleanup_VkPipelineRenderingCreateInfoKHR(VkPipelineRenderingCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentFormats - colorAttachmentCount
  free((void *)pData->pColorAttachmentFormats);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering)
void cleanup_VkPipelineRenderingCreateInfoKHR(VkPipelineRenderingCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentFormats - colorAttachmentCount
  free((void *)pData->pColorAttachmentFormats);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test)
void cleanup_VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPipelineRobustnessCreateInfo(VkPipelineRobustnessCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 221 && VK_HEADER_VERSION <= 302 && VK_EXT_pipeline_robustness)
void cleanup_VkPipelineRobustnessCreateInfoEXT(VkPipelineRobustnessCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_pipeline_robustness)
void cleanup_VkPipelineRobustnessCreateInfoEXT(VkPipelineRobustnessCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkPipelineSampleLocationsStateCreateInfoEXT(
    VkPipelineSampleLocationsStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION <= 240
void cleanup_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pName - null-terminated
  free((void *)pData->pName);

  // pSpecializationInfo
  if (pData->pSpecializationInfo != NULL)
    cleanup_VkSpecializationInfo(pData->pSpecializationInfo);
  free((void *)pData->pSpecializationInfo);
}
#endif

#if VK_HEADER_VERSION >= 241
void cleanup_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pName - null-terminated
  free((void *)pData->pName);

  // pSpecializationInfo
  if (pData->pSpecializationInfo != NULL)
    cleanup_VkSpecializationInfo(pData->pSpecializationInfo);
  free((void *)pData->pSpecializationInfo);
}
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
void cleanup_VkPipelineShaderStageModuleIdentifierCreateInfoEXT(
    VkPipelineShaderStageModuleIdentifierCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pIdentifier - identifierSize
  free((void *)pData->pIdentifier);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_AMDX_shader_enqueue && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkPipelineShaderStageNodeCreateInfoAMDX(
    VkPipelineShaderStageNodeCreateInfoAMDX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pName - null-terminated
  free((void *)pData->pName);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 116 && VK_HEADER_VERSION <= 203 && VK_EXT_subgroup_size_control)
void cleanup_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_subgroup_size_control)
void cleanup_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkPipelineTessellationDomainOriginStateCreateInfo(
    VkPipelineTessellationDomainOriginStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_maintenance2)
void cleanup_VkPipelineTessellationDomainOriginStateCreateInfoKHR(
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkPipelineTessellationStateCreateInfo(
    VkPipelineTessellationStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfo(
    VkPipelineVertexInputDivisorStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVertexBindingDivisors - vertexBindingDivisorCount
  for (size_t i = 0; i < pData->vertexBindingDivisorCount; ++i) {
    cleanup_VkVertexInputBindingDivisorDescription(&pData->pVertexBindingDivisors[i]);
  }
  free((void *)pData->pVertexBindingDivisors);
}
#endif

#if (VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVertexBindingDivisors - vertexBindingDivisorCount
  for (size_t i = 0; i < pData->vertexBindingDivisorCount; ++i) {
    cleanup_VkVertexInputBindingDivisorDescriptionEXT(&pData->pVertexBindingDivisors[i]);
  }
  free((void *)pData->pVertexBindingDivisors);
}
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVertexBindingDivisors - vertexBindingDivisorCount
  for (size_t i = 0; i < pData->vertexBindingDivisorCount; ++i) {
    cleanup_VkVertexInputBindingDivisorDescriptionKHR(&pData->pVertexBindingDivisors[i]);
  }
  free((void *)pData->pVertexBindingDivisors);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVertexBindingDivisors - vertexBindingDivisorCount
  for (size_t i = 0; i < pData->vertexBindingDivisorCount; ++i) {
    cleanup_VkVertexInputBindingDivisorDescription(&pData->pVertexBindingDivisors[i]);
  }
  free((void *)pData->pVertexBindingDivisors);
}
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoKHR(
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVertexBindingDivisors - vertexBindingDivisorCount
  for (size_t i = 0; i < pData->vertexBindingDivisorCount; ++i) {
    cleanup_VkVertexInputBindingDivisorDescriptionKHR(&pData->pVertexBindingDivisors[i]);
  }
  free((void *)pData->pVertexBindingDivisors);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoKHR(
    VkPipelineVertexInputDivisorStateCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVertexBindingDivisors - vertexBindingDivisorCount
  for (size_t i = 0; i < pData->vertexBindingDivisorCount; ++i) {
    cleanup_VkVertexInputBindingDivisorDescription(&pData->pVertexBindingDivisors[i]);
  }
  free((void *)pData->pVertexBindingDivisors);
}
#endif

void cleanup_VkPipelineVertexInputStateCreateInfo(
    VkPipelineVertexInputStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVertexBindingDescriptions - vertexBindingDescriptionCount
  for (size_t i = 0; i < pData->vertexBindingDescriptionCount; ++i) {
    cleanup_VkVertexInputBindingDescription(&pData->pVertexBindingDescriptions[i]);
  }
  free((void *)pData->pVertexBindingDescriptions);

  // pVertexAttributeDescriptions - vertexAttributeDescriptionCount
  for (size_t i = 0; i < pData->vertexAttributeDescriptionCount; ++i) {
    cleanup_VkVertexInputAttributeDescription(&pData->pVertexAttributeDescriptions[i]);
  }
  free((void *)pData->pVertexAttributeDescriptions);
}

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCustomSampleOrders - customSampleOrderCount
  for (size_t i = 0; i < pData->customSampleOrderCount; ++i) {
    cleanup_VkCoarseSampleOrderCustomNV(&pData->pCustomSampleOrders[i]);
  }
  free((void *)pData->pCustomSampleOrders);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_depth_clamp_control)
void cleanup_VkPipelineViewportDepthClampControlCreateInfoEXT(
    VkPipelineViewportDepthClampControlCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDepthClampRange
  if (pData->pDepthClampRange != NULL)
    cleanup_VkDepthClampRangeEXT(pData->pDepthClampRange);
  free((void *)pData->pDepthClampRange);
}
#endif

#if (VK_HEADER_VERSION >= 200 && VK_EXT_depth_clip_control)
void cleanup_VkPipelineViewportDepthClipControlCreateInfoEXT(
    VkPipelineViewportDepthClipControlCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive)
void cleanup_VkPipelineViewportExclusiveScissorStateCreateInfoNV(
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pExclusiveScissors - exclusiveScissorCount
  for (size_t i = 0; i < pData->exclusiveScissorCount; ++i) {
    cleanup_VkRect2D(&pData->pExclusiveScissors[i]);
  }
  free((void *)pData->pExclusiveScissors);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkPipelineViewportShadingRateImageStateCreateInfoNV(
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pShadingRatePalettes - viewportCount
  for (size_t i = 0; i < pData->viewportCount; ++i) {
    cleanup_VkShadingRatePaletteNV(&pData->pShadingRatePalettes[i]);
  }
  free((void *)pData->pShadingRatePalettes);
}
#endif

void cleanup_VkPipelineViewportStateCreateInfo(VkPipelineViewportStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewports - viewportCount
  for (size_t i = 0; i < pData->viewportCount; ++i) {
    cleanup_VkViewport(&pData->pViewports[i]);
  }
  free((void *)pData->pViewports);

  // pScissors - scissorCount
  for (size_t i = 0; i < pData->scissorCount; ++i) {
    cleanup_VkRect2D(&pData->pScissors[i]);
  }
  free((void *)pData->pScissors);
}

#if (VK_NV_viewport_swizzle)
void cleanup_VkPipelineViewportSwizzleStateCreateInfoNV(
    VkPipelineViewportSwizzleStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewportSwizzles - viewportCount
  for (size_t i = 0; i < pData->viewportCount; ++i) {
    cleanup_VkViewportSwizzleNV(&pData->pViewportSwizzles[i]);
  }
  free((void *)pData->pViewportSwizzles);
}
#endif

#if (VK_NV_clip_space_w_scaling)
void cleanup_VkPipelineViewportWScalingStateCreateInfoNV(
    VkPipelineViewportWScalingStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewportWScalings - viewportCount
  for (size_t i = 0; i < pData->viewportCount; ++i) {
    cleanup_VkViewportWScalingNV(&pData->pViewportWScalings[i]);
  }
  free((void *)pData->pViewportWScalings);
}
#endif

#if (VK_HEADER_VERSION >= 105 && VK_GGP_frame_token)
void cleanup_VkPresentFrameTokenGGP(VkPresentFrameTokenGGP const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_id2)
void cleanup_VkPresentId2KHR(VkPresentId2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPresentIds - swapchainCount
  free((void *)pData->pPresentIds);
}
#endif

#if (VK_HEADER_VERSION >= 185 && VK_KHR_present_id)
void cleanup_VkPresentIdKHR(VkPresentIdKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPresentIds - swapchainCount
  free((void *)pData->pPresentIds);
}
#endif

#if (VK_HEADER_VERSION >= 140 && VK_KHR_swapchain)
void cleanup_VkPresentInfoKHR(VkPresentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphores - waitSemaphoreCount
  free((void *)pData->pWaitSemaphores);

  // pSwapchains - swapchainCount
  free((void *)pData->pSwapchains);

  // pImageIndices - swapchainCount
  free((void *)pData->pImageIndices);

  // pResults - swapchainCount
  free((void *)pData->pResults);
}
#endif

#if (VK_KHR_incremental_present)
void cleanup_VkPresentRegionKHR(VkPresentRegionKHR const *pData) {
  // pRectangles - rectangleCount
  for (size_t i = 0; i < pData->rectangleCount; ++i) {
    cleanup_VkRectLayerKHR(&pData->pRectangles[i]);
  }
  free((void *)pData->pRectangles);
}
#endif

#if (VK_KHR_incremental_present)
void cleanup_VkPresentRegionsKHR(VkPresentRegionsKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - swapchainCount
  for (size_t i = 0; i < pData->swapchainCount; ++i) {
    cleanup_VkPresentRegionKHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_GOOGLE_display_timing)
void cleanup_VkPresentTimeGOOGLE(VkPresentTimeGOOGLE const *pData) {}
#endif

#if (VK_GOOGLE_display_timing)
void cleanup_VkPresentTimesInfoGOOGLE(VkPresentTimesInfoGOOGLE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTimes - swapchainCount
  for (size_t i = 0; i < pData->swapchainCount; ++i) {
    cleanup_VkPresentTimeGOOGLE(&pData->pTimes[i]);
  }
  free((void *)pData->pTimes);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2)
void cleanup_VkPresentWait2InfoKHR(VkPresentWait2InfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkPrivateDataSlotCreateInfo(VkPrivateDataSlotCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 203 && VK_EXT_private_data)
void cleanup_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_private_data)
void cleanup_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkProtectedSubmitInfo(VkProtectedSubmitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkPushConstantRange(VkPushConstantRange const *pData) {}

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPushConstantsInfo(VkPushConstantsInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pValues - size
  free((void *)pData->pValues);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6)
void cleanup_VkPushConstantsInfoKHR(VkPushConstantsInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pValues - size
  free((void *)pData->pValues);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6)
void cleanup_VkPushConstantsInfoKHR(VkPushConstantsInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pValues - size
  free((void *)pData->pValues);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPushDescriptorSetInfo(VkPushDescriptorSetInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorWrites - descriptorWriteCount
  for (size_t i = 0; i < pData->descriptorWriteCount; ++i) {
    cleanup_VkWriteDescriptorSet(&pData->pDescriptorWrites[i]);
  }
  free((void *)pData->pDescriptorWrites);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor)
void cleanup_VkPushDescriptorSetInfoKHR(VkPushDescriptorSetInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorWrites - descriptorWriteCount
  for (size_t i = 0; i < pData->descriptorWriteCount; ++i) {
    cleanup_VkWriteDescriptorSet(&pData->pDescriptorWrites[i]);
  }
  free((void *)pData->pDescriptorWrites);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6 && VK_KHR_push_descriptor)
void cleanup_VkPushDescriptorSetInfoKHR(VkPushDescriptorSetInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorWrites - descriptorWriteCount
  for (size_t i = 0; i < pData->descriptorWriteCount; ++i) {
    cleanup_VkWriteDescriptorSet(&pData->pDescriptorWrites[i]);
  }
  free((void *)pData->pDescriptorWrites);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkPushDescriptorSetWithTemplateInfo(VkPushDescriptorSetWithTemplateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData
  free((void *)pData->pData);
}
#endif

#if (VK_HEADER_VERSION >= 275 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor) ||                                                                    \
    (VK_HEADER_VERSION >= 274 && VK_HEADER_VERSION <= 274 && VK_KHR_maintenance6 &&                \
     VK_KHR_push_descriptor && VK_VERSION_1_1)
void cleanup_VkPushDescriptorSetWithTemplateInfoKHR(
    VkPushDescriptorSetWithTemplateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData
  free((void *)pData->pData);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance6 && VK_KHR_push_descriptor)
void cleanup_VkPushDescriptorSetWithTemplateInfoKHR(
    VkPushDescriptorSetWithTemplateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData
  free((void *)pData->pData);
}
#endif

#if (VK_HEADER_VERSION >= 242 && VK_NV_low_latency)
void cleanup_VkQueryLowLatencySupportNV(VkQueryLowLatencySupportNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueriedLowLatencyData
  free((void *)pData->pQueriedLowLatencyData);
}
#endif

void cleanup_VkQueryPoolCreateInfo(VkQueryPoolCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 134 && VK_INTEL_performance_query)
void cleanup_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query)
void cleanup_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 128 && VK_KHR_performance_query)
void cleanup_VkQueryPoolPerformanceCreateInfoKHR(VkQueryPoolPerformanceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCounterIndices - counterIndexCount
  free((void *)pData->pCounterIndices);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query)
void cleanup_VkQueryPoolPerformanceQueryCreateInfoINTEL(
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR(
    VkQueryPoolVideoEncodeFeedbackCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkQueueFamilyCheckpointProperties2NV(
    VkQueueFamilyCheckpointProperties2NV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_NV_device_diagnostic_checkpoints &&                            \
     (VK_VERSION_1_3 || VK_KHR_synchronization2)) ||                                               \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_synchronization2 &&            \
     VK_NV_device_diagnostic_checkpoints) ||                                                       \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 240 && VK_KHR_synchronization2)
void cleanup_VkQueueFamilyCheckpointProperties2NV(
    VkQueueFamilyCheckpointProperties2NV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints)
void cleanup_VkQueueFamilyCheckpointPropertiesNV(VkQueueFamilyCheckpointPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkQueueFamilyDataGraphProcessingEnginePropertiesARM(
    VkQueueFamilyDataGraphProcessingEnginePropertiesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 319 && VK_ARM_data_graph)
void cleanup_VkQueueFamilyDataGraphPropertiesARM(VkQueueFamilyDataGraphPropertiesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkQueueFamilyGlobalPriorityProperties(
    VkQueueFamilyGlobalPriorityProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 180 && VK_HEADER_VERSION <= 203 && VK_EXT_global_priority_query)
void cleanup_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_EXT_global_priority_query)
void cleanup_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_global_priority_query)
void cleanup_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 302 && VK_KHR_global_priority)
void cleanup_VkQueueFamilyGlobalPriorityPropertiesKHR(
    VkQueueFamilyGlobalPriorityPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_global_priority)
void cleanup_VkQueueFamilyGlobalPriorityPropertiesKHR(
    VkQueueFamilyGlobalPriorityPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_maintenance9)
void cleanup_VkQueueFamilyOwnershipTransferPropertiesKHR(
    VkQueueFamilyOwnershipTransferPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkQueueFamilyProperties(VkQueueFamilyProperties const *pData) {}

#if (VK_VERSION_1_1)
void cleanup_VkQueueFamilyProperties2(VkQueueFamilyProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkQueueFamilyProperties2KHR(VkQueueFamilyProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkQueueFamilyQueryResultStatusProperties2KHR(
    VkQueueFamilyQueryResultStatusProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkQueueFamilyQueryResultStatusProperties2KHR(
    VkQueueFamilyQueryResultStatusProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkQueueFamilyQueryResultStatusPropertiesKHR(
    VkQueueFamilyQueryResultStatusPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkQueueFamilyVideoPropertiesKHR(VkQueueFamilyVideoPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure &&                           \
     VK_KHR_ray_tracing_pipeline)
void cleanup_VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV(
    VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  for (size_t i = 0; i < pData->stageCount; ++i) {
    cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pGroups - groupCount
  for (size_t i = 0; i < pData->groupCount; ++i) {
    cleanup_VkRayTracingShaderGroupCreateInfoKHR(&pData->pGroups[i]);
  }
  free((void *)pData->pGroups);

  // pLibraryInterface
  if (pData->pLibraryInterface != NULL)
    cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(pData->pLibraryInterface);
  free((void *)pData->pLibraryInterface);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
void cleanup_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  for (size_t i = 0; i < pData->stageCount; ++i) {
    cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pGroups - groupCount
  for (size_t i = 0; i < pData->groupCount; ++i) {
    cleanup_VkRayTracingShaderGroupCreateInfoKHR(&pData->pGroups[i]);
  }
  free((void *)pData->pGroups);

  // pLibraryInfo
  if (pData->pLibraryInfo != NULL)
    cleanup_VkPipelineLibraryCreateInfoKHR(pData->pLibraryInfo);
  free((void *)pData->pLibraryInfo);

  // pLibraryInterface
  if (pData->pLibraryInterface != NULL)
    cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(pData->pLibraryInterface);
  free((void *)pData->pLibraryInterface);

  // pDynamicState
  if (pData->pDynamicState != NULL)
    cleanup_VkPipelineDynamicStateCreateInfo(pData->pDynamicState);
  free((void *)pData->pDynamicState);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkRayTracingPipelineCreateInfoNV(VkRayTracingPipelineCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  for (size_t i = 0; i < pData->stageCount; ++i) {
    cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pGroups - groupCount
  for (size_t i = 0; i < pData->groupCount; ++i) {
    cleanup_VkRayTracingShaderGroupCreateInfoNV(&pData->pGroups[i]);
  }
  free((void *)pData->pGroups);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
void cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline) ||                                   \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkRayTracingShaderGroupCreateInfoKHR(
    VkRayTracingShaderGroupCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pShaderGroupCaptureReplayHandle
  free((void *)pData->pShaderGroupCaptureReplayHandle);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_HEADER_VERSION <= 134 && VK_NV_ray_tracing)
void cleanup_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
void cleanup_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing)
void cleanup_VkRaytracingPipelineCreateInfoNVX(VkRaytracingPipelineCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  for (size_t i = 0; i < pData->stageCount; ++i) {
    cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pGroupNumbers - stageCount
  free((void *)pData->pGroupNumbers);
}
#endif

void cleanup_VkRect2D(VkRect2D const *pData) {}

#if (VK_KHR_incremental_present)
void cleanup_VkRectLayerKHR(VkRectLayerKHR const *pData) {}
#endif

#if (VK_GOOGLE_display_timing)
void cleanup_VkRefreshCycleDurationGOOGLE(VkRefreshCycleDurationGOOGLE const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_object_refresh)
void cleanup_VkRefreshObjectKHR(VkRefreshObjectKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_object_refresh)
void cleanup_VkRefreshObjectListKHR(VkRefreshObjectListKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pObjects - objectCount
  for (size_t i = 0; i < pData->objectCount; ++i) {
    cleanup_VkRefreshObjectKHR(&pData->pObjects[i]);
  }
  free((void *)pData->pObjects);
}
#endif

#if (VK_HEADER_VERSION >= 294 && VK_KHR_pipeline_binary)
void cleanup_VkReleaseCapturedPipelineDataInfoKHR(
    VkReleaseCapturedPipelineDataInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkReleaseSwapchainImagesInfoEXT(VkReleaseSwapchainImagesInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pImageIndices - imageIndexCount
  free((void *)pData->pImageIndices);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkRenderPassAttachmentBeginInfo(VkRenderPassAttachmentBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  free((void *)pData->pAttachments);
}
#endif

#if (VK_HEADER_VERSION >= 114 && VK_HEADER_VERSION <= 130 && VK_KHR_imageless_framebuffer)
void cleanup_VkRenderPassAttachmentBeginInfoKHR(VkRenderPassAttachmentBeginInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  free((void *)pData->pAttachments);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_imageless_framebuffer)
void cleanup_VkRenderPassAttachmentBeginInfoKHR(VkRenderPassAttachmentBeginInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  free((void *)pData->pAttachments);
}
#endif

void cleanup_VkRenderPassBeginInfo(VkRenderPassBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pClearValues - clearValueCount
  free((void *)pData->pClearValues);
}

void cleanup_VkRenderPassCreateInfo(VkRenderPassCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  for (size_t i = 0; i < pData->attachmentCount; ++i) {
    cleanup_VkAttachmentDescription(&pData->pAttachments[i]);
  }
  free((void *)pData->pAttachments);

  // pSubpasses - subpassCount
  for (size_t i = 0; i < pData->subpassCount; ++i) {
    cleanup_VkSubpassDescription(&pData->pSubpasses[i]);
  }
  free((void *)pData->pSubpasses);

  // pDependencies - dependencyCount
  for (size_t i = 0; i < pData->dependencyCount; ++i) {
    cleanup_VkSubpassDependency(&pData->pDependencies[i]);
  }
  free((void *)pData->pDependencies);
}

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkRenderPassCreateInfo2(VkRenderPassCreateInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  for (size_t i = 0; i < pData->attachmentCount; ++i) {
    cleanup_VkAttachmentDescription2(&pData->pAttachments[i]);
  }
  free((void *)pData->pAttachments);

  // pSubpasses - subpassCount
  for (size_t i = 0; i < pData->subpassCount; ++i) {
    cleanup_VkSubpassDescription2(&pData->pSubpasses[i]);
  }
  free((void *)pData->pSubpasses);

  // pDependencies - dependencyCount
  for (size_t i = 0; i < pData->dependencyCount; ++i) {
    cleanup_VkSubpassDependency2(&pData->pDependencies[i]);
  }
  free((void *)pData->pDependencies);

  // pCorrelatedViewMasks - correlatedViewMaskCount
  free((void *)pData->pCorrelatedViewMasks);
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  for (size_t i = 0; i < pData->attachmentCount; ++i) {
    cleanup_VkAttachmentDescription2KHR(&pData->pAttachments[i]);
  }
  free((void *)pData->pAttachments);

  // pSubpasses - subpassCount
  for (size_t i = 0; i < pData->subpassCount; ++i) {
    cleanup_VkSubpassDescription2KHR(&pData->pSubpasses[i]);
  }
  free((void *)pData->pSubpasses);

  // pDependencies - dependencyCount
  for (size_t i = 0; i < pData->dependencyCount; ++i) {
    cleanup_VkSubpassDependency2KHR(&pData->pDependencies[i]);
  }
  free((void *)pData->pDependencies);

  // pCorrelatedViewMasks - correlatedViewMaskCount
  free((void *)pData->pCorrelatedViewMasks);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  for (size_t i = 0; i < pData->attachmentCount; ++i) {
    cleanup_VkAttachmentDescription2(&pData->pAttachments[i]);
  }
  free((void *)pData->pAttachments);

  // pSubpasses - subpassCount
  for (size_t i = 0; i < pData->subpassCount; ++i) {
    cleanup_VkSubpassDescription2(&pData->pSubpasses[i]);
  }
  free((void *)pData->pSubpasses);

  // pDependencies - dependencyCount
  for (size_t i = 0; i < pData->dependencyCount; ++i) {
    cleanup_VkSubpassDependency2(&pData->pDependencies[i]);
  }
  free((void *)pData->pDependencies);

  // pCorrelatedViewMasks - correlatedViewMaskCount
  free((void *)pData->pCorrelatedViewMasks);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassCreationControlEXT(VkRenderPassCreationControlEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassCreationFeedbackCreateInfoEXT(
    VkRenderPassCreationFeedbackCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRenderPassFeedback
  if (pData->pRenderPassFeedback != NULL)
    cleanup_VkRenderPassCreationFeedbackInfoEXT(pData->pRenderPassFeedback);
  free((void *)pData->pRenderPassFeedback);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 215 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassCreationFeedbackInfoEXT(VkRenderPassCreationFeedbackInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassCreationFeedbackInfoEXT(VkRenderPassCreationFeedbackInfoEXT const *pData) {
}
#endif

#if (VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map)
void cleanup_VkRenderPassFragmentDensityMapCreateInfoEXT(
    VkRenderPassFragmentDensityMapCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
void cleanup_VkRenderPassFragmentDensityMapOffsetEndInfoEXT(
    VkRenderPassFragmentDensityMapOffsetEndInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pFragmentDensityOffsets - fragmentDensityOffsetCount
  for (size_t i = 0; i < pData->fragmentDensityOffsetCount; ++i) {
    cleanup_VkOffset2D(&pData->pFragmentDensityOffsets[i]);
  }
  free((void *)pData->pFragmentDensityOffsets);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkRenderPassInputAttachmentAspectCreateInfo(
    VkRenderPassInputAttachmentAspectCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAspectReferences - aspectReferenceCount
  for (size_t i = 0; i < pData->aspectReferenceCount; ++i) {
    cleanup_VkInputAttachmentAspectReference(&pData->pAspectReferences[i]);
  }
  free((void *)pData->pAspectReferences);
}
#endif

#if (VK_KHR_maintenance2)
void cleanup_VkRenderPassInputAttachmentAspectCreateInfoKHR(
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAspectReferences - aspectReferenceCount
  for (size_t i = 0; i < pData->aspectReferenceCount; ++i) {
    cleanup_VkInputAttachmentAspectReference(&pData->pAspectReferences[i]);
  }
  free((void *)pData->pAspectReferences);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkRenderPassMultiviewCreateInfo(VkRenderPassMultiviewCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewMasks - subpassCount
  free((void *)pData->pViewMasks);

  // pViewOffsets - dependencyCount
  free((void *)pData->pViewOffsets);

  // pCorrelationMasks - correlationMaskCount
  free((void *)pData->pCorrelationMasks);
}
#endif

#if (VK_KHR_multiview)
void cleanup_VkRenderPassMultiviewCreateInfoKHR(VkRenderPassMultiviewCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewMasks - subpassCount
  free((void *)pData->pViewMasks);

  // pViewOffsets - dependencyCount
  free((void *)pData->pViewOffsets);

  // pCorrelationMasks - correlationMaskCount
  free((void *)pData->pCorrelationMasks);
}
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkRenderPassSampleLocationsBeginInfoEXT(
    VkRenderPassSampleLocationsBeginInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachmentInitialSampleLocations - attachmentInitialSampleLocationsCount
  for (size_t i = 0; i < pData->attachmentInitialSampleLocationsCount; ++i) {
    cleanup_VkAttachmentSampleLocationsEXT(&pData->pAttachmentInitialSampleLocations[i]);
  }
  free((void *)pData->pAttachmentInitialSampleLocations);

  // pPostSubpassSampleLocations - postSubpassSampleLocationsCount
  for (size_t i = 0; i < pData->postSubpassSampleLocationsCount; ++i) {
    cleanup_VkSubpassSampleLocationsEXT(&pData->pPostSubpassSampleLocations[i]);
  }
  free((void *)pData->pPostSubpassSampleLocations);
}
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
void cleanup_VkRenderPassStripeBeginInfoARM(VkRenderPassStripeBeginInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStripeInfos - stripeInfoCount
  for (size_t i = 0; i < pData->stripeInfoCount; ++i) {
    cleanup_VkRenderPassStripeInfoARM(&pData->pStripeInfos[i]);
  }
  free((void *)pData->pStripeInfos);
}
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
void cleanup_VkRenderPassStripeInfoARM(VkRenderPassStripeInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 272 && VK_ARM_render_pass_striped)
void cleanup_VkRenderPassStripeSubmitInfoARM(VkRenderPassStripeSubmitInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStripeSemaphoreInfos - stripeSemaphoreInfoCount
  for (size_t i = 0; i < pData->stripeSemaphoreInfoCount; ++i) {
    cleanup_VkSemaphoreSubmitInfo(&pData->pStripeSemaphoreInfos[i]);
  }
  free((void *)pData->pStripeSemaphoreInfos);
}
#endif

#if (VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassSubpassFeedbackCreateInfoEXT(
    VkRenderPassSubpassFeedbackCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSubpassFeedback
  if (pData->pSubpassFeedback != NULL)
    cleanup_VkRenderPassSubpassFeedbackInfoEXT(pData->pSubpassFeedback);
  free((void *)pData->pSubpassFeedback);
}
#endif

#if (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 215 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassSubpassFeedbackInfoEXT(VkRenderPassSubpassFeedbackInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 216 && VK_EXT_subpass_merge_feedback)
void cleanup_VkRenderPassSubpassFeedbackInfoEXT(VkRenderPassSubpassFeedbackInfoEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 312 && VK_QCOM_tile_shading)
void cleanup_VkRenderPassTileShadingCreateInfoQCOM(
    VkRenderPassTileShadingCreateInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform)
void cleanup_VkRenderPassTransformBeginInfoQCOM(VkRenderPassTransformBeginInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkRenderingAreaInfo(VkRenderingAreaInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentFormats - colorAttachmentCount
  free((void *)pData->pColorAttachmentFormats);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkRenderingAreaInfoKHR(VkRenderingAreaInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentFormats - colorAttachmentCount
  free((void *)pData->pColorAttachmentFormats);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkRenderingAreaInfoKHR(VkRenderingAreaInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentFormats - colorAttachmentCount
  free((void *)pData->pColorAttachmentFormats);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkRenderingAttachmentInfo(VkRenderingAttachmentInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingAttachmentInfoKHR(VkRenderingAttachmentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingAttachmentInfoKHR(VkRenderingAttachmentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkRenderingAttachmentLocationInfo(VkRenderingAttachmentLocationInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentLocations - colorAttachmentCount
  free((void *)pData->pColorAttachmentLocations);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkRenderingAttachmentLocationInfoKHR(
    VkRenderingAttachmentLocationInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentLocations - colorAttachmentCount
  free((void *)pData->pColorAttachmentLocations);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkRenderingAttachmentLocationInfoKHR(
    VkRenderingAttachmentLocationInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentLocations - colorAttachmentCount
  free((void *)pData->pColorAttachmentLocations);
}
#endif

#if (VK_HEADER_VERSION >= 311 && VK_EXT_fragment_density_map_offset)
void cleanup_VkRenderingEndInfoEXT(VkRenderingEndInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_EXT_fragment_density_map &&                                    \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_EXT_fragment_density_map) ||                                                               \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingFragmentDensityMapAttachmentInfoEXT(
    VkRenderingFragmentDensityMapAttachmentInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 299 && VK_KHR_fragment_shading_rate &&                                   \
     (VK_VERSION_1_3 || VK_KHR_dynamic_rendering)) ||                                              \
    (VK_HEADER_VERSION >= 241 && VK_HEADER_VERSION <= 298 && VK_KHR_dynamic_rendering &&           \
     VK_KHR_fragment_shading_rate) ||                                                              \
    (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 240 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingFragmentShadingRateAttachmentInfoKHR(
    VkRenderingFragmentShadingRateAttachmentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkRenderingInfo(VkRenderingInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachments - colorAttachmentCount
  for (size_t i = 0; i < pData->colorAttachmentCount; ++i) {
    cleanup_VkRenderingAttachmentInfo(&pData->pColorAttachments[i]);
  }
  free((void *)pData->pColorAttachments);

  // pDepthAttachment
  if (pData->pDepthAttachment != NULL)
    cleanup_VkRenderingAttachmentInfo(pData->pDepthAttachment);
  free((void *)pData->pDepthAttachment);

  // pStencilAttachment
  if (pData->pStencilAttachment != NULL)
    cleanup_VkRenderingAttachmentInfo(pData->pStencilAttachment);
  free((void *)pData->pStencilAttachment);
}
#endif

#if (VK_HEADER_VERSION >= 197 && VK_HEADER_VERSION <= 203 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingInfoKHR(VkRenderingInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachments - colorAttachmentCount
  for (size_t i = 0; i < pData->colorAttachmentCount; ++i) {
    cleanup_VkRenderingAttachmentInfoKHR(&pData->pColorAttachments[i]);
  }
  free((void *)pData->pColorAttachments);

  // pDepthAttachment
  if (pData->pDepthAttachment != NULL)
    cleanup_VkRenderingAttachmentInfoKHR(pData->pDepthAttachment);
  free((void *)pData->pDepthAttachment);

  // pStencilAttachment
  if (pData->pStencilAttachment != NULL)
    cleanup_VkRenderingAttachmentInfoKHR(pData->pStencilAttachment);
  free((void *)pData->pStencilAttachment);
}
#endif

#if (VK_HEADER_VERSION >= 281 && VK_KHR_dynamic_rendering && VK_QCOM_tile_properties &&            \
     (VK_KHR_dynamic_rendering || VK_VERSION_1_3)) ||                                              \
    (VK_HEADER_VERSION >= 222 && VK_HEADER_VERSION <= 280 && VK_KHR_dynamic_rendering &&           \
     VK_QCOM_tile_properties) ||                                                                   \
    (VK_HEADER_VERSION >= 204 && VK_HEADER_VERSION <= 221 && VK_KHR_dynamic_rendering)
void cleanup_VkRenderingInfoKHR(VkRenderingInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachments - colorAttachmentCount
  for (size_t i = 0; i < pData->colorAttachmentCount; ++i) {
    cleanup_VkRenderingAttachmentInfo(&pData->pColorAttachments[i]);
  }
  free((void *)pData->pColorAttachments);

  // pDepthAttachment
  if (pData->pDepthAttachment != NULL)
    cleanup_VkRenderingAttachmentInfo(pData->pDepthAttachment);
  free((void *)pData->pDepthAttachment);

  // pStencilAttachment
  if (pData->pStencilAttachment != NULL)
    cleanup_VkRenderingAttachmentInfo(pData->pStencilAttachment);
  free((void *)pData->pStencilAttachment);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkRenderingInputAttachmentIndexInfo(VkRenderingInputAttachmentIndexInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentInputIndices - colorAttachmentCount
  free((void *)pData->pColorAttachmentInputIndices);

  // pDepthInputAttachmentIndex
  free((void *)pData->pDepthInputAttachmentIndex);

  // pStencilInputAttachmentIndex
  free((void *)pData->pStencilInputAttachmentIndex);
}
#endif

#if (VK_HEADER_VERSION >= 276 && VK_HEADER_VERSION <= 302 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkRenderingInputAttachmentIndexInfoKHR(
    VkRenderingInputAttachmentIndexInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentInputIndices - colorAttachmentCount
  free((void *)pData->pColorAttachmentInputIndices);

  // pDepthInputAttachmentIndex
  free((void *)pData->pDepthInputAttachmentIndex);

  // pStencilInputAttachmentIndex
  free((void *)pData->pStencilInputAttachmentIndex);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_dynamic_rendering_local_read)
void cleanup_VkRenderingInputAttachmentIndexInfoKHR(
    VkRenderingInputAttachmentIndexInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorAttachmentInputIndices - colorAttachmentCount
  free((void *)pData->pColorAttachmentInputIndices);

  // pDepthInputAttachmentIndex
  free((void *)pData->pDepthInputAttachmentIndex);

  // pStencilInputAttachmentIndex
  free((void *)pData->pStencilInputAttachmentIndex);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkResolveImageInfo2(VkResolveImageInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageResolve2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 154 && VK_HEADER_VERSION <= 203 && VK_KHR_copy_commands2)
void cleanup_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageResolve2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_copy_commands2)
void cleanup_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  for (size_t i = 0; i < pData->regionCount; ++i) {
    cleanup_VkImageResolve2(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur)
void cleanup_VkSRTDataNV(VkSRTDataNV const *pData) {}
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkSampleLocationEXT(VkSampleLocationEXT const *pData) {}
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkSampleLocationsInfoEXT(VkSampleLocationsInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSampleLocations - sampleLocationsCount
  for (size_t i = 0; i < pData->sampleLocationsCount; ++i) {
    cleanup_VkSampleLocationEXT(&pData->pSampleLocations[i]);
  }
  free((void *)pData->pSampleLocations);
}
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_image_processing2)
void cleanup_VkSamplerBlockMatchWindowCreateInfoQCOM(
    VkSamplerBlockMatchWindowCreateInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle)
void cleanup_VkSamplerBorderColorComponentMappingCreateInfoEXT(
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 235 && VK_EXT_descriptor_buffer)
void cleanup_VkSamplerCaptureDescriptorDataInfoEXT(
    VkSamplerCaptureDescriptorDataInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkSamplerCreateInfo(VkSamplerCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_filter_cubic_weights)
void cleanup_VkSamplerCubicWeightsCreateInfoQCOM(VkSamplerCubicWeightsCreateInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color)
void cleanup_VkSamplerCustomBorderColorCreateInfoEXT(
    VkSamplerCustomBorderColorCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSamplerReductionModeCreateInfo(VkSamplerReductionModeCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION <= 130 && VK_EXT_sampler_filter_minmax)
void cleanup_VkSamplerReductionModeCreateInfoEXT(VkSamplerReductionModeCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_EXT_sampler_filter_minmax)
void cleanup_VkSamplerReductionModeCreateInfoEXT(VkSamplerReductionModeCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkSamplerYcbcrConversionCreateInfo(VkSamplerYcbcrConversionCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkSamplerYcbcrConversionCreateInfoKHR(
    VkSamplerYcbcrConversionCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkSamplerYcbcrConversionImageFormatProperties(
    VkSamplerYcbcrConversionImageFormatProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkSamplerYcbcrConversionImageFormatPropertiesKHR(
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_VERSION_1_1)
void cleanup_VkSamplerYcbcrConversionInfo(VkSamplerYcbcrConversionInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_sampler_ycbcr_conversion)
void cleanup_VkSamplerYcbcrConversionInfoKHR(VkSamplerYcbcrConversionInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 262 && VK_QCOM_ycbcr_degamma)
void cleanup_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(
    VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync && VK_NV_external_sci_sync2)
void cleanup_VkSciSyncAttributesInfoNV(VkSciSyncAttributesInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
void cleanup_VkScreenBufferFormatPropertiesQNX(VkScreenBufferFormatPropertiesQNX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 254 && VK_QNX_external_memory_screen_buffer)
void cleanup_VkScreenBufferPropertiesQNX(VkScreenBufferPropertiesQNX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface)
void cleanup_VkScreenSurfaceCreateInfoQNX(VkScreenSurfaceCreateInfoQNX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // context
  free((void *)pData->context);

  // window
  free((void *)pData->window);
}
#endif

void cleanup_VkSemaphoreCreateInfo(VkSemaphoreCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

#if (VK_KHR_external_semaphore_fd)
void cleanup_VkSemaphoreGetFdInfoKHR(VkSemaphoreGetFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync)
void cleanup_VkSemaphoreGetSciSyncInfoNV(VkSemaphoreGetSciSyncInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_external_semaphore_win32)
void cleanup_VkSemaphoreGetWin32HandleInfoKHR(VkSemaphoreGetWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore)
void cleanup_VkSemaphoreGetZirconHandleInfoFUCHSIA(
    VkSemaphoreGetZirconHandleInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2)
void cleanup_VkSemaphoreSciSyncCreateInfoNV(VkSemaphoreSciSyncCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pFence
  free((void *)pData->pFence);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_NV_external_sci_sync2)
void cleanup_VkSemaphoreSciSyncPoolCreateInfoNV(VkSemaphoreSciSyncPoolCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSemaphoreSignalInfo(VkSemaphoreSignalInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkSemaphoreSubmitInfo(VkSemaphoreSubmitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSemaphoreTypeCreateInfo(VkSemaphoreTypeCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSemaphoreWaitInfo(VkSemaphoreWaitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSemaphores - semaphoreCount
  free((void *)pData->pSemaphores);

  // pValues - semaphoreCount
  free((void *)pData->pValues);
}
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSemaphores - semaphoreCount
  free((void *)pData->pSemaphores);

  // pValues - semaphoreCount
  free((void *)pData->pValues);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSemaphores - semaphoreCount
  free((void *)pData->pSemaphores);

  // pValues - semaphoreCount
  free((void *)pData->pValues);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_maintenance6 && VK_EXT_descriptor_buffer)
void cleanup_VkSetDescriptorBufferOffsetsInfoEXT(VkSetDescriptorBufferOffsetsInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pBufferIndices - setCount
  free((void *)pData->pBufferIndices);

  // pOffsets - setCount
  free((void *)pData->pOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkSetLatencyMarkerInfoNV(VkSetLatencyMarkerInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 308 && VK_NV_present_metering && VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkSetPresentConfigNV(VkSetPresentConfigNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands)
void cleanup_VkSetStateFlagsIndirectCommandNV(VkSetStateFlagsIndirectCommandNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_object)
void cleanup_VkShaderCreateInfoEXT(VkShaderCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCode - codeSize
  free((void *)pData->pCode);

  // pName - null-terminated
  free((void *)pData->pName);

  // pSetLayouts - setLayoutCount
  free((void *)pData->pSetLayouts);

  // pPushConstantRanges - pushConstantRangeCount
  for (size_t i = 0; i < pData->pushConstantRangeCount; ++i) {
    cleanup_VkPushConstantRange(&pData->pPushConstantRanges[i]);
  }
  free((void *)pData->pPushConstantRanges);

  // pSpecializationInfo
  if (pData->pSpecializationInfo != NULL)
    cleanup_VkSpecializationInfo(pData->pSpecializationInfo);
  free((void *)pData->pSpecializationInfo);
}
#endif

void cleanup_VkShaderModuleCreateInfo(VkShaderModuleCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCode - codeSize / 4
  free((void *)pData->pCode);
}

#if (VK_HEADER_VERSION >= 219 && VK_EXT_shader_module_identifier)
void cleanup_VkShaderModuleIdentifierEXT(VkShaderModuleIdentifierEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_validation_cache)
void cleanup_VkShaderModuleValidationCacheCreateInfoEXT(
    VkShaderModuleValidationCacheCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 246 && VK_EXT_shader_object)
void cleanup_VkShaderRequiredSubgroupSizeCreateInfoEXT(
    VkShaderRequiredSubgroupSizeCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_AMD_shader_info)
void cleanup_VkShaderResourceUsageAMD(VkShaderResourceUsageAMD const *pData) {}
#endif

#if (VK_AMD_shader_info)
void cleanup_VkShaderStatisticsInfoAMD(VkShaderStatisticsInfoAMD const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image)
void cleanup_VkShadingRatePaletteNV(VkShadingRatePaletteNV const *pData) {
  // pShadingRatePaletteEntries - shadingRatePaletteEntryCount
  free((void *)pData->pShadingRatePaletteEntries);
}
#endif

#if (VK_KHR_shared_presentable_image)
void cleanup_VkSharedPresentSurfaceCapabilitiesKHR(
    VkSharedPresentSurfaceCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkSparseBufferMemoryBindInfo(VkSparseBufferMemoryBindInfo const *pData) {
  // pBinds - bindCount
  for (size_t i = 0; i < pData->bindCount; ++i) {
    cleanup_VkSparseMemoryBind(&pData->pBinds[i]);
  }
  free((void *)pData->pBinds);
}

void cleanup_VkSparseImageFormatProperties(VkSparseImageFormatProperties const *pData) {}

#if (VK_VERSION_1_1)
void cleanup_VkSparseImageFormatProperties2(VkSparseImageFormatProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_physical_device_properties2)
void cleanup_VkSparseImageFormatProperties2KHR(VkSparseImageFormatProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkSparseImageMemoryBind(VkSparseImageMemoryBind const *pData) {}

void cleanup_VkSparseImageMemoryBindInfo(VkSparseImageMemoryBindInfo const *pData) {
  // pBinds - bindCount
  for (size_t i = 0; i < pData->bindCount; ++i) {
    cleanup_VkSparseImageMemoryBind(&pData->pBinds[i]);
  }
  free((void *)pData->pBinds);
}

void cleanup_VkSparseImageMemoryRequirements(VkSparseImageMemoryRequirements const *pData) {}

#if (VK_VERSION_1_1)
void cleanup_VkSparseImageMemoryRequirements2(VkSparseImageMemoryRequirements2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_memory_requirements2)
void cleanup_VkSparseImageMemoryRequirements2KHR(VkSparseImageMemoryRequirements2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkSparseImageOpaqueMemoryBindInfo(VkSparseImageOpaqueMemoryBindInfo const *pData) {
  // pBinds - bindCount
  for (size_t i = 0; i < pData->bindCount; ++i) {
    cleanup_VkSparseMemoryBind(&pData->pBinds[i]);
  }
  free((void *)pData->pBinds);
}

void cleanup_VkSparseMemoryBind(VkSparseMemoryBind const *pData) {}

void cleanup_VkSpecializationInfo(VkSpecializationInfo const *pData) {
  // pMapEntries - mapEntryCount
  for (size_t i = 0; i < pData->mapEntryCount; ++i) {
    cleanup_VkSpecializationMapEntry(&pData->pMapEntries[i]);
  }
  free((void *)pData->pMapEntries);

  // pData - dataSize
  free((void *)pData->pData);
}

void cleanup_VkSpecializationMapEntry(VkSpecializationMapEntry const *pData) {}

void cleanup_VkStencilOpState(VkStencilOpState const *pData) {}

#if (VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface)
void cleanup_VkStreamDescriptorSurfaceCreateInfoGGP(
    VkStreamDescriptorSurfaceCreateInfoGGP const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkStridedBufferRegionKHR(VkStridedBufferRegionKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_cluster_acceleration_structure)
void cleanup_VkStridedDeviceAddressNV(VkStridedDeviceAddressNV const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline)
void cleanup_VkStridedDeviceAddressRegionKHR(VkStridedDeviceAddressRegionKHR const *pData) {}
#endif

void cleanup_VkSubmitInfo(VkSubmitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphores - waitSemaphoreCount
  free((void *)pData->pWaitSemaphores);

  // pWaitDstStageMask - waitSemaphoreCount
  free((void *)pData->pWaitDstStageMask);

  // pCommandBuffers - commandBufferCount
  free((void *)pData->pCommandBuffers);

  // pSignalSemaphores - signalSemaphoreCount
  free((void *)pData->pSignalSemaphores);
}

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkSubmitInfo2(VkSubmitInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreInfos - waitSemaphoreInfoCount
  for (size_t i = 0; i < pData->waitSemaphoreInfoCount; ++i) {
    cleanup_VkSemaphoreSubmitInfo(&pData->pWaitSemaphoreInfos[i]);
  }
  free((void *)pData->pWaitSemaphoreInfos);

  // pCommandBufferInfos - commandBufferInfoCount
  for (size_t i = 0; i < pData->commandBufferInfoCount; ++i) {
    cleanup_VkCommandBufferSubmitInfo(&pData->pCommandBufferInfos[i]);
  }
  free((void *)pData->pCommandBufferInfos);

  // pSignalSemaphoreInfos - signalSemaphoreInfoCount
  for (size_t i = 0; i < pData->signalSemaphoreInfoCount; ++i) {
    cleanup_VkSemaphoreSubmitInfo(&pData->pSignalSemaphoreInfos[i]);
  }
  free((void *)pData->pSignalSemaphoreInfos);
}
#endif

#if (VK_HEADER_VERSION >= 170 && VK_HEADER_VERSION <= 203 && VK_KHR_synchronization2)
void cleanup_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreInfos - waitSemaphoreInfoCount
  for (size_t i = 0; i < pData->waitSemaphoreInfoCount; ++i) {
    cleanup_VkSemaphoreSubmitInfoKHR(&pData->pWaitSemaphoreInfos[i]);
  }
  free((void *)pData->pWaitSemaphoreInfos);

  // pCommandBufferInfos - commandBufferInfoCount
  for (size_t i = 0; i < pData->commandBufferInfoCount; ++i) {
    cleanup_VkCommandBufferSubmitInfoKHR(&pData->pCommandBufferInfos[i]);
  }
  free((void *)pData->pCommandBufferInfos);

  // pSignalSemaphoreInfos - signalSemaphoreInfoCount
  for (size_t i = 0; i < pData->signalSemaphoreInfoCount; ++i) {
    cleanup_VkSemaphoreSubmitInfoKHR(&pData->pSignalSemaphoreInfos[i]);
  }
  free((void *)pData->pSignalSemaphoreInfos);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_KHR_synchronization2)
void cleanup_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreInfos - waitSemaphoreInfoCount
  for (size_t i = 0; i < pData->waitSemaphoreInfoCount; ++i) {
    cleanup_VkSemaphoreSubmitInfo(&pData->pWaitSemaphoreInfos[i]);
  }
  free((void *)pData->pWaitSemaphoreInfos);

  // pCommandBufferInfos - commandBufferInfoCount
  for (size_t i = 0; i < pData->commandBufferInfoCount; ++i) {
    cleanup_VkCommandBufferSubmitInfo(&pData->pCommandBufferInfos[i]);
  }
  free((void *)pData->pCommandBufferInfos);

  // pSignalSemaphoreInfos - signalSemaphoreInfoCount
  for (size_t i = 0; i < pData->signalSemaphoreInfoCount; ++i) {
    cleanup_VkSemaphoreSubmitInfo(&pData->pSignalSemaphoreInfos[i]);
  }
  free((void *)pData->pSignalSemaphoreInfos);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSubpassBeginInfo(VkSubpassBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkSubpassDependency(VkSubpassDependency const *pData) {}

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSubpassDependency2(VkSubpassDependency2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkSubpassDescription(VkSubpassDescription const *pData) {
  // pInputAttachments - inputAttachmentCount
  for (size_t i = 0; i < pData->inputAttachmentCount; ++i) {
    cleanup_VkAttachmentReference(&pData->pInputAttachments[i]);
  }
  free((void *)pData->pInputAttachments);

  // pColorAttachments - colorAttachmentCount
  for (size_t i = 0; i < pData->colorAttachmentCount; ++i) {
    cleanup_VkAttachmentReference(&pData->pColorAttachments[i]);
  }
  free((void *)pData->pColorAttachments);

  // pResolveAttachments - colorAttachmentCount
  for (size_t i = 0; i < pData->colorAttachmentCount; ++i) {
    cleanup_VkAttachmentReference(&pData->pResolveAttachments[i]);
  }
  free((void *)pData->pResolveAttachments);

  // pDepthStencilAttachment
  if (pData->pDepthStencilAttachment != NULL)
    cleanup_VkAttachmentReference(pData->pDepthStencilAttachment);
  free((void *)pData->pDepthStencilAttachment);

  // pPreserveAttachments - preserveAttachmentCount
  free((void *)pData->pPreserveAttachments);
}

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSubpassDescription2(VkSubpassDescription2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInputAttachments - inputAttachmentCount
  for (size_t i = 0; i < pData->inputAttachmentCount; ++i) {
    cleanup_VkAttachmentReference2(&pData->pInputAttachments[i]);
  }
  free((void *)pData->pInputAttachments);

  // pColorAttachments - colorAttachmentCount
  for (size_t i = 0; i < pData->colorAttachmentCount; ++i) {
    cleanup_VkAttachmentReference2(&pData->pColorAttachments[i]);
  }
  free((void *)pData->pColorAttachments);

  // pResolveAttachments - colorAttachmentCount
  for (size_t i = 0; i < pData->colorAttachmentCount; ++i) {
    cleanup_VkAttachmentReference2(&pData->pResolveAttachments[i]);
  }
  free((void *)pData->pResolveAttachments);

  // pDepthStencilAttachment
  if (pData->pDepthStencilAttachment != NULL)
    cleanup_VkAttachmentReference2(pData->pDepthStencilAttachment);
  free((void *)pData->pDepthStencilAttachment);

  // pPreserveAttachments - preserveAttachmentCount
  free((void *)pData->pPreserveAttachments);
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInputAttachments - inputAttachmentCount
  for (size_t i = 0; i < pData->inputAttachmentCount; ++i) {
    cleanup_VkAttachmentReference2KHR(&pData->pInputAttachments[i]);
  }
  free((void *)pData->pInputAttachments);

  // pColorAttachments - colorAttachmentCount
  for (size_t i = 0; i < pData->colorAttachmentCount; ++i) {
    cleanup_VkAttachmentReference2KHR(&pData->pColorAttachments[i]);
  }
  free((void *)pData->pColorAttachments);

  // pResolveAttachments - colorAttachmentCount
  for (size_t i = 0; i < pData->colorAttachmentCount; ++i) {
    cleanup_VkAttachmentReference2KHR(&pData->pResolveAttachments[i]);
  }
  free((void *)pData->pResolveAttachments);

  // pDepthStencilAttachment
  if (pData->pDepthStencilAttachment != NULL)
    cleanup_VkAttachmentReference2KHR(pData->pDepthStencilAttachment);
  free((void *)pData->pDepthStencilAttachment);

  // pPreserveAttachments - preserveAttachmentCount
  free((void *)pData->pPreserveAttachments);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInputAttachments - inputAttachmentCount
  for (size_t i = 0; i < pData->inputAttachmentCount; ++i) {
    cleanup_VkAttachmentReference2(&pData->pInputAttachments[i]);
  }
  free((void *)pData->pInputAttachments);

  // pColorAttachments - colorAttachmentCount
  for (size_t i = 0; i < pData->colorAttachmentCount; ++i) {
    cleanup_VkAttachmentReference2(&pData->pColorAttachments[i]);
  }
  free((void *)pData->pColorAttachments);

  // pResolveAttachments - colorAttachmentCount
  for (size_t i = 0; i < pData->colorAttachmentCount; ++i) {
    cleanup_VkAttachmentReference2(&pData->pResolveAttachments[i]);
  }
  free((void *)pData->pResolveAttachments);

  // pDepthStencilAttachment
  if (pData->pDepthStencilAttachment != NULL)
    cleanup_VkAttachmentReference2(pData->pDepthStencilAttachment);
  free((void *)pData->pDepthStencilAttachment);

  // pPreserveAttachments - preserveAttachmentCount
  free((void *)pData->pPreserveAttachments);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSubpassDescriptionDepthStencilResolve(
    VkSubpassDescriptionDepthStencilResolve const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDepthStencilResolveAttachment
  if (pData->pDepthStencilResolveAttachment != NULL)
    cleanup_VkAttachmentReference2(pData->pDepthStencilResolveAttachment);
  free((void *)pData->pDepthStencilResolveAttachment);
}
#endif

#if (VK_HEADER_VERSION >= 97 && VK_HEADER_VERSION <= 130 && VK_KHR_depth_stencil_resolve)
void cleanup_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDepthStencilResolveAttachment
  if (pData->pDepthStencilResolveAttachment != NULL)
    cleanup_VkAttachmentReference2KHR(pData->pDepthStencilResolveAttachment);
  free((void *)pData->pDepthStencilResolveAttachment);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_depth_stencil_resolve)
void cleanup_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDepthStencilResolveAttachment
  if (pData->pDepthStencilResolveAttachment != NULL)
    cleanup_VkAttachmentReference2(pData->pDepthStencilResolveAttachment);
  free((void *)pData->pDepthStencilResolveAttachment);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkSubpassEndInfo(VkSubpassEndInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_HEADER_VERSION <= 130
void cleanup_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_create_renderpass2)
void cleanup_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 310 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pFragmentDensityOffsets - fragmentDensityOffsetCount
  for (size_t i = 0; i < pData->fragmentDensityOffsetCount; ++i) {
    cleanup_VkOffset2D(&pData->pFragmentDensityOffsets[i]);
  }
  free((void *)pData->pFragmentDensityOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 311 && VK_QCOM_fragment_density_map_offset)
void cleanup_VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
    VkSubpassFragmentDensityMapOffsetEndInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pFragmentDensityOffsets - fragmentDensityOffsetCount
  for (size_t i = 0; i < pData->fragmentDensityOffsetCount; ++i) {
    cleanup_VkOffset2D(&pData->pFragmentDensityOffsets[i]);
  }
  free((void *)pData->pFragmentDensityOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 219 && VK_EXT_multisampled_render_to_single_sampled)
void cleanup_VkSubpassResolvePerformanceQueryEXT(VkSubpassResolvePerformanceQueryEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_sample_locations)
void cleanup_VkSubpassSampleLocationsEXT(VkSubpassSampleLocationsEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading)
void cleanup_VkSubpassShadingPipelineCreateInfoHUAWEI(
    VkSubpassShadingPipelineCreateInfoHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkSubresourceHostMemcpySize(VkSubresourceHostMemcpySize const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy)
void cleanup_VkSubresourceHostMemcpySizeEXT(VkSubresourceHostMemcpySizeEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy)
void cleanup_VkSubresourceHostMemcpySizeEXT(VkSubresourceHostMemcpySizeEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkSubresourceLayout(VkSubresourceLayout const *pData) {}

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkSubresourceLayout2(VkSubresourceLayout2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 258 && VK_HEADER_VERSION <= 259 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control) ||                                                          \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 257 && VK_EXT_image_compression_control)
void cleanup_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_EXT_host_image_copy &&             \
     VK_EXT_image_compression_control)
void cleanup_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_host_image_copy && VK_EXT_image_compression_control)
void cleanup_VkSubresourceLayout2EXT(VkSubresourceLayout2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 260 && VK_HEADER_VERSION <= 302 && VK_KHR_maintenance5)
void cleanup_VkSubresourceLayout2KHR(VkSubresourceLayout2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_maintenance5)
void cleanup_VkSubresourceLayout2KHR(VkSubresourceLayout2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_display_surface_counter)
void cleanup_VkSurfaceCapabilities2EXT(VkSurfaceCapabilities2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_KHR_get_surface_capabilities2)
void cleanup_VkSurfaceCapabilities2KHR(VkSurfaceCapabilities2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive)
void cleanup_VkSurfaceCapabilitiesFullScreenExclusiveEXT(
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 140 && VK_KHR_surface)
void cleanup_VkSurfaceCapabilitiesKHR(VkSurfaceCapabilitiesKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_present_barrier)
void cleanup_VkSurfaceCapabilitiesPresentBarrierNV(
    VkSurfaceCapabilitiesPresentBarrierNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_id2)
void cleanup_VkSurfaceCapabilitiesPresentId2KHR(VkSurfaceCapabilitiesPresentId2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_present_wait2)
void cleanup_VkSurfaceCapabilitiesPresentWait2KHR(
    VkSurfaceCapabilitiesPresentWait2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 318 && VK_OHOS_surface)
void cleanup_VkSurfaceCreateInfoOHOS(VkSurfaceCreateInfoOHOS const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // window
  free((void *)pData->window);
}
#endif

#if (VK_KHR_get_surface_capabilities2)
void cleanup_VkSurfaceFormat2KHR(VkSurfaceFormat2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 140 && VK_KHR_surface)
void cleanup_VkSurfaceFormatKHR(VkSurfaceFormatKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive)
void cleanup_VkSurfaceFullScreenExclusiveInfoEXT(VkSurfaceFullScreenExclusiveInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_EXT_full_screen_exclusive && VK_KHR_win32_surface) ||          \
    (VK_HEADER_VERSION >= 104 && VK_HEADER_VERSION <= 240 && VK_EXT_full_screen_exclusive)
void cleanup_VkSurfaceFullScreenExclusiveWin32InfoEXT(
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1)
void cleanup_VkSurfacePresentModeCompatibilityEXT(
    VkSurfacePresentModeCompatibilityEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPresentModes - presentModeCount
  free((void *)pData->pPresentModes);
}
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1)
void cleanup_VkSurfacePresentModeEXT(VkSurfacePresentModeEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_surface_maintenance1)
void cleanup_VkSurfacePresentScalingCapabilitiesEXT(
    VkSurfacePresentScalingCapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 104 && VK_KHR_surface_protected_capabilities)
void cleanup_VkSurfaceProtectedCapabilitiesKHR(VkSurfaceProtectedCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_display_control)
void cleanup_VkSwapchainCounterCreateInfoEXT(VkSwapchainCounterCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 140 && VK_HEADER_VERSION <= 240 && VK_KHR_swapchain)
void cleanup_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueueFamilyIndices - queueFamilyIndexCount
  free((void *)pData->pQueueFamilyIndices);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_swapchain)
void cleanup_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueueFamilyIndices - queueFamilyIndexCount
  free((void *)pData->pQueueFamilyIndices);
}
#endif

#if (VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr)
void cleanup_VkSwapchainDisplayNativeHdrCreateInfoAMD(
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer)
void cleanup_VkSwapchainImageCreateInfoANDROID(VkSwapchainImageCreateInfoANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 266 && VK_NV_low_latency2)
void cleanup_VkSwapchainLatencyCreateInfoNV(VkSwapchainLatencyCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 230 && VK_NV_present_barrier)
void cleanup_VkSwapchainPresentBarrierCreateInfoNV(
    VkSwapchainPresentBarrierCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkSwapchainPresentFenceInfoEXT(VkSwapchainPresentFenceInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pFences - swapchainCount
  free((void *)pData->pFences);
}
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkSwapchainPresentModeInfoEXT(VkSwapchainPresentModeInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPresentModes - swapchainCount
  free((void *)pData->pPresentModes);
}
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkSwapchainPresentModesCreateInfoEXT(
    VkSwapchainPresentModesCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPresentModes - presentModeCount
  free((void *)pData->pPresentModes);
}
#endif

#if (VK_HEADER_VERSION >= 237 && VK_EXT_swapchain_maintenance1)
void cleanup_VkSwapchainPresentScalingCreateInfoEXT(
    VkSwapchainPresentScalingCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection)
void cleanup_VkSysmemColorSpaceFUCHSIA(VkSysmemColorSpaceFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
void cleanup_VkTensorCaptureDescriptorDataInfoARM(
    VkTensorCaptureDescriptorDataInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorCopyARM(VkTensorCopyARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSrcOffset - dimensionCount
  free((void *)pData->pSrcOffset);

  // pDstOffset - dimensionCount
  free((void *)pData->pDstOffset);

  // pExtent - dimensionCount
  free((void *)pData->pExtent);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorCreateInfoARM(VkTensorCreateInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescription
  if (pData->pDescription != NULL)
    cleanup_VkTensorDescriptionARM(pData->pDescription);
  free((void *)pData->pDescription);

  // pQueueFamilyIndices - queueFamilyIndexCount
  free((void *)pData->pQueueFamilyIndices);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorDependencyInfoARM(VkTensorDependencyInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTensorMemoryBarriers
  if (pData->pTensorMemoryBarriers != NULL)
    cleanup_VkTensorMemoryBarrierARM(pData->pTensorMemoryBarriers);
  free((void *)pData->pTensorMemoryBarriers);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorDescriptionARM(VkTensorDescriptionARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDimensions - dimensionCount
  free((void *)pData->pDimensions);

  // pStrides - dimensionCount
  free((void *)pData->pStrides);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorFormatPropertiesARM(VkTensorFormatPropertiesARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorMemoryBarrierARM(VkTensorMemoryBarrierARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorMemoryRequirementsInfoARM(VkTensorMemoryRequirementsInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors && VK_EXT_descriptor_buffer)
void cleanup_VkTensorViewCaptureDescriptorDataInfoARM(
    VkTensorViewCaptureDescriptorDataInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkTensorViewCreateInfoARM(VkTensorViewCreateInfoARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_AMD_texture_gather_bias_lod)
void cleanup_VkTextureLODGatherFormatPropertiesAMD(
    VkTextureLODGatherFormatPropertiesAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
void cleanup_VkTileMemoryBindInfoQCOM(VkTileMemoryBindInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap)
void cleanup_VkTileMemoryRequirementsQCOM(VkTileMemoryRequirementsQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 313 && VK_QCOM_tile_memory_heap && VK_QCOM_tile_properties)
void cleanup_VkTileMemorySizeInfoQCOM(VkTileMemorySizeInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 222 && VK_QCOM_tile_properties)
void cleanup_VkTilePropertiesQCOM(VkTilePropertiesQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_VERSION_1_2)
void cleanup_VkTimelineSemaphoreSubmitInfo(VkTimelineSemaphoreSubmitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreValues - waitSemaphoreValueCount
  free((void *)pData->pWaitSemaphoreValues);

  // pSignalSemaphoreValues - signalSemaphoreValueCount
  free((void *)pData->pSignalSemaphoreValues);
}
#endif

#if (VK_HEADER_VERSION >= 124 && VK_HEADER_VERSION <= 130 && VK_KHR_timeline_semaphore)
void cleanup_VkTimelineSemaphoreSubmitInfoKHR(VkTimelineSemaphoreSubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreValues - waitSemaphoreValueCount
  free((void *)pData->pWaitSemaphoreValues);

  // pSignalSemaphoreValues - signalSemaphoreValueCount
  free((void *)pData->pSignalSemaphoreValues);
}
#endif

#if (VK_HEADER_VERSION >= 131 && VK_KHR_timeline_semaphore)
void cleanup_VkTimelineSemaphoreSubmitInfoKHR(VkTimelineSemaphoreSubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreValues - waitSemaphoreValueCount
  free((void *)pData->pWaitSemaphoreValues);

  // pSignalSemaphoreValues - signalSemaphoreValueCount
  free((void *)pData->pSignalSemaphoreValues);
}
#endif

#if (VK_HEADER_VERSION >= 241 && VK_KHR_ray_tracing_maintenance1 &&                                \
     VK_KHR_ray_tracing_pipeline) ||                                                               \
    (VK_HEADER_VERSION >= 213 && VK_HEADER_VERSION <= 240 && VK_KHR_ray_tracing_maintenance1)
void cleanup_VkTraceRaysIndirectCommand2KHR(VkTraceRaysIndirectCommand2KHR const *pData){}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline) ||                                   \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkTraceRaysIndirectCommandKHR(VkTraceRaysIndirectCommandKHR const *pData){}
#endif

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkTransformMatrixKHR(VkTransformMatrixKHR const *pData) {
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing)
void cleanup_VkTransformMatrixNV(VkTransformMatrixNV const *pData) {}
#endif

#if (VK_EXT_validation_cache)
void cleanup_VkValidationCacheCreateInfoEXT(VkValidationCacheCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInitialData - initialDataSize
  free((void *)pData->pInitialData);
}
#endif

#if (VK_HEADER_VERSION >= 97 && VK_EXT_validation_features)
void cleanup_VkValidationFeaturesEXT(VkValidationFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pEnabledValidationFeatures - enabledValidationFeatureCount
  free((void *)pData->pEnabledValidationFeatures);

  // pDisabledValidationFeatures - disabledValidationFeatureCount
  free((void *)pData->pDisabledValidationFeatures);
}
#endif

#if (VK_EXT_validation_flags)
void cleanup_VkValidationFlagsEXT(VkValidationFlagsEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDisabledValidationChecks - disabledValidationCheckCount
  free((void *)pData->pDisabledValidationChecks);
}
#endif

void cleanup_VkVertexInputAttributeDescription(VkVertexInputAttributeDescription const *pData){}

#if (VK_HEADER_VERSION >= 246 && VK_EXT_vertex_input_dynamic_state && VK_EXT_shader_object) ||     \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 245 && VK_EXT_vertex_input_dynamic_state)
void cleanup_VkVertexInputAttributeDescription2EXT(
    VkVertexInputAttributeDescription2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkVertexInputBindingDescription(VkVertexInputBindingDescription const *pData){}

#if (VK_HEADER_VERSION >= 246 && VK_EXT_vertex_input_dynamic_state && VK_EXT_shader_object) ||     \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 245 && VK_EXT_vertex_input_dynamic_state)
void cleanup_VkVertexInputBindingDescription2EXT(VkVertexInputBindingDescription2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_VERSION_1_4)
void cleanup_VkVertexInputBindingDivisorDescription(
    VkVertexInputBindingDivisorDescription const *pData) {}
#endif

#if (VK_HEADER_VERSION <= 272 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_EXT_vertex_attribute_divisor)
void cleanup_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 273 && VK_HEADER_VERSION <= 302 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkVertexInputBindingDivisorDescriptionKHR(
    VkVertexInputBindingDivisorDescriptionKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 303 && VK_KHR_vertex_attribute_divisor)
void cleanup_VkVertexInputBindingDivisorDescriptionKHR(
    VkVertexInputBindingDivisorDescriptionKHR const *pData) {}
#endif

#if (VK_NN_vi_surface)
void cleanup_VkViSurfaceCreateInfoNN(VkViSurfaceCreateInfoNN const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // window
  free((void *)pData->window);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceSlots - referenceSlotCount
  for (size_t i = 0; i < pData->referenceSlotCount; ++i) {
    cleanup_VkVideoReferenceSlotKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceSlots - referenceSlotCount
  for (size_t i = 0; i < pData->referenceSlotCount; ++i) {
    cleanup_VkVideoReferenceSlotInfoKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoBindMemoryKHR(VkVideoBindMemoryKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 208 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoCodingControlInfoKHR(VkVideoCodingControlInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1CapabilitiesKHR(VkVideoDecodeAV1CapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1DpbSlotInfoKHR(VkVideoDecodeAV1DpbSlotInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1InlineSessionParametersInfoKHR(
    VkVideoDecodeAV1InlineSessionParametersInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSequenceHeader
  free((void *)pData->pStdSequenceHeader);
}
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1PictureInfoKHR(VkVideoDecodeAV1PictureInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);

  // pTileOffsets - tileCount
  free((void *)pData->pTileOffsets);

  // pTileSizes - tileCount
  free((void *)pData->pTileSizes);
}
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1ProfileInfoKHR(VkVideoDecodeAV1ProfileInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 277 && VK_KHR_video_decode_av1)
void cleanup_VkVideoDecodeAV1SessionParametersCreateInfoKHR(
    VkVideoDecodeAV1SessionParametersCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSequenceHeader
  free((void *)pData->pStdSequenceHeader);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 207 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeCapabilitiesKHR(VkVideoDecodeCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 210 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264CapabilitiesKHR(VkVideoDecodeH264CapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264DpbSlotInfoEXT(VkVideoDecodeH264DpbSlotInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264DpbSlotInfoKHR(VkVideoDecodeH264DpbSlotInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264InlineSessionParametersInfoKHR(
    VkVideoDecodeH264InlineSessionParametersInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSPS
  free((void *)pData->pStdSPS);

  // pStdPPS
  free((void *)pData->pStdPPS);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264MvcEXT(VkVideoDecodeH264MvcEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdMvc
  free((void *)pData->pStdMvc);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264MvcInfoEXT(VkVideoDecodeH264MvcInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdMvc
  free((void *)pData->pStdMvc);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);

  // pSlicesDataOffsets - slicesCount
  free((void *)pData->pSlicesDataOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);

  // pSliceOffsets - sliceCount
  free((void *)pData->pSliceOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264PictureInfoKHR(VkVideoDecodeH264PictureInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);

  // pSliceOffsets - sliceCount
  free((void *)pData->pSliceOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264ProfileInfoEXT(VkVideoDecodeH264ProfileInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264ProfileInfoEXT(VkVideoDecodeH264ProfileInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264ProfileInfoKHR(VkVideoDecodeH264ProfileInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264SessionCreateInfoEXT(
    VkVideoDecodeH264SessionCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdExtensionVersion
  if (pData->pStdExtensionVersion != NULL)
    cleanup_VkExtensionProperties(pData->pStdExtensionVersion);
  free((void *)pData->pStdExtensionVersion);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSpsStd - spsStdCount
  free((void *)pData->pSpsStd);

  // pPpsStd - ppsStdCount
  free((void *)pData->pPpsStd);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSPSs - stdSPSCount
  free((void *)pData->pStdSPSs);

  // pStdPPSs - stdPPSCount
  free((void *)pData->pStdPPSs);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264SessionParametersAddInfoKHR(
    VkVideoDecodeH264SessionParametersAddInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSPSs - stdSPSCount
  free((void *)pData->pStdSPSs);

  // pStdPPSs - stdPPSCount
  free((void *)pData->pStdPPSs);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h264)
void cleanup_VkVideoDecodeH264SessionParametersCreateInfoKHR(
    VkVideoDecodeH264SessionParametersCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoDecodeH264SessionParametersAddInfoKHR(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 210 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265CapabilitiesKHR(VkVideoDecodeH265CapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265DpbSlotInfoEXT(VkVideoDecodeH265DpbSlotInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265DpbSlotInfoKHR(VkVideoDecodeH265DpbSlotInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 306 && VK_KHR_video_maintenance2 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265InlineSessionParametersInfoKHR(
    VkVideoDecodeH265InlineSessionParametersInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdVPS
  free((void *)pData->pStdVPS);

  // pStdSPS
  free((void *)pData->pStdSPS);

  // pStdPPS
  free((void *)pData->pStdPPS);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);

  // pSlicesDataOffsets - slicesCount
  free((void *)pData->pSlicesDataOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 235 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);

  // pSliceOffsets - sliceCount
  free((void *)pData->pSliceOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 236 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);

  // pSliceSegmentOffsets - sliceSegmentCount
  free((void *)pData->pSliceSegmentOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265PictureInfoKHR(VkVideoDecodeH265PictureInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);

  // pSliceSegmentOffsets - sliceSegmentCount
  free((void *)pData->pSliceSegmentOffsets);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265ProfileEXT(VkVideoDecodeH265ProfileEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265ProfileInfoEXT(VkVideoDecodeH265ProfileInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265ProfileInfoKHR(VkVideoDecodeH265ProfileInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionCreateInfoEXT(
    VkVideoDecodeH265SessionCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdExtensionVersion
  if (pData->pStdExtensionVersion != NULL)
    cleanup_VkExtensionProperties(pData->pStdExtensionVersion);
  free((void *)pData->pStdExtensionVersion);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSpsStd - spsStdCount
  free((void *)pData->pSpsStd);

  // pPpsStd - ppsStdCount
  free((void *)pData->pPpsStd);
}
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVpsStd - vpsStdCount
  free((void *)pData->pVpsStd);

  // pSpsStd - spsStdCount
  free((void *)pData->pSpsStd);

  // pPpsStd - ppsStdCount
  free((void *)pData->pPpsStd);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdVPSs - stdVPSCount
  free((void *)pData->pStdVPSs);

  // pStdSPSs - stdSPSCount
  free((void *)pData->pStdSPSs);

  // pStdPPSs - stdPPSCount
  free((void *)pData->pStdPPSs);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265SessionParametersAddInfoKHR(
    VkVideoDecodeH265SessionParametersAddInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdVPSs - stdVPSCount
  free((void *)pData->pStdVPSs);

  // pStdSPSs - stdSPSCount
  free((void *)pData->pStdSPSs);

  // pStdPPSs - stdPPSCount
  free((void *)pData->pStdPPSs);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 228 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_EXT_video_decode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_h265)
void cleanup_VkVideoDecodeH265SessionParametersCreateInfoKHR(
    VkVideoDecodeH265SessionParametersCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoDecodeH265SessionParametersAddInfoKHR(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 210 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetupReferenceSlot
  if (pData->pSetupReferenceSlot != NULL)
    cleanup_VkVideoReferenceSlotKHR(pData->pSetupReferenceSlot);
  free((void *)pData->pSetupReferenceSlot);

  // pReferenceSlots - referenceSlotCount
  for (size_t i = 0; i < pData->referenceSlotCount; ++i) {
    cleanup_VkVideoReferenceSlotKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 224 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetupReferenceSlot
  if (pData->pSetupReferenceSlot != NULL)
    cleanup_VkVideoReferenceSlotKHR(pData->pSetupReferenceSlot);
  free((void *)pData->pSetupReferenceSlot);

  // pReferenceSlots - referenceSlotCount
  for (size_t i = 0; i < pData->referenceSlotCount; ++i) {
    cleanup_VkVideoReferenceSlotKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetupReferenceSlot
  if (pData->pSetupReferenceSlot != NULL)
    cleanup_VkVideoReferenceSlotInfoKHR(pData->pSetupReferenceSlot);
  free((void *)pData->pSetupReferenceSlot);

  // pReferenceSlots - referenceSlotCount
  for (size_t i = 0; i < pData->referenceSlotCount; ++i) {
    cleanup_VkVideoReferenceSlotInfoKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_decode_queue) ||                                     \
    (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 237 && VK_KHR_video_decode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoDecodeUsageInfoKHR(VkVideoDecodeUsageInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
void cleanup_VkVideoDecodeVP9CapabilitiesKHR(VkVideoDecodeVP9CapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
void cleanup_VkVideoDecodeVP9PictureInfoKHR(VkVideoDecodeVP9PictureInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_KHR_video_decode_vp9)
void cleanup_VkVideoDecodeVP9ProfileInfoKHR(VkVideoDecodeVP9ProfileInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1CapabilitiesKHR(VkVideoEncodeAV1CapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1DpbSlotInfoKHR(VkVideoEncodeAV1DpbSlotInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1FrameSizeKHR(VkVideoEncodeAV1FrameSizeKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1GopRemainingFrameInfoKHR(
    VkVideoEncodeAV1GopRemainingFrameInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1PictureInfoKHR(VkVideoEncodeAV1PictureInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1ProfileInfoKHR(VkVideoEncodeAV1ProfileInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1QIndexKHR(VkVideoEncodeAV1QIndexKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1QualityLevelPropertiesKHR(
    VkVideoEncodeAV1QualityLevelPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1QuantizationMapCapabilitiesKHR(
    VkVideoEncodeAV1QuantizationMapCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1RateControlInfoKHR(VkVideoEncodeAV1RateControlInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1RateControlLayerInfoKHR(
    VkVideoEncodeAV1RateControlLayerInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1SessionCreateInfoKHR(
    VkVideoEncodeAV1SessionCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_av1)
void cleanup_VkVideoEncodeAV1SessionParametersCreateInfoKHR(
    VkVideoEncodeAV1SessionParametersCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSequenceHeader
  free((void *)pData->pStdSequenceHeader);

  // pStdDecoderModelInfo
  free((void *)pData->pStdDecoderModelInfo);

  // pStdOperatingPoints - stdOperatingPointCount
  free((void *)pData->pStdOperatingPoints);
}
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeCapabilitiesKHR(VkVideoEncodeCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 186 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 187 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264CapabilitiesKHR(VkVideoEncodeH264CapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264DpbSlotInfoKHR(VkVideoEncodeH264DpbSlotInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264EmitPictureParametersEXT(
    VkVideoEncodeH264EmitPictureParametersEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // ppsIdEntries - ppsIdEntryCount
  free((void *)pData->ppsIdEntries);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264EmitPictureParametersInfoEXT(
    VkVideoEncodeH264EmitPictureParametersInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // ppsIdEntries - ppsIdEntryCount
  free((void *)pData->ppsIdEntries);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264FrameSizeEXT(VkVideoEncodeH264FrameSizeEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264FrameSizeKHR(VkVideoEncodeH264FrameSizeKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264GopRemainingFrameInfoEXT(
    VkVideoEncodeH264GopRemainingFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264GopRemainingFrameInfoKHR(
    VkVideoEncodeH264GopRemainingFrameInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSliceHeaderStd
  free((void *)pData->pSliceHeaderStd);

  // pRefFinalList0Entries - refFinalList0EntryCount
  for (size_t i = 0; i < pData->refFinalList0EntryCount; ++i) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pRefFinalList0Entries[i]);
  }
  free((void *)pData->pRefFinalList0Entries);

  // pRefFinalList1Entries - refFinalList1EntryCount
  for (size_t i = 0; i < pData->refFinalList1EntryCount; ++i) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pRefFinalList1Entries[i]);
  }
  free((void *)pData->pRefFinalList1Entries);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSliceHeaderStd
  free((void *)pData->pSliceHeaderStd);

  // pRefFinalList0Entries - refFinalList0EntryCount
  for (size_t i = 0; i < pData->refFinalList0EntryCount; ++i) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pRefFinalList0Entries[i]);
  }
  free((void *)pData->pRefFinalList0Entries);

  // pRefFinalList1Entries - refFinalList1EntryCount
  for (size_t i = 0; i < pData->refFinalList1EntryCount; ++i) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pRefFinalList1Entries[i]);
  }
  free((void *)pData->pRefFinalList1Entries);
}
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH264ReferenceListsEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pSliceHeaderStd
  free((void *)pData->pSliceHeaderStd);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH264ReferenceListsInfoEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pSliceHeaderStd
  free((void *)pData->pSliceHeaderStd);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceFinalLists
  free((void *)pData->pStdReferenceFinalLists);

  // pStdSliceHeader
  free((void *)pData->pStdSliceHeader);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264NaluSliceInfoEXT(VkVideoEncodeH264NaluSliceInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSliceHeader
  free((void *)pData->pStdSliceHeader);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264NaluSliceInfoKHR(VkVideoEncodeH264NaluSliceInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSliceHeader
  free((void *)pData->pStdSliceHeader);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264PictureInfoEXT(VkVideoEncodeH264PictureInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pNaluSliceEntries - naluSliceEntryCount
  for (size_t i = 0; i < pData->naluSliceEntryCount; ++i) {
    cleanup_VkVideoEncodeH264NaluSliceInfoEXT(&pData->pNaluSliceEntries[i]);
  }
  free((void *)pData->pNaluSliceEntries);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264PictureInfoKHR(VkVideoEncodeH264PictureInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pNaluSliceEntries - naluSliceEntryCount
  for (size_t i = 0; i < pData->naluSliceEntryCount; ++i) {
    cleanup_VkVideoEncodeH264NaluSliceInfoKHR(&pData->pNaluSliceEntries[i]);
  }
  free((void *)pData->pNaluSliceEntries);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264ProfileEXT(VkVideoEncodeH264ProfileEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264ProfileInfoEXT(VkVideoEncodeH264ProfileInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264ProfileInfoKHR(VkVideoEncodeH264ProfileInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264QpEXT(VkVideoEncodeH264QpEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264QpKHR(VkVideoEncodeH264QpKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264QualityLevelPropertiesEXT(
    VkVideoEncodeH264QualityLevelPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264QualityLevelPropertiesKHR(
    VkVideoEncodeH264QualityLevelPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264QuantizationMapCapabilitiesKHR(
    VkVideoEncodeH264QuantizationMapCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 202 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlInfoEXT(VkVideoEncodeH264RateControlInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264RateControlInfoKHR(VkVideoEncodeH264RateControlInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264RateControlLayerInfoEXT(
    VkVideoEncodeH264RateControlLayerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264RateControlLayerInfoKHR(
    VkVideoEncodeH264RateControlLayerInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264ReferenceListsEXT(VkVideoEncodeH264ReferenceListsEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceList0Entries - referenceList0EntryCount
  for (size_t i = 0; i < pData->referenceList0EntryCount; ++i) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pReferenceList0Entries[i]);
  }
  free((void *)pData->pReferenceList0Entries);

  // pReferenceList1Entries - referenceList1EntryCount
  for (size_t i = 0; i < pData->referenceList1EntryCount; ++i) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pReferenceList1Entries[i]);
  }
  free((void *)pData->pReferenceList1Entries);

  // pMemMgmtCtrlOperations
  free((void *)pData->pMemMgmtCtrlOperations);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264ReferenceListsInfoEXT(
    VkVideoEncodeH264ReferenceListsInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceList0Entries - referenceList0EntryCount
  for (size_t i = 0; i < pData->referenceList0EntryCount; ++i) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pReferenceList0Entries[i]);
  }
  free((void *)pData->pReferenceList0Entries);

  // pReferenceList1Entries - referenceList1EntryCount
  for (size_t i = 0; i < pData->referenceList1EntryCount; ++i) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pReferenceList1Entries[i]);
  }
  free((void *)pData->pReferenceList1Entries);

  // pMemMgmtCtrlOperations
  free((void *)pData->pMemMgmtCtrlOperations);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionCreateInfoEXT(
    VkVideoEncodeH264SessionCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdExtensionVersion
  if (pData->pStdExtensionVersion != NULL)
    cleanup_VkExtensionProperties(pData->pStdExtensionVersion);
  free((void *)pData->pStdExtensionVersion);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionCreateInfoEXT(
    VkVideoEncodeH264SessionCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264SessionCreateInfoKHR(
    VkVideoEncodeH264SessionCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSpsStd - spsStdCount
  free((void *)pData->pSpsStd);

  // pPpsStd - ppsStdCount
  free((void *)pData->pPpsStd);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSPSs - stdSPSCount
  free((void *)pData->pStdSPSs);

  // pStdPPSs - stdPPSCount
  free((void *)pData->pStdPPSs);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264SessionParametersAddInfoKHR(
    VkVideoEncodeH264SessionParametersAddInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSPSs - stdSPSCount
  free((void *)pData->pStdSPSs);

  // pStdPPSs - stdPPSCount
  free((void *)pData->pStdPPSs);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264SessionParametersCreateInfoKHR(
    VkVideoEncodeH264SessionParametersCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoEncodeH264SessionParametersAddInfoKHR(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersFeedbackInfoEXT(
    VkVideoEncodeH264SessionParametersFeedbackInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264SessionParametersFeedbackInfoKHR(
    VkVideoEncodeH264SessionParametersFeedbackInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264SessionParametersGetInfoEXT(
    VkVideoEncodeH264SessionParametersGetInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h264)
void cleanup_VkVideoEncodeH264SessionParametersGetInfoKHR(
    VkVideoEncodeH264SessionParametersGetInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRefDefaultFinalList0Entries - refDefaultFinalList0EntryCount
  for (size_t i = 0; i < pData->refDefaultFinalList0EntryCount; ++i) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pRefDefaultFinalList0Entries[i]);
  }
  free((void *)pData->pRefDefaultFinalList0Entries);

  // pRefDefaultFinalList1Entries - refDefaultFinalList1EntryCount
  for (size_t i = 0; i < pData->refDefaultFinalList1EntryCount; ++i) {
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pRefDefaultFinalList1Entries[i]);
  }
  free((void *)pData->pRefDefaultFinalList1Entries);

  // pNaluSliceEntries - naluSliceEntryCount
  for (size_t i = 0; i < pData->naluSliceEntryCount; ++i) {
    cleanup_VkVideoEncodeH264NaluSliceEXT(&pData->pNaluSliceEntries[i]);
  }
  free((void *)pData->pNaluSliceEntries);

  // pCurrentPictureInfo
  if (pData->pCurrentPictureInfo != NULL)
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(pData->pCurrentPictureInfo);
  free((void *)pData->pCurrentPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH264ReferenceListsEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pNaluSliceEntries - naluSliceEntryCount
  for (size_t i = 0; i < pData->naluSliceEntryCount; ++i) {
    cleanup_VkVideoEncodeH264NaluSliceEXT(&pData->pNaluSliceEntries[i]);
  }
  free((void *)pData->pNaluSliceEntries);

  // pCurrentPictureInfo
  free((void *)pData->pCurrentPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH264ReferenceListsInfoEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pNaluSliceEntries - naluSliceEntryCount
  for (size_t i = 0; i < pData->naluSliceEntryCount; ++i) {
    cleanup_VkVideoEncodeH264NaluSliceInfoEXT(&pData->pNaluSliceEntries[i]);
  }
  free((void *)pData->pNaluSliceEntries);

  // pCurrentPictureInfo
  free((void *)pData->pCurrentPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h264 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceFinalLists
  free((void *)pData->pStdReferenceFinalLists);

  // pNaluSliceEntries - naluSliceEntryCount
  for (size_t i = 0; i < pData->naluSliceEntryCount; ++i) {
    cleanup_VkVideoEncodeH264NaluSliceInfoEXT(&pData->pNaluSliceEntries[i]);
  }
  free((void *)pData->pNaluSliceEntries);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 205 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 206 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265CapabilitiesKHR(VkVideoEncodeH265CapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265DpbSlotInfoKHR(VkVideoEncodeH265DpbSlotInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265EmitPictureParametersEXT(
    VkVideoEncodeH265EmitPictureParametersEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // ppsIdEntries - ppsIdEntryCount
  free((void *)pData->ppsIdEntries);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265EmitPictureParametersInfoEXT(
    VkVideoEncodeH265EmitPictureParametersInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // ppsIdEntries - ppsIdEntryCount
  free((void *)pData->ppsIdEntries);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265FrameSizeEXT(VkVideoEncodeH265FrameSizeEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265FrameSizeKHR(VkVideoEncodeH265FrameSizeKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265GopRemainingFrameInfoEXT(
    VkVideoEncodeH265GopRemainingFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265GopRemainingFrameInfoKHR(
    VkVideoEncodeH265GopRemainingFrameInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265NaluSliceEXT(VkVideoEncodeH265NaluSliceEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH265ReferenceListsEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pSliceHeaderStd
  free((void *)pData->pSliceHeaderStd);
}
#endif

#if (VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265NaluSliceSegmentEXT(
    VkVideoEncodeH265NaluSliceSegmentEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH265ReferenceListsEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pSliceSegmentHeaderStd
  free((void *)pData->pSliceSegmentHeaderStd);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH265ReferenceListsInfoEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pSliceSegmentHeaderStd
  free((void *)pData->pSliceSegmentHeaderStd);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceFinalLists
  free((void *)pData->pStdReferenceFinalLists);

  // pStdSliceSegmentHeader
  free((void *)pData->pStdSliceSegmentHeader);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(
    VkVideoEncodeH265NaluSliceSegmentInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSliceSegmentHeader
  free((void *)pData->pStdSliceSegmentHeader);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265NaluSliceSegmentInfoKHR(
    VkVideoEncodeH265NaluSliceSegmentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdSliceSegmentHeader
  free((void *)pData->pStdSliceSegmentHeader);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265PictureInfoEXT(VkVideoEncodeH265PictureInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pNaluSliceSegmentEntries - naluSliceSegmentEntryCount
  for (size_t i = 0; i < pData->naluSliceSegmentEntryCount; ++i) {
    cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(&pData->pNaluSliceSegmentEntries[i]);
  }
  free((void *)pData->pNaluSliceSegmentEntries);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265PictureInfoKHR(VkVideoEncodeH265PictureInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pNaluSliceSegmentEntries - naluSliceSegmentEntryCount
  for (size_t i = 0; i < pData->naluSliceSegmentEntryCount; ++i) {
    cleanup_VkVideoEncodeH265NaluSliceSegmentInfoKHR(&pData->pNaluSliceSegmentEntries[i]);
  }
  free((void *)pData->pNaluSliceSegmentEntries);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265ProfileEXT(VkVideoEncodeH265ProfileEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265ProfileInfoEXT(VkVideoEncodeH265ProfileInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265ProfileInfoKHR(VkVideoEncodeH265ProfileInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265QpEXT(VkVideoEncodeH265QpEXT const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265QpKHR(VkVideoEncodeH265QpKHR const *pData) {}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265QualityLevelPropertiesEXT(
    VkVideoEncodeH265QualityLevelPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265QualityLevelPropertiesKHR(
    VkVideoEncodeH265QualityLevelPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265QuantizationMapCapabilitiesKHR(
    VkVideoEncodeH265QuantizationMapCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 202 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 203 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlInfoEXT(VkVideoEncodeH265RateControlInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265RateControlInfoKHR(VkVideoEncodeH265RateControlInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265RateControlLayerInfoEXT(
    VkVideoEncodeH265RateControlLayerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265RateControlLayerInfoKHR(
    VkVideoEncodeH265RateControlLayerInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265ReferenceListsEXT(VkVideoEncodeH265ReferenceListsEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceList0Entries - referenceList0EntryCount
  for (size_t i = 0; i < pData->referenceList0EntryCount; ++i) {
    cleanup_VkVideoEncodeH265DpbSlotInfoEXT(&pData->pReferenceList0Entries[i]);
  }
  free((void *)pData->pReferenceList0Entries);

  // pReferenceList1Entries - referenceList1EntryCount
  for (size_t i = 0; i < pData->referenceList1EntryCount; ++i) {
    cleanup_VkVideoEncodeH265DpbSlotInfoEXT(&pData->pReferenceList1Entries[i]);
  }
  free((void *)pData->pReferenceList1Entries);

  // pReferenceModifications
  free((void *)pData->pReferenceModifications);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265ReferenceListsInfoEXT(
    VkVideoEncodeH265ReferenceListsInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceList0Entries - referenceList0EntryCount
  for (size_t i = 0; i < pData->referenceList0EntryCount; ++i) {
    cleanup_VkVideoEncodeH265DpbSlotInfoEXT(&pData->pReferenceList0Entries[i]);
  }
  free((void *)pData->pReferenceList0Entries);

  // pReferenceList1Entries - referenceList1EntryCount
  for (size_t i = 0; i < pData->referenceList1EntryCount; ++i) {
    cleanup_VkVideoEncodeH265DpbSlotInfoEXT(&pData->pReferenceList1Entries[i]);
  }
  free((void *)pData->pReferenceList1Entries);

  // pReferenceModifications
  free((void *)pData->pReferenceModifications);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 208 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionCreateInfoEXT(
    VkVideoEncodeH265SessionCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdExtensionVersion
  if (pData->pStdExtensionVersion != NULL)
    cleanup_VkExtensionProperties(pData->pStdExtensionVersion);
  free((void *)pData->pStdExtensionVersion);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionCreateInfoEXT(
    VkVideoEncodeH265SessionCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265SessionCreateInfoKHR(
    VkVideoEncodeH265SessionCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVpsStd - vpsStdCount
  free((void *)pData->pVpsStd);

  // pSpsStd - spsStdCount
  free((void *)pData->pSpsStd);

  // pPpsStd - ppsStdCount
  free((void *)pData->pPpsStd);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdVPSs - stdVPSCount
  free((void *)pData->pStdVPSs);

  // pStdSPSs - stdSPSCount
  free((void *)pData->pStdSPSs);

  // pStdPPSs - stdPPSCount
  free((void *)pData->pStdPPSs);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265SessionParametersAddInfoKHR(
    VkVideoEncodeH265SessionParametersAddInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdVPSs - stdVPSCount
  free((void *)pData->pStdVPSs);

  // pStdSPSs - stdSPSCount
  free((void *)pData->pStdSPSs);

  // pStdPPSs - stdPPSCount
  free((void *)pData->pStdPPSs);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 228 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265SessionParametersCreateInfoKHR(
    VkVideoEncodeH265SessionParametersCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoEncodeH265SessionParametersAddInfoKHR(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersFeedbackInfoEXT(
    VkVideoEncodeH265SessionParametersFeedbackInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265SessionParametersFeedbackInfoKHR(
    VkVideoEncodeH265SessionParametersFeedbackInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265SessionParametersGetInfoEXT(
    VkVideoEncodeH265SessionParametersGetInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_h265)
void cleanup_VkVideoEncodeH265SessionParametersGetInfoKHR(
    VkVideoEncodeH265SessionParametersGetInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 196 && VK_HEADER_VERSION <= 204 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH265ReferenceListsEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pNaluSliceEntries - naluSliceEntryCount
  for (size_t i = 0; i < pData->naluSliceEntryCount; ++i) {
    cleanup_VkVideoEncodeH265NaluSliceEXT(&pData->pNaluSliceEntries[i]);
  }
  free((void *)pData->pNaluSliceEntries);

  // pCurrentPictureInfo
  free((void *)pData->pCurrentPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 205 && VK_HEADER_VERSION <= 224 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH265ReferenceListsEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pNaluSliceSegmentEntries - naluSliceSegmentEntryCount
  for (size_t i = 0; i < pData->naluSliceSegmentEntryCount; ++i) {
    cleanup_VkVideoEncodeH265NaluSliceSegmentEXT(&pData->pNaluSliceSegmentEntries[i]);
  }
  free((void *)pData->pNaluSliceSegmentEntries);

  // pCurrentPictureInfo
  free((void *)pData->pCurrentPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH265ReferenceListsInfoEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pNaluSliceSegmentEntries - naluSliceSegmentEntryCount
  for (size_t i = 0; i < pData->naluSliceSegmentEntryCount; ++i) {
    cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(&pData->pNaluSliceSegmentEntries[i]);
  }
  free((void *)pData->pNaluSliceSegmentEntries);

  // pCurrentPictureInfo
  free((void *)pData->pCurrentPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_EXT_video_encode_h265 &&           \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceFinalLists
  free((void *)pData->pStdReferenceFinalLists);

  // pNaluSliceSegmentEntries - naluSliceSegmentEntryCount
  for (size_t i = 0; i < pData->naluSliceSegmentEntryCount; ++i) {
    cleanup_VkVideoEncodeH265NaluSliceSegmentInfoEXT(&pData->pNaluSliceSegmentEntries[i]);
  }
  free((void *)pData->pNaluSliceSegmentEntries);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetupReferenceSlot
  if (pData->pSetupReferenceSlot != NULL)
    cleanup_VkVideoReferenceSlotKHR(pData->pSetupReferenceSlot);
  free((void *)pData->pSetupReferenceSlot);

  // pReferenceSlots - referenceSlotCount
  for (size_t i = 0; i < pData->referenceSlotCount; ++i) {
    cleanup_VkVideoReferenceSlotKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 210 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetupReferenceSlot
  if (pData->pSetupReferenceSlot != NULL)
    cleanup_VkVideoReferenceSlotKHR(pData->pSetupReferenceSlot);
  free((void *)pData->pSetupReferenceSlot);

  // pReferenceSlots - referenceSlotCount
  for (size_t i = 0; i < pData->referenceSlotCount; ++i) {
    cleanup_VkVideoReferenceSlotKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if (VK_HEADER_VERSION >= 211 && VK_HEADER_VERSION <= 224 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetupReferenceSlot
  if (pData->pSetupReferenceSlot != NULL)
    cleanup_VkVideoReferenceSlotKHR(pData->pSetupReferenceSlot);
  free((void *)pData->pSetupReferenceSlot);

  // pReferenceSlots - referenceSlotCount
  for (size_t i = 0; i < pData->referenceSlotCount; ++i) {
    cleanup_VkVideoReferenceSlotKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetupReferenceSlot
  if (pData->pSetupReferenceSlot != NULL)
    cleanup_VkVideoReferenceSlotInfoKHR(pData->pSetupReferenceSlot);
  free((void *)pData->pSetupReferenceSlot);

  // pReferenceSlots - referenceSlotCount
  for (size_t i = 0; i < pData->referenceSlotCount; ++i) {
    cleanup_VkVideoReferenceSlotInfoKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetupReferenceSlot
  if (pData->pSetupReferenceSlot != NULL)
    cleanup_VkVideoReferenceSlotInfoKHR(pData->pSetupReferenceSlot);
  free((void *)pData->pSetupReferenceSlot);

  // pReferenceSlots - referenceSlotCount
  for (size_t i = 0; i < pData->referenceSlotCount; ++i) {
    cleanup_VkVideoReferenceSlotInfoKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetupReferenceSlot
  if (pData->pSetupReferenceSlot != NULL)
    cleanup_VkVideoReferenceSlotInfoKHR(pData->pSetupReferenceSlot);
  free((void *)pData->pSetupReferenceSlot);

  // pReferenceSlots - referenceSlotCount
  for (size_t i = 0; i < pData->referenceSlotCount; ++i) {
    cleanup_VkVideoReferenceSlotInfoKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeQualityLevelInfoKHR(VkVideoEncodeQualityLevelInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeQualityLevelPropertiesKHR(
    VkVideoEncodeQualityLevelPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
void cleanup_VkVideoEncodeQuantizationMapCapabilitiesKHR(
    VkVideoEncodeQuantizationMapCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
void cleanup_VkVideoEncodeQuantizationMapInfoKHR(VkVideoEncodeQuantizationMapInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
void cleanup_VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR(
    VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 200 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pLayerConfigs - layerCount
  for (size_t i = 0; i < pData->layerCount; ++i) {
    cleanup_VkVideoEncodeRateControlLayerInfoKHR(&pData->pLayerConfigs[i]);
  }
  free((void *)pData->pLayerConfigs);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pLayers - layerCount
  for (size_t i = 0; i < pData->layerCount; ++i) {
    cleanup_VkVideoEncodeRateControlLayerInfoKHR(&pData->pLayers[i]);
  }
  free((void *)pData->pLayers);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pLayers - layerCount
  for (size_t i = 0; i < pData->layerCount; ++i) {
    cleanup_VkVideoEncodeRateControlLayerInfoKHR(&pData->pLayers[i]);
  }
  free((void *)pData->pLayers);
}
#endif

#if (VK_HEADER_VERSION >= 201 && VK_HEADER_VERSION <= 242 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlLayerInfoKHR(
    VkVideoEncodeRateControlLayerInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 243 && VK_HEADER_VERSION <= 252 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlLayerInfoKHR(
    VkVideoEncodeRateControlLayerInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeRateControlLayerInfoKHR(
    VkVideoEncodeRateControlLayerInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeSessionParametersFeedbackInfoKHR(
    VkVideoEncodeSessionParametersFeedbackInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 253 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeSessionParametersGetInfoKHR(
    VkVideoEncodeSessionParametersGetInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_encode_queue) ||                                     \
    (VK_HEADER_VERSION >= 226 && VK_HEADER_VERSION <= 273 && VK_KHR_video_encode_queue &&          \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEncodeUsageInfoKHR(VkVideoEncodeUsageInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoEndCodingInfoKHR(VkVideoEndCodingInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_av1)
void cleanup_VkVideoFormatAV1QuantizationMapPropertiesKHR(
    VkVideoFormatAV1QuantizationMapPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map && VK_KHR_video_encode_h265)
void cleanup_VkVideoFormatH265QuantizationMapPropertiesKHR(
    VkVideoFormatH265QuantizationMapPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 217 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 218 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 302 && VK_KHR_video_encode_quantization_map)
void cleanup_VkVideoFormatQuantizationMapPropertiesKHR(
    VkVideoFormatQuantizationMapPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoGetMemoryPropertiesKHR(VkVideoGetMemoryPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMemoryRequirements
  if (pData->pMemoryRequirements != NULL)
    cleanup_VkMemoryRequirements2(pData->pMemoryRequirements);
  free((void *)pData->pMemoryRequirements);
}
#endif

#if (VK_HEADER_VERSION >= 274 && VK_KHR_video_maintenance1)
void cleanup_VkVideoInlineQueryInfoKHR(VkVideoInlineQueryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoPictureResourceInfoKHR(VkVideoPictureResourceInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoPictureResourceKHR(VkVideoPictureResourceKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoProfileInfoKHR(VkVideoProfileInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoProfileKHR(VkVideoProfileKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoProfileListInfoKHR(VkVideoProfileListInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pProfiles - profileCount
  for (size_t i = 0; i < pData->profileCount; ++i) {
    cleanup_VkVideoProfileInfoKHR(&pData->pProfiles[i]);
  }
  free((void *)pData->pProfiles);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoProfilesKHR(VkVideoProfilesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pProfiles - profileCount
  for (size_t i = 0; i < pData->profileCount; ++i) {
    cleanup_VkVideoProfileKHR(&pData->pProfiles[i]);
  }
  free((void *)pData->pProfiles);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoQueueFamilyProperties2KHR(VkVideoQueueFamilyProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 229 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoReferenceSlotInfoKHR(VkVideoReferenceSlotInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPictureResource
  if (pData->pPictureResource != NULL)
    cleanup_VkVideoPictureResourceInfoKHR(pData->pPictureResource);
  free((void *)pData->pPictureResource);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 230 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoReferenceSlotInfoKHR(VkVideoReferenceSlotInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPictureResource
  if (pData->pPictureResource != NULL)
    cleanup_VkVideoPictureResourceInfoKHR(pData->pPictureResource);
  free((void *)pData->pPictureResource);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoReferenceSlotKHR(VkVideoReferenceSlotKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPictureResource
  if (pData->pPictureResource != NULL)
    cleanup_VkVideoPictureResourceKHR(pData->pPictureResource);
  free((void *)pData->pPictureResource);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 208 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVideoProfile
  if (pData->pVideoProfile != NULL)
    cleanup_VkVideoProfileKHR(pData->pVideoProfile);
  free((void *)pData->pVideoProfile);
}
#endif

#if (VK_HEADER_VERSION >= 209 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVideoProfile
  if (pData->pVideoProfile != NULL)
    cleanup_VkVideoProfileKHR(pData->pVideoProfile);
  free((void *)pData->pVideoProfile);

  // pStdHeaderVersion
  if (pData->pStdHeaderVersion != NULL)
    cleanup_VkExtensionProperties(pData->pStdHeaderVersion);
  free((void *)pData->pStdHeaderVersion);
}
#endif

#if (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 228 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVideoProfile
  if (pData->pVideoProfile != NULL)
    cleanup_VkVideoProfileInfoKHR(pData->pVideoProfile);
  free((void *)pData->pVideoProfile);

  // pStdHeaderVersion
  if (pData->pStdHeaderVersion != NULL)
    cleanup_VkExtensionProperties(pData->pStdHeaderVersion);
  free((void *)pData->pStdHeaderVersion);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 229 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVideoProfile
  if (pData->pVideoProfile != NULL)
    cleanup_VkVideoProfileInfoKHR(pData->pVideoProfile);
  free((void *)pData->pVideoProfile);

  // pStdHeaderVersion
  if (pData->pStdHeaderVersion != NULL)
    cleanup_VkExtensionProperties(pData->pStdHeaderVersion);
  free((void *)pData->pStdHeaderVersion);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionMemoryRequirementsKHR(VkVideoSessionMemoryRequirementsKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 224 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionParametersCreateInfoKHR(
    VkVideoSessionParametersCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 225 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionParametersCreateInfoKHR(
    VkVideoSessionParametersCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 238 && VK_KHR_video_queue) ||                                            \
    (VK_HEADER_VERSION >= 175 && VK_HEADER_VERSION <= 237 && VK_KHR_video_queue &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkVideoSessionParametersUpdateInfoKHR(
    VkVideoSessionParametersUpdateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkViewport(VkViewport const *pData) {}

#if (VK_NV_viewport_swizzle)
void cleanup_VkViewportSwizzleNV(VkViewportSwizzleNV const *pData) {}
#endif

#if (VK_NV_clip_space_w_scaling)
void cleanup_VkViewportWScalingNV(VkViewportWScalingNV const *pData) {}
#endif

#if (VK_KHR_wayland_surface)
void cleanup_VkWaylandSurfaceCreateInfoKHR(VkWaylandSurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // display
  free((void *)pData->display);

  // surface
  free((void *)pData->surface);
}
#endif

#if (VK_KHR_win32_keyed_mutex)
void cleanup_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAcquireSyncs - acquireCount
  free((void *)pData->pAcquireSyncs);

  // pAcquireKeys - acquireCount
  free((void *)pData->pAcquireKeys);

  // pAcquireTimeouts - acquireCount
  free((void *)pData->pAcquireTimeouts);

  // pReleaseSyncs - releaseCount
  free((void *)pData->pReleaseSyncs);

  // pReleaseKeys - releaseCount
  free((void *)pData->pReleaseKeys);
}
#endif

#if (VK_NV_win32_keyed_mutex)
void cleanup_VkWin32KeyedMutexAcquireReleaseInfoNV(
    VkWin32KeyedMutexAcquireReleaseInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAcquireSyncs - acquireCount
  free((void *)pData->pAcquireSyncs);

  // pAcquireKeys - acquireCount
  free((void *)pData->pAcquireKeys);

  // pAcquireTimeoutMilliseconds - acquireCount
  free((void *)pData->pAcquireTimeoutMilliseconds);

  // pReleaseSyncs - releaseCount
  free((void *)pData->pReleaseSyncs);

  // pReleaseKeys - releaseCount
  free((void *)pData->pReleaseKeys);
}
#endif

#if (VK_KHR_win32_surface)
void cleanup_VkWin32SurfaceCreateInfoKHR(VkWin32SurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

void cleanup_VkWriteDescriptorSet(VkWriteDescriptorSet const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pImageInfo - descriptorCount
  for (size_t i = 0; i < pData->descriptorCount; ++i) {
    cleanup_VkDescriptorImageInfo(&pData->pImageInfo[i]);
  }
  free((void *)pData->pImageInfo);

  // pBufferInfo - descriptorCount
  for (size_t i = 0; i < pData->descriptorCount; ++i) {
    cleanup_VkDescriptorBufferInfo(&pData->pBufferInfo[i]);
  }
  free((void *)pData->pBufferInfo);

  // pTexelBufferView - descriptorCount
  free((void *)pData->pTexelBufferView);
}

#if (VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure) ||                                 \
    (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing &&                 \
     VK_ENABLE_BETA_EXTENSIONS)
void cleanup_VkWriteDescriptorSetAccelerationStructureKHR(
    VkWriteDescriptorSetAccelerationStructureKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAccelerationStructures - accelerationStructureCount
  free((void *)pData->pAccelerationStructures);
}
#endif

#if (VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing)
void cleanup_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAccelerationStructures - accelerationStructureCount
  free((void *)pData->pAccelerationStructures);
}
#endif

#if (VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_NV_ray_tracing)
void cleanup_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAccelerationStructures - accelerationStructureCount
  free((void *)pData->pAccelerationStructures);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_VERSION_1_3)
void cleanup_VkWriteDescriptorSetInlineUniformBlock(
    VkWriteDescriptorSetInlineUniformBlock const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData - dataSize
  free((void *)pData->pData);
}
#endif

#if (VK_HEADER_VERSION >= 84 && VK_HEADER_VERSION <= 203 && VK_EXT_inline_uniform_block)
void cleanup_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData - dataSize
  free((void *)pData->pData);
}
#endif

#if (VK_HEADER_VERSION >= 204 && VK_EXT_inline_uniform_block)
void cleanup_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData - dataSize
  free((void *)pData->pData);
}
#endif

#if (VK_HEADER_VERSION >= 307 && VK_NV_partitioned_acceleration_structure)
void cleanup_VkWriteDescriptorSetPartitionedAccelerationStructureNV(
    VkWriteDescriptorSetPartitionedAccelerationStructureNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAccelerationStructures - accelerationStructureCount
  free((void *)pData->pAccelerationStructures);
}
#endif

#if (VK_HEADER_VERSION >= 317 && VK_ARM_tensors)
void cleanup_VkWriteDescriptorSetTensorARM(VkWriteDescriptorSetTensorARM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTensorViews - tensorViewCount
  free((void *)pData->pTensorViews);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands)
void cleanup_VkWriteIndirectExecutionSetPipelineEXT(
    VkWriteIndirectExecutionSetPipelineEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_HEADER_VERSION >= 296 && VK_EXT_device_generated_commands && VK_EXT_shader_object)
void cleanup_VkWriteIndirectExecutionSetShaderEXT(
    VkWriteIndirectExecutionSetShaderEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if (VK_EXT_hdr_metadata)
void cleanup_VkXYColorEXT(VkXYColorEXT const *pData) {}
#endif

#if (VK_KHR_xcb_surface)
void cleanup_VkXcbSurfaceCreateInfoKHR(VkXcbSurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // connection
  free((void *)pData->connection);
}
#endif

#if (VK_KHR_xlib_surface)
void cleanup_VkXlibSurfaceCreateInfoKHR(VkXlibSurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // dpy
  free((void *)pData->dpy);
}
#endif

#endif // VK_STRUCT_CLEANUP_CONFIG_MAIN

#ifdef __cplusplus
}
#endif

#endif // VK_STRUCT_CLEANUP_H
